<include>
	<step no="pre.0">
		<ssh target="${tb.fileserver}" user="root">
			-v "echo 'nameserver 10.155.3.222' > /etc/resolv.conf"
		</ssh>
	</step>
   
	<step no="build.all">
    	<desc> build cloud code - build all</desc>
    	<log-file>build_cloud_code_hive_build_all.log</log-file>
		<ssh target="${tb.fileserver}" user="root" timeout="6000">
			-v "cd /opt/Cloud3.0/hive-build/build-all"
		    -v "mvn clean install -Pdev -DskipTests                                              "
		    -v ""
		</ssh>
		<log-match>-i "\[INFO\] hive-core" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hive-hm-pom" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-core" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-data-pom" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-jdbc" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-cache" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-bigdata" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-data-hybrid" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-biz-pom" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-biz-capwap-common" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-biz-metadata" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-afs-pom" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] afs-core" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] afs-client" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-pom" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-common" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-admin" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-config-cli-schema" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-config" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-config-orch" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-monitor" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-report" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] capwap-server" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-capwap-master" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-scheduler" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-task-engine" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-backend-index-engine" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-service-intf" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-service" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-webapp" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] afs-webapp" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-hadoop-pom" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-l7data-loader" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hive-build-all" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] BUILD SUCCESS"</log-match>
	</step>
	
	<step no="build.tools">
    	<desc> build cloud code - hive-tools</desc>
    	<log-file>build_cloud_code_hive_tools.log</log-file>
		<ssh target="${tb.fileserver}" user="root" timeout="6000">
			-v "cd /opt/Cloud3.0/hive-tools"
		    -v "mvn clean install -Pdev -DskipTests"
		</ssh>
		<log-match>-i "\[INFO\] hive-tools-pom" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hm-service-code-gen" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] hive-tools-schemaexport" -i "SUCCESS"</log-match>
		<log-match>-i "\[INFO\] BUILD SUCCESS"</log-match>
	</step>
	
	<step no="init.database.pre">
    	<desc> init databases</desc>
		<ssh target="${tb.fileserver}" user="root" timeout="6000">
			-v "rm -f /tmp/init_cloud_databases.log"
			-v "cd /opt/Cloud3.0/hive-tools/schemaexport/bin"
		    -v "/bin/bash run_all_local_hm.sh   >/tmp/init_cloud_databases.log"
		    -v ""
		</ssh>
	</step>
	
	<step no="init.database.check.log">
    	<desc>check init databases log file</desc>
    	<log-file>init_cloud_databases.log</log-file>
		<ssh target="${tb.fileserver}" user="root">
			-v "ll /tmp/init_cloud_databases.log"
		    -v "/usr/bin/tail  /tmp/init_cloud_databases.log"
		    -v ""
		</ssh>
		<log-match>-i "Schema generation tool finished successfully!"</log-match>
	</step>
	 
	<step no="restart.server.1">
    	<desc>kill all server process</desc>
		<ssh target="${tb.fileserver}" user="root">
			-v "killall -9 java"
		    -v ""
		</ssh>
	</step>
	
	<step no="restart.server.2" type="loop-check" loop-max-times="30" loop-interval="5">
    	<desc>check server process is stop</desc>
		<ssh target="${tb.fileserver}" user="root">
			-v ""
            -v "ps -ef|grep java|grep -v grep"
            -v ""
		</ssh>
		<log-match>-n -i "apache-maven"</log-match>
	</step>
	
	
	
	<step no="restart.server.3">
    	<desc>restart server process</desc>
		<ssh target="${tb.fileserver}" user="root">
			-v ""
			-v "rm -f /var/log/cloud/*"
			-v "" 
			-v "cd /opt/Cloud3.0"
		    -v "/bin/bash /opt/Cloud3.0/cs.sh"
		    -v "/bin/bash /opt/Cloud3.0/fs.sh"
		    -v "/bin/bash /opt/Cloud3.0/hm.sh"
		    -v "/bin/bash /opt/Cloud3.0/or.sh"
		    -v "/bin/bash /opt/Cloud3.0/scheduler.sh"
		    -v "/bin/bash /opt/Cloud3.0/te.sh"
		    -v ""
		</ssh>
	</step>
	 
	 <step no="delay.0" delay="120">
    	<desc>wait server start</desc>
		<ssh target="${tb.fileserver}" user="root" >
				 echo `date`
		</ssh>
	</step>	 
	 
	<step no="check.server.0" type="loop-check" loop-max-times="100" loop-interval="2">
    	<desc>check Started Jetty Server capwap-server</desc>
		<ssh target="${tb.fileserver}" user="root" >
			-v ""
			-v "cat  /var/log/cloud/capwap-server.log|grep '\[INFO\]'"
		    -v ""
		</ssh>
		<log-match>-i "Started SelectChannelConnector@0.0.0.0:8765"</log-match>
		<log-match>-i "Started Jetty Server"</log-match>
	</step>	 
	
	<step no="check.server.1" type="loop-check" loop-max-times="100" loop-interval="2">
    	<desc>check Started Jetty Server fileserver</desc>
		<ssh target="${tb.fileserver}" user="root" >
			-v "cat /var/log/cloud/fileserver.log|grep '\[INFO\]'"
		    -v ""
		</ssh>
		<log-match>-i "Started SelectChannelConnector@0.0.0.0:8090"</log-match>
		<log-match>-i "Started Jetty Server"</log-match>
	</step>
	
	<step no="check.server.2" type="loop-check" loop-max-times="100" loop-interval="2">
    	<desc>check Started Jetty Server hm-webapp</desc>
		<ssh target="${tb.fileserver}" user="root" >
			-v "cat /var/log/cloud/hm.log|grep '\[INFO\]'"
		    -v ""
		</ssh>
		<log-match>-i "Started SelectChannelConnector@0.0.0.0:8080"</log-match>
		<log-match>-i "Started Jetty Server"</log-match>
	</step>
	
	<step no="check.server.3" type="loop-check" loop-max-times="100" loop-interval="2">
    	<desc>check Started Jetty Server or</desc>
		<ssh target="${tb.fileserver}" user="root" >
			-v "cat /var/log/cloud/or.log|grep '\[INFO\]'"
		    -v ""
		</ssh>
		<log-match>-i "Started SelectChannelConnector@0.0.0.0:8085"</log-match>
		<log-match>-i "Started Jetty Server"</log-match>
	</step>
	
	<step no="check.server.4" type="loop-check" loop-max-times="100" loop-interval="2">
    	<desc>check Started Jetty Server scheduler</desc>
		<ssh target="${tb.fileserver}" user="root" >
			-v "cat /var/log/cloud/scheduler.log |grep '\[INFO\]'"
		    -v ""
		</ssh>
		<log-match>-i "Started SelectChannelConnector@0.0.0.0:8088"</log-match>
		<log-match>-i "Started Jetty Server"</log-match>
	</step>
	 
	<step no="check.server.5" type="loop-check" loop-max-times="100" loop-interval="2">
    	<desc>check Started Jetty Server te</desc>
		<ssh target="${tb.fileserver}" user="root" >
			-v "cat /var/log/cloud/te.log |grep '\[INFO\]'"
		    -v ""
		</ssh>
		<log-match>-i "Started SelectChannelConnector@0.0.0.0:8083"</log-match>
		<log-match>-i "Started Jetty Server"</log-match>
	</step>
	
	<step no="restart.rabbitmq-server">
    	<desc>restart rabbitmq server</desc>
		<ssh target="${tb.fileserver}" user="root" >
			-v "/etc/init.d/rabbitmq-server restart"
		    -v ""
		</ssh>
	</step>
	<!--	
	<step no="clean.redis-cli">
    	<desc>clean redis-cli</desc>
		<ssh target="${tb.fileserver}" user="root" prompt=".*6379>|root@.*#">
			-v "redis-cli"
		    -v "flushall"
		    -v ""
		</ssh>
	</step>
	-->
	<step no="post.0">
    	<desc>open mpc DNS</desc>
		<script>
			echo "#nameserver 10.155.3.222" > /etc/resolv.conf 
		</script>
	</step>
</include>
