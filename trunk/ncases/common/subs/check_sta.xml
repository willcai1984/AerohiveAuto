<include obj-arg-names="__STA__">
	<!--check tshark -->
	<step no="tshark">
		<desc>check tshark installation</desc>
		<ssh target="__STA__" timeout="60">
			-v 'which tshark'
		</ssh>
		<log-match>-c -e 'Wireshark/tshark' -e "/usr/sbin/tshark"</log-match>
		<failed>next</failed>
	</step>
	<!--check tftp -->
	<step no="tftp.lin">
		<desc>check installation of tftp client on Linux/Windows stations</desc>
		<log-file>which_tftp___STA__.log</log-file>
		<ssh target="__STA__" timeout="60">
			-v 'which tftp'
		</ssh>
		<log-match>-e '/usr/bin/tftp' -e '/c/Windows/system32/tftp'</log-match>
		<failed>next</failed>
	</step>

	<!--check iperf -->
	<step no="iperf.win">
		<if>"${tb.os}" == "windows"</if>
		<desc>check installation of iperf on Windows stations</desc>
		<log-file>staf_iperf___STA__.log</log-file>
		<staf target="__STA__">
			-v 'iperf --help';
			exit 0
		</staf>
		<no-error-check />
		<log-match>-e 'Usage: iperf'</log-match>
		<failed>next</failed>
	</step>
	<step no="iperf.lin">
		<if>"${tb.os}" == "linux"</if>
		<desc>check installation of iperf on Linux stations</desc>
		<log-file>which_iperf___STA__.log</log-file>
		<ssh target="__STA__" timeout="60">
			-v 'which iperf'
		</ssh>
		<log-match>-e '/usr/bin/iperf'</log-match>
		<failed>next</failed>
	</step>

	<!--check hping3 -->
	<step no="hping3.win">
		<if>"${tb.os}" == "windows"</if>
		<desc>check installation of hping3 on Windows stations</desc>
		<log-file>hping3___STA__.log</log-file>
		<script>
			echo "Ignore hping3 on Windows" > ${log.dir}/${log.file}
			exit 0
		</script>
		<log-match>-e 'Ignore hping3 on Windows'</log-match>
		<failed>next</failed>
	</step>
	<step no="hping3.lin">
		<if>"${tb.os}" == "linux"</if>
		<desc>check installation of hping3 on Linux stations</desc>
		<log-file>which_hping3___STA__.log</log-file>
		<ssh target="__STA__" timeout="60">
			-v 'which hping3'
		</ssh>
		<log-match>-e '/usr/sbin/hping3'</log-match>
		<failed>next</failed>
	</step>

	<!--check nmap -->
	<step no="nmap.win">
		<if>"${tb.os}" == "windows"</if>
		<desc>check installation of nmap on Windows stations</desc>
		<log-file>staf_nmap___STA__.log</log-file>
		<staf target="__STA__">
			-v 'nmap --help';
			exit 0
		</staf>
		<no-error-check />
		<log-match>-e 'Usage: nmap'</log-match>
		<failed>next</failed>
	</step>
	<step no="nmap.lin">
		<if>"${tb.os}" == "linux"</if>
		<desc>check installation of nmap on Linux stations</desc>
		<log-file>which_nmap___STA__.log</log-file>
		<ssh target="__STA__" timeout="60">
			-v 'which nmap'
		</ssh>
		<log-match>-e '/usr/bin/nmap'</log-match>
		<failed>next</failed>
	</step>

	<!--check pkt -->
	<step no="pkt.win">
		<if>"${tb.os}" == "windows"</if>
		<desc>check installation of pkt on Windows stations</desc>
		<log-file>pkt___STA__.log</log-file>
		<script>
			echo "Ignore pkt on Windows" > ${log.dir}/${log.file}
			exit 0
		</script>
		<log-match>-e 'Ignore pkt on Windows'</log-match>
		<failed>next</failed>
	</step>
	<step no="pkt.lin">
		<if>"${tb.os}" == "linux"</if>
		<desc>check installation of pkt on Linux stations</desc>
		<log-file>which_pkt___STA__.log</log-file>
		<ssh target="__STA__" timeout="60">
			-v 'which pkt'
		</ssh>
		<log-match>-e '/usr/local/sbin/pkt' -e '/usr/local/bin/pkt' -e '/usr/local/auto/bin/pkt'</log-match>
		<failed>next</failed>
	</step>

	<!--check snmpwalk -->
	<step no="snmpwalk.win">
		<if>"${tb.os}" == "windows"</if>
		<desc>check installation of snmpwalk on Windows stations</desc>
		<log-file>snmpwalk___STA__.log</log-file>
		<script>
			echo "Ignore snmpwalk on Windows x64" > ${log.dir}/${log.file}
			exit 0
		</script>
		<no-error-check />
		<log-match>-e 'Ignore snmpwalk on Windows x64'</log-match>
		<failed>next</failed>
	</step>
	<step no="snmpwalk.lin">
		<if>"${tb.os}" == "linux"</if>
		<desc>check installation of snmpwalk on Linux stations</desc>
		<log-file>which_snmpwalk___STA__.log</log-file>
		<ssh target="__STA__" timeout="60">
			-v 'which snmpwalk'
		</ssh>
		<log-match>-e '/usr/bin/snmpwalk'</log-match>
		<failed>next</failed>
	</step>

	<!--check clicfg.pl -->
	<step no="clicfg.pl">
		<if>"${tb.os}" == "linux"</if>
		<desc>check installation of clicfg.pl on Linux stations</desc>
		<log-file>which_clicfg___STA__.log</log-file>
		<ssh target="__STA__" timeout="60">
			-v 'which clicfg.pl'
		</ssh>
		<log-match>-e '/usr/local/auto/bin/clicfg.pl'</log-match>
		<failed>next</failed>
	</step>
	<step no="clicfg.pl.use_check">
		<if>"${tb.os}" == "linux"</if>
		<desc>check use of clicfg.pl on Linux stations</desc>
		<log-file>use_clicfg___STA__.log</log-file>
		<ssh target="__STA__" prompt=".*\]#">
			-v "perl -c /usr/local/auto/bin/clicfg.pl"
		</ssh>
		<failed>next</failed>
	</step>

	<!--check selenium server environment -->
	<step no="start_selenium_server">
		<if>"${tb.os}" == "windows"</if>
		<desc>start selenium server</desc>
		<script>
			staf ${__STA__.mif.ip} process stop workload ${job_selenium_workload} using sigkillall
			staf ${__STA__.mif.ip} process start shell command "java -Xms128m -Xmx512m -jar ${job_selenium_jar} -log .\\logs\\${job.id}.log" workdir "${job_selenium_dir}" workload ${job_selenium_workload}
		</script>
	</step>

	<step no="rmps_login_logout">
		<if>"${tb.os}" == "windows_ignored"</if>
		<desc>rmps login and logout</desc>
		<log-file>rmps_login_logout___STA__.html</log-file>
		<script>
			export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/test/rmps_test.py -r http://${__STA__.mif.ip}:4444/wd/hub -t ie -f ${log.dir}/${log.file} -l debug --parameters visit.url=${tb.rmps.ip} login.user=${tb.rmps.user} login.password=${tb.rmps.passwd}
		</script>
	</step>

	<step no="stop_selenium_server">
		<if>"${tb.os}" == "windows"</if>
		<desc>stop selenium server</desc>
		<script>
			staf ${__STA__.mif.ip} process stop workload ${job_selenium_workload} using sigkillall
		</script>
	</step>

	<step no="get_lnx_tif_mac">
		<if>"${tb.os}" == "linux"</if>
		<desc>Get __STA__'s mac</desc>
		<setvar name="__STA__.tif.mac">
			${bin.dir}/getrmtip.pl -d ${__STA__.mif.ip} -u ${__STA__.user} -p ${__STA__.passwd} -i ${__STA__.tif.name} -m | sed 's/://g'
		</setvar>
	</step>
	<step no="get_win_tif_mac_x">
		<if>"${tb.os}" == "windows"</if>
		<desc>Show interface on laptop2</desc>
		<log-file>ipconfig_${__STA__.mif.ip}.log</log-file>
		<script>
			perl ${bin.dir}/stafcmd.pl -d ${__STA__.mif.ip} -v "ipconfig /all" -l ${log.dir} -o ${log.file}
		</script>
	</step>
	<step no="get_win_tif_mac">
		<if>"${tb.os}" == "windows"</if>
		<desc>Get __STA__'s mac</desc>
		<setvar name="__STA__.tif.mac">
			perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ipconfig_${__STA__.mif.ip}.log -i ${__STA__.tif.name} -m -o win | sed 's/://g'
		</setvar>
	</step>

	<step no="vars_check">
		<desc>check short mac</desc>
		<script>
			if [ "${__STA__.tif.smac}" != "${__STA__.tif.mac}" ]; then
			echo "__STA__ smac is not correct"; exit 1
			fi
		</script>
		<failed>next</failed>
	</step>
	
	<!--check killall on Windows client -->
	<step no="killall.win">
		<if>"${tb.os}" == "windows"</if>
		<desc>check installation of killall on Windows stations</desc>
		<log-file>killall___STA__.log</log-file>
		<ssh target="__STA__" timeout="60">
			-v 'which killall'
		</ssh>
		<no-error-check />
		<log-match>-e '/usr/bin/killall'</log-match>
		<failed>next</failed>
	</step>
</include>