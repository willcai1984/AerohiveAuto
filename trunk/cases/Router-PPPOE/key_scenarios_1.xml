<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>PPPoE port VPN test</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1) BR connect to PPPoE server
		Config the following :
		Interface eth0 mode wan
		Interface eth0 pppoe username wcai password aerohive
		Interface eth0 pppoe enable
		2) Establish vpn tunnel between BR and CVG
		3) Show ip router table
		4) Laptop1 ping Laptop2
		5) Laptop2 ping Laptop1
		6) Laptop1 ping any web site (such as google)
	</description>
	<numofbr>1</numofbr>
	<numofcvg>1</numofcvg>
	<cvg-opt-arm>two</cvg-opt-arm>
	<cvg-opt-fw>yes</cvg-opt-fw>
	<tbtype>linux</tbtype>

	<property name="pppoe.Remote.ip" value="10.0.10.22" />
	<property name="pppoe.tif.name" value="eth2" />

	<stage>
		<step no="0">
			<desc>
				Open debug switch
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "_debug brd ppp"
				-v "_debug brd pppdebug"
				-v "_debug brd pppoe"
				-v "clear log all"
				-v "console page 0"
			</telnet>
		</step>

		<step no="0.1">
			<desc>
				Set one user-profile and define the attribute x
				Bind the security-object to the port.
			</desc>
			<console target="br1.br">
				-v "interface eth0 mode wan"
				-v "interface eth0 pppoe username ${pub.pppoe1.username} password ${pub.pppoe1.passwd}"
				-v "interface eth0 pppoe enable"
			</console>
		</step>

		<step no="0.2" delay="10" type="loop-check" loop-max-times="20" loop-interval="10">
			<desc>
				-show interface eth0 pppoe
			</desc>
			<log-file>step0.2_show_interface_pppoe_${loop_check.idx}.log</log-file>
			<console target="br1.br">
				-v "show interface eth0 pppoe"
			</console>
			<log-match>-c -i "Remote IP: ${pppoe.Remote.ip}"</log-match>
			<log-match>-c -i "PPPoE status: enabled"</log-match>
			<log-match>-c -i "Username: ${pub.pppoe1.username}"</log-match>
			<log-match>-c -i "Connection status: connected"</log-match>
		</step>

		<step no="0.3" delay="10">
			<desc>
				-show logging buffered
			</desc>
			<log-file>step0.3_show_logging_buffered.log</log-file>
			<console target="br1.br" timeout="500">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-c -i "PPPoE request to start:" -i 'user \"${pub.pppoe1.username}\" password \"${pub.pppoe1.passwd}\"'</log-match>
		</step>

		<step no="0.4">
			<desc>
				show test ip of pppoe
			</desc>
			<log-file>step0.4_show_ip_info.log</log-file>
			<ssh host="${pub.pppoe1.ip}">
				-v "ifconfig ${pppoe.tif.name}"
			</ssh>
		</step>

		<step no="0.5">
			<desc>
				get pppoe's test ip
			</desc>
			<setvar name="pppoe.test.ip">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step0.4_show_ip_info.log -p "inet addr:\s*(\d+.\d+.\d+.\d+)\s*" -t str
			</setvar>
		</step>

		<step no="CVG.cvg.tunnel.name.gen">
			<setvar name="br1.tunnel.name">
				echo "${job.sid}-s01"
			</setvar>
		</step>

		<step no="BR.tunnel.name.gen">
			<setvar name="br.tunnel.name">
				echo "${job.sid}-c01"
			</setvar>
		</step>

		<step no="1.CVG">
			<desc>config CVG act as l3 VPN server</desc>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="100">
				-v "save vpn ee-cert tftp://${pub.tftp1.tip}:certs/server_cert.pem"
				-v "save vpn private-key tftp://${pub.tftp1.tip}:certs/server_key.pem"
				-v "vpn xauth-client-list list_01 local"
				-v "vpn xauth-client-list list_01 client-name ${br1.br.name} password aerohive"
				-v "vpn server-ipsec-tunnel ${br.tunnel.name} vpn-mode layer-3"
				-v "vpn ipsec-tunnel ${br.tunnel.name} client-list list_01"
				-v "vpn tunnel-policy vpn_policy_01 server ipsec-tunnel ${br.tunnel.name}"
				-v "routing internal-sub-network ${br1.br.mgt0.ip}/${br.mgt0.supermask}"
				-v ""
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.1.ip}/${br.mgt0.supermask}"
				-v ""
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.2.ip}/${br.mgt0.supermask}"
			</telnet>
		</step>

		<step no="1.CVG.routing">
			<desc>enable rip on CVG</desc>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}">
				-v "routing protocol ripv2 advertise eth1"
				-v "routing protocol type ripv2"
				-v "routing protocol enable"
			</telnet>
		</step>

		<step no="1.br1">
			<desc>config br as l3 VPN client connet to CVG</desc>
			<console target="br1.br" timeout="200">
				-v "save vpn ca-cert scp://${pub.tftp1.username}@${pub.tftp1.tip}:/tftpboot/certs/cacert.pem"
				-v ""
				-v ""
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0.1 vlan ${br1.vpc1.vlan}"
				-v "interface mgt0.1 ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface mgt0.2 vlan ${br1.vpc2.vlan}"
				-v "interface mgt0.2 ip ${br1.br.mgt0.2.ip}/${br.lan.netmask}"
				-v "vpn client-ipsec-tunnel ${br.tunnel.name} vpn-mode layer-3"
				-v "vpn ipsec-tunnel ${br.tunnel.name} gateway ${cvg1.cvg.tunnel.ip} client-name ${br1.br.name} password aerohive"
				-v "vpn tunnel-policy vpn_policy_01 client ipsec-tunnel ${br.tunnel.name} primary"
				-v ""
				-v "routing route-request enable"
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.ip}/${br.lan.netmask}"
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.2.ip}/${br.lan.netmask}"
				-v ""
			</console>
		</step>

		<step no="2.chk.ike_BR1" delay="10" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check vpn ike sa on BR side
				destination to CVG public address
			</desc>
			<log-file>chk_ike_sa_br_${loop_check.idx}.log</log-file>
			<console target="br1.br">
				-v "show vpn ike sa"
			</console>
			<log-match>-p 4 -i "I" -i "${cvg1.cvg.tunnel.ip}\[4500\]"</log-match>
		</step>

		<step no="2.chk.ike_CVG" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check vpn ike sa on CVG side
				destionation to BR public address
			</desc>
			<log-file>chk_ike_sa_CVG_${loop_check.idx}.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="5">
				-v "show vpn ike sa"
			</telnet>
			<log-match>-p 4 -i "R" -i "${pppoe.test.ip}"</log-match>
		</step>

		<step no="2.chk.l3_BR1">
			<desc>
				check gre tunnel on br side
				remote to CVG wan address, local mgt0 address ,gateway CVG public address
			</desc>
			<log-file>chk_gre_tunnel_br1.log</log-file>
			<console target="br1.br">
				-v "show vpn layer-3-tunnel"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*${cvg1.cvg.wan.ip}[\t ]*${br1.br.mgt0.ip}[\t ]*\d+[\t ]*${cvg1.cvg.tunnel.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="2.get_tunnel.id_BR1">
			<desc>get br primary tunnel id</desc>
			<setvar name="br1.tunnel.id">
				${bin.dir}/getbyrexp.py -p "(tunnel\d+)[\t ]*gre/ipsec[\t ]*${cvg1.cvg.wan.ip}[\t ]*${br1.br.mgt0.ip}[\t ]*\d+[\t ]*${cvg1.cvg.tunnel.ip}" -f ${log.dir}/chk_gre_tunnel_br1.log -t str
			</setvar>
		</step>

		<step no="2.chk.l3_CVG">
			<desc>
				check gre tunnel on cvg side
				local to CVG wan address
			</desc>
			<log-file>chk_gre_tunnel_CVG.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="5">
				-v "show vpn layer-3-tunnel"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*any[\t ]*${cvg1.cvg.wan.ip}[\t ]*\d+[\t ]*anonymous" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="2.get_tunnel.id_CVG">
			<desc>get CVG tunnel ID</desc>
			<setvar name="br1.tunnel.id">
				${bin.dir}/getbyrexp.py -p "(tunnel\d+)[\t ]*gre/ipsec[\t ]*any[\t ]*${cvg1.cvg.wan.ip}[\t ]*\d+[\t ]*anonymous" -f ${log.dir}/chk_gre_tunnel_CVG.log -t str
			</setvar>
		</step>

		<step no="3">
			<desc>
				config br1
			</desc>
			<console target="br1.br">
				-v "user-profile lan1 qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "interface eth1 mode bridge-access user-profile-attribute 1"
				-v "interface eth1 mac-learning enable"
			</console>
		</step>

		<step no="3.1" delay="5">
			<desc>
				-set interface down,then up
			</desc>
			<ssh target="br1.vpc1" timeout="120">
				-v "ifconfig ${br1.vpc1.tif.name} down"
				-v "ifconfig ${br1.vpc1.tif.name} up"
			</ssh>
		</step>

		<step no="3.2">
			<desc>
				get ip address
			</desc>
			<log-file>step3.2_ifconfig_vpc1.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="3.2a">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="3.3">
			<desc>enable vpn debug</desc>
			<console target="br1.br">
				-v "_ff id 1 src-ip ${br1.vpc1.tif.ip} bidirectional"
				-v "_ff id 2 src-ip ${cvg1.vpc1.tif.ip} bidirectional"
				-v "_ff id 3 protocol 47 bidirectional"
				-v "_ff id 4 protocol 50 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log all"
			</console>
		</step>

		<step no="4">
			<desc>
				-show ip route
			</desc>
			<log-file>step3_show_ip_route.log</log-file>
			<console target="br1.br">
				-v "show ip route"
			</console>
			<log-match>-c -i "0.0.0.0 *${pppoe.Remote.ip}" -i "ppp1"</log-match>
		</step>

		<step no="4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				vpc ping pc2
			</desc>
			<log-file>step4_vpc_ping_pc2_${loop_check.idx}.log</log-file>
			<ssh host="${cvg1.vpc1.mif.ip}">
				-v " ping ${br1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${br1.vpc1.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="4.1">
			<desc>
				vpc1 ping cvg
			</desc>
			<log-file>step4.1_pc1_ping_cvg.log</log-file>
			<ssh target="br1.vpc1">
				-v "ping ${cvg1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${cvg1.vpc1.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="4.2">
			<desc>
				vpc1 ping cvg
			</desc>
			<log-file>step4.2_pc1_ping_cvg.log</log-file>
			<ssh target="br1.vpc1">
				-v "ping ${pub.dns1.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${pub.dns1.ip}:" -i "ttl="</log-match>
		</step>

		<step no="5" delay="10">
			<desc>show log buf</desc>
			<log-file>step5_show_log_buf.log</log-file>
			<console target="br1.br" timeout="600">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-c -i "(i) mgt0 ${cvg1.vpc1.tif.ip}-&gt;${br1.vpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(o) tunnel0 ${br1.vpc1.tif.ip}-&gt;${cvg1.vpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(o) tunnel0 ${br1.vpc1.tif.ip}-&gt;${cvg1.vpc1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "${br1.vpc1.tif.ip}(mgt0)-&gt;${cvg1.vpc1.tif.ip}(${br1.tunnel.id}) proto(1)"</log-match>
			<log-match>-c -i "${br1.vpc1.tif.ip}(mgt0)-&gt;${pub.dns1.ip}(ppp1) proto(1)"</log-match>
		</step>
	</stage>
</testcase>
