<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>ARP learning on ap, mp, eth and mgt0 interface</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-condition
		-laptops connect with ap, pass authentication
		-laptops are in same vlan
		Test procedure
		- clear arp table on both laptop1,laptop2 and laptop3
		-clear arp table on ap
		- laptop1 sends ARP request to a unknown host result 1
		- laptop2 sends ARP request to a unknown host result 2
		- laptop3 sends ARP request to a unknown host result 3
		- ap sends ARP request to a unknown host result 4
		Expect result
		1: AP learns the arp of laptop1 on AP interface(“_kdebug fe_arp basic” to see; “show arp-table” to make sure)
		2: AP learns the arp of laptop2 on other interface(“_kdebug fe_arp basic” to see; “show arp-table” to make sure).
		3: AP learns the arp of laptop3 on ETH interface(“_kdebug fe_arp basic” to see; “show arp-table” to make sure)
		4: AP learns he arp of mgt0 on mgt0 interface(“_kdebug fe_arp basic” to see; “show arp-table” to make sure)
	</description>
	<numofap>2</numofap>
	<numofsta>2</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}-test" />
	<property name="conn2.ssid" value="${ssid.name}" />

	<stage>
		<if>"${ap.wifi1.existed}" == "true"</if>

		<step no="pre.0">
			<desc>
				-shutdown interface eth1
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<telnet target="ap1">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="pre.1">
			<desc>ifconfig to show the server's interface info</desc>
			<log-file>pre.1_ifconfig.log</log-file>
			<ssh host="${tb.http_server}">
				-v "ifconfig ${tb.http_server.name}"
			</ssh>
		</step>

		<step no="pre.2">
			<desc>Get server's mac</desc>
			<setvar name="tb.http.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/pre.1_ifconfig.log -i ${tb.http_server.name} -m -width
			</setvar>
		</step>

		<step no="1">
			<desc>
				-config ssid, hive info and then bind them to interface
			</desc>
			<telnet target="ap1">
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "security-object ${ssid.name}-test"
				-v "security-object ${ssid.name}-test default-user-profile-attr 1"
				-v "user-profile ${ssid.name}-test vlan-id 1 attribute 1"
				-v "ssid ${ssid.name}-test"
				-v "ssid ${ssid.name}-test security-object ${ssid.name}-test"
				-v "interface wifi0 ssid ${ssid.name}-test"
				-v "interface wifi0 radio channel 1"
			</telnet>
		</step>

		<step no="2">
			<desc>
				-config ssid, hive info and then bind them to interface
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "user-profile ${ssid.name} vlan-id 1 attribute 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "interface wifi1 radio channel 153"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				show ap2's interface wifi1 info
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				get ap2's wifi1's mac address
			</desc>
			<setvar name="ap2.wifi1.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i wifi1 -o aero -m -width
			</setvar>
		</step>

		<step no="2.3">
			<desc>shutdown interface wifi1 and then up it (it's aimed to clear wifi1's neighbor list)</desc>
			<telnet target="ap1">
				-v "interface wifi1 hive ${hive.name}_${job.sid} shutdown"
				-v "no interface wifi1 hive ${hive.name}_${job.sid} shutdown"
				-v "interface wifi1 radio channel 153"
			</telnet>
		</step>

		<step no="3" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor
			</desc>
			<log-file>step3_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "show acsp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+Backhaul\s+${hive.name}_${job.sid}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4">
			<desc>
				-shutdown interface eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="5" delay="35" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.1">
			<desc>
				show ap2's interface mgt0 info
			</desc>
			<log-file>step5.1_show_ap2_interface_info.log</log-file>
			<telnet target="ap2">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="5.2">
			<desc>
				get ap2's mgt0's mac address
			</desc>
			<setvar name="ap2.mgt0.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step5.1_show_ap2_interface_info.log -i mgt0 -o aero -m -width
			</setvar>
		</step>

		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta2, ap2" />

		<include prefix="7" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="8">
			<desc>
				-clear arp on windows sta
			</desc>
			<if>"${tb.os}" == "windows"</if>
			<log-file>step8_clear_sta1_arp.log</log-file>
			<staf target="sta1">
				-v "arp -d ${tb.unreach.ip1}"
			</staf>
		</step>

		<step no="8.1">
			<desc>
				-clear arp on linux sta
			</desc>
			<if>"${tb.os}" == "linux"</if>
			<log-file>step8.1_clear_sta1_arp.log</log-file>
			<ssh target="sta1">
				-v "ip neigh flush dev ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="9">
			<desc>
				-clear arp on windows sta
			</desc>
			<if>"${tb.os}" == "windows"</if>
			<log-file>step9_clear_sta2_arp.log</log-file>
			<staf target="sta2">
				-v "arp -d ${tb.unreach.ip1}"
			</staf>
		</step>

		<step no="9.1">
			<desc>
				-clear arp on linux sta
			</desc>
			<if>"${tb.os}" == "linux"</if>
			<log-file>step9.1_clear_sta2_arp.log</log-file>
			<ssh target="sta2">
				-v "ip neigh flush dev ${sta2.tif.name}"
			</ssh>
		</step>

		<step no="9.2">
			<desc>
				-clear arp on server
			</desc>
			<ssh host="${tb.http_server}">
				-v "ip neigh flush dev ${tb.http_server.name}"
			</ssh>
		</step>

		<step no="10">
			<desc>
				-open debug mode and clear log all
				-show arp-cache
			</desc>
			<log-file>step10_show_arp_cache.log</log-file>
			<telnet target="ap2">
				-v "_kdebug fe_arp basic"
				-v "clear log all"
				-v "clear arp-cache"
				-v "show arp-cache"
			</telnet>
			<log-match>-n -c -i "${sta2.tif.mac}" -i "${sta2.tif.ip}"</log-match>
			<log-match>-n -c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
			<log-match>-n -c -i "${tb.http.mac}" -i "${tb.http_server}"</log-match>
		</step>

		<include prefix="11" file="subs/sta_ping.xml" args="sta1, ${tb.unreach.ip1}, 5, negative" />

		<include prefix="12" file="subs/sta_ping.xml" args="sta2, ${tb.unreach.ip1}, 5, negative" />

		<step no="13">
			<desc>-server ping an unexited ip, result 3</desc>
			<log-file>step13_ping.log</log-file>
			<ssh host="${tb.http_server}" timeout="120">
				-v "ping ${tb.unreach.ip1} -c 8"
			</ssh>
			<log-match>-n -c -i "from ${tb.unreach.ip1}" -i "ttl="</log-match>
		</step>

		<step no="14">
			<desc>
				-ap2 ping an unexited ip
			</desc>
			<log-file>step14_clear_arp_in_shell_mode.log</log-file>
			<telnet target="ap2">
				-v "ping ${tb.unreach.ip1} count 5"
			</telnet>
			<log-match>-n -c -i "from ${tb.unreach.ip1}: " -i "ttl="</log-match>
		</step>

		<step no="15">
			<desc>
				-show arp-cache
			</desc>
			<log-file>step15_show_arp_cache.log</log-file>
			<telnet target="ap2">
				-v "show arp-cache"
			</telnet>
			<log-match>-c -i "${sta2.tif.mac}" -i "ap" -i "${sta2.tif.ip}"</log-match>
			<log-match>-c -i "${sta1.tif.mac}" -i "OTHER" -i "${sta1.tif.ip}"</log-match>
			<log-match>-c -i "${tb.http.mac}" -i "ETH" -i "${tb.http_server}"</log-match>
			<log-match>-c -i "${ap2.mgt0.mac}" -i "MGT0" -i "${ap2.mgt0.ip}"</log-match>
		</step>

		<step no="16">
			<desc>
				check log info on AP2
			</desc>
			<log-file>step16_show_logging_buffered.log</log-file>
			<telnet target="ap2" timeout="500">
				-v "show logging buffered"
			</telnet>
			<log-match>-c -i "ARP entry inserted: IP=${tb.http_server}(0,eth0) mac=${tb.http.mac}"</log-match>
			<log-match>-c -i "ARP entry inserted: IP=${sta1.tif.ip}(0,wifi1.1) mac=${sta1.tif.mac}"</log-match>
			<log-match>-c -i "ARP entry inserted: IP=${sta2.tif.ip}(0,wifi0.1) mac=${sta2.tif.mac}"</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>