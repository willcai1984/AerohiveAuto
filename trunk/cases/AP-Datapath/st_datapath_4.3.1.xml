<testcase>
	<brief>UnKnown unicast from eth0 interface(access mode)</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<numofbpc>1</numofbpc>
	<tbtype>linux</tbtype>
	<description>
		use ap3 to do as PC3
		Topology to use
		(AP)------pc2
		pc1++++++sw++++++portal (eth0)++++++pc3
		(Mesh)-------MP
		(AP)----------laptop4
		Objective
		UnKnown unicast from eth0 interface(access mode)
		Pre-condition
		-construct this topology
		-all pc and laptop are in same VLAN
		-eth0 of mp is access mode
		-enable mac-learning on eth0 of mp
		Test procedure
		-pc3 ping pc1
		(pc3 will send icmp request pkt, the route table on mp has not the entry to match the dst-mac of this pkt, we call unknown unicast)
		Expect result
		Result 1: ping successfully.
		FE will search the table by dst-mac and fail to hit, then match the default route and forward this pktï¼Œshould be sent to Mesh interface.
		4.4. Broadcast/Multicast dapath
	</description>
	<stage>
		<if>"${tb.bridge_support}" == "true" &amp;&amp; "${ap1.eth1.existed}" == "true"</if>
		<include prefix="0" file="subs/bpc_init.xml" obj-args="bpc1, ap2" args="none" />
		<step no="1">
			<desc>Set up portal's interface through sw menu</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "user-profile datapath"
				-v "user-profile datapath vlan ${tb.vlan1}"
				-v "user-profile datapath attribute 2"
				-v "security-object autoap"
				-v "security-object autoap default-user-profile-attr 2"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password aerohive"
				-v "interface mgt0 hive ${hive.name}"
				-f basic_apsetup.cfg
			</console>
		</step>
		<step no="2" delay="10">
			<desc>show mgt0's ip of portal</desc>
			<log-file>portal_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="3">
			<desc>Get portal's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/portal_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="4">
			<desc>show wifi1.1's mac of portal</desc>
			<log-file>wifi_mac_portal.log</log-file>
			<console target="ap1">
				-v "show interface wifi1.1"
				-v ""
			</console>
		</step>

		<step no="5">
			<desc>get wifi1.1' mac of portal</desc>
			<setvar name="ap1.wifi.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/wifi_mac_portal.log -i wifi1.1 -o aero -m -width
			</setvar>
		</step>

		<step no="6">
			<desc>Set up mp's interface through sw menu</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "user-profile datapath"
				-v "user-profile datapath vlan ${tb.vlan1}"
				-v "user-profile datapath attribute 2"
				-v "security-object autoap"
				-v "security-object autoap default-user-profile-attr 2"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password aerohive"
				-v "interface mgt0 hive ${hive.name}"
				-f basic_apsetup.cfg
			</console>
		</step>

		<step no="7" type="loop-check" loop-max-times="20" loop-interval="10">
			<desc>check the amrp neighbour</desc>
			<log-file>show_amrp_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "interface wifi1 radio channel 36"
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap1.wifi.mac}" -i "TWO"</log-match>
		</step>


		<step no="8">
			<desc>Set up mp's interface through sw menu</desc>
			<console target="ap2">
				-v "interface eth1 mode bridge-access"
				-v "interface eth1 mode bridge-access user-profile-attribute 2"
				-v "interface eth1 mac-learning enable"
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="9" type="loop-check" loop-max-times="20" loop-interval="10">
			<desc>check the amrp neighbour</desc>
			<log-file>show_amrpaf_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "interface wifi1 radio channel 36"
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap1.wifi.mac}" -i "TWO"</log-match>
		</step>
		<step no="up_the_bpc_tif">
			<desc>
				2:Client links to ap through the bridge ethernet port, result 1
			</desc>
			<ssh target="${bpc1.mif.ip}">
				-v "ifconfig ${bpc1.tif.name} up"
				-v "dhclient ${bpc1.tif.name} -r "
				-v "dhclient ${bpc1.tif.name}" ;exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="get_ipinfo_of_bpc" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>ifconfig.log</log-file>
			<ssh target="${bpc1.mif.ip}">
				-v "ifconfig ${bpc1.tif.name}"
			</ssh>
		</step>

		<step no="get_mac_of_bpc">
			<desc>Get bpc's ip</desc>
			<setvar name="bpc1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${bpc1.tif.name} -nomask -m -width
			</setvar>
		</step>

		<step no="get_ip_of_bpc">
			<desc>Get bpc's ip</desc>
			<setvar name="bpc1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${bpc1.tif.name} -nomask -width
			</setvar>
		</step>


		<step no="10">
			<desc>Set up mp's interface through sw menu</desc>
			<console target="ap2">
				-v "_ff src-mac ${bpc1.tif.mac} protocol 1 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log all"
			</console>
		</step>

		<include prefix="bpc_ping_mpc" file="subs/sta_ping.xml" args="${bpc1.mif.ip}, ${mpc.tif.ip}, 5" />
		<step no="12">
			<desc>show log buffer on mp</desc>
			<log-file>pc_master.log</log-file>
			<console target="ap2" timeout="600">
				-v "show log buf"
			</console>
			<log-match>-i "icmp-echo-reply" -e "(i) wifi1.1 ${mpc.tif.ip}->${bpc1.tif.ip}"</log-match>
			<log-match>-i "icmp-echo-reply" -e "(o) eth1 ${mpc.tif.ip}->${bpc1.tif.ip}"</log-match>
			<log-match> -n -i "icmp-echo-req" -i "(o) wifi0.1"</log-match>
			<log-match> -n -i "icmp-echo-req" -e "(o) eth0"</log-match>
			<log-match> -n -i "icmp-echo-req" -e "(o) eth1"</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>
