<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>gratuitous arp process for L2 roaming in mesh</brief>
	<priority>high</priority>
	<automated>yes</automated>
	<description>
		Pre-condition:
		-construct this topology
		-ap1 and ap2 in the same subnet
		-disable proxy-arp on all ap

		Test procedure:
		-laptop links to mp1 first, then roaming to mp2(change the power or shutdown the interface)
		-should meet result 1.
		-laptop roaming back ap1
		-should meet result 2.

		Expect result:
		1: ap2 should send gratuitous arp of laptop
		2: ap1 should send gratuitous arp of laptop
	</description>
	<numofap>4</numofap>
	<numofsta>1</numofsta>
	<tbtype>winlin</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />

	<stage>
		<step no="shutdown.ap1.eth1">
			<desc>
				shutdown eth1
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<telnet target="ap1">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="setmeshpoint">
			<if>"${meshint}" == ""</if>
			<desc>set default eap_type</desc>
			<setvar name="meshpoint">
				if [ `echo ${img.prodtype} | grep BR ` ]
				then
				echo wifi0
				else
				echo wifi1
				fi
			</setvar>
		</step>

		<step no="show_interface_info_ap1" delay="10">
			<desc>
				show ap1 interface
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<console target="ap1" timeout="180">
				-v "show interface ${meshpoint}"
				-v ""
			</console>
		</step>

		<step no="get_mac_ap1">
			<desc>
				gain ap1's meshpoint's mac address
			</desc>
			<setvar name="ap1.meshpoint.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i ${meshpoint} -o aero -m -width 2
			</setvar>
		</step>

		<step no="show_interface_info_ap3">
			<desc>
				show ap3 interface
			</desc>
			<log-file>show_ap3_interface_info.log</log-file>
			<telnet target="ap3" timeout="50">
				-v "show interface ${meshpoint}"
				-v ""
			</telnet>
		</step>

		<step no="get_mac_ap3">
			<desc>
				gain ap3's meshpoint's mac address
			</desc>
			<setvar name="ap3.meshpoint.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap3_interface_info.log -i ${meshpoint} -o aero -m -width 2
			</setvar>
		</step>


		<step no="show_interface_info_ap2">
			<desc>
				show ap1 interface
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<console target="ap2" timeout="50">
				-v "show interface ${meshpoint}"
				-v ""
			</console>
		</step>

		<step no="get_mac_ap2">
			<desc>
				gain ap2's meshpoint's mac address
			</desc>
			<setvar name="ap2.meshpoint.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i ${meshpoint} -o aero -m -width 2
			</setvar>
		</step>

		<step no="show_interface_info_ap4">
			<desc>
				show ap4 interface
			</desc>
			<log-file>show_ap4_interface_info.log</log-file>
			<telnet target="ap4" timeout="50">
				-v "show interface ${meshpoint}"
				-v ""
			</telnet>
		</step>

		<step no="get_mac_ap4">
			<desc>
				gain ap3's meshpoint's mac address
			</desc>
			<setvar name="ap4.meshpoint.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap4_interface_info.log -i ${meshpoint} -o aero -m -width 2
			</setvar>
		</step>

		<step no="0">
			<desc>
				-Config ap1's vlan and native-vlan
			</desc>
			<console target="ap1">
				-v "security mac-filter aaa default deny"
				-v "security mac-filter aaa address ${ap3.meshpoint.mac} permit"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} security mac-filter aaa"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="0.1" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.1_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.2">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.1_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="0.3">
			<desc>
				-Config ap3's vlan and native-vlan
			</desc>
			<console target="ap3">
				-v "security mac-filter aaa default deny"
				-v "security mac-filter aaa address ${ap1.meshpoint.mac} permit"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} security mac-filter aaa"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="0.4" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.4_show_interface_mgt0_info.log</log-file>
			<console target="ap3">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.5">
			<desc>Get ap3's ip</desc>
			<setvar name="ap3.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.4_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="0.6">
			<desc>
				-config ssid, hive, vlan info and then bind them to interface
			</desc>
			<telnet target="ap1">
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "user-profile ${ssid.name} vlan-id ${tb.vlan1} attribute 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
			</telnet>
		</step>

		<step no="0.7">
			<desc>
				show interface wifi0 info
			</desc>
			<log-file>step0.7_show_interface_wifi0_info.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0"
			</telnet>
		</step>

		<step no="0.8">
			<desc>
				get wifi0's mac address (format:xx xx xx xx xx xx)
			</desc>
			<setvar name="ap1.wifi0.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step0.7_show_interface_wifi0_info.log -i wifi0 -o aero -m -width
			</setvar>
		</step>

		<step no="set_ap1_interface_mode">
			<desc>
				set ap1 interface mode
			</desc>
			<if> "${meshpoint}" == "wifi0" </if>
			<console target="ap1" timeout="50">
				-v "interface ${meshpoint} mode dual"
			</console>
		</step>

		<step no="set_ap3_interface_mode">
			<desc>
				set ap3 interface mode
			</desc>
			<if> "${meshpoint}" == "wifi0" </if>
			<telnet target="ap3" timeout="50">
				-v "interface ${meshpoint} mode dual"
			</telnet>
		</step>

		<step no="showapinterface.0">
			<desc>
				show ap1 interface
			</desc>
			<log-file>show_interface_ap1.log</log-file>
			<console target="ap1" timeout="50" slow="true">
				-v "show interface"
				-v ""
			</console>
		</step>

		<step no="showapinterface.1">
			<desc>
				show ap1 interface
			</desc>
			<setvar name="meshchannel">
				${bin.dir}/getstring.pl -k "${meshpoint}" -p "5" -f ${log.dir}/show_interface_ap1.log
			</setvar>
		</step>

		<step no="set_channel_info_ap3">
			<desc>
				-shutdown interface meshpoint then up it
			</desc>
			<telnet target="ap3" timeout="180">
				-v "interface ${meshpoint} radio channel ${meshchannel}"
				-v "interface ${meshpoint} hive ${hive.name} shutdown"
				-v ""
				-v ""
				-v "no interface ${meshpoint} hive ${hive.name} shutdown"
				-v ""
				-v ""
				-v ""
				-v ""
				-v ""
				-v ""
				-v ""
			</telnet>
		</step>

		<step no="shutdown_interface_ap1">
			<desc>
				-shutdown interface meshpoint then up it
			</desc>
			<console target="ap1" timeout="180">
				-v "interface ${meshpoint} hive ${hive.name} shutdown"
				-v ""
				-v "no interface ${meshpoint} hive ${hive.name} shutdown"
				-v ""
			</console>
		</step>

		<step no="ap_acsp_neighbor_check_4" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>first_acsp_check_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="500">
				-v "show acsp neighbor | in ${hive.name}"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap3.meshpoint.mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="0.9">
			<desc>
				-shutdown interface eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="0.10">
			<desc>
				-set meshpoint's radio channel
			</desc>
			<console target="ap1">
				-v "interface ${meshpoint} radio channel ${meshchannel}"
			</console>
		</step>

		<step no="1.11">
			<desc>
				-set meshpoint's radio channel
			</desc>
			<telnet target="ap3">
				-v "interface ${meshpoint} radio channel ${meshchannel}"
			</telnet>
		</step>

		<step no="1.1" delay="30" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step1.1_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap3.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="1.2" delay="20">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step1.2_show_ip_route.log</log-file>
			<console target="ap1" timeout="180">
				-v "show route"
			</console>
			<log-match>-c -i "0000:0000:0000" -i "${ap3.meshpoint.mac}"</log-match>
		</step>

		<step no="shutdown.ap2.eth1">
			<desc>
				shutdown eth1
			</desc>
			<if>"${ap2.eth1.existed}" == "true"</if>
			<telnet target="ap2">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="2">
			<desc>
				-Config ap2's vlan and native-vlan
			</desc>
			<console target="ap2">
				-v "security mac-filter aaa default deny"
				-v "security mac-filter aaa address ${ap4.meshpoint.mac} permit"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} security mac-filter aaa"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="2.1" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step2.1_show_interface_mgt0_info.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="2.2">
			<desc>Get ap2's ip</desc>
			<setvar name="ap2.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.1_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="2.3">
			<desc>
				-Config ap4's vlan and native-vlan
			</desc>
			<console target="ap4">
				-v "security mac-filter aaa default deny"
				-v "security mac-filter aaa address ${ap2.meshpoint.mac} permit"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} security mac-filter aaa"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="2.4" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step2.4_show_interface_mgt0_info.log</log-file>
			<console target="ap4">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="2.5">
			<desc>Get ap4's ip</desc>
			<setvar name="ap4.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.4_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="2.6">
			<desc>
				-config ssid, hive, vlan info and then bind them to interface
			</desc>
			<telnet target="ap2">
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "user-profile ${ssid.name} vlan-id ${tb.vlan1} attribute 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name} shutdown"
			</telnet>
		</step>

		<step no="2.7">
			<desc>
				show interface wifi0 info
			</desc>
			<log-file>step2.7_show_interface_wifi0_info.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi0"
			</telnet>
		</step>

		<step no="2.8">
			<desc>
				get wifi0's mac address (format:xx xx xx xx xx xx)
			</desc>
			<setvar name="ap2.wifi0.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step2.7_show_interface_wifi0_info.log -i wifi0 -o aero -m -width
			</setvar>
		</step>

		<step no="set_ap2_interface_mode">
			<desc>
				set ap2 interface mode
			</desc>
			<if> "${meshpoint}" == "wifi0" </if>
			<console target="ap2" timeout="50">
				-v "interface ${meshpoint} mode dual"
			</console>
		</step>

		<step no="set_ap4_interface_mode">
			<desc>
				set ap4 interface mode
			</desc>
			<if> "${meshpoint}" == "wifi0" </if>
			<telnet target="ap4" timeout="50">
				-v "interface ${meshpoint} mode dual"
			</telnet>
		</step>

		<step no="showapinterface.2">
			<desc>
				show ap2 interface
			</desc>
			<log-file>show_interface_ap2.log</log-file>
			<console target="ap2" timeout="50" slow="true">
				-v "show interface"
				-v ""
			</console>
		</step>

		<step no="showapinterface.3">
			<desc>
				show ap2 interface
			</desc>
			<setvar name="ap2.meshchannel">
				${bin.dir}/getstring.pl -k "${meshpoint}" -p "5" -f ${log.dir}/show_interface_ap2.log
			</setvar>
		</step>

		<step no="shutdown_interface_ap4">
			<desc>
				-shutdown interface meshpoint then up it
			</desc>
			<telnet target="ap4" timeout="180">
				-v "interface ${meshpoint} radio channel ${ap2.meshchannel}"
				-v "interface ${meshpoint} hive ${hive.name} shutdown"
				-v ""
				-v ""
				-v "no interface ${meshpoint} hive ${hive.name} shutdown"
				-v ""
				-v ""
				-v ""
				-v ""
				-v ""
				-v ""
				-v ""
			</telnet>
		</step>

		<step no="shutdown_interface_ap2">
			<desc>
				-shutdown interface meshpoint then up it
			</desc>
			<console target="ap2" timeout="180">
				-v "interface ${meshpoint} hive ${hive.name} shutdown"
				-v ""
				-v ""
				-v "no interface ${meshpoint} hive ${hive.name} shutdown"
				-v ""
			</console>
		</step>

		<step no="ap_acsp_neighbor_check_5" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>second_acsp_check_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="500">
				-v "show acsp neighbor | in ${hive.name}"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap4.meshpoint.mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3">
			<desc>
				-shutdown interface eth0
			</desc>
			<console target="ap2">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="3.1">
			<desc>
				-set meshpoint's radio channel
			</desc>
			<console target="ap2">
				-v "interface ${meshpoint} radio channel ${meshchannel}"
			</console>
		</step>

		<step no="3.2">
			<desc>
				-set meshpoint's radio channel
			</desc>
			<telnet target="ap4">
				-v "interface ${meshpoint} radio channel ${meshchannel}"
			</telnet>
		</step>

		<step no="4" delay="30" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step4_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap4.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.1" delay="20">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step4.1_show_ip_route.log</log-file>
			<console target="ap2" timeout="180">
				-v "show route"
			</console>
			<log-match>-c -i "0000:0000:0000" -i "${ap4.meshpoint.mac}"</log-match>
		</step>

		<step no="5">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step5_show_interface_mgt0_info.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="5.1">
			<desc>Get ap2's ip</desc>
			<setvar name="ap2.mgt0.ip.mp">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step5_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="7">
			<desc>
				-show roaming cache
			</desc>
			<log-file>step7_show_roaming_cache.log</log-file>
			<console target="ap1">
				-v "show roaming cache"
			</console>
			<log-match>-c -i "${sta1.tif.mac} *${ap1.wifi0.mac}"</log-match>
		</step>

		<step no="7.1" delay="15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-show roaming neighbor
			</desc>
			<log-file>step7.1_show_roaming_neighbore_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "show roaming neighbor"
			</console>
			<log-match>-c -i "${ap2.mgt0.ip.mp}"</log-match>
		</step>

		<step no="7.2">
			<desc>
				enable debug on AP3
			</desc>
			<telnet target="ap3">
				-v "_kdebug fe_arp basic"
				-v "clear log all"
			</telnet>
		</step>

		<step no="7.3">
			<desc>
				enable debug on AP4
			</desc>
			<telnet target="ap4">
				-v "_kdebug fe_arp basic"
				-v "clear log all"
			</telnet>
		</step>

		<step no="7.4">
			<desc>
				enable debug on AP2
			</desc>
			<console target="ap2">
				-v "_kdebug fe_arp basic"
			</console>
		</step>

		<step no="7.5">
			<desc>
				enable debug on AP1
			</desc>
			<console target="ap1">
				-v "_kdebug fe_arp basic"
			</console>
		</step>

		<step no="8">
			<desc>
				-up interface wifi0
			</desc>
			<console target="ap2">
				-v "clear log all"
				-v "no interface wifi0 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<step no="8.1" delay="5">
			<desc>
				-shutdown interface wifi0
			</desc>
			<console target="ap1">
				-v "clear log all"
				-v "interface wifi0 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<step no="9" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show station on ap2
			</desc>
			<log-file>step9_show_station_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show ssid ${ssid.name} station"
			</console>
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="9.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show station on ap1
			</desc>
			<log-file>step9.1_show_station_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name} station"
			</console>
			<log-match>-n -c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="10" delay="30">
			<desc>
				check log info on AP3
			</desc>
			<log-file>step10_show_logging_buffered.log</log-file>
			<telnet target="ap4" timeout="300">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-c -i "\[fe_arp\]: eth0 send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>

		<step no="10.1">
			<desc>
				check log info on AP1
			</desc>
			<log-file>step10.1_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="300">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-n -c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-n -c -i "send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>

		<step no="10.2">
			<desc>
				check log info on AP2
			</desc>
			<log-file>step10.2_show_logging_buffered.log</log-file>
			<console target="ap2" timeout="300">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-n -c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-n -c -i "send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>

		<step no="10.3">
			<desc>
				check log info on AP4
			</desc>
			<log-file>step10.3_show_logging_buffered.log</log-file>
			<telnet target="ap3" timeout="300">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-n -c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-n -c -i "send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>

		<step no="10.4">
			<desc>
				-show roaming cache
			</desc>
			<log-file>step10.4_show_roaming_cache.log</log-file>
			<console target="ap2">
				-v "show roaming cache"
			</console>
			<log-match>-c -i "${sta1.tif.mac} *${ap2.wifi0.mac}"</log-match>
		</step>

		<step no="10.5">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step10.5_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="10.6">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip.mp">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step10.5_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="10.7" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-show roaming neighbor
			</desc>
			<log-file>step10.7_show_roaming_neighbore_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show roaming neighbor"
			</console>
			<log-match>-c -i "${ap1.mgt0.ip.mp}"</log-match>
			<log-match>-c -i "${ap3.mgt0.ip}"</log-match>
			<log-match>-c -i "${ap4.mgt0.ip}"</log-match>
		</step>

		<step no="11">
			<desc>
				clear log all
			</desc>
			<telnet target="ap3">
				-v "clear log all"
			</telnet>
		</step>

		<step no="11.1">
			<desc>
				clear log all
			</desc>
			<telnet target="ap4">
				-v "clear log all"
			</telnet>
		</step>

		<step no="11.2">
			<desc>
				-up interface wifi0
			</desc>
			<console target="ap1">
				-v "clear log all"
				-v "no interface wifi0 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<step no="11.3" delay="5">
			<desc>
				-shutdown interface wifi0
			</desc>
			<console target="ap2">
				-v "clear log all"
				-v "interface wifi0 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<step no="12" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show station on ap2
			</desc>
			<log-file>step12_show_station_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show ssid ${ssid.name} station"
			</console>
			<log-match>-n -c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="12.1" delay="10" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show station on ap1
			</desc>
			<log-file>step12.1_show_station_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name} station"
			</console>
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="13" delay="30">
			<desc>
				check log info on AP4
			</desc>
			<log-file>step13_show_logging_buffered.log</log-file>
			<telnet target="ap3" timeout="300">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-c -i "\[fe_arp\]: eth0 send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>

		<step no="13.1">
			<desc>
				check log info on AP1
			</desc>
			<log-file>step13.1_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="300">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-n -c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-n -c -i "send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>

		<step no="13.2">
			<desc>
				check log info on AP2
			</desc>
			<log-file>step13.2_show_logging_buffered.log</log-file>
			<console target="ap2" timeout="300">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-n -c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-n -c -i "send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>

		<step no="13.3">
			<desc>
				check log info on AP3
			</desc>
			<log-file>step13.3_show_logging_buffered.log</log-file>
			<telnet target="ap4" timeout="300">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-n -c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-n -c -i "send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>
	</stage>
</testcase>