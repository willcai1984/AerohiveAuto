<testcase>
	<brief>Bridge-access configuration management</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<numofbpc>1</numofbpc>
	<tbtype>linux</tbtype>
	<description>
		Topology to use
		(AP)------pc2
		pc1++++++sw++++++portal (eth0)++++++pc3
		(Mesh)-------MP
		(AP)----------laptop4
		Objective
		DHCP discovery pkt from eth0 of mp
		Pre-condition
		-construct this topology
		-all pc and laptop are in same VLAN
		-eth0 of mp is access mode
		-enable mac-learning on eth0 of mp
		Test procedure
		-pc3 send dhcp discovery pkt to get an ip address
		-check the datapath----result 1
		Expect result
		Result 1: mp will do special handle and only send this discover/request pkt to mesh interface. Portal will only relay this pkt to eth0;when receive dhcp offer/ack,portal will only forward it to wifi backhaul and mp will only send it to eth interface.
		“_kdebug fe basic”, then can see
		5. DualPort Datapath
		5.1. Upstream Redundant Scenario
		This scenario includes two sub-scenarios:
		1: eth0 and eth1 both are backhaul mode and not bound to red0/agg0 interface.
		2: eth0 and eth1 are bound to red0 and red0 is in backhaul mode.(recommended config)
		3: eth0 is bound to red0 and eth1 is in backhaul mode
		4: eth0 is
		bound to agg0 and
		eth1 is in backhaul mode
		The common motivation to deploy the second scenario is for reliability beyond the limits of any one single cable or port. The other scenarios maybe not typical, but we can still provide redundant function with our current mechanism.

	</description>
	<stage>
		<if>"${tb.bridge_support}" == "true" &amp;&amp; "${ap1.eth1.existed}" == "true" &amp;&amp; "${ap1.wifi1.existed}" == "true"</if>
		<include prefix="0" file="subs/bpc_init.xml" obj-args="bpc1, ap2" args="none" />
		<step no="1">
			<desc>Set up portal's interface through sw menu</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "user-profile datapath"
				-v "user-profile datapath vlan ${tb.vlan1}"
				-v "user-profile datapath attribute 2"
				-v "security-object autoap"
				-v "security-object autoap default-user-profile-attr 2"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password aerohive"
				-v "interface mgt0 hive ${hive.name}"
				-f basic_apsetup.cfg
			</console>
		</step>

		<step no="2" delay="10">
			<desc>show mgt0's ip of portal</desc>
			<log-file>portal_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="3">
			<desc>Get portal's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/portal_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="4">
			<desc>show wifi1.1's mac of portal</desc>
			<log-file>wifi_mac_portal.log</log-file>
			<console target="ap1">
				-v "show interface wifi1.1"
				-v ""
			</console>
		</step>

		<step no="5">
			<desc>get wifi1.1' mac of portal</desc>
			<setvar name="ap1.wifi.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/wifi_mac_portal.log -i wifi1.1 -o aero -m -width
			</setvar>
		</step>

		<step no="6">
			<desc>Set up mp's interface through sw menu</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "user-profile datapath"
				-v "user-profile datapath vlan ${tb.vlan1}"
				-v "user-profile datapath attribute 2"
				-v "security-object autoap"
				-v "security-object autoap default-user-profile-attr 2"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password aerohive"
				-v "interface mgt0 hive ${hive.name}"
				-f basic_apsetup.cfg
			</console>
		</step>

		<step no="7" type="loop-check" loop-max-times="20" loop-interval="10">
			<desc>check the amrp neighbour</desc>
			<log-file>show_amrp_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "interface wifi1 radio channel 36"
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap1.wifi.mac}" -i "TWO"</log-match>
		</step>


		<step no="8">
			<desc>Set up mp's interface through sw menu</desc>
			<console target="ap2">
				-v "interface eth1 mode bridge-access"
				-v "interface eth1 mode bridge-access user-profile-attribute 2"
				-v "interface eth1 mac-learning enable"
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="9" type="loop-check" loop-max-times="20" loop-interval="10">
			<desc>check the amrp neighbour</desc>
			<log-file>show_amrp2_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "interface wifi1 radio channel 36"
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap1.wifi.mac}" -i "TWO"</log-match>
		</step>


		<step no="10">
			<desc>Set SSID for portal </desc>
			<console target="ap2">
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "save config"
			</console>
		</step>

		<property name="conn1.ssid" value="${ssid.name}" />
		<property name="conn1.proto" value="open" />
		<include prefix="11" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap2" />

		<step no="up_the_bpc_tif">
			<desc>
				2:Client links to ap through the bridge ethernet port, result 1
			</desc>
			<ssh target="${bpc1.mif.ip}">
				-v "ifconfig ${bpc1.tif.name} up"
				-v "dhclient ${bpc1.tif.name} -r "
				-v "dhclient ${bpc1.tif.name}" ;exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="get_ipinfo_of_bpc" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>ifconfig.log</log-file>
			<ssh target="${bpc1.mif.ip}">
				-v "ifconfig ${bpc1.tif.name}"
			</ssh>
		</step>

		<step no="get_mac_of_bpc">
			<desc>Get bpc's mac</desc>
			<setvar name="bpc1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${bpc1.tif.name} -nomask -m -width
			</setvar>
		</step>
		<step no="get_ip_of_bpc">
			<desc>Get bpc's ip</desc>
			<setvar name="bpc1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${bpc1.tif.name} -nomask -width
			</setvar>
		</step>

		<step no="12">
			<desc>show route table on mp</desc>
			<log-file>bridge_mp_route.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
			<log-match>-c -i "${bpc1.tif.mac}" -i "eth1" </log-match>
		</step>

		<step no="13">
			<desc>show mac-learning on mp</desc>
			<log-file>bridge_mp_mac_learning.log</log-file>
			<console target="ap2">
				-v "show interface eth1 mac-learning all"
			</console>
			<log-match>-c -i "${bpc1.tif.mac}" -i "${tb.vlan1}"</log-match>
		</step>

		<step no="14">
			<desc>Open debug cli on mp</desc>
			<console target="ap2">
				-v "_ff src-mac ${bpc1.tif.mac} dst-port 67 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe all"
				-v "clear log all"
			</console>
			<no-error-check />
		</step>

		<step no="up_the_bpc_tif">
			<desc>
				Client links to ap through the bridge ethernet port, result 1
			</desc>
			<ssh target="${bpc1.mif.ip}">
				-v "dhclient ${bpc1.tif.name} -r "
				-v "dhclient ${bpc1.tif.name}" ;exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="15">
			<desc>show log buffer on mp</desc>
			<log-file>pc_dhcp_mp.log</log-file>
			<console target="ap2" timeout="1000">
				-v "show log buf"
			</console>
			<no-error-check />
			<log-match>-c -e " (o) wifi1.1"</log-match>
			<log-match>-e "(i) eth1"</log-match>
			<log-match>-e "DHCP bcast set? no, client mac ${ap3_eth_mac}, out_ifp eth1"</log-match>
		</step>
	</stage>
</testcase>
