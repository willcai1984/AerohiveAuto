<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Only selected portal send gratuitous arp</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>

		Pre-Condition:

		- laptop connect with ap2, pass authentication

		Test Procedure:

		- Laptop associates with poratal2
		- portal2 insert route for laptop. Result 1
		- portal1 insert route for laptop. Result 2
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>winlin</tbtype>

	<property name="conn1.ssid" value="${ssid.name}_1" />
	<stage>
		<if>"${ap.wifi1.existed}" == "true"</if>
		<step no="pre1.1">
			<desc>
				-configure AP1 as portal1
			</desc>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "ssid ${conn1.ssid}"
				-v "interface wifi0 ssid ${conn1.ssid}"
				-v "interface wifi1 radio channel 40"
			</console>
		</step>

		<step no="pre1.1b">
			<desc>
				-if eth1 exist on AP1,shutdown eth1
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="pre1.1c">
			<desc>
				-show interface mgt0 in ap1
			</desc>
			<log-file>step_pre1.1c_show_interface_mgt0_ap1.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="pre1.1d">
			<desc>
				Get mgt0 ap in ap1
			</desc>
			<setvar name="ap1.mgt0.ip">
				${bin.dir}/getbyrexp.py -p "IP addr=(\S+);" -f ${log.dir}/step_pre1.1c_show_interface_mgt0_ap1.log -t str
			</setvar>
		</step>

		<step no="pre1.1e">
			<desc>get mac address of ap1</desc>
			<setvar name="ap1.mgt0.mac">
				${bin.dir}/getbyrexp.py -p "MAC addr=([\da-fA-F:]+)" -f ${log.dir}/step_pre1.1c_show_interface_mgt0_ap1.log -t str
			</setvar>
		</step>

		<step no="pre1.2">
			<desc>
				-configure AP2 as Portal2
			</desc>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 radio channel 40"
			</console>
		</step>

		<step no="pre1.2b">
			<desc>
				-if eth1 exist on AP2,shutdown eth1
			</desc>
			<if>"${ap2.eth1.existed}" == "true"</if>
			<telnet target="ap2">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="pre1.2c">
			<desc>
				-show interface mgt0 in ap2
			</desc>
			<log-file>step_pre1.2c_show_interface_mgt0_ap2.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="pre1.2d">
			<desc>
				Get mgt0 ap in ap2
			</desc>
			<setvar name="ap2.mgt0.ip">
				${bin.dir}/getbyrexp.py -p "IP addr=(\S+);" -f ${log.dir}/step_pre1.2c_show_interface_mgt0_ap2.log -t str
			</setvar>
		</step>

		<step no="pre1.2e">
			<desc>get mac address of ap2</desc>
			<setvar name="ap2.mgt0.mac">
				${bin.dir}/getbyrexp.py -p "MAC addr=([\da-fA-F:]+)" -f ${log.dir}/step_pre1.2c_show_interface_mgt0_ap2.log -t str
			</setvar>
		</step>

		<step no="pre1.3" type="loop-check" loop-max-times="15" loop-interval="10">
			<desc>
				On ap2
				-show roaming neighbor
			</desc>
			<log-file>step_pre1.3_show_roaming_neighbor_ap2.log</log-file>
			<console target="ap2">
				-v "show roaming neighbor"
			</console>
			<log-match>-c -i "${ap1.mgt0.mac}" -i "${ap1.mgt0.ip}"</log-match>
		</step>

		<step no="pre1.4" type="loop-check" loop-max-times="3" loop-interval="10">
			<desc>
				On ap1
				-show amrp dnxp neighbor
			</desc>
			<log-file>step_pre1.4_show_amrp_dnxp_neighbor_ap1.log</log-file>
			<console target="ap1">
				-v "show roaming neighbor"
			</console>
			<log-match>-c -i "${ap2.mgt0.mac}" -i "${ap2.mgt0.ip}"</log-match>
		</step>

		<step no="pre2.1">
			<desc>
				enable debug
			</desc>
			<console target="ap1">
				-v "_kdebug fe_arp basic"
				-v "clear log all"
			</console>
		</step>

		<step no="pre2.2">
			<desc>
				enable debug
			</desc>
			<console target="ap2">
				-v "_kdebug fe_arp basic"
				-v "clear log all"
			</console>
		</step>

		<include prefix="pre3" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="1.1" type="loop-check" loop-max-times="5" loop-interval="10">
			<desc>
				portal2 insert arp entry into its arp-table
			</desc>
			<log-file>step1.1_show_arp_cache.log</log-file>
			<console target="ap1">
				-v "show arp-cache"
			</console>
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="1.2" type="loop-check" loop-max-times="5" loop-interval="10">
			<desc>
				portal2 insert route for laptop
			</desc>
			<log-file>step1.2_show_route.log</log-file>
			<console target="ap1">
				-v "show route"
			</console>
			<log-match>-c -i "${sta1.tif.mac} *${ap1.mgt0.mac} *wifi0.1"</log-match>
		</step>

		<step no="1.3">
			<desc>
				portal2 insert route for laptop
			</desc>
			<log-file>step1.3_show_route.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
		</step>

		<step no="2.1">
			<desc>
				portal2 send gratuitous arp
			</desc>
			<log-file>step2.1_show_log_buff.log</log-file>
			<console target="ap1" timeout="180">
				-v "show log buff"
				-v ""
				-v ""
				-v ""
				-v "clear log all"
			</console>
			<log-match >-i -c "\[fe_arp\]: eth0 send gratuitous ARP ${sta1.tif.mac} vlan 1"</log-match>
			<no-error-check />
		</step>

		<step no="2.2">
			<desc>
				portal1 does not send gratuitous arp
			</desc>
			<log-file>step2.2_show_log_buff.log</log-file>
			<console target="ap2" timeout="180">
				-v "show log buff"
				-v ""
				-v ""
				-v ""
				-v ""
				-v "clear log all"
			</console>
			<log-match >-i -c "\[fe_arp\]: eth0 send gratuitous ARP ${sta1.tif.mac} vlan 1"</log-match>
		
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "-I \[fe_arp\]: eth0 send gratuitous ARP ${sta1.tif.mac} vlan 1" -c 0 -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

	</stage>

</testcase>

