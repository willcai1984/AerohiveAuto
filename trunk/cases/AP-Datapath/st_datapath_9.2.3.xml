<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>a laptop disconnects with the mp firstly, then reconnect with this mp again, make sure that the the portal send gratuitous arp</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-condition
		-laptop connect with mp, pass authentication
		Test procedure
		- Laptop associates with mp
		- Laptop disconnects with mp
		- Laptop connects to mp again
		Expect result
		1: make sure portal has send the gratuitous arp in right vlan
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<if>"${ap.wifi1.existed}" =="true"</if>
		<step no="shutdown.eth1">
			<desc>
				shutdown eth1
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<telnet target="ap1">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="0">
			<desc>
				-Config ap1's vlan and native-vlan
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="0.1" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.1_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.2">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.1_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="0.3">
			<desc>
				-Config ap2's vlan and native-vlan
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="0.4" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.4_show_interface_mgt0_info.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.5">
			<desc>Get ap2's ip</desc>
			<setvar name="ap2.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.4_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="1">
			<desc>
				-config hive ,ssid
			</desc>
			<telnet target="ap1">
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "user-profile ${ssid.name} vlan-id ${tb.vlan1} attribute 1"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "no bonjour-gateway enable"
			</telnet>
		</step>

		<step no="2">
			<desc>
				config hive and bind it to interface
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "interface wifi1 radio channel 36"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				show ap2's interface wifi1 info
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				get ap2's wifi1's mac address
			</desc>
			<setvar name="ap2.wifi1.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i wifi1 -o aero -m -width
			</setvar>
		</step>

		<step no="2.3">
			<desc>shutdown interface wifi1 and then up it (it's aimed to clear wifi1's neighbor list)</desc>
			<telnet target="ap1">
				-v "interface wifi1 hive ${hive.name}_${job.sid} shutdown"
				-v "no interface wifi1 hive ${hive.name}_${job.sid} shutdown"
				-v "interface wifi1 radio channel 36"
			</telnet>
		</step>

		<step no="3" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor
			</desc>
			<log-file>step3_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "show acsp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+Backhaul\s+${hive.name}_${job.sid}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4">
			<desc>
				-shutdown interface eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="5" delay="35" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="7">
			<desc>
				enable debug on AP1
			</desc>
			<console target="ap1">
				-v "_kdebug fe_arp basic"
				-v "clear log all"
			</console>
		</step>

		<step no="7.1">
			<desc>
				enable debug on AP2
			</desc>
			<telnet target="ap2">
				-v "_kdebug fe_arp basic"
				-v "clear log all"
			</telnet>
		</step>

		<include prefix="8" file="subs/release_station_wifi.xml" obj-args="sta1" />

		<include prefix="9" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="10" delay="10">
			<desc>
				check log info on AP2
			</desc>
			<log-file>step10_show_logging_buffered.log</log-file>
			<telnet target="ap2" timeout="300">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-c -i "\[fe_arp\]: eth0 send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>
		
			<step no="10.1">
			<desc>
				check log info on AP1
			</desc>
			<log-file>step10.1_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="300">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-n -c -i "\[fe_arp\]: fe receive gratuitous ARP request ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
			<log-match>-n -c -i "send gratuitous ARP ${sta1.tif.mac} vlan ${tb.vlan1}"</log-match>
		</step>
	</stage>
</testcase>