<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>(IxPort: CoF=4) The switch forwards IGMPv2 general query correctly.</brief>
	<priority>middle</priority>
	<automated>yes</automated>
	<description>
		Test Produce:
		1. Multicast routerA and routerB send IGMPv2 general query, hostA and hostB send IGMPv2 join report.
		2. Multicast routerA send IGMPv2 general query ,capture packets on the hosts and routerB,result 1
		Expect result:
		1. The switch forwards the query packets to all ports in the vlan, ie member ports (hostA and hostB), router ports (routerB) and other ports (hostC); the packets should not be changed by the switch.
	</description>

	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>

	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include file="include/sw_default_pre_process.xml" />
	</pre-process>
	<property name="tx_port1" value="${sw1.port1.ixia_port}" />
	<property name="tx_port1.phytype" value="${sw1.port1.ixia_port.phytype}" />
	<property name="tx_port2" value="${sw1.port2.ixia_port}" />
	<property name="tx_port2.phytype" value="${sw1.port2.ixia_port.phytype}" />
	<property name="rx_port1" value="${sw1.port3.ixia_port}" />
	<property name="rx_port1.phytype" value="${sw1.port3.ixia_port.phytype}" />
	<property name="rx_port2" value="${sw1.port4.ixia_port}" />
	<property name="rx_port2.phytype" value="${sw1.port4.ixia_port.phytype}" />
	<property name="correct_vlan" value="101" />
	<property name="incorrect_vlan" value="102" />

	<stage>
		<step no="1.1">
			<desc>
				config switch, port1/2/3/4 is in the same vlan
			</desc>
			<telnet target="sw1">
				-v "vlan ${correct_vlan}"
				-v "interface ${sw1.port1} switchport access vlan ${correct_vlan}"
				-v "interface ${sw1.port2} switchport access vlan ${correct_vlan}"
				-v "interface ${sw1.port3} switchport access vlan ${correct_vlan}"
				-v "interface ${sw1.port4} switchport access vlan ${correct_vlan}"
				-v "ip igmp snooping"
				-v "show interface"
			</telnet>
			<no-error-check />
		</step>

		<step no="1.2">
			<desc>check igmp snooping is enable in vlan</desc>
			<telnet target="sw1">
				-v "show ip igmp snooping vlan ${correct_vlan}"
			</telnet>
			<no-error-check />
			<log-match>-e "Snooping: enable"</log-match>
		</step>

		<step no="2.1">
			<desc>
				port1 sends IGMPv2 query,check if port3 and 4 can receivce the pkts; expect yes
			</desc>
			<log-file>step2.1_v2_query.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="900">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2} -phyList ${tx_port1.phytype},${tx_port2.phytype},${rx_port1.phytype},${rx_port2.phytype}"
				-v ""
				-v "stream_import -onePort ${tx_port1} -fileName ${case.dir}/conf/potr1.str"
				-v "stream_maintance -onePort ${tx_port1} -streamId all -maintanceOp disable"
				-v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp enable"
				-v ""
				<!-- start transmit -->
				-v "stop_transmit -portList ${tx_port1}"
				-v ""
				-v "clear_statistic -portList ${tx_port1},${rx_port1},${rx_port2}"
				-v ""
				<!-- start capture -->
				-v "start_capture -portList ${rx_port1},${rx_port2}"
				-v ""
				-v "start_transmit -portList ${tx_port1} -firstTryFlag false"
				-v ""
				-v "wait_time -second 1"
				-v ""
				-v "stop_transmit -portList ${tx_port1}"
				-v ""
				<!-- stop capture -->
				-v "stop_capture -portList ${rx_port1},${rx_port2}"
				-v ""
				<!-- save capture -->
				-v "save_capture -onePort ${rx_port1} -fileName ${job.id}rx1.txt"
				-v ""
				-v "save_capture -onePort ${rx_port2} -fileName ${job.id}rx2.txt"
				-v ""
				-v "exit"
			</ssh>
			<no-error-check />
		</step>


		<step no="2.2">
			<desc>
				get rx1 captured pkts, check if is the same as the originate one; expect yes
			</desc>
			<log-file>step2.2_v2_query_rx1.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="900">
				-v "cat ${job.id}rx1.txt "
			</ssh>
			<log-match>-e '01 00 5E 00 00 01'</log-match>
			<log-match>-e '00 00 05 BB 6E C5'</log-match>
			<log-match>-e '08 00'</log-match>
			<log-match>-e '46 C0 00 20 00 57 40 00 01 02 42 16 C0 A8 01 01 E0 00 00 01 94 04 00 00 11 64 EE 9B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00'</log-match>
			<log-match>-e 'FB 16 59 52'</log-match>
			<log-match>-i '64' -i 'Good Packet'</log-match>
			<no-error-check />
		</step>

		<step no="2.3">
			<desc>
				get rx2 captured pkts, check if is the same as the originate one; expect yes
			</desc>
			<log-file>step2.3_v2_query_rx2.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="root@.*#" timeout="900">
				-v "cat ${job.id}rx2.txt "
			</ssh>
			<log-match>-e '01 00 5E 00 00 01'</log-match>
			<log-match>-e '00 00 05 BB 6E C5'</log-match>
			<log-match>-e '08 00'</log-match>
			<log-match>-e '46 C0 00 20 00 57 40 00 01 02 42 16 C0 A8 01 01 E0 00 00 01 94 04 00 00 11 64 EE 9B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00'</log-match>
			<log-match>-e 'FB 16 59 52'</log-match>
			<log-match>-i '64' -i 'Good Packet'</log-match>
			<no-error-check />
		</step>

		<step no="2.4">
			<desc>check if exist mroute</desc>
			<log-file>step2.4_show_igmp_info.log</log-file>
			<telnet target="sw1">
				-v "show ip igmp snooping mrouters vlan ${correct_vlan}"
			</telnet>
			<log-match>-i '${sw1.port1}' -i 'v2'</log-match>
		</step>

		<step no="3.1">
			<desc>
				port3 sends IGMPv2 join report, group 225.1.1.1,check if port 1 and 2 can receivce the pkts; expect yes
			</desc>
			<log-file>step3.1_v2_join_report.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="900">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -def disable -chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2} -phyList ${tx_port1.phytype},${tx_port2.phytype},${rx_port1.phytype},${rx_port2.phytype}"
				-v ""
				-v "stream_import -onePort ${rx_port1} -fileName ${case.dir}/conf/potr2.str"
				-v "stream_maintance -onePort ${rx_port1} -streamId all -maintanceOp disable"
				-v "stream_maintance -onePort ${rx_port1} -streamId 7 -maintanceOp enable"
				-v ""
				<!-- start transmit -->
				-v "stop_transmit -portList ${rx_port1}"
				-v ""
				-v "clear_statistic -portList ${tx_port1},${rx_port1},${rx_port2}"
				-v ""
				<!-- start capture -->
				-v "start_capture -portList ${tx_port1},${tx_port2}"
				-v ""
				-v "start_transmit -portList ${rx_port1} -firstTryFlag false"
				-v ""
				-v "wait_time -second 1"
				-v ""
				-v "stop_transmit -portList ${rx_port1}"
				-v ""
				<!-- stop capture -->
				-v "stop_capture -portList ${tx_port1},${tx_port2}"
				-v ""
				<!-- save capture -->
				-v "save_capture -onePort ${tx_port1} -fileName ${job.id}tx1_join.txt"
				-v "save_capture -onePort ${tx_port1} -fileName ${job.id}_tx1_join.enc"
				-v ""
				-v "save_capture -onePort ${tx_port2} -fileName ${job.id}tx2_join.txt"
				-v "save_capture -onePort ${tx_port2} -fileName ${job.id}_tx2_join.enc"
				-v ""
				-v "exit"
			</ssh>
			<no-error-check />
		</step>

		<step no="3.2">
			<desc>
				show port1 captured pkts, check if is the same as the originate one; expect yes
			</desc>
			<log-file>step3.2_v2_join_tx1.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="900">
				-v "cat ${job.id}tx1_join.txt"
			</ssh>
			<log-match>-e '01 00 5E 01 01 01'</log-match>
			<log-match>-e '00 00 05 BB 6E C6'</log-match>
			<log-match>-e '08 00'</log-match>
			<log-match>-e '45 00 00 1C 00 00 00 00 01 02 16 34 C0 A8 01 02 E1 01 01 01 16 64 07 99 E1 01 01 01 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11'</log-match>
      <!-- <log-match>-e '62 10 2A 0F'</log-match> -->			
			<log-match>-i '64' -i 'Good Packet'</log-match>
			<no-error-check />
		</step>

		<step no="3.3">
			<desc>
				show port2 captured pkts, check if is the same as the originate one; expect yes
			</desc>
			<log-file>step3.3_v2_join_tx2.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="900">
				-v "cat ${job.id}tx2_join.txt"
			</ssh>
<!-- 			<log-match>-e '01 00 5E 01 01 01'</log-match>
			<log-match>-e '00 00 05 BB 6E C6'</log-match>
			<log-match>-e '08 00'</log-match> -->
			<log-match>-e '45 00 00 1C 00 00 00 00 01 02 16 34 C0 A8 01 02 E1 01 01 01 16 64 07 99 E1 01 01 01 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11' -n</log-match>
<!-- 			<log-match>-e '62 10 2A 0F'</log-match>
			<log-match>-i '64' -i 'Good Packet'</log-match> -->
			<no-error-check />
		</step>

		<step no="3.4">
			<desc>
				show igmp info, check the group info
			</desc>
			<log-file>step3.4_show_igmp_info.log</log-file>
			<telnet target="sw1">
				-v "show ip igmp snooping groups vlan ${correct_vlan}"
			</telnet>
			<log-match>-i '${sw1.port3}' -i 'dynamic'</log-match>
		</step>

		<step no="4">
			<desc>
				rm the capture files
			</desc>
			<log-file>step4_rm_file.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="root@.*#|rm:.*\?" timeout="900">
				-v "rm ${job.id}rx1.txt ${job.id}rx2.txt ${job.id}tx1_join.txt ${job.id}tx2_join.txt -f"
			</ssh>
			<no-error-check />
		</step>

	</stage>
	<post-process>
		<stage>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
