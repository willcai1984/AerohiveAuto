<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>The same client uses two ppsk to do first come first bind</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-config a ssid with ppsk
		-enable ppsk-server
		-enable mac binding

		Test Procedure:
		-client uses a ppsk which never used before to connect to ssid
		-client uses another ppsk to reconnect
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="default.psk" value="aerohive" />
	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.pif" value="wifi1" />
	<property name="conn1.channel" value="36" />
	<property name="conn1.proto" value="wpa-tkip-psk" />
	<property name="conn1.psk" value="ppskuser1" />
	<property name="conn2.ssid" value="${ssid.name}" />
	<property name="conn2.pif" value="wifi1" />
	<property name="conn2.channel" value="36" />
	<property name="conn2.proto" value="wpa-tkip-psk" />
	<property name="conn2.psk" value="ppskuser2" />
	<property name="conn2.auth_negative_test" value="true" />
	<property name="conn2.dhcp_negative_test" value="true" />

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="0">
			<desc>
				-Config ap1
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="0.1">
			<desc>
				-Config ap2
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="0.2">
			<desc>
				-Config ap2
			</desc>
			<console target="ap2">
				-v "interface mgt0 ip ${ap2.mgt0.ipset}/24"
				-v "ip route net 0.0.0.0 0.0.0.0 gateway ${tb.vlan1.gw}"
			</console>
		</step>

		<step no="0.3" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.3_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.4">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.3_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="0.5">
			<desc>
				change ap2's ip
			</desc>
			<setvar name="ap2.mgt0.ip">
				echo "${ap2.mgt0.ipset}"
			</setvar>
		</step>

		<step no="1">
			<desc>
				-Config ap1
			</desc>
			<ssh target="ap1">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password aerohive"
				-v "interface mgt0 hive ${hive.name}"
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key ${default.psk}"
				-v "security-object ppsk security private-psk"
				-v "security-object ppsk security private-psk default-psk-disabled"
				-v "security-object ppsk security private-psk ppsk-server ${ap2.mgt0.ipset}"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "user ppsk_user1"
				-v "user ppsk_user1 password ppskuser1"
				-v "user-group userGroup"
				-v "user ppsk_user1 group userGroup"
				-v "user ppsk_user2"
				-v "user ppsk_user2 password ppskuser2"
				-v "user ppsk_user2 group userGroup"
			</ssh>
		</step>

		<step no="1.1">
			<desc>
				-Config ap1
			</desc>
			<ssh target="ap1">
				-v "user-group userGroup user-attribute 1"
				-v "user-group userGroup vlan-id ${tb.vlan1}"
				-v "user-profile ttt vlan-id ${tb.vlan1} attribute 1"
				-v "security-object ppsk security private-psk mac-binding-enable"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi1 ssid ${ssid.name}"
				-v "interface wifi1 radio channel 36"				
			</ssh>
		</step>

		<step no="2">
			<desc>
				-Config ap2
			</desc>
			<ssh target="ap2">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password aerohive"
				-v "interface mgt0 hive ${hive.name}"
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key ${default.psk}"
				-v "security-object ppsk security private-psk"
				-v "security-object ppsk security private-psk default-psk-disabled"
				-v "security-object ppsk security private-psk ppsk-server ${ap2.mgt0.ipset}"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "user ppsk_user1"
				-v "user ppsk_user1 password ppskuser1"
				-v "user-group userGroup"
				-v "user ppsk_user1 group userGroup"
				-v "user ppsk_user2"
				-v "user ppsk_user2 password ppskuser2"
				-v "user ppsk_user2 group userGroup"
			</ssh>
		</step>

		<step no="2.1">
			<desc>
				-Config ap2
			</desc>
			<ssh target="ap2">
				-v "user-group userGroup user-attribute 1"
				-v "user-group userGroup vlan-id ${tb.vlan1}"
				-v "user-profile ttt vlan-id ${tb.vlan1} attribute 1"
				-v "security-object ppsk security private-psk mac-binding-enable"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 11"
			</ssh>
		</step>

		<step no="2.2" delay="60">
			<desc>
				-Show auth private-psk
			</desc>
			<log-file>step_2.2_show_auth_private.log</log-file>
			<telnet target="ap1">
				-v "show auth private-psk"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\d+\s+ppsk_user1\s+userGroup\s+\w+\s+Yes" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\d+\s+ppsk_user2\s+userGroup\s+\w+\s+Yes" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="2.3">
			<desc>
				-open debug mode and clear log all
			</desc>
			<telnet target="ap1">
				-v "_debug auth all"
				-v "no _debug auth excessive"
				-v "clear log all"
				-v "clear arp-cache"
			</telnet>
		</step>

		<step no="2.4">
			<desc>
				-open debug mode and clear log all
			</desc>
			<telnet target="ap2">
				-v "_debug auth all"
				-v "no _debug auth excessive"
				-v "clear log all"
				-v "clear arp-cache"
			</telnet>
		</step>

		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="4" delay="30">
			<desc>
				-Show logging buffered to check binding relationship is be created
			</desc>
			<log-file>step4_show_logging_buffered.log</log-file>
			<telnet target="ap1" timeout="200">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)auth recv ppsk server respond mac-binding query for sta\(${sta1.tif.mac}\) ACCEPT \(rc=1\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)auth goto ppsk server\(${ap2.mgt0.ipset}\) query mac-binding for sta\(${sta1.tif.mac}\)\(type:10\)" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.1">
			<desc>
				-Check the auth procedure on ppsk server
			</desc>
			<log-file>step4.1_show_logging_buffered.log</log-file>
			<telnet target="ap2" timeout="200">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "ah_auth_mb_create: assign(mac=${sta1.tif.mac}, ssid=${ssid.name}, user=ppsk_user"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)mac-binding enabled, try to create mac-binding for sta\(mac=${sta1.tif.mac}, ssid=${ssid.name}\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)ah_auth_mb_check_bind: no mac-binding found for sta\(${sta1.tif.mac}\)" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-Check the bind relationship on ap1
			</desc>
			<log-file>step5_check_bind_relationship_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "_test auth mac-bind show ${ssid.name}"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\(${ssid.name}\) is not a mac-bind server" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-Check the bind relationship on ap2
			</desc>
			<log-file>step5.1_check_bind_relationship_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "_test auth mac-bind show ${ssid.name}"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)${sta1.tif.mac}: SSID\(${ssid.name}\) user\[ppsk_user1, index=0\]" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				-Clear log all
			</desc>
			<telnet target="ap2">
				-v "clear log all"
			</telnet>
		</step>

		<step no="6.1">
			<desc>
				-Clear log all
			</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<include prefix="7" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<!-- <step no="set_tif_channel">
			<desc>kill the wpa_supplicant daemon on sta1</desc>
			<ssh target="sta1">
				-v "iwconfig ${sta1.tif.name} channel 36"
				-v "iwconfig ${sta1.tif.name} commit"
			</ssh>
		</step> -->

		<step no="8">
			<desc>configure ssid property on sta1</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto WPA"
				-v "set_network 0 psk \"ppskuser2\""
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="8.1" delay="30" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if sta1 is associated successful</desc>
			<log-file>step8.1_wpa_stat_sta1_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-n -c -i "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="9">
			<desc>
				-Show logging buffered
			</desc>
			<log-file>step9_show_logging_buffered.log</log-file>
			<telnet target="ap1" timeout="200">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "ah_auth_macbind_msg_recv: auth recv ppsk server respond mac-binding query for sta(${sta1.tif.mac}) NOT ACCEPT"</log-match>
			<log-match>-c -i "ah_auth_mb_disassociate_sta: disconnect Sta(${sta1.tif.mac}) under SSID(${ssid.name}) for user(ppsk_user2) reject"</log-match>
		</step>

		<step no="9.1">
			<desc>
				-Show logging buffered
			</desc>
			<log-file>step9.1_show_logging_buffered.log</log-file>
			<telnet target="ap2" timeout="200">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "ah_auth_macbind_msg_recv: auth ppsk server respond ${ap1.mgt0.ip} mac-binding query result for sta(${sta1.tif.mac}) NOT ACCEPT"</log-match>
			<log-match>-c -i "ah_auth_mb_check_bind: bind-user(ppsk_user1) mismatch check-user(ppsk_user2)"</log-match>
		</step>

		<step no="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-Check the bind relationship on ap1
			</desc>
			<log-file>step10_check_bind_relationship_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "_test auth mac-bind show ${ssid.name}"
			</telnet>
			<log-match>-c -i "SSID(${ssid.name}) is not a mac-bind server"</log-match>
		</step>

		<step no="10.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-Check the bind relationship on ap2
			</desc>
			<log-file>step10.1_check_bind_relationship_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "_test auth mac-bind show ${ssid.name}"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)${sta1.tif.mac}: SSID\(${ssid.name}\) user\[ppsk_user1, index=0\]" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>
</testcase>
