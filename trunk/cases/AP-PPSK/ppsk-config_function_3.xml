<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that the PPSK config can be saved correctly into 'users' config thru CLI directly.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1. Log in to the AP thru console.
		2. Configure a user group 'ug01', password auto generated
		3. Configure a PPSK schedule 'psch01' and set it to the user group 'ug01'.
		4. Generate some user accounts for the user group 'ug01'.
		5. Check the running config. [result 1]
		6. Check the running config of users. [result 2]
		7. Save 'users' config
		8. Configure a user group 'ug02', password auto generated
		9. Configure a PPSK schedule 'psch02' and set it to the user group 'ug02'.
		10. Generate some user accounts for the user group 'ug02'.
		11. Check the running config. [result 3]
		12. Check the running config of users. [result 4]
		13. Reboot the AP.
		14. Check the running config. [result 5]
		15. Check the running config of users. [result 6]
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="1">
			<desc>
				1. Log in to the AP thru console.
				2. Configure a user group 'ug01', password auto generated
				3. Configure a PPSK schedule 'psch01' and set it to the user group 'ug01'.
			</desc>
			<ssh target="ap1">
				-v "_debug auth info"
				-v "clear log all"
				-v "clock date-time 2012-10-27 09:00:00"
				-v "user-group userGroup1"
				-v "user-group userGroup1 password-generation-method auto"
				-v "user-group userGroup1 auto-generation index-range 1"
				-v "schedule psch01 ppsk once 2012-10-27 09:00 to 2012-10-27 10:00"
				-v "user-group userGroup1 auto-generation schedule psch01"
				-v "save config"
			</ssh>
		</step>

		<step no="2" delay="10">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step2_show_user.log</log-file>
			<console target="ap1">
				-v "show user"
			</console>
			<log-match>-c -i "userGroup10001 *auto" -i "Yes *userGroup1"</log-match>
		</step>

		<step no="3">
			<desc>
				5. Check the running config. [result 1]
			</desc>
			<log-file>step3_show_run_config.log</log-file>
			<console target="ap1">
				-v "show running-config"
			</console>
			<log-match>-n -c -i "user-group userGroup1"</log-match>
			<log-match>-n -c -i "schedule psch01"</log-match>
		</step>

		<step no="4">
			<desc>
				6. Check the running config of users. [result 2]
			</desc>
			<log-file>step4_show_run_config_user.log</log-file>
			<console target="ap1">
				-v "show running-config user"
			</console>
			<log-match>-c -i "schedule psch01 ppsk once 2012-10-27 09:00 to 2012-10-27 10:00"</log-match>
			<log-match>-c -i "user-group userGroup1"</log-match>
		</step>

		<step no="4.1">
			<desc>
				7. Save 'users' config
			</desc>
			<console target="ap1">
				-v "save config users"
			</console>
		</step>

		<step no="5">
			<desc>
				8. Configure a user group 'ug02', password auto generated
				9. Configure a PPSK schedule 'psch02' and set it to the user group 'ug02'.
			</desc>
			<ssh target="ap1">
				-v "user-group userGroup2"
				-v "user-group userGroup2 password-generation-method auto"
				-v "user-group userGroup2 auto-generation index-range 1"
				-v "schedule psch02 ppsk once 2012-10-27 09:00 to 2012-10-27 10:00"
				-v "user-group userGroup2 auto-generation schedule psch02"
			</ssh>
		</step>

		<step no="6" delay="5">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step6_show_user.log</log-file>
			<console target="ap1">
				-v "show user"
			</console>
			<log-match>-c -i "userGroup10001 *auto" -i "Yes *userGroup1"</log-match>
			<log-match>-c -i "userGroup20001 *auto" -i "Yes *userGroup2"</log-match>
		</step>

		<step no="7">
			<desc>
				11. Check the running config. [result 3]
			</desc>
			<log-file>step7_show_run_config.log</log-file>
			<console target="ap1">
				-v "show running-config"
			</console>
			<log-match>-n -c -i "user-group userGroup1"</log-match>
			<log-match>-n -c -i "schedule psch01"</log-match>
			<log-match>-n -c -i "user-group userGroup2"</log-match>
			<log-match>-n -c -i "schedule psch02"</log-match>
		</step>

		<step no="8">
			<desc>
				12. Check the running config of users. [result 4]
			</desc>
			<log-file>step8_show_run_config_user.log</log-file>
			<console target="ap1">
				-v "show running-config user"
			</console>
			<log-match>-c -i "schedule psch01 ppsk once 2012-10-27 09:00 to 2012-10-27 10:00"</log-match>
			<log-match>-c -i "user-group userGroup1"</log-match>
			<log-match>-c -i "schedule psch02 ppsk once 2012-10-27 09:00 to 2012-10-27 10:00"</log-match>
			<log-match>-c -i "user-group userGroup2"</log-match>
		</step>

		<step no="9">
			<desc>
				13. Reboot the AP.
			</desc>
			<console target="ap1">
				-v "reboot"
			</console>
		</step>

		<step no="10" delay="60">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step10_show_user.log</log-file>
			<console target="ap1">
				-v "clock date-time 2012-10-27 09:00:00"
				-v "show user"
			</console>
			<log-match>-c -i "userGroup10001 *auto" -i "Yes *userGroup1"</log-match>
			<log-match>-n -c -i "userGroup20001 *auto" -i "Yes *userGroup2"</log-match>
		</step>

		<step no="11">
			<desc>
				14. Check the running config. [result 5]
			</desc>
			<log-file>step11_show_run_config.log</log-file>
			<console target="ap1">
				-v "show running-config"
			</console>
			<log-match>-n -c -i "user-group userGroup1"</log-match>
			<log-match>-n -c -i "schedule psch01"</log-match>
			<log-match>-n -c -i "user-group userGroup2"</log-match>
			<log-match>-n -c -i "schedule psch02"</log-match>
		</step>

		<step no="12">
			<desc>
				15. Check the running config of users. [result 6]
			</desc>
			<log-file>step12_show_run_config_user.log</log-file>
			<console target="ap1">
				-v "show running-config user"
			</console>
			<log-match>-c -i "schedule psch01 ppsk once 2012-10-27 09:00 to 2012-10-27 10:00"</log-match>
			<log-match>-c -i "user-group userGroup1"</log-match>
			<log-match>-n -c -i "schedule psch02 ppsk once 2012-10-27 09:00 to 2012-10-27 10:00"</log-match>
			<log-match>-n -c -i "user-group userGroup2"</log-match>
		</step>
	</stage>
</testcase>