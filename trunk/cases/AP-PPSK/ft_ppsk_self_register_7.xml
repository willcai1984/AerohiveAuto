<?xml version="1.0" encoding="UTF-8"?>
<testcase>
    <brief>Several STAs do slef-reg at the same time</brief>
    <priority>High</priority>
    <automated>yes</automated>
    <description>
        topo:STA----AP1(PPSK SRV)---SW
		Pre-Condition:

			-config one AP as ppsk server
			-config the ppsk server with a ssid, config a same ssid with ppsk
			-config two AP with same ssid
			-config ppsk server with a webdir,login page,success page etc.
			-config a ssid with open+ecwp, redirect to ppsk server


		Test Procedure:

			-two STAs connected to open+ecwp ssid
			-open browser on both STAs, got the slef-reg page
			-submit the request on both STA, the ppsk server should return a valid ppsk and the ssid name
    </description>
    <numofap>1</numofap>
    <numofsta>3</numofsta>
    <tbtype>linux</tbtype>
    <property name="url" value="http://www.google.com.hk" />
	<property name="selenium_path" value="/root/selenium-server-standalone-2.42.2.jar" />
    <property name="" value=""/>
    <stage>
       <step no="sta1.1">
			<desc>
				start selenium server
			</desc>
			<ssh target="sta1">
				-v "export DISPLAY=:1"
				-v "nohup java -jar ${selenium_path} 1>logfile.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="sta1.2">
			<desc>
				start selenium server
			</desc>
			<ssh target="sta1">
				-v "printenv"
			</ssh>
		</step>
         <step no="sta2.1">
			<desc>
				start selenium server
			</desc>
			<ssh target="sta2">
				-v "export DISPLAY=:1"
				-v "nohup java -jar ${selenium_path} 1>logfile.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="sta2.2">
			<desc>
				start selenium server
			</desc>
			<ssh target="sta2">
				-v "printenv"
			</ssh>
		</step>
       <step no="0">
       		<desc>set static ip for ap1</desc>
       		<console target="ap1" timeout="10">	
       			-v "interface mgt0 ip ${ap1.forwards.ip} 255.255.255.0"
       			-v "no interface mgt0 dhcp client"
       			-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
       		</console>
       </step>
       <step no="1">
            <desc>-config  ap1 as ppsk server</desc>
            <ssh target="ap1">
            	<!--open + cwp ssid configuration-->
            	-v "interface mgt0 vlan 1"
            	-v "security-object ${ssid.name}_1"
				-v "security-object ${ssid.name}_1 security additional-auth-method captive-web-portal reg-user-profile-attr 4095" 
				-v "security-object ${ssid.name}_1 default-user-profile-attr 100"
				-v "security-object ${ssid.name}_1 security additional-auth-method captive-web-portal external-server primary login-page http://${ap1.forwards.ip}/ppsk/ppsk-auth/ppsk_index.cgi"
				-v "security-object ${ssid.name}_1 security additional-auth-method captive-web-portal default-language english"
				-v "security-object ${ssid.name}_1 walled-garden ip-address ${ap1.forwards.ip} service protocol 6 port 80"
				-v "security-object ${ssid.name}_1 walled-garden ip-address ${ap1.forwards.ip} service protocol 6 port 443"
				-v "security-object ${ssid.name}_1 web-server" 
				-v "web-directory ppsk-auth"
				-v "web-directory ppsk-self-reg ppsk-auth"
				
				<!--save web-page for cwp web-directory and ppsk web-directory-->
				-v "save web-page web-directory  ppsk-auth tftp://10.155.81.221:cwp/ppsk-auth.tar.gz"
				-v "save web-page ppsk-self-reg web-directory  ppsk-auth tftp://10.155.81.221:cwp/ppsk-auth.tar.gz"
				-v "security-object ${ssid.name}_1 web-directory ppsk-auth"
				-v "security-object ${ssid.name}_1 ppsk-web-server web-directory ppsk-auth"
				-v "security-object ${ssid.name}_1 ppsk-web-server bind-to-ppsk-ssid ${ssid.name}"
				-v "security-object ${ssid.name}_1 ppsk-web-server web-directory ppsk-auth"
				-v "security-object ${ssid.name}_1 ppsk-web-server login-page ppsk_index.cgi"
				
				<!--cwp type is authentication-->
				-v "security-object ${ssid.name}_1 ppsk-web-server auth-user"
				
				<!--ppsk ssid configuration-->
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} security protocol-suite wpa2-aes-psk ascii-key aerohive"
				-v "security-object ${ssid.name} security private-psk"
				-v "security-object ${ssid.name} security private-psk default-psk-disabled"
				-v "security-object ${ssid.name} security private-psk ppsk-server ${ap1.forwards.ip}"
				-v "security-object ${ssid.name} default-user-profile-attr 100"
				-v "ssid ${ssid.name}_1"  
				-v "ssid ${ssid.name}_1 security-object ${ssid.name}_1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				
				<!--set ap1 radius server-->
				-v "aaa ppsk-server radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				
				<!--don't forget to set upid for both ssid-->
				-v "user-profile auto_for_ppsk vlan-id 1 attribute 4095"
				-v "user-profile 100 vlan-id 1 attribute 100"
				
				<!--set ip-policy for open+cwp ssid-->
				-v "ip-policy auto_for_ppsk"
				-v "ip-policy auto_for_ppsk id 1 from 0.0.0.0 0.0.0.0 to ${ap1.forwards.ip} 255.255.255.255 service any action permit"
				-v "ip-policy auto_for_ppsk id 2 from 0.0.0.0 0.0.0.0 to 1.1.0.0 255.255.0.0 service any action permit"
				-v "ip-policy auto_for_ppsk id 3 from 1.1.0.0 255.255.0.0 to local-subnet service any action permit"
				-v "ip-policy auto_for_ppsk id 4 from ${ap1.forwards.ip} 255.255.255.255 to 0.0.0.0 0.0.0.0 service any action permit"
				-v "user-profile auto_for_ppsk security ip-policy from-access auto_for_ppsk to-access auto_for_ppsk"
            </ssh>
        </step>
         <step no="1.1">
            <desc>-config  user group on ap1</desc>
            <ssh target="ap1">
            	-v "user-group userGroup"
				-v "user-group userGroup password-generation-method manual"
				-v "user-profile ttt vlan-id 1 attribute 1"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "interface wifi0 radio channel 1"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}_1"
				-v "interface wifi1 ssid ${ssid.name}"
				-v "interface wifi1 ssid ${ssid.name} shutdown"
				-v "interface wifi1 ssid ${ssid.name}_1"
				-v "user userGroup0001"
				-v "user userGroup0001 password Aerohive123#"
				-v "user userGroup0002"
				-v "user userGroup0002 password Aerohive123!"
				-v "user userGroup0001 group userGroup"
				-v "user userGroup0002 group userGroup"
				-v "save config"
            </ssh>
        </step>
      
        <step no="3">
        	<desc>check users generate</desc>
        	<log-file>step3_show_user.log</log-file>
        	<ssh target="ap1">
        		-v "show user"
        	</ssh>
        	<log-match>-c -i "userGroup0001"</log-match>
        	<log-match>-c -i "userGroup0002"</log-match>
        </step>
        <step no="4">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}_1"
				echo "conn1.proto=open"
				echo "conn1.pif=wifi0"
			</multi-setvar>
		</step>
		<include prefix="sta1.5" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		<include prefix="sta2.5" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta2, ap1" />
        <step no="sta1.6">
            <desc>
				client request a web page and get login page,input correct
				username and password
			</desc>
			<log-file>ppsk_ft_pass_1_log_in.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/AerohiveGUI/scripts/cwp/cwp_login.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters visit.url=${url} login.is_ppsk=true login.is_result=false login.username=${pub.radius1.username} login.password=${pub.radius1.passwd} -t ff -l info -f ${log.dir}/${log.file}
			</script>
        </step>
         <step no="sta2.6">
            <desc>
				client request a web page and get login page,input correct
				username and password
			</desc>
			<log-file>ppsk_ft_pass_2_log_in.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/AerohiveGUI/scripts/cwp/cwp_login.py -r http://${sta2.mif.ip}:4444/wd/hub --parameters visit.url=${url} login.is_ppsk=true login.is_result=false login.username=${pub.radius1.username} login.password=${pub.radius1.passwd} -t ff -l info -f ${log.dir}/${log.file}
			</script>
        </step>
        <step no="sta1.7">
            <desc>
            	get the ppsk ssid name
            </desc>
            <setvar name="ppsk_ssid">
            	python ${bin.dir}/getbyrexp.py -p 'ppsk_ssid_is:"(.*)"' -f ${log.dir}/ppsk_ft_pass_1_log_in.html  -t str
            </setvar>
        </step>
          <step no="sta1.8">
            <desc>
            	get the ppsk ssid name
            </desc>
            <setvar name="ppsk_pwd.1">
            	python ${bin.dir}/getbyrexp.py -p 'password_is:"(.*)"' -f ${log.dir}/ppsk_ft_pass_1_log_in.html  -t str
            </setvar>
        </step>
        <step no="sta2.8">
            <desc>
            	get the ppsk ssid name
            </desc>
            <setvar name="ppsk_pwd.2">
            	python ${bin.dir}/getbyrexp.py -p 'password_is:"(.*)"' -f ${log.dir}/ppsk_ft_pass_2_log_in.html  -t str
            </setvar>
        </step>
        <step no="ex.sta1-mac">
			<setvar name="sta1.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -width 
			</setvar>
		</step>
		 <step no="ex.sta2-mac">
			<setvar name="sta2.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta2.mif.ip} -u ${sta2.user} -p ${sta2.passwd} -i ${sta2.tif.name} -m -width 
			</setvar>
		</step>
        <step no="9">
            <desc>check mac-binding table</desc>
            <log-file>step9_mac_binding_table.log</log-file>
            <ssh target="ap1">
            	-v "_test auth mac-bind show ${ppsk_ssid}"
            </ssh>
            <log-match> -c -i "${sta1.tif.mac}" -i "${ppsk_ssid}"</log-match>
             <log-match> -c -i "${sta2.tif.mac}" -i "${ppsk_ssid}"</log-match>
        </step>
	   <step no="sta1.10">
			<multi-setvar>
				echo "conn2.ssid=${ppsk_ssid}"
				echo "conn2.proto=wpa2-aes-psk"
				echo "conn2.psk.keytype=ascii"
				echo "conn2.psk=${ppsk_pwd.1}"
			</multi-setvar>
		</step>
		  <step no="sta2.10">
			<multi-setvar>
				echo "conn3.ssid=${ppsk_ssid}"
				echo "conn3.proto=wpa2-aes-psk"
				echo "conn3.psk.keytype=ascii"
				echo "conn3.psk=${ppsk_pwd.2}"
			</multi-setvar>
		</step>
	   <include prefix="sta1.10.1" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta1, ap1" />
	   <include prefix="sta2.10.1" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn3, sta2, ap1" />
	   <step no="11" type="loop-check" loop-max-times="6" loop-interval="10">
			<desc>
				-sh ssid xxx st
			</desc>
			<log-file>step11_show_station_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ppsk_ssid} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}"</log-match>
			<log-match>-c -i "${sta2.tif.mac} *${sta2.tif.ip}"</log-match>
	    </step>
		<step no="12">
			<desc>
				- sh roa ca
			</desc>
			<log-file>step12_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "100" -i "0\s+YNNN" -re</log-match>
			<log-match>-c -i "${sta2.tif.mac}" -p 5 -i "100" -i "0\s+YNNN" -re</log-match>
		</step>
		<step no="13">
			<desc>
				- show auth
			</desc>
			<log-file>step13_show_auth.log</log-file>
			<telnet target="ap1">
				-v "show auth"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA2/CCMP"</log-match>
			<log-match>-c -i "${sta2.tif.mac} *1" -i "WPA2/CCMP"</log-match>
		</step>
		<step no="14">
			<desc>
				- clear roa ca
			</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log b"
			</ssh>
		</step>
		<step no="ex.sta2-mac">
			<setvar name="sta3.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta3.mif.ip} -u ${sta3.user} -p ${sta3.passwd} -i ${sta3.tif.name} -m -width 
			</setvar>
		</step>
		<step no="15">
			<desc>transport a ssid profile to client</desc>
			<ssh target="sta3" timeout="10">
				-v "echo \"ctrl_interface=/var/run/wpa_supplicant\">/tmp/wpa_supplicant.cfg"
				-v "ifconfig ${sta2.tif.name} down"
			</ssh>
		</step>
		<step no="15.1">
			<desc>start the tif on client side</desc>
			<ssh target="sta3" timeout="10">
				-v "ifconfig ${sta2.tif.name} up"
			</ssh>
		</step>
		<step no="15.2" delay="5">
			<desc>start the wpa_supplicant on client side</desc>
			<ssh target="sta3" timeout="10">
				-v "killall wpa_supplicant"
				-v "wpa_supplicant -i ${sta2.tif.name} ${sta2.wpa_flag} -c /tmp/wpa_supplicant.cfg -B"
			</ssh>
		</step>
		<step no="15.3" delay="5">
            <desc>
            	config sta3
            </desc>
            <ssh target="sta3" prompt=">|.*#">
			-v "wpa_cli"
			-v "reconfig"
			-v "add_network"
			-v "set_network 0 ssid \"${ppsk_ssid}\""
			-v "set_network 0 key_mgmt WPA-PSK"
			-v "set_network 0 proto RSN"
			-v "set_network 0 psk \"${ppsk_pwd.1}\""
			-v "set_network 0 pairwise CCMP"
			-v "set_network 0 group CCMP"
			-v "set_network 0 priority 5"
			-v "select_network 0"
			-v "reas"
			-v "quit"
			</ssh>
        </step>
        <step no="16" delay="5">
        	<log-file>step21_show_log_buffer.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<log-match> -c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match> -c -i "get client monitor exception for psk"</log-match>
			<log-match> -c -i "no mac-binding found for sta(${sta3.tif.mac})"</log-match>
		</step>
    </stage>
</testcase>
