<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Apply a bulk ppsk group to two ssid</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-config a bulk ppsk
		-bind it to two ssid
		-check the key generation

		Test Procedure:
		-STA try to connect the two ssid with the ppsk in bulk group
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>winlin</tbtype>

	<property name="default.psk" value="aerohive" />

	<stage>
		<step no="1">
			<desc>
				-create a user-group
				-config the password-generation-method to auto
			</desc>
			<ssh target="ap1">
				-v "_debug auth info"
				-v "clear log all"
				-v "user-group userGroup"
				-v "user-group userGroup password-generation-method auto"
				-v "clock date-time 2012-10-27 10:00:00"
				-v "user-group userGroup start-time 2012-10-27/10:00:00"
				-v "user-group userGroup expired-time 2012-10-27/11:00:00"
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa2-tkip-psk ascii-key ${default.psk}"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "security-object ppsk security private-psk"
			</ssh>
		</step>

		<step no="1.1">
			<desc>
				-bind this user-group to a ssid
			</desc>
			<ssh target="ap1">
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "ssid ap1-${ssid.name}"
				-v "ssid ap1-${ssid.name} user-group userGroup"
				-v "ssid ap1-${ssid.name} max-client 32"
				-v "ssid ap1-${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ap1-${ssid.name}"
				-v "user-profile ttt vlan-id 1 attribute 1"
				-v "user-group userGroup auto-generation index-range 1 3"
				-v "user-group userGroup auto-generation bulk-number 2 bulk-interval 0 00:03"
			</ssh>
		</step>

		<step no="2" delay="15">
			<desc>
				-show logging buffered
			</desc>
			<log-file>step2_show_logging_buffered.log</log-file>
			<ssh target="ap1" timeout="500">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "generated for user (userGroup0001)"</log-match>
			<log-match>-c -i "generated for user (userGroup0002)"</log-match>
			<log-match>-c -i "generated for user (userGroup0003)"</log-match>
		</step>

		<step no="3" var-type="s1">
			<desc>Get the ppsk value</desc>
			<setvar name="ppsk.valid.value1" type="special">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2_show_logging_buffered.log -b "PPSK entry from SSID\(ap1-${ssid.name}\)" -p "password \((.*)\) generated for user \(userGroup0001\)" --script "m.group(1)" -s none -g-1
			</setvar>
		</step>

		<step no="3.1">
			<desc>
				show user
			</desc>
			<log-file>step3.1_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes *userGroup"</log-match>
		</step>

		<step no="3.2">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step3.2_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "PPSK-enabled=yes"</log-match>
			<log-match>-c -i "userGroup0001" -i "Yes"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes"</log-match>
		</step>

		<step no="pre.conn1.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn1.psk" type="special">
				echo ${ppsk.valid.value1}
			</setvar>
		</step>

		<property name="conn1.ssid" value="${ssid.name}" />
		<property name="conn1.proto" value="wpa2-tkip-psk" />

		<include prefix="5" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="pre.conn2.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn2.psk" type="special">
				echo ${ppsk.valid.value1}
			</setvar>
		</step>

		<property name="conn2.ssid" value="ap1-${ssid.name}" />
		<property name="conn2.proto" value="wpa2-tkip-psk" />

		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta2, ap1" />

		<step no="7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				- sh ssid xxx st
			</desc>
			<log-file>step7_show_station_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}"</log-match>
		</step>

		<step no="7.1">
			<desc>
				- sh ssid xxx st
			</desc>
			<log-file>step7.1_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ap1-${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta2.tif.mac} *${sta2.tif.ip}"</log-match>
		</step>

		<step no="7.2">
			<desc>
				- sh roa ca
			</desc>
			<log-file>step7.2_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
			<log-match>-c -i "${sta2.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="7.3">
			<desc>
				- show auth
			</desc>
			<log-file>step7.3_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA2/TKIP" -i "userGroup0001" -i "done"</log-match>
			<log-match>-c -i "${sta2.tif.mac} *1" -i "WPA2/TKIP" -i "userGroup0001" -i "done"</log-match>
		</step>
	</stage>
</testcase>