<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check the PSK-generation-method username-and-password works</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		All other group attributes are default

		Test Procedure:
		-create a user-group
		-config PSK-generation-method to username-and-password
		-config the password-generation-method to auto
		-generate some user accounts for the group by specifying the index
		range
		-check result 1
		-bind this group to ssid, wpa-tkip-PSK
		-bind this ssid to wifi0
		-check 2
		-Client connect to this AP, with PPSK username and password
		(concatenated directly )
		-check 4
		-client connect to this AP, with PPSK password only.
		-check result 5
		Configure a user group with user accounts manually configured then
		repeat the test. [result 6]
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>linux</tbtype>

	<stage>
		<step no="1">
			<desc>
				-create a user-group
				-config PSK-generation-method to username-and-password
				-config the password-generation-method to auto
			</desc>
			<ssh target="ap1">
				-v "user-group userGroup"
				-v "user-group userGroup password-generation-method auto"
				-v "user-group userGroup psk-generation-method username-and-password"
				-v "_debug auth info"
				-v "clear log all"
			</ssh>
		</step>

		<step no="2">
			<desc>
				-Config ap1
			</desc>
			<ssh target="ap1">
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key aerohive"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "security-object ppsk security private-psk"
			</ssh>
		</step>

		<step no="2.1">
			<desc>
				-generate some user accounts for the group by specifying the index range
				-bind this group to ssid
				-bind this ssid to wifi0
			</desc>
			<ssh target="ap1">
				-v "user-profile ttt vlan-id 1 attribute 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "user-group userGroup auto-generation index-range 1 3"
			</ssh>
		</step>

		<step no="2.2">
			<desc>show log buffer</desc>
			<log-file>step2.2_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show log b"
			</ssh>
		</step>

		<step no="2.2a">
			<desc>Get the ppsk value</desc>
			<setvar name="ppsk.auto.value" type="special">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2.2_show_logging_buffered.log -p "password \((.*)\) generated for user \(userGroup0001\)" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="2.3">
			<desc>
				show user
			</desc>
			<log-file>step2.3_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes *userGroup"</log-match>
		</step>

		<step no="2.4">
			<desc>
				show user-group
			</desc>
			<log-file>step2.4_show_user_group.log</log-file>
			<ssh target="ap1">
				-v "show user-group"
			</ssh>
			<log-match>-c -i "userGroup" -p 6 -i "AU"</log-match>
		</step>

		<step no="2.5">
			<desc>
				show run users
			</desc>
			<log-file>step2.5_show_run_user.log</log-file>
			<ssh target="ap1">
				-v "show run users"
			</ssh>
		</step>

		<step no="3">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step3_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "PPSK-enabled=yes"</log-match>
			<log-match>-c -i "userGroup0001" -i "Yes"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes"</log-match>
		</step>

		<include prefix="4" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<step no="5" var-type="s4">
			<desc>configure ssid property on sta1</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto WPA"
				-v "set_network 0 psk \"userGroup0001${ppsk.auto.value}\""
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="5.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if sta1 is associated successful</desc>
			<log-file>step5.1_wpa_stat_sta1_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-i "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="5.2">
			<desc>sta1 gets IP by DHCP</desc>
			<ssh target="sta1" slow="true">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="5.3">
			<desc>check if sta1 gets ip success</desc>
			<log-file>step5.3_ifconfig_sta1.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="5.4">
			<desc>get wireless IP from sta1</desc>
			<setvar name="sta1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="5.5">
			<desc>get mac of sta1</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -width
			</setvar>
		</step>

		<step no="6">
			<desc>
				-sh ssid xxx st
			</desc>
			<log-file>step6_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "1 *Yes *1"</log-match>
		</step>

		<step no="6.1">
			<desc>
				-sh roa ca
			</desc>
			<log-file>step6.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="6.2">
			<desc>
				-show auth
			</desc>
			<log-file>step6.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "userGroup0001" -p 7 -i "done"</log-match>
		</step>

		<include prefix="7" file="subs/wpa_supplicant_start.xml" args="sta2" />

		<step no="8" var-type="s4">
			<desc>configure ssid property on sta2</desc>
			<ssh target="sta2" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto WPA"
				-v "set_network 0 psk \"${ppsk.auto.value}\""
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="8.1" delay="15">
			<desc>check if sta2 is associated successful</desc>
			<log-file>step8.1_wpa_stat_sta1_${loop_check.idx}.log</log-file>
			<ssh target="sta2" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-n -c -i "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="8.2">
			<desc>get mac of sta2</desc>
			<setvar name="sta2.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta2.mif.ip} -u ${sta2.user} -p ${sta2.passwd} -i ${sta2.tif.name} -m -width
			</setvar>
		</step>

		<step no="9">
			<desc>show log buffer</desc>
			<log-file>step9_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show log b"
			</ssh>
			<no-error-check/>
		</step>

		<step no="9.1">
			<desc>
				-check logging result
			</desc>
			<log-file>step9_show_logging_buffered.log</log-file>
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta2.tif.mac} is disassociated from"</log-match>
		</step>

		<include prefix="10" file="subs/release_station_wifi.xml" obj-args="sta1" />

		<include prefix="11" file="subs/release_station_wifi.xml" obj-args="sta2" />

		<step no="12">
			<desc>
				-Configure a user group with user accounts manually configured
			</desc>
			<ssh target="ap1">
				-v "no user-group userGroup password-generation-method"
				-v "user ppskaccount"
				-v "user ppskaccount password ppskuser"
				-v "user ppskaccount group userGroup"
				-v "clear log all"
			</ssh>
		</step>

		<include prefix="13" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<step no="14">
			<desc>configure ssid property on sta1</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto WPA"
				-v "set_network 0 psk \"ppskaccountppskuser\""
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="14.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if sta1 is associated successful</desc>
			<log-file>step14.1_wpa_stat_sta1_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-i "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="14.2">
			<desc>sta1 gets IP by DHCP</desc>
			<ssh target="sta1" slow="true">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="14.3">
			<desc>check if sta1 gets ip success</desc>
			<log-file>step14.3_ifconfig_sta1.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="14.4">
			<desc>get wireless IP from sta1</desc>
			<setvar name="sta1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="15">
			<desc>
				-sh ssid xxx st
			</desc>
			<log-file>step15_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "1 *Yes *1"</log-match>
		</step>

		<step no="15.1">
			<desc>
				-sh roa ca
			</desc>
			<log-file>step15.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="15.2">
			<desc>
				-show auth
			</desc>
			<log-file>step15.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "ppskaccount" -p 7 -i "done"</log-match>
		</step>

		<include prefix="16" file="subs/wpa_supplicant_start.xml" args="sta2" />

		<step no="17">
			<desc>configure ssid property on sta2</desc>
			<ssh target="sta2" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto WPA"
				-v "set_network 0 psk \"ppskuser\""
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="17.1" delay="15">
			<desc>check if sta2 is associated successful</desc>
			<log-file>step17.1_wpa_stat_sta1_${loop_check.idx}.log</log-file>
			<ssh target="sta2" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-n -c -i "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="18">
			<desc>show log buffer</desc>
			<log-file>step18_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show log b"
			</ssh>
			<no-error-check/>
		</step>

		<step no="18.1">
			<desc>
				-check logging result
			</desc>
			<log-file>step18_show_logging_buffered.log</log-file>
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta2.tif.mac} is disassociated from"</log-match>
		</step>
	</stage>
</testcase>