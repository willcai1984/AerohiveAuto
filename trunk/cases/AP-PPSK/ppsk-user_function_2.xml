<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that undo a revoke operation create an account.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Configure and bind a PPSK SSID.
		Configure a user group, password auto generated, without setting the time
		range.
		Set the user group to the PPSK SSID.

		Test Procedure:
		1. Config a user group: password auto generated
		2. Generate some user accounts for the user group
		3. 'revoke' one of the generated user accounts
		4. Undo the revoking operation.
		#no user-group ug auto-generation revoke-user 4
		5. Check the user account. [result 1]
		6. Try to connect to the PPSK SSID using the user account. [result 2]
		7. Try to 'undo' revocation of an auto generation user account by index
		which is not previously configured. [result 3]
		8. Check the user account. [result 4]
		9. Try to connect to the PPSK SSID using the user account. [result 5]
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="1">
			<desc>
				-Configure and bind a PPSK SSID.
				-Configure a user group, password auto generated, without setting the time range.
				-Set the user group to the PPSK SSID.
			</desc>
			<ssh target="ap1">
				-v "_debug auth info"
				-v "clear log all"
				-v "user-group userGroup"
				-v "user-group userGroup password-generation-method auto"
				-v "no user-group userGroup psk-format character-pattern special-characters"
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key aerohive"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "security-object ppsk security private-psk"
				-v "user-profile ttt vlan-id 1 attribute 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "user-group userGroup auto-generation index-range 1 3"
			</ssh>
		</step>

		<step no="2">
			<desc>show log buffer</desc>
			<log-file>step2_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show log b"
			</ssh>
		</step>

		<step no="3">
			<desc>Get the ppsk value</desc>
			<setvar name="ppsk.valid.value">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2_show_logging_buffered.log -p "password \((.*)\) generated for user \(userGroup0001\)" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="3.1">
			<desc>Get the ppsk value</desc>
			<setvar name="ppsk.revoke.value">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2_show_logging_buffered.log -p "password \((.*)\) generated for user \(userGroup0003\)" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="4">
			<desc>
				show user
			</desc>
			<log-file>step4_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes *userGroup"</log-match>
		</step>

		<step no="5">
			<desc>
				3. 'revoke' one of the generated user accounts
				#user-group ug auto-generation revoke-user 4
			</desc>
			<ssh target="ap1">
				-v "user-group userGroup auto-generation revoke-user 3"
			</ssh>
		</step>

		<step no="5.1">
			<desc>
				show user
			</desc>
			<log-file>step5.1_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0003" -i "No *userGroup"</log-match>
		</step>

		<step no="6">
			<desc>
				3. undo 'revoke' one of the generated user accounts
				#no user-group ug auto-generation revoke-user 4
			</desc>
			<ssh target="ap1">
				-v "no user-group userGroup auto-generation revoke-user 3"
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				show user
			</desc>
			<log-file>step6.1_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes *userGroup"</log-match>
		</step>

		<step no="pre.conn1.psk">
			<desc>set value of psk</desc>
			<setvar name="conn1.psk">
				echo "${ppsk.revoke.value}"
			</setvar>
		</step>

		<property name="conn1.ssid" value="${ssid.name}" />
		<property name="conn1.proto" value="wpa-tkip-psk" />

		<include prefix="7" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="8">
			<desc>
				3. undo 'revoke' one of the generated user accounts
				#no user-group ug auto-generation revoke-user 4
			</desc>
			<ssh target="ap1">
				-v "no user-group userGroup auto-generation revoke-user 1"
			</ssh>
		</step>

		<step no="8.1">
			<desc>
				show user
			</desc>
			<log-file>step8.1_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes *userGroup"</log-match>
		</step>

		<step no="pre.conn2.psk">
			<desc>set value of psk</desc>
			<setvar name="conn2.psk">
				echo "${ppsk.valid.value}"
			</setvar>
		</step>

		<property name="conn2.ssid" value="${ssid.name}" />
		<property name="conn2.proto" value="wpa-tkip-psk" />

		<include prefix="9" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta2, ap1" />

		<step no="10">
			<desc>
				- sh ssid xxx st
			</desc>
			<log-file>step10_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}"</log-match>
			<log-match>-c -i "${sta2.tif.mac} *${sta2.tif.ip}"</log-match>
		</step>

		<step no="10.1">
			<desc>
				- sh roa ca
			</desc>
			<log-file>step10.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
			<log-match>-c -i "${sta2.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="11">
			<desc>
				- show auth
			</desc>
			<log-file>step11_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta2.tif.mac} *1" -i "WPA/TKIP" -i "userGroup0001" -p 7 -i "done"</log-match>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "userGroup0003" -p 7 -i "done"</log-match>
		</step>
	</stage>
</testcase>