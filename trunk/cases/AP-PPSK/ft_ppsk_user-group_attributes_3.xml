<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check the user-attribute works</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-config PSK-generation-method to username-and-password
		-config the password-generation-method to auto

		Test Procedure:
		-config the user-attribute to 100
		-config a user-profile , with attribute 100, and a valid vlan-id 30
		-config a different attribute id with ssid default-attribute 1, with vlan-id 80
		-bind the group to ssid
		-bind the ssid to wifi0
		-check result 1, 2
		-client connect to AP using PPSK
		-check 3
		-client connect to AP using default PSK
		-check result 4
		-check result 5
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.proto" value="wpa-tkip-psk" />
	<property name="conn1.psk" value="aerohive" />

	<stage>
		<step no="0">
			<desc>
				-Config ap1's vlan and native-vlan
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "_debug auth info"
				-v "clear log all"
			</console>
		</step>

		<step no="0.1">
			<desc>
				close dhcp client
			</desc>
			<console target="ap1">
				-v "no interface mgt0 dhcp client"
			</console>
		</step>

		<step no="0.2">
			<desc>
				open dhcp client
			</desc>
			<console target="ap1">
				-v "interface mgt0 dhcp client"
			</console>
		</step>

		<step no="0.3">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.3_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.4">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.3_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="1">
			<desc>
				-config PSK-generation-method to username-and-password
				-config the password-generation-method to auto
				-config the user-attribute to 100
				-open debug mode and clear log all
			</desc>
			<ssh target="ap1">
				-v "user-group userGroup"
				-v "user-group userGroup password-generation-method auto"
				-v "user-group userGroup psk-generation-method username-and-password"
				-v "user-group userGroup user-attribute 100"
			</ssh>
		</step>

		<step no="2">
			<desc>
				-Config security-object parameters
			</desc>
			<ssh target="ap1">
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key aerohive"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "security-object ppsk security private-psk"
			</ssh>
		</step>

		<step no="2.1">
			<desc>
				-config a user-profile , with attribute 100, and a valid vlan-id 30
				-config a different attribute id with ssid default-attribute 1, with vlan-id 80
				-bind the group to ssid
				-bind the ssid to wifi0
			</desc>
			<ssh target="ap1">
				-v "user-profile ttt vlan-id ${tb.vlan2} attribute 1"
				-v "user-profile sss vlan-id ${tb.vlan1} attribute 100"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "no user-group userGroup psk-format character-pattern special-characters"
				-v "user-group userGroup auto-generation index-range 1 3"
			</ssh>
		</step>

		<step no="2.2">
			<desc>show log buffer</desc>
			<log-file>step2.2_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show log b"
			</ssh>
			<no-error-check/>
		</step>
		<step no="2.2a">
			<desc>Get the ppsk value</desc>
			<setvar name="ppsk.auto.value">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2.2_show_logging_buffered.log -p "password \((.*)\) generated for user \(userGroup0001\)" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="2.3">
			<desc>
				show user
			</desc>
			<log-file>step2.3_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes *userGroup"</log-match>
		</step>

		<step no="2.4">
			<desc>
				show user-group
			</desc>
			<log-file>step2.4_show_user_group.log</log-file>
			<ssh target="ap1">
				-v "show user-group"
			</ssh>
			<log-match>-c -i "userGroup *100" -p 6 -i "AU"</log-match>
		</step>

		<step no="3">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step3_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes"</log-match>
		</step>

		<step no="3.1">
			<desc>
				show ap1's interface wifi0.1 info
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi0.1"
			</ssh>
		</step>

		<step no="3.2">
			<desc>
				get ap1's wifi0's mac address
			</desc>
			<setvar name="ap1.wifi0.1.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i wifi0.1 -o aero -m -width
			</setvar>
		</step>

		<include prefix="4" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<step no="5">
			<desc>configure ssid property on sta1</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto WPA"
				-v "set_network 0 psk \"userGroup0001${ppsk.auto.value}\""
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="5.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if sta1 is associated successful</desc>
			<log-file>step5.1_wpa_stat_sta1_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-i "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="5.2">
			<desc>sta1 gets IP by DHCP</desc>
			<ssh target="sta1" slow="true">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="5.3">
			<desc>check if sta1 gets ip success</desc>
			<log-file>step5.3_ifconfig_sta1.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="5.4">
			<desc>get wireless IP from sta1</desc>
			<setvar name="sta1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="5.5">
			<desc>get mac of sta1</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -width
			</setvar>
		</step>

		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta2, ap1" />

		<step no="7">
			<desc>
				-check the logging result
			</desc>
			<log-file>step7_show_logging_buffered.log</log-file>
			<ssh target="ap1" timeout="200">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "Station ${sta1.tif.mac} is authenticated to ${ap1.wifi0.1.mac} thru SSID ${ssid.name}"</log-match>
			<log-match>-c -i "STA(${sta1.tif.mac}) login to SSID(wifi0.1) by user_name=userGroup0001"</log-match>
			<log-match>-c -i "Station ${sta2.tif.mac} is authenticated to ${ap1.wifi0.1.mac} thru SSID ${ssid.name}"</log-match>
			<log-match>-c -i "STA(${sta2.tif.mac}) login to SSID(wifi0.1) by user_name="</log-match>
		</step>

		<step no="8">
			<desc>
				-check the attributes got is correct, the same as default ssid,sh ssid xxx st
			</desc>
			<log-file>step8_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${tb.vlan1} *Yes *100"</log-match>
			<log-match>-c -i "${sta2.tif.mac} *${sta2.tif.ip}" -i "${tb.vlan2} *Yes *1"</log-match>
		</step>

		<step no="8.1">
			<desc>
				- sh roa ca
			</desc>
			<log-file>step8.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "100" -i "YNNN"</log-match>
			<log-match>-c -i "${sta2.tif.mac}" -p 5 -i "1" -i "YNNN"</log-match>
		</step>

		<step no="8.2">
			<desc>
				- show auth
			</desc>
			<log-file>step8.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta2.tif.mac} *1" -i "WPA/TKIP"</log-match>
			<log-match>-c -i "${sta1.tif.mac} *100" -i "WPA/TKIP" -i "userGroup0001"</log-match>
		</step>

		<include prefix="9" file="subs/sta_ping.xml" args="sta1, ${tb.vlan1.gw}, 5" />

		<include prefix="10" file="subs/sta_ping.xml" args="sta2, ${tb.vlan2.gw}, 5" />
	</stage>
</testcase>