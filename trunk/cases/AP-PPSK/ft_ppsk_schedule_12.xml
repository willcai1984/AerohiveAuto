<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify the function of a recurrent schedule with only start date specified.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Change the system time zone to a non-default one, no DST setting.
		Configure and bind a PPSK SSID.
		Configure a user group, password auto generated, without setting the time range.
		Set the user group to the PPSK SSID.

		Test Procedure:
		1. Configure a PPSK schedule:
		Recurrent, without specifying time zone,
		One time range only, specify a start date later than the current date Without specifying the end date
		2. Set the PPSK schedule to the user group
		3. Generate some user accounts by specifying the index range.
		4. Check the validity of the accounts before the start date, before, during and after the specified time range. [result 1]
		5. Try to connect to the PPSK SSID before the date using the generated user accounts, before, during and after the specified time range. [result 2]
		6. Check the validity of the accounts at the start date, before, during and after the specified time range. [result 3]
		7. Try to connect to the PPSK SSID before, during and after the specified time
		range. [result 4]
		8. Check the validity of the accounts after the start date, before, during and after the specified time range. [result 5]
		9. Try to connect to the PPSK SSID before, during and after the specified time range. [result 6]
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>winlin</tbtype>

	<property name="default.psk" value="aerohive" />

	<stage>
		<step no="0">
			<desc>
				-Config ap1's vlan and native-vlan
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="0.1" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.1_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.2">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.1_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="0.3">
			<desc>
				show ap1's interface wifi0 info
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi0"
			</ssh>
		</step>

		<step no="0.4">
			<desc>
				get ap1's wifi0's mac address
			</desc>
			<setvar name="ap1.wifi0.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i wifi0 -o aero -m -width
			</setvar>
		</step>

		<step no="1">
			<desc>
				Configure a user groups, password auto generated, without setting the time range.
			</desc>
			<ssh target="ap1">
				-v "_debug auth info"
				-v "clear log all"
				-v "user-group userGroup1"
				-v "user-group userGroup1 password-generation-method auto"
			</ssh>
		</step>

		<step no="1.1">
			<desc>
				-Configure and bind a PPSK SSID.
				-Set the user groups to the PPSK SSID.
				-Change the system time zone to a non-default one, no DST setting.
			</desc>
			<ssh target="ap1">
				-v "clock time-zone 1"
				-v "no clock time-zone daylight-saving-time"
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key ${default.psk}"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "security-object ppsk security private-psk"
				-v "user-profile ttt vlan-id ${tb.vlan1} attribute 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup1"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "clock date-time 2012-10-27 10:00:00"
				-v "schedule psch01 ppsk recurrent date-range 2012-10-28 time-range 10:06 to 10:14"
				-v "user-group userGroup1 auto-generation schedule psch01"
				-v "user-group userGroup1 auto-generation index-range 1"
			</ssh>
		</step>

		<step no="1.2" delay="5">
			<desc>
				show user-group
			</desc>
			<log-file>step1.2_show_user_group.log</log-file>
			<ssh target="ap1">
				-v "show user-group"
			</ssh>
			<log-match>-c -i "userGroup1" -p 6 -i "AP" -i "2012-10-28 *10:06:00 *2012-10-28 *10:14:00" -p 14 -i "psch01"</log-match>
		</step>

		<step no="2">
			<desc>show log buffer</desc>
			<log-file>step2_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show log b"
			</ssh>
		</step>

		<step no="3">
			<desc>
				check logging result
			</desc>
			<log-file>step2_show_logging_buffered.log</log-file>
			<log-match>-c -i "generated *for *user *(userGroup10001)"</log-match>
		</step>

		<step no="3.a">
			<desc>Get the ppsk value</desc>
			<setvar name="ppsk.auto.value" type="special">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2_show_logging_buffered.log -p "password \((.*)\) generated for user \(userGroup10001\)" --script "m.group(1)" -s none -g0
			</setvar>
		</step>

		<step no="3.1">
			<desc>
				show user
			</desc>
			<log-file>step3.1_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No *userGroup"</log-match>
		</step>

		<step no="3.2">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step3.2_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No"</log-match>
		</step>

		<step no="pre.conn1.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn1.psk" type="special">
				echo ${ppsk.auto.value}
			</setvar>
		</step>

		<property name="conn1.ssid" value="${ssid.name}" />
		<property name="conn1.proto" value="wpa-tkip-psk" />
		<property name="conn1.auth_negative_test" value="true" />
		<property name="conn1.dhcp_negative_test" value="true" />

		<include prefix="4" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
		<step no="5" delay="37">
			<desc>
				show logging buffered
			</desc>
			<log-file>step5_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta1.tif.mac} is disassociated from"</log-match>
		</step>

		<step no="5.2">
			<desc>
				-set clock time
			</desc>
			<ssh target="ap1">
				-v "clear log all"
				-v "clock date-time 2012-10-27 10:06:00"
			</ssh>
		</step>

		<step no="5.3" delay="5">
			<desc>
				show user
			</desc>
			<log-file>step5.3_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No *userGroup"</log-match>
		</step>

		<step no="5.4">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step5.4_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No"</log-match>
		</step>

		<step no="pre.conn2.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn2.psk" type="special">
				echo ${ppsk.auto.value}
			</setvar>
		</step>

		<property name="conn2.ssid" value="${ssid.name}" />
		<property name="conn2.proto" value="wpa-tkip-psk" />
		<property name="conn2.auth_negative_test" value="true" />
		<property name="conn2.dhcp_negative_test" value="true" />

		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta1, ap1" />

		<include prefix="7" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step7_show_logging_buffered.log" />

		<step no="7.1">
			<desc>
				-check logging result
			</desc>
			<log-file>step7_show_logging_buffered.log</log-file>
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta1.tif.mac} is disassociated from"</log-match>
		</step>

		<step no="7.2">
			<desc>
				-set clock time
			</desc>
			<ssh target="ap1">
				-v "clear log all"
				-v "clock date-time 2012-10-27 10:14:00"
			</ssh>
		</step>

		<step no="7.3" delay="5">
			<desc>
				show user
			</desc>
			<log-file>step7.3_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No *userGroup"</log-match>
		</step>

		<step no="7.4">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step7.4_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No"</log-match>
		</step>

		<step no="pre.conn3.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn3.psk" type="special">
				echo ${ppsk.auto.value}
			</setvar>
		</step>

		<property name="conn3.ssid" value="${ssid.name}" />
		<property name="conn3.proto" value="wpa-tkip-psk" />
		<property name="conn3.auth_negative_test" value="true" />
		<property name="conn3.dhcp_negative_test" value="true" />

		<include prefix="8" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn3, sta1, ap1" />

		<include prefix="9" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step9_show_logging_buffered.log" />

		<step no="9.1">
			<desc>
				-check logging result
			</desc>
			<log-file>step9_show_logging_buffered.log</log-file>
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta1.tif.mac} is disassociated from"</log-match>
		</step>

		<step no="9.1">
			<desc>
				-set clock time
			</desc>
			<ssh target="ap1">
				-v "clock date-time 2012-10-28 10:00:00"
			</ssh>
		</step>

		<step no="9.2" delay="5">
			<desc>
				show user
			</desc>
			<log-file>step9.2_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No *userGroup"</log-match>
		</step>

		<step no="9.3">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step9.3_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No"</log-match>
		</step>

		<step no="pre.conn4.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn4.psk" type="special">
				echo ${ppsk.auto.value}
			</setvar>
		</step>

		<property name="conn4.ssid" value="${ssid.name}" />
		<property name="conn4.proto" value="wpa-tkip-psk" />
		<property name="conn4.auth_negative_test" value="true" />
		<property name="conn4.dhcp_negative_test" value="true" />

		<include prefix="10" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn4, sta1, ap1" />

		<include prefix="11" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step11_show_logging_buffered.log" />

		<step no="11.1">
			<desc>
				-check logging result
			</desc>
			<log-file>step11_show_logging_buffered.log</log-file>
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta1.tif.mac} is disassociated from"</log-match>
		</step>

		<step no="11.2" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show user
			</desc>
			<log-file>step11.2_show_user_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "Yes *userGroup1"</log-match>
		</step>

		<step no="11.3">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step11.3_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "Yes"</log-match>
		</step>

		<step no="pre.conn5.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn5.psk" type="special">
				echo ${ppsk.auto.value}
			</setvar>
		</step>

		<property name="conn5.ssid" value="${ssid.name}" />
		<property name="conn5.proto" value="wpa-tkip-psk" />

		<include prefix="12" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn5, sta1, ap1" />

		<step no="13" delay="5">
			<desc>
				show station on ap1
			</desc>
			<log-file>step13_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="13.1">
			<desc>
				- sh roa ca
			</desc>
			<log-file>step13.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="13.2">
			<desc>
				- show auth
			</desc>
			<log-file>step13.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "userGroup10001" -p 7 -i "done"</log-match>
		</step>

		<step no="13.3">
			<desc>
				- clear log all
			</desc>
			<ssh target="ap1">
				-v "clear log all"
			</ssh>
		</step>

		<step no="13.4" delay="10" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show user
			</desc>
			<log-file>step13.4_show_user_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No *userGroup1"</log-match>
		</step>

		<step no="13.5">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step13.5_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No"</log-match>
		</step>

		<include prefix="14" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step14_show_logging_buffered.log" />

		<step no="14.1">
			<desc>
				- check logging result
			</desc>
			<log-file>step14_show_logging_buffered.log</log-file>
			<log-match>-c -i "Try to disassoc ${sta1.tif.mac} from ${ap1.wifi0.mac}(wifi0.1) for ssid ${ssid.name}"</log-match>
		</step>

		<include prefix="15" file="subs/release_station_wifi.xml" obj-args="sta1" />

		<step no="16" delay="2">
			<desc>
				-set clock time
			</desc>
			<ssh target="ap1">
				-v "clock date-time 2012-10-29 10:00:00"
			</ssh>
		</step>

		<step no="17" delay="5">
			<desc>
				check logging result
			</desc>
			<log-file>step17_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "generated *for *user *(userGroup10001)"</log-match>
		</step>

		<step no="17.a">
			<desc>Get the ppsk value</desc>
			<setvar name="ppsk.auto.value1" type="special">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step17_show_logging_buffered.log -p "password \((.*)\) generated for user \(userGroup10001\)" --script "m.group(1)" -s none -g0
			</setvar>
		</step>

		<step no="17.b">
			<desc>
				show user
			</desc>
			<log-file>step17.b_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No *userGroup"</log-match>
		</step>

		<step no="17.c">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step17.c_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No"</log-match>
		</step>

		<step no="pre.conn6.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn6.psk" type="special">
				echo ${ppsk.auto.value1}
			</setvar>
		</step>

		<property name="conn6.ssid" value="${ssid.name}" />
		<property name="conn6.proto" value="wpa-tkip-psk" />
		<property name="conn6.auth_negative_test" value="true" />
		<property name="conn6.dhcp_negative_test" value="true" />

		<include prefix="18" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn6, sta1, ap1" />

		<include prefix="19" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step19_show_logging_buffered.log" />

		<step no="19.a">
			<desc>
				-check logging result
			</desc>
			<log-file>step19_show_logging_buffered.log</log-file>
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta1.tif.mac} is disassociated from"</log-match>
		</step>

		<step no="20" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show user
			</desc>
			<log-file>step20_show_user_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "Yes *userGroup1"</log-match>
		</step>

		<step no="20.1">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step20.1_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "Yes"</log-match>
		</step>

		<step no="pre.conn7.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn7.psk" type="special">
				echo ${ppsk.auto.value1}
			</setvar>
		</step>

		<property name="conn7.ssid" value="${ssid.name}" />
		<property name="conn7.proto" value="wpa-tkip-psk" />

		<include prefix="21" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn7, sta1, ap1" />

		<step no="22" delay="5">
			<desc>
				show station on ap1
			</desc>
			<log-file>step22_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="22.1">
			<desc>
				- sh roa ca
			</desc>
			<log-file>step22.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="22.2">
			<desc>
				- show auth
			</desc>
			<log-file>step22.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "userGroup10001" -p 7 -i "done"</log-match>
		</step>

		<step no="22.3">
			<desc>
				- clear log all
			</desc>
			<ssh target="ap1">
				-v "clear log all"
			</ssh>
		</step>

		<step no="23" delay="10" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show user
			</desc>
			<log-file>step23_show_user_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No *userGroup1"</log-match>
		</step>

		<step no="23.1">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step23.1_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "userGroup10001" -i "No"</log-match>
		</step>

		<include prefix="24" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step24_show_logging_buffered.log" />

		<step no="24.1">
			<desc>
				- check logging result
			</desc>
			<log-file>step24_show_logging_buffered.log</log-file>
			<log-match>-c -i "Try to disassoc ${sta1.tif.mac} from ${ap1.wifi0.mac}(wifi0.1) for ssid ${ssid.name}"</log-match>
		</step>
	</stage>
</testcase>