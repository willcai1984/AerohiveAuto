<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that the default PSK works well at the same time with the PPSK.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Configure a user-group and configure some user accounts for it.

		Test Procedure:
		1. configure a PPSK SSID, leaving the default PSK enabled, then set the user-group to it
		2. try to connect to AP with default PSK and PPSK at the same time. [result 1]
		3. disable default PSK
		4. try to connect to AP with default PSK and PPSK at the same time. [result 2]
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>winlin</tbtype>

	<property name="default.psk" value="aerohive" />
	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.proto" value="wpa-tkip-psk" />
	<property name="conn1.psk" value="ppskuser" />
	<property name="conn2.ssid" value="${ssid.name}" />
	<property name="conn2.proto" value="wpa-tkip-psk" />
	<property name="conn2.psk" value="${default.psk}" />
	<property name="conn3.ssid" value="${ssid.name}" />
	<property name="conn3.proto" value="wpa-tkip-psk" />
	<property name="conn3.psk" value="${default.psk}" />
	<property name="conn3.auth_negative_test" value="true" />
	<property name="conn3.dhcp_negative_test" value="true" />

	<stage>
		<step no="0">
			<desc>
				-Config ap1
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="0.1" delay="30">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.1_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.2">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.1_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="1">
			<desc>
				-create a user-group
				-create a user
				-create a password of user
				-bind the user to this group
			</desc>
			<ssh target="ap1">
				-v "user-group userGroup"
				-v "user ppsk_user"
				-v "user ppsk_user password ppskuser"
				-v "user ppsk_user group userGroup"
			</ssh>
		</step>

		<step no="2">
			<desc>
				-Config ap1
			</desc>
			<ssh target="ap1">
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key ${default.psk}"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "security-object ppsk security private-psk"
			</ssh>
		</step>

		<step no="2.1">
			<desc>
				-Config ap1
			</desc>
			<ssh target="ap1">
				-v "user-profile ttt vlan-id ${tb.vlan1} attribute 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
			</ssh>
		</step>

		<step no="2.2">
			<desc>
				show ap1's interface wifi0.1 info
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi0.1"
			</ssh>
		</step>

		<step no="2.3">
			<desc>
				get ap1's wifi0's mac address
			</desc>
			<setvar name="ap1.wifi0.1.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i wifi0.1 -o aero -m -width
			</setvar>
		</step>

		<step no="3">
			<desc>
				-show running-config
			</desc>
			<log-file>step3_show_running_config.log</log-file>
			<ssh target="ap1">
				-v "show running-config"
			</ssh>
			<log-match>-n -c -i "security-object ppsk security private-psk default-psk-disabled"</log-match>
		</step>

		<step no="3.1">
			<desc>
				-open debug mode and clear log all
			</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log all"
			</ssh>
		</step>

		<include prefix="4" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<include prefix="5" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta2, ap1" />

		<step no="6">
			<desc>
				-show logging buffered
			</desc>
			<log-file>step6_show_logging_buffered.log</log-file>
			<ssh target="ap1" timeout="500">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "STA(${sta1.tif.mac}) login to SSID(wifi0.1) by user_name=ppsk_user"</log-match>
			<log-match>-c -i "Station ${sta1.tif.mac} is authenticated to ${ap1.wifi0.1.mac} thru SSID ${ssid.name}"</log-match>
			<log-match>-c -i "STA(${sta2.tif.mac}) login to SSID(wifi0.1) by user_name="</log-match>
			<log-match>-c -i "Station ${sta2.tif.mac} is authenticated to ${ap1.wifi0.1.mac} thru SSID ${ssid.name}"</log-match>
		</step>

		<step no="7">
			<desc>
				- sh ssid xxx st
			</desc>
			<log-file>step7_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}"</log-match>
			<log-match>-c -i "${sta2.tif.mac} *${sta2.tif.ip}"</log-match>
		</step>

		<step no="7.1">
			<desc>
				- sh roa ca
			</desc>
			<log-file>step7.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
			<log-match>-c -i "${sta2.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="7.2">
			<desc>
				- show auth
			</desc>
			<log-file>step7.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "ppsk_user" -p 7 -i "done"</log-match>
			<log-match>-c -i "${sta2.tif.mac} *1" -i "WPA/TKIP" -p 7 -i "done"</log-match>
		</step>

		<include prefix="8" file="subs/release_station_wifi.xml" obj-args="sta1" />

		<include prefix="9" file="subs/release_station_wifi.xml" obj-args="sta2" />

		<step no="10">
			<desc>
				-disable default PSK
			</desc>
			<console target="ap1">
				-v "security-object ppsk security private-psk default-psk-disabled"
				-v "clear log all"
			</console>
		</step>

		<step no="10.1" delay="3">
			<desc>
				-show running-config
			</desc>
			<log-file>step10.1_show_running_config.log</log-file>
			<ssh target="ap1">
				-v "show running-config"
			</ssh>
			<log-match>-c -i "security-object ppsk security private-psk default-psk-disabled"</log-match>
		</step>

		<include prefix="11" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<include prefix="12" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn3, sta2, ap1" />

		<step no="13">
			<desc>
				-show logging buffered
			</desc>
			<log-file>step13_show_logging_buffered.log</log-file>
			<ssh target="ap1" timeout="500">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "STA(${sta1.tif.mac}) login to SSID(wifi0.1) by user_name=ppsk_user"</log-match>
			<log-match>-c -i "Station ${sta1.tif.mac} is authenticated to ${ap1.wifi0.1.mac} thru SSID ${ssid.name}"</log-match>
			<log-match>-c -i "sta ${sta2.tif.mac} is disassociated from ${ap1.wifi0.1.mac}(wifi0.1) in driver"</log-match>
			<log-match>-c -i "STA(${sta2.tif.mac}) at ${ap1.wifi0.1.mac}(wifi0.1, ${ssid.name}) EAPOL-Key timeout"</log-match>
		</step>

		<step no="14">
			<desc>
				- sh ssid xxx st
			</desc>
			<log-file>step14_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac} *${sta2.tif.ip}"</log-match>
		</step>

		<step no="14.1">
			<desc>
				- sh roa ca
			</desc>
			<log-file>step14.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "YNNN"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac}" -p 5 -i "1" -i "YNNN"</log-match>
		</step>

		<step no="14.2">
			<desc>
				- show auth
			</desc>
			<log-file>step14.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "ppsk_user" -p 7 -i "done"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac} *1" -i "WPA/TKIP" -p 7 -i "done"</log-match>
		</step>
	</stage>
</testcase>