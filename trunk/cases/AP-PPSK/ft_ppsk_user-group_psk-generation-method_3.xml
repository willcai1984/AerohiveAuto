<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check the PSK-generation-method concatenated-characters works</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		All other group attributes are default

		Test Procedure:
		-create a user-group, accounts auto generation
		-generate some user accounts for the group
		-config PSK-generation-method to username-and-password
		-config concatenated-characters to ***
		-check result 1
		-bind this group to ssid, wpa-tkip-PSK
		-bind this ssid to wifi0
		-check 2
		- try to connect to this AP, with PPSK username and password concatenated with *** [result 3]
		-try to connect to the SSID, using only password or user name or user name plus password without *** or password plus *** plus username [result 4]
		-Configure a user group with user accounts auto generation then repeat the test. [result 4]
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>winlin</tbtype>

	<property name="conn3.ssid" value="${ssid.name}" />
	<property name="conn3.proto" value="wpa-tkip-psk" />
	<property name="conn3.psk" value="ppskaccount&amp;ppskuser" />
	<property name="conn4.ssid" value="${ssid.name}" />
	<property name="conn4.proto" value="wpa-tkip-psk" />
	<property name="conn4.psk" value="ppskaccountppskuser" />
	<property name="conn4.auth_negative_test" value="true" />
	<property name="conn4.dhcp_negative_test" value="true" />

	<stage>
		<step no="1">
			<desc>
				-create a user-group
				-config PSK-generation-method to username-and-password
				-config concatenated-characters to ***
				-config the password-generation-method to auto
			</desc>
			<ssh target="ap1">
				-v "user-group userGroup"
				-v "user-group userGroup password-generation-method auto"
				-v "user-group userGroup psk-generation-method username-and-password"
				-v "user-group userGroup psk-generation-method username-and-password concatenated-characters &amp;"
				-v "_debug auth info"
				-v "clear log all"
			</ssh>
		</step>

		<step no="1.1">
			<desc>
				show ap1's interface wifi0.1 info
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi0.1"
			</ssh>
		</step>

		<step no="1.2">
			<desc>
				get ap1's wifi0.1's mac address
			</desc>
			<setvar name="ap1.wifi0.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i wifi0.1 -o aero -m -width
			</setvar>
		</step>

		<step no="2">
			<desc>
				-Config ap1
			</desc>
			<ssh target="ap1">
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key aerohive"
				-v "security-object ppsk default-user-profile-attr 1"
				-v "security-object ppsk security private-psk"
			</ssh>
		</step>

		<step no="2.1">
			<desc>
				-generate some user accounts for the group by specifying the index range
				-bind this group to ssid
				-bind this ssid to wifi0
			</desc>
			<ssh target="ap1">
				-v "user-profile ttt vlan-id 1 attribute 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "user-group userGroup auto-generation index-range 1 3"
			</ssh>
		</step>
		<step no="2.2">
			<desc>show log buffer</desc>
			<log-file>step2.2_show_logging_buffered.log</log-file>
			<ssh target="ap1">
				-v "show log b"
			</ssh>
		</step>
		<step no="2.2a">
			<desc>Get the ppsk value</desc>
			<setvar name="ppsk.auto.value" type="special">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2.2_show_logging_buffered.log -p "password \((.*)\) generated for user \(userGroup0001\)" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="2.3">
			<desc>
				show user
			</desc>
			<log-file>step2.3_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "userGroup0001" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes *userGroup"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes *userGroup"</log-match>
		</step>

		<step no="2.4">
			<desc>
				show user-group
			</desc>
			<log-file>step2.4_show_user_group.log</log-file>
			<ssh target="ap1">
				-v "show user-group"
			</ssh>
			<log-match>-c -i "userGroup" -p 6 -i "AU" -p 8 -i "&amp;"</log-match>
		</step>

		<step no="2.5">
			<desc>
				show run users
			</desc>
			<log-file>step2.5_show_run_user.log</log-file>
			<ssh target="ap1">
				-v "show run users"
			</ssh>
		</step>

		<step no="3">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step3_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "PPSK-enabled=yes"</log-match>
			<log-match>-c -i "userGroup0001" -i "Yes"</log-match>
			<log-match>-c -i "userGroup0002" -i "Yes"</log-match>
			<log-match>-c -i "userGroup0003" -i "Yes"</log-match>
		</step>

		<step no="pre.conn1.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn1.psk" type="special">
				echo userGroup0001\&amp;${ppsk.auto.value}
			</setvar>
		</step>

		<property name="conn1.ssid" value="${ssid.name}" />
		<property name="conn1.proto" value="wpa-tkip-psk" />

		<include prefix="4" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="pre.conn2.psk" var-type="s1">
			<desc>set value of psk</desc>
			<setvar name="conn2.psk" type="special">
				echo userGroup0001${ppsk.auto.value}
			</setvar>
		</step>

		<property name="conn2.ssid" value="${ssid.name}" />
		<property name="conn2.proto" value="wpa-tkip-psk" />
		<property name="conn2.auth_negative_test" value="true" />
		<property name="conn2.dhcp_negative_test" value="true" />

		<include prefix="5" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta2, ap1" />

		<step no="6">
			<desc>
				-sh ssid xxx st
			</desc>
			<log-file>step6_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "1 *Yes *1"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac} *${sta2.tif.ip}" -i "1 *Yes *1"</log-match>
		</step>

		<step no="6.1">
			<desc>
				-sh roa ca
			</desc>
			<log-file>step6.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="6.2">
			<desc>
				-show auth
			</desc>
			<log-file>step6.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "userGroup0001" -p 7 -i "done"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac} *1" -i "WPA/TKIP" -i "userGroup0001" -p 7 -i "done"</log-match>
		</step>

		<include prefix="7" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step7_show_logging_buffered.log" />

		<step no="7.a">
			<desc>
				-check logging result
			</desc>
			<log-file>step7_show_logging_buffered.log</log-file>
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta2.tif.mac} is disassociated from"</log-match>
			<log-match>-c -i "STA(${sta1.tif.mac}) login to SSID(wifi0.1) by user_name=userGroup0001"</log-match>
			<log-match>-c -i "Station ${sta1.tif.mac} is authenticated to ${ap1.wifi0.mac} thru SSID ${ssid.name}"</log-match>
		</step>

		<step no="8">
			<desc>
				-Configure a user group with user accounts manually configured
			</desc>
			<ssh target="ap1">
				-v "no user-group userGroup password-generation-method"
				-v "user ppskaccount"
				-v "user ppskaccount password ppskuser"
				-v "user ppskaccount group userGroup"
			</ssh>
		</step>

		<step no="8.1">
			<desc>
				show user
			</desc>
			<log-file>step8.1_show_user.log</log-file>
			<ssh target="ap1">
				-v "show user"
			</ssh>
			<log-match>-c -i "ppskaccount *manual" -i "Yes *userGroup"</log-match>
		</step>

		<step no="8.2">
			<desc>
				show user-group
			</desc>
			<log-file>step8.2_show_user_group.log</log-file>
			<ssh target="ap1">
				-v "show user-group"
			</ssh>
			<log-match>-c -i "userGroup" -p 6 -i "MU" -p 8 -i "&amp;"</log-match>
		</step>

		<step no="8.3">
			<desc>
				show run users
			</desc>
			<log-file>step8.3_show_run_user.log</log-file>
			<ssh target="ap1">
				-v "show run users"
			</ssh>
		</step>

		<step no="8.4">
			<desc>
				-show auth private-psk
			</desc>
			<log-file>step8.4_show_auth_private_psk.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match>-c -i "PPSK-enabled=yes"</log-match>
			<log-match>-c -i " ppskaccount *userGroup" -i "Yes"</log-match>
		</step>

		<include prefix="9" file="subs/release_station_wifi.xml" obj-args="sta1" />

		<include prefix="10" file="subs/release_station_wifi.xml" obj-args="sta2" />


		<include prefix="11" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn3, sta1, ap1" />

		<include prefix="12" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn4, sta2, ap1" />

		<step no="13" delay="5">
			<desc>
				-sh ssid xxx st
			</desc>
			<log-file>step13_show_station.log</log-file>
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "1 *Yes *1"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac} *${sta2.tif.ip}" -i "1 *Yes *1"</log-match>
		</step>

		<step no="13.1">
			<desc>
				-sh roa ca
			</desc>
			<log-file>step13.1_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac}" -p 5 -i "1" -i "0 *YNNN"</log-match>
		</step>

		<step no="13.2">
			<desc>
				-show auth
			</desc>
			<log-file>step13.2_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *1" -i "WPA/TKIP" -i "ppskaccount" -p 7 -i "done"</log-match>
			<log-match>-n -c -i "${sta2.tif.mac} *1" -i "WPA/TKIP" -i "ppskaccount" -p 7 -i "done"</log-match>
		</step>

		<include prefix="14" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step14_show_logging_buffered.log" />

		<step no="14.a">
			<desc>
				-check logging result
			</desc>
			<log-file>step14_show_logging_buffered.log</log-file>
			<log-match>-c -i "invalid MIC in msg 2/4 of 4-Way Handshake"</log-match>
			<log-match>-c -i "sta ${sta2.tif.mac} is disassociated from"</log-match>
			<log-match>-c -i "STA(${sta1.tif.mac}) login to SSID(wifi0.1) by user_name=ppskaccount"</log-match>
			<log-match>-c -i "Station ${sta1.tif.mac} is authenticated to ${ap1.wifi0.mac} thru SSID ${ssid.name}"</log-match>
		</step>
	</stage>
</testcase>