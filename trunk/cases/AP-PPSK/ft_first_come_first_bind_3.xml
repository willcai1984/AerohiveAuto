<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>first come first bind basic func check</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-config a ssid with ppsk
		-enable ppsk-server
		-enable mac binding

		Test Procedure:
		-client A does first come first bind success
		-disable mac-binding
		-client B uses the same ppsk which client A does mac binding to connect
		to the ssid
	</description>
	<numofap>2</numofap>
	<numofsta>2</numofsta>
	<tbtype>winlin</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.proto" value="wpa-tkip-psk" />
	<property name="conn1.psk" value="aerohive" />

	<stage>
		<step no="0">
			<desc>
				-Config ap1
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				
			</console>
		</step>
		<include prefix="0.1" file="subs/ap_renew_ip.xml" obj-args="ap1" />
		<step no="0.2">
			<desc>
				-Config ap2
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			
			</console>
		</step>

		<step no="0.3">
			<desc>
				-Config ap2
			</desc>
			<console target="ap2">
				-v "interface mgt0 ip ${ap2.mgt0.ipset}/24"
				-v "ip route net 0.0.0.0 0.0.0.0 gateway ${tb.vlan1.gw}"
			</console>
		</step>
		<step no="0.4">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step0.5_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="0.5">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step0.5_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="0.6">
			<desc>
				change ap2's ip
			</desc>
			<setvar name="ap2.mgt0.ip">
				echo "${ap2.mgt0.ipset}"
			</setvar>
		</step>

		<step no="1">
			<desc>
				-Config ap1
			</desc>
			<ssh target="ap1">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password aerohive"
				-v "interface mgt0 hive ${hive.name}"
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key aerohive"
				-v "security-object ppsk security private-psk"
				-v "security-object ppsk security private-psk default-psk-disabled"
				-v "security-object ppsk security private-psk ppsk-server ${ap2.mgt0.ipset}"
				-v "user ppsk_user"
				-v "user ppsk_user password aerohive"
				-v "user-group userGroup"
				-v "user ppsk_user group userGroup"
			</ssh>
		</step>

		<step no="1.1">
			<desc>
				-Config ap1
			</desc>
			<ssh target="ap1">
				-v "user-group userGroup user-attribute 1"
				-v "user-group userGroup vlan-id ${tb.vlan1}"
				-v "user-profile ttt vlan-id ${tb.vlan1} attribute 1"
				-v "security-object ppsk security private-psk mac-binding-enable"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 ssid ${ssid.name}"
			</ssh>
		</step>

		<step no="2">
			<desc>
				-Config ap2
			</desc>
			<ssh target="ap2">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password aerohive"
				-v "interface mgt0 hive ${hive.name}"
				-v "security-object ppsk"
				-v "security-object ppsk security protocol-suite wpa-tkip-psk ascii-key aerohive"
				-v "security-object ppsk security private-psk"
				-v "security-object ppsk security private-psk default-psk-disabled"
				-v "security-object ppsk security private-psk ppsk-server ${ap2.mgt0.ipset}"
				-v "user ppsk_user"
				-v "user ppsk_user password aerohive"
				-v "user-group userGroup"
				-v "user ppsk_user group userGroup"
			</ssh>
		</step>

		<step no="2.1">
			<desc>
				-Config ap2
			</desc>
			<ssh target="ap2">
				-v "user-group userGroup user-attribute 1"
				-v "user-group userGroup vlan-id ${tb.vlan1}"
				-v "user-profile ttt vlan-id ${tb.vlan1} attribute 1"
				-v "security-object ppsk security private-psk mac-binding-enable"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} user-group userGroup"
				-v "ssid ${ssid.name} max-client 32"
				-v "ssid ${ssid.name} security-object ppsk"
				-v "interface wifi0 radio channel 11"
			</ssh>
		</step>
		<step no="pre1.1">
			<desc>
				show AP1 mgt0
			</desc>
			<log-file>step1.1_show_int_mgt0.log</log-file>
			<console target="ap1" slow="yes">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="pre1.2">
			<desc>get ip address of ap1</desc>
			<setvar name="ap1.mgt0.ip">
				${bin.dir}/getbyrexp.py -p "IP addr=([\d.]+)" -f ${log.dir}/step1.1_show_int_mgt0.log -t str
			</setvar>
		</step>
		<step no="2.2" delay="60">
			<desc>
				-Show auth private-psk
			</desc>
			<log-file>step_2.2_show_auth_private.log</log-file>
			<ssh target="ap1">
				-v "show auth private-psk"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\d+\s+ppsk_user\s+userGroup\s+\w+\s+Yes" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="2.3">
			<desc>
				-open debug mode and clear log all
			</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "no _debug auth excessive"
				-v "clear log all"
				-v "clear arp-cache"
			</ssh>
		</step>

		<step no="2.4">
			<desc>
				-Turn on the switch of debug
			</desc>
			<ssh target="ap2">
				-v "_debug auth all"
				-v "no _debug auth excessive"
				-v "clear log all"
				-v "clear arp-cache"
			</ssh>
		</step>

		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="4" delay="30">
			<desc>
				-Show logging buffered to check binding relationship is be created
			</desc>
			<log-file>step4_show_logging_buffered.log</log-file>
			<ssh target="ap1" timeout="500">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)auth recv ppsk server respond mac-binding query for sta\(${sta1.tif.mac}\) ACCEPT \(rc=1\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)auth goto ppsk server\(${ap2.mgt0.ipset}\) query mac-binding for sta\(${sta1.tif.mac}\)\(type:10\)" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.1">
			<desc>
				-Check the auth procedure on ppsk server
			</desc>
			<log-file>step4.1_show_logging_buffered.log</log-file>
			<ssh target="ap2" timeout="500">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "ah_auth_mb_create: assign(mac=${sta1.tif.mac}, ssid=${ssid.name}, user=ppsk_user"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)mac-binding enabled, try to create mac-binding for sta\(mac=${sta1.tif.mac}, ssid=${ssid.name}\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)ah_auth_mb_check_bind: no mac-binding found for sta\(${sta1.tif.mac}\)" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-Check the bind relationship on ap1
			</desc>
			<log-file>step5_check_bind_relationship_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "_test auth mac-bind show ${ssid.name}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\(${ssid.name}\) is not a mac-bind server" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-Check the bind relationship on ap2
			</desc>
			<log-file>step5.1_check_bind_relationship_${loop_check.idx}.log</log-file>
			<ssh target="ap2">
				-v "_test auth mac-bind show ${ssid.name}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)${sta1.tif.mac}: SSID\(${ssid.name}\) user\[ppsk_user, index=0\]" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				-disable mac-binding
				-Clear log all
			</desc>
			<ssh target="ap2">
				-v "no security-object ppsk security private-psk mac-binding-enable"
				-v "no security-object ppsk security private-psk ppsk-server"
				-v "clear log all"
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				-disable mac-binding
				-Clear log all
			</desc>
			<ssh target="ap1">
				-v "no security-object ppsk security private-psk mac-binding-enable"
				-v "no security-object ppsk security private-psk ppsk-server"
				-v "clear log all"
			</ssh>
		</step>

		<include prefix="7" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta2, ap1" />

		<step no="8" delay="30">
			<desc>
				-Show logging buffered
			</desc>
			<log-file>step8_show_logging_buffered.log</log-file>
			<ssh target="ap1" timeout="500">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "ah_auth_delay_load_ppsk_mb is not a mac-binding server"</log-match>
		</step>

		<step no="8.1">
			<desc>
				-Show logging buffered
			</desc>
			<log-file>step8.1_show_logging_buffered.log</log-file>
			<ssh target="ap2" timeout="500">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-c -i "ah_auth_delay_load_ppsk_mb is not a mac-binding server"</log-match>
		</step>

		<step no="9" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-Check the bind relationship on ap1
			</desc>
			<log-file>step9_check_bind_relationship_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "_test auth mac-bind show ${ssid.name}"
			</ssh>
			<log-match>-c -i "SSID(${ssid.name}) is not a mac-bind server"</log-match>
		</step>

		<step no="9.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				-Check the bind relationship on ap2
			</desc>
			<log-file>step9.1_check_bind_relationship_${loop_check.idx}.log</log-file>
			<ssh target="ap2">
				-v "_test auth mac-bind show ${ssid.name}"
			</ssh>
			<log-match>-c -i "SSID(${ssid.name}) is not a mac-bind server"</log-match>
		</step>
	</stage>
</testcase>