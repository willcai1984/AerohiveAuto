<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Set eth port access,check the ip-policy("to-deny", through MP)</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-Laptop1 has been associated with AP1 and assigned an ip address
		-Laptop1 uses user-profile "FW"

		Test Procedure:
		1) Configure a ip-policy which deny Laptop2's ip-address on MP and bind it to
		FW:
		"ip-policy FW"
		"ip-policy FW to &lt;Laptop2 ip addr&gt; action deny"
		"user-profile FW security ip-policy to-access FW"
		"ssid &lt;ssid_name&gt; default-user-profile-attr [num]"
		2) Laptop1 ping Laptop2
		3) Check the ip-session table on MP
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<numofbpc>1</numofbpc>
	<tbtype>winlin</tbtype>

	<property name="user_id" value="FWtest" />
	<property name="conn1.ssid" value="${ssid.name}-1" />

	<stage>
		<if>"${ap1.wifi1.existed}" == "true" &amp;&amp; "${ap2.wifi1.existed}" == "true"</if>

		<include prefix="0" file="subs/bpc_init.xml" obj-args="bpc1, ap1" args="none" />

		<step no="1.1">
			<desc>
				Configure AP
			</desc>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "ssid ${conn1.ssid}"
				-v "ssid ${conn1.ssid} security-object ${ssid.name}"
				-v "interface wifi0 ssid ${conn1.ssid}"
				-v "user-profile ${user_id} vlan-id 1 attribute 1"
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "interface wifi1 radio channel 36"
				-v "clear forwarding-engine ip-sessions"
			</console>
		</step>

		<step no="1.2">
			<desc>
				Configure MP
			</desc>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "user-profile ${user_id} vlan-id 1 attribute 1"
				-v "interface eth1 mode bridge-access user-profile-attribute 1"
				-v "interface eth1 mac-learning enable"
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "interface wifi1 radio channel 36"
				-v "clear forwarding-engine ip-sessions"
				-v "cons page 0"
			</console>
		</step>

		<step no="1.3">
			<desc>
				check wifi1
			</desc>
			<log-file>step1.3_check_wifi1.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi1"
				-v "cons page 0"
			</telnet>
		</step>

		<step no="1.4">
			<desc>
				Get wifi1 mac
			</desc>
			<setvar name="ap2_wifi1_mac">
				${bin.dir}/getbyrexp.py -p "MAC addr=(\S+);" -f ${log.dir}/step1.3_check_wifi1.log -t str
			</setvar>
		</step>

		<step no="1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check amrp neighbor
			</desc>
			<log-file>step1.5_check_amrp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show amrp neighbor"
			</telnet>
			<log-match>-c -i "${ap2_wifi1_mac}" -i "${ap2.mgt0.ip}" -i "TWO-WAY"</log-match>
		</step>

		<step no="1.5">
			<desc>
				shutdown interface eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<include prefix="2" file="subs/bpc_wired_connect_${tb.os}.xml" obj-args="bpc1" />

		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap2" />

		<include prefix="4" file="subs/sta_ping.xml" args="sta1, ${bpc1.tif.ip}, 4" />

		<step no="5">
			<desc>
				open debug switch
			</desc>
			<console target="ap1">
				-v "_ff id 1 src-ip ${sta1.tif.ip} bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log buffered"
			</console>
		</step>

		<step no="6">
			<desc>
				Configure a ip-policy which permit Laptop2’s ip-address on MP and bind it to FW:
				“ip-policy FW”
				“ip-policy FW to Laptop2-ip action deny”
				“user-profile FW security ip-policy to-access FW”
				“ssid ${ssid.name} default-user-profile-attr [num]”
			</desc>
			<console target="ap1">
				-v "ip-policy ${user_id}"
				-v "ip-policy ${user_id} id 1 to ${bpc1.tif.ip} action deny"
				-v "user-profile ${user_id} security ip-policy to-access ${user_id}"
				-v "ssid ${conn1.ssid} default-user-profile-attr 1"
				-v "clear log all"
				-v "clear forwarding-engine ip-sessions"
				-v "clear arp-cache"
				-v "no forwarding-engine proxy-arp enable"
			</console>
		</step>

		<step no="7" delay="10">
			<desc>
				Laptop1 ping Laptop2
			</desc>
			<log-file>step7_sta1_ping_bpc1.log</log-file>
			<ssh target="sta1">
				-v "nohup ping ${bpc1.tif.ip} &gt; /tmp/${job.id}ping_1.log &amp;"
			</ssh>
		</step>

		<step no="7.1">
			<desc>
				get sta1 ping id
			</desc>
			<setvar name="sta1.ping.id">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step7_sta1_ping_bpc1.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="7.2">
			<desc>
				check sta1 ping result
			</desc>
			<log-file>step7.2_check_sta1_ping_result.log</log-file>
			<ssh target="sta1">
				-v "tail /tmp/${job.id}ping_1.log"
			</ssh>
			<log-match>-n -c -i "from ${bpc1.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="7.3">
			<desc>
				Check the ip-session table on MP
			</desc>
			<log-file>step7.3_show_ip_session.log</log-file>
			<console target="ap1">
				-v "show forwarding-engine ip-sessions"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)${bpc1.tif.ip}/\d+ -> ${sta1.tif.ip}/\d+; Proto 1" -c 0 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)${sta1.tif.ip}/\d+ -> ${bpc1.tif.ip}/\d+; Proto 1" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="7.4">
			<desc>
				show logging buffered
			</desc>
			<log-file>step7.4_show_loging_buffered.log</log-file>
			<console target="ap1" timeout="600">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchblocks.py">-b "\(\!\) wifi1.1 ${sta1.tif.ip}->${bpc1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -ps p "ACL: matched upid \[\d+\] dir \[egress \(to-air\)\] group \[${user_id}\] id \[\d+\] \[deny\]" -e "\(i\) wifi1.1 ${sta1.tif.ip}->${bpc1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
	</stage>

	<post-process>
		<stage>
			<step no="1">
				<desc>
					kill sta1 ping process
				</desc>
				<ssh target="sta1">
					-v "kill ${sta1.ping.id}"
					-v "rm -f /tmp/${job.id}ping_1.log"
				</ssh>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>
