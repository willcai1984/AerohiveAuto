<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Set eth port access, fragments are sent in disorder(through MP)</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-Laptop has been associated with AP1 and assigned an ip address
		-Laptop uses user-profile "FW"

		Test Procedure:
		1) Configure a ip-policy on AP1 and MP, and bind it to FW:
		"ip-policy FW"
		"ip-policy FW [from/to] &lt;Laptops ip addr&gt; action permit"
		"user-profile FW security ip-policy [from/to]-access FW"
		"ssid &lt;ssid_name&gt; default-user-profile-attr [num]"
		2) Laptop1 sends all the fragment packets to Laptop2 in disorder by using hping2 or other tools
		3) Check the the packets on AP1, MP and Laptop2
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<numofbpc>1</numofbpc>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}-test" />
	<property name="user_id" value="FW" />
	<property name="ftp_test_file_local_dir" value="/tmp" />
	<property name="capture.packet" value="capture.packet.log" />

	<stage>
		<if>"${ap.wifi1.existed}" == "true" &amp;&amp; "${ap1.eth1.existed}" == "true"</if>

		<include prefix="0" file="subs/bpc_init.xml" obj-args="bpc1, ap1" args="none" />

		<step no="1">
			<desc>
				-config AP1
			</desc>
			<telnet target="ap1">
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "interface eth1 mode bridge-access"
				-v "interface eth1 mac-learning enable"
			</telnet>
		</step>

		<step no="2">
			<desc>
				-config ssid, hive info and then bind them to interface
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "security-object ${ssid.name}-test"
				-v "security-object ${ssid.name}-test default-user-profile-attr 1"
				-v "user-profile ${ssid.name}-test vlan-id 1 attribute 1"
				-v "ssid ${ssid.name}-test"
				-v "ssid ${ssid.name}-test security-object ${ssid.name}-test"
				-v "interface wifi0 ssid ${ssid.name}-test"
				-v "interface wifi1 radio channel 36"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				show ap2's interface wifi1 info
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				get ap2's wifi1's mac address
			</desc>
			<setvar name="ap2.wifi1.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i wifi1 -o aero -m -width
			</setvar>
		</step>

		<step no="2.3">
			<desc>shutdown interface wifi1 and then up it (it's aimed to clear wifi1's neighbor list)</desc>
			<telnet target="ap1">
				-v "interface wifi1 hive ${hive.name}_${job.sid} shutdown"
				-v "no interface wifi1 hive ${hive.name}_${job.sid} shutdown"
				-v "interface wifi1 radio channel 36"
			</telnet>
		</step>

		<step no="3" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor
			</desc>
			<log-file>step3_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "show acsp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+Backhaul\s+${hive.name}_${job.sid}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4">
			<desc>
				-shutdown interface eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="5" delay="35" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap2" />

		<include prefix="7" file="subs/bpc_wired_connect_${tb.os}.xml" obj-args="bpc1" />

		<step no="open.debug.ap1">
			<desc>
				open debug mode and clear log all
			</desc>
			<console target="ap1">
				-v "_ff id 1 src-ip ${sta1.tif.ip} dst-ip ${bpc1.tif.ip} bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear forwarding-engine ip-sessions"
				-v "clear log buffered"
			</console>
		</step>

		<step no="open.debug.ap2">
			<desc>
				open debug mode and clear log all
			</desc>
			<telnet target="ap2">
				-v "_ff id 1 src-ip ${sta1.tif.ip} dst-ip ${bpc1.tif.ip} bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear forwarding-engine ip-sessions"
				-v "clear log buffered"
			</telnet>
		</step>

		<step no="8">
			<desc>
				-Config ip-policy, binding to user-profiles
			</desc>
			<console target="ap1">
				-v "ip-policy ${user_id}1"
				-v "ip-policy ${user_id}1 id 1 from ${bpc1.tif.ip} action permit"
				-v "ip-policy ${user_id}1 id 2 to ${bpc1.tif.ip} action permit"
				-v "user-profile ${user_id}1 security ip-policy from-access ${user_id}1 to-access ${user_id}1"
			</console>
		</step>

		<step no="8.1">
			<desc>
				-Config ip-policy, binding to user-profiles
			</desc>
			<telnet target="ap2">
				-v "ip-policy ${user_id}2"
				-v "ip-policy ${user_id}2 id 1 from ${sta1.tif.ip} action permit"
				-v "ip-policy ${user_id}2 id 2 to ${sta1.tif.ip} action permit"
				-v "user-profile ${user_id}2 security ip-policy from-access ${user_id}2 to-access ${user_id}2"
			</telnet>
		</step>

		<step no="8.2">
			<desc>
				clear local file
			</desc>
			<ssh target="bpc1">
				-v "rm -f ${ftp_test_file_local_dir}/${capture.packet}"
			</ssh>
		</step>

		<step no="9">
			<desc>
				-start tshark to capture packet
			</desc>
			<log-file>step9_capture_packet.log</log-file>
			<ssh target="bpc1">
				-v "nohup tshark -i ${bpc1.tif.name} host ${sta1.tif.ip} &gt; ${ftp_test_file_local_dir}/${capture.packet} 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="9.1">
			<desc>
				get pid of "tshark" on bpc1
			</desc>
			<setvar name="bpc1.tshark.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step9_capture_packet.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="10">
			<desc>
				- Laptop1 sends all the fragment packets to Laptop2 in disorder by using hping2 or other tools
			</desc>
			<log-file>step10_server_ping.log</log-file>
			<ssh target="sta1" timeout="300">
				-v "nohup hping ${bpc1.tif.ip} -d 40 -N 5 -g 48 -1 &amp;"
				-v "nohup hping ${bpc1.tif.ip} -d 40 -N 5 -g 0 -x1 -1 &amp;"
			</ssh>
		</step>

		<step no="10.1">
			<desc>
				get pid of "hping"
			</desc>
			<setvar name="first.hping.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step10_server_ping.log -p "\[\d+\]\s+(\d+)" -g -1 -t str
			</setvar>
		</step>

		<step no="10.2">
			<desc>
				get pid of "hping"
			</desc>
			<setvar name="second.hping.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step10_server_ping.log -p "\[\d+\]\s+(\d+)" -g 0 -t str
			</setvar>
		</step>

		<step no="10.3" delay="15">
			<desc>
				kill process which run in background.
			</desc>
			<log-file>step10.3_kill_process.log</log-file>
			<ssh target="sta1">
				-v "kill ${first.hping.pid}"
				-v "kill ${second.hping.pid}"
			</ssh>
		</step>

		<step no="11" delay="15">
			<desc>
				show logging buffered an ap1
			</desc>
			<log-file>step11_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-c -i "(o) *eth1 *${sta1.tif.ip}-&gt;${bpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(r) *wifi1.1 *${sta1.tif.ip}-&gt;${bpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(i) *wifi1.1 *${sta1.tif.ip}-&gt;${bpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(o) *wifi1.1 *${bpc1.tif.ip}-&gt;${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(i) *eth1 *${bpc1.tif.ip}-&gt;${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "\[fe\]: queue fragment, start 0 end 47"</log-match>
			<log-match>-c -i "\[fe\]: queue fragment, start 48 end 95"</log-match>
		</step>

		<step no="11.1">
			<desc>
				show logging buffered an ap1
			</desc>
			<log-file>step11.1_show_logging_buffered.log</log-file>
			<telnet target="ap2" timeout="500">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "(o) *wifi1.1 *${sta1.tif.ip}-&gt;${bpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(i) *wifi0.1 *${sta1.tif.ip}-&gt;${bpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(r) *wifi0.1 *${sta1.tif.ip}-&gt;${bpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(o) *wifi0.1 *${bpc1.tif.ip}-&gt;${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(i) *wifi1.1 *${bpc1.tif.ip}-&gt;${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "\[fe\]: queue fragment, start 0 end 47"</log-match>
			<log-match>-c -i "\[fe\]: queue fragment, start 48 end 95"</log-match>
		</step>

		<step no="12">
			<desc>
				kill process which run in background.
			</desc>
			<log-file>step12_kill_process.log</log-file>
			<ssh target="bpc1">
				-v "kill ${bpc1.tshark.pid}"
			</ssh>
		</step>

		<step no="12.1">
			<desc>
				cat files.
			</desc>
			<log-file>step12.1_check_result.log</log-file>
			<ssh target="bpc1" timeout="250">
				-v "cat ${ftp_test_file_local_dir}/${capture.packet}"
			</ssh>
			<log-match>-c -i "${bpc1.tif.ip} -&gt; ${sta1.tif.ip} ICMP Echo (ping) reply"</log-match>
			<log-match>-c -i "${sta1.tif.ip} -&gt; ${bpc1.tif.ip} IP Fragmented IP protocol (proto=ICMP"</log-match>
			<log-match>-c -i "${sta1.tif.ip} -&gt; ${bpc1.tif.ip} ICMP Echo (ping) request"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<step no="1">
				<desc>
					-kill process
				</desc>
				<ssh target="bpc1">
					-v "kill ${bpc1.tshark.pid}"
					-v "rm -f ${ftp_test_file_local_dir}/${capture.packet}"
				</ssh>
			</step>

			<step no="2">
				<desc>
					-kill process
				</desc>
				<ssh target="sta1">
					-v "kill ${first.hping.pid}"
					-v "kill ${second.hping.pid}"
				</ssh>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>