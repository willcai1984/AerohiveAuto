<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Phymode 11na,  DFS channel, verify mesh is work</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
			1. Reset config APUT
			     CLI: reset config
			2. Set country code to 826
			     CLI: boot-param region world
			         boot-param country-code 826
			3. Config a radio profile phymode 11na, bind it to wifi1
			     CLI: radio profile 11na phy 11na
			          int w1 radio profile 11na
			4. Enable DFS
    			 CLI: radio pro 11na dfs
    		5. Set interface wifi1 radio mode to access
			     CLI: int w1 mode access
		Test Procedure:
			1. DFS channel, verify mesh is work, result 1
		Expect result:
			Result 1:
			  - AMRP neighbor reach twoway sate
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<if>"${ap2.wifi1.existed}" == "true"</if>
		<step no="1">
			<desc>
				config region, country code
			</desc>
			<console target="ap1" timeout="90">
				-v "boot-param region ${bootp.region}"
				-v "boot-param country-code ${bootp.countrycode}"
			</console>
			<no-error-check />
		</step>
		<step no="1.1">
			<desc>
				check region, country code
			</desc>
			<log-file>step_1.1.log</log-file>
			<console target="ap1">
				-v "sh boo"
			</console>
			<log-match>-e "Region Code.*${bootp.region}"</log-match>
			<log-match>-e "Country Code.*${bootp.countrycode}"</log-match>
		</step>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="1.2">
			<desc>
				config region, country code
			</desc>
			<console target="ap2" timeout="90">
				-v "boot-param region ${bootp.region}"
				-v "boot-param country-code ${bootp.countrycode}"
			</console>
			<no-error-check />
		</step>
		<step no="1.3">
			<desc>
				check region, country code
			</desc>
			<log-file>step_1.3.log</log-file>
			<console target="ap2">
				-v "sh boo"
			</console>
			<log-match>-e "Region Code.*${bootp.region}"</log-match>
			<log-match>-e "Country Code.*${bootp.countrycode}"</log-match>
		</step>
		<step no="2" delay="10">
			<desc>
				configure cli
			</desc>
			<log-file>step_2.log</log-file>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "radio profile 11na"
				-v "radio profile 11na phymode 11na"
				-v "int w1 radio profile 11na"
				-v "radio profile 11na dfs"	
				-v "int w1 mode dual"
				-v "int w1 radio channel 100"			
				-v "save config"
			</console>
		</step>
		<step no="3.1" delay="10">
			<desc>
				configure cli
			</desc>
			<log-file>step_3.1.log</log-file>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "radio profile 11na"
				-v "radio profile 11na phymode 11na"
				-v "int w1 radio profile 11na"
				-v "radio profile 11na dfs"	
				-v "int w1 mode dual"			
				-v "save config"
			</console>
		</step>
		<step no="3.2">
			<desc>
				shutdown ethernet interface
			</desc>
			<log-file>step_3.2.log</log-file>
			<console target="ap2">
				-v "int e0 shut"
				-v "int e1 shut"
			</console>
			<no-error-check />
		</step>
		<step no="4" delay="10" type="loop-check" loop-max-times="20" loop-interval="20">
			<desc>
				Loop check until hive neighbor turn to Auth stat
			</desc>
			<log-file>step4_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "sh hive ${hive.name} neighbor"
			</console>
			<log-match>-e "Auth"</log-match>
		</step>	
		<step no="5" delay="10" type="loop-check" loop-max-times="20" loop-interval="20">
			<desc>
				Loop check until AMRP neighbor turn to twoway stat
			</desc>
			<log-file>step5_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "sh amrp neighbor"
			</console>
			<log-match>-e "twoway"</log-match>
		</step>	
	</stage>
</testcase>
