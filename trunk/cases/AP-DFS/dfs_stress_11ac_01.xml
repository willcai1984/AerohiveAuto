<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Phymode 11ac, set channel width 40-20-40-80 for 20 times, bind radio profile, detect radar, verify channel will be switched</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
			1. Reset config APUT
			     CLI: reset config
			2. Set country code to 826
			    CLI: boot-param region world
			         boot-param country-code 826
			3. Config a radio profile phymode 11ac
			     CLI: radio profile 11ac phy 11ac
			4. Enable DFS
    			 CLI: radio pro 11ac dfs
    		5. Set interface wifi1 radio mode to access
     			 CLI: int w1 mode access
		Test Procedure:
			1. Set radio profile 11ac channel width 40-20-40-80 for 20 times
			2. Bind radio profile 11ac to wifi1
			3. Config an ssid, bing to wifi1
			     CLI: ssid test
			          int wifi1 ssid test
			4. Set wifi1 to a DFS channel (Ex. 100)
			     CLI: int w1 rad chan 100
			5.  Simulate to detect radar, verify DFS is work, result 1
			     CLI: int w1 _bang
		Expect result:
			Result 5:
 			  - channel will be switched accordingly
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<stage>
		<if>"${img.prodtype}" == "AP230" || "${img.prodtype}" == "AP390" || "${img.prodtype}" == "AP1130"</if>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="1">
			<desc>
				config region, country code
			</desc>
			<console target="ap1" timeout="90">
				-v "boot-param region ${bootp.region}"
			</console>
			<no-error-check />
		</step>
		<step no="1.1">
			<if>"${bootp.region}" == "world"</if>
			<desc>
				config region, country code
			</desc>
			<console target="ap1" timeout="90">
				-v "boot-param country-code ${bootp.countrycode}"
			</console>
			<no-error-check />
		</step>
		<step no="1.2">
			<desc>
				check region, country code
			</desc>
			<log-file>step_1.1.log</log-file>
			<console target="ap1">
				-v "sh boo"
			</console>
			<!--  <log-match>-e "Region Code.*${bootp.region}"</log-match> -->
			<log-match>-e "Country Code.*${bootp.countrycode}"</log-match>
		</step>
		<step no="102.1" delay="10">
			<desc>
				configure cli
			</desc>
			<log-file>step_102.1.log</log-file>
			<console target="ap1">
				-v "radio profile 11ac"
				-v "radio profile 11ac phymode 11ac"
				-v "radio profile 11ac dfs"	
				-v "int w1 mode access"			
				-v "save config"
			</console>
		</step>
		<step no="102.2">
			<desc>
				Verify dfs is enabled
			</desc>
			<log-file>step_102.2.log</log-file>
			<console target="ap1">
				-v "show radio profile 11ac | include dfs"
			</console>
			<log-match>-e "DFS=enabled"</log-match>
		</step>
		
		
		<step no="201" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				1. Set radio profile 11ac channel width 40-20-40-80 for 20 times
			</desc>
			<log-file>step_201_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "radio profile 11ac channel-width 40"
				-v " "
				-v " "
				-v "radio profile 11ac channel-width 20"
				-v " "
				-v " "
				-v "radio profile 11ac channel-width 40"
				-v " "
				-v " "
				-v "radio profile 11ac channel-width 80"				
			</console>
		</step>		
		<step no="202">
			<desc>
				2. Bind radio profile 11ac to wifi1
				3. Config an ssid, bing to wifi1
			</desc>
			<log-file>step_202.log</log-file>
			<console target="ap1">
				-v "int w1 radio profile 11ac"
				-v "ssid test"
				-v "int w1 ssid test"
				-v "save config"
			</console>
		</step>
		<step no="204.1">
			<desc>
				4. Set wifi1 to a DFS channel (Ex. 100)
			</desc>
			<log-file>step_5.1.log</log-file>
			<console target="ap1">
				-v "int w1 radio channel 100"
			</console>
		</step>		
		<step no="204.2">
			<desc>
				Verify channel/ssid in "sh int"
			</desc>
			<log-file>step_204.2.log</log-file>
			<console target="ap1">
				-v "sh int | in wifi1.1"
			</console>
			<log-match> -re -e "Wifi1.1.*access *U *100\(.*test" </log-match>
		</step>
		<step no="204.3">
			<desc>
				Verify channel in "sh acsp"
			</desc>
			<log-file>step_204.3.log</log-file>
			<console target="ap1">
				-v "sh acsp | in wifi1"
			</console>
			<log-match> -e "Wifi1.*100" </log-match>
		</step>
		<step no="205.1">
			<desc>
				5. Simulate to detect radar, verify DFS is work, result 1
			</desc>
			<console target="ap1">
				-v "int w1 _bang"
				-v " "
			</console>
			<no-error-check />
		</step>
		<step no="205.2" delay="10" type="loop-check" loop-max-times="20" loop-interval="32">
			<desc>
				Loop check until ACSP turns to run state
			</desc>
			<log-file>step205.2_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "sh acsp | in wifi1"
			</console>
			<log-match>-e "Wifi1\s*Enable"</log-match>
		</step>
		<step no="205.3">
			<desc>
				sh int
			</desc>
			<log-file>step_205.3.log</log-file>
			<console target="ap1">
				-v "sh int | in wifi1.1"
			</console>
		</step>	
		<step no="205.4">
			<desc>
				Get channel in "sh int"
			</desc>
			<setvar name="channel_in_interface">
    			${bin.dir}/getbyrexp.py -p "access\s*U\s*(\d+)\(" -f ${log.dir}/step_205.3.log -t str
   			</setvar>
		</step>	
		<step no="205.5">
			<desc>
				sh acsp
			</desc>
			<log-file>step_205.5.log</log-file>
			<console target="ap1">
				-v "sh acsp | in wifi1"
			</console>
		</step>	
		<step no="205.6">
			<desc>
				Get channel in "sh acsp"
			</desc>
			<setvar name="channel_in_acsp">
    			${bin.dir}/getbyrexp.py -p "Wifi1\s*Enable\s*(\d+)\s*[a-zA-Z]" -f ${log.dir}/step_205.5.log -t str
   			</setvar>
		</step>
		<step no="205.7">
			<desc>
	    		Verify channel is not 100 in "sh int"
	   		</desc>
	   		<script>
	    		if [ "${channel_in_interface}" != "100" ]
	    		then
	    			exit 0
	    		else
	    			exit 1
	    		fi
	   		</script>
  		</step>
		<step no="205.8">
	   		<desc>
	    		Verify channel is not 100 in "sh acsp"
	   		</desc>
	   		<script>
	    		if [ "${channel_in_interface}" != "100" ]
	    		then
	    			exit 0
	    		else
	    			exit 1
	    		fi
	   		</script>
  		</step>
  		<step no="205.9">
	   		<desc>
	    		Verify channel is same between "sh int" and "sh acsp"
	   		</desc>
	   		<script>
	    		if [[ "${channel_in_acsp}" == "${channel_in_interface}" ]]
	    		then
	    			exit 0
	    		else
	    			exit 1
	    		fi
	   		</script>
  		</step>
	</stage>
	<!--  
	<post-process>
        <stage>
            <step no="301">
                <desc>
                change the region code.
              </desc>
              <console target="ap1">
                -v "boot-param region FCC"
                -v "reset config"
            </console>
        	</step>
        </stage>
        <include prefix="def_post" file="include/default_post_process.xml" />
	</post-process> 
	-->
</testcase>
