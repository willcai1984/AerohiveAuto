<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Phymode 11na, channel width width 40-a, detect radar, verify channel will be switched</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
			1. Reset config APUT
			     CLI: reset config
			2. Set country code to 826
			    CLI: boot-param region world
			         boot-param country-code 826
			3. Config a radio profile phymode 11na, bind it to wifi1
			     CLI: radio profile 11na phy 11na
			          int w1 radio profile 11na
			4. Enable DFS
    			 CLI: radio pro 11na dfs
    		5. Set interface wifi1 radio mode to access
     			 CLI: int w1 mode access
		Test Procedure:
			1. Set wifi1 channel width to 40-a
			     CLI: rad profile 11na channel-width 40-a
			2. Config an ssid, bing to wifi1
			     CLI: ssid test
			            int wifi1 ssid test
			3. Set wifi1 to a DFS channel (Ex. 52)
			     CLI: int w1 rad chan 52
			4.  Simulate to detect radar, verify DFS is work, result 4
			     CLI: int w1 _bang
		Expect result:
			Result 4:
 			  - channel will be switched
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="1">
			<desc>
				config region, country code
			</desc>
			<console target="ap1" timeout="90">
				-v "boot-param region ${bootp.region}"
				-v "boot-param country-code ${bootp.countrycode}"
			</console>
			<no-error-check />
		</step>
		<step no="1.1">
			<desc>
				check region, country code
			</desc>
			<log-file>step_1.1.log</log-file>
			<console target="ap1">
				-v "sh boo"
			</console>
			<log-match>-e "Region Code.*${bootp.region}"</log-match>
			<log-match>-e "Country Code.*${bootp.countrycode}"</log-match>
		</step>
		<step no="2.1" delay="10">
			<desc>
				configure cli
			</desc>
			<log-file>step_2.1.log</log-file>
			<console target="ap1">
				-v "radio profile 11na"
				-v "radio profile 11na phymode 11na"
				-v "int w1 radio profile 11na"
				-v "radio profile 11na dfs"	
				-v "int w1 mode access"			
				-v "save config"
			</console>
		</step>
		<step no="2.2">
			<desc>
				Verify dfs is enabled
			</desc>
			<log-file>step_3.2.log</log-file>
			<console target="ap1">
				-v "show radio profile 11na | include dfs"
			</console>
			<log-match>-e "DFS=enabled"</log-match>
		</step>
		<step no="2.3">
			<desc>
				Verify channel list when dfs is enabled
			</desc>
			<log-file>step_3.3.log</log-file>
			<console target="ap1">
				-v "sh in w1 channel"
			</console>
			<log-match>-e "Channel *36 *:"</log-match>
			<log-match>-e "Channel *40 *:"</log-match>
			<log-match>-e "Channel *44 *:"</log-match>
			<log-match>-e "Channel *48 *:"</log-match>
			<log-match>-e "Channel *52 *:"</log-match>
			<log-match>-e "Channel *56 *:"</log-match>
			<log-match>-e "Channel *60 *:"</log-match>
			<log-match>-e "Channel *64 *:"</log-match>
			<log-match>-e "Channel *100 *:"</log-match>
			<log-match>-e "Channel *104 *:"</log-match>
			<log-match>-e "Channel *108 *:"</log-match>
			<log-match>-e "Channel *112 *:"</log-match>
			<log-match>-e "Channel *116 *:"</log-match>
			<log-match>-e "Channel *132 *:"</log-match>
			<log-match>-e "Channel *136 *:"</log-match>
			<log-match>-e "Channel *140 *:"</log-match>
		</step>	
		<step no="3.1">
			<desc>
				Set wifi1 channel width to 20M
				Config an ssid, bing to wifi1.
				Set wifi1 to a DFS channel (Ex. 52)
			</desc>
			<log-file>step_3.1.log</log-file>
			<console target="ap1">
				-v "radio profile 11na channel-width 40-a"
				-v "ssid test"
				-v "interface w1 ssid test"
				-v "int w1 radio channel 52"
				-v "save config"
			</console>
		</step>		
		<step no="3.2">
			<desc>
				Verify channel/ssid in "sh int"
			</desc>
			<log-file>step_3.2.log</log-file>
			<console target="ap1">
				-v "sh int | in wifi1.1"
			</console>
			<log-match>
				-re -e "Wifi1.1.*access *U *52\(.*test"
			</log-match>
		</step>
		<step no="3.3">
			<desc>
				Verify channel in "sh acsp"
			</desc>
			<log-file>step_3.2.log</log-file>
			<console target="ap1">
				-v "sh acsp | in wifi1"
			</console>
			<log-match>
				-e "Wifi1.*52"
			</log-match>
		</step>
		<step no="4">
			<desc>
				Simulate to detect radar
			</desc>
			<log-file>step_4.1.log</log-file>
			<console target="ap1">
				-v "int w1 _bang"
				-v " "
			</console>
			<no-error-check />
		</step>
		<step no="5.1" delay="10" type="loop-check" loop-max-times="20" loop-interval="32">
			<desc>
				Loop check until ACSP turns to run state
			</desc>
			<log-file>step5.1_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "sh acsp | in wifi1"
			</console>
			<log-match>-e "Wifi1\s*Enable"</log-match>
		</step>
		<step no="5.2">
			<desc>
				sh int
			</desc>
			<log-file>step_5.2.log</log-file>
			<console target="ap1">
				-v "sh int | in wifi1.1"
			</console>
		</step>	
		<step no="5.3">
			<desc>
				Get channel in "sh int"
			</desc>
			<setvar name="channel_in_interface">
    			${bin.dir}/getbyrexp.py -p "access\s*U\s*(\d+)\(" -f ${log.dir}/step_5.2.log -t str
   			</setvar>
		</step>	
		<step no="5.4">
			<desc>
				sh acsp
			</desc>
			<log-file>step_5.4.log</log-file>
			<console target="ap1">
				-v "sh acsp | in wifi1"
			</console>
		</step>	
		<step no="5.5">
			<desc>
				Get channel in "sh acsp"
			</desc>
			<setvar name="channel_in_acsp">
    			${bin.dir}/getbyrexp.py -p "Wifi1\s*Enable\s*(\d+)\s*[a-zA-Z]" -f ${log.dir}/step_5.4.log -t str
   			</setvar>
		</step>
		<step no="5.6">
	   		<desc>
	    		Verify channel is 40-above channel and not 52 in "sh int"
	   		</desc>
	   		<script>
	    		if [ "${channel_in_interface}" == "36" ] || [ "${channel_in_interface}" == "44" ] || [ "${channel_in_interface}" == "60" ] || [ "${channel_in_interface}" == "100" ] || [ "${channel_in_interface}" == "108" ] || [ "${channel_in_interface}" == "116" ] || [ "${channel_in_interface}" == "124" ] || [ "${channel_in_interface}" == "132" ]
	    		then
	    			exit 0
	    		else
	    			exit 1
	    		fi
	   		</script>
  		</step>
		<step no="5.7">
	   		<desc>
	    		Verify channel is 40-above channel and not 52 in "sh acsp"
	   		</desc>
	   		<script>
	    		if [ "${channel_in_acsp}" == "36" ] || [ "${channel_in_acsp}" == "44" ] || [ "${channel_in_acsp}" == "60" ] || [ "${channel_in_interface}" == "100" ] || [ "${channel_in_interface}" == "108" ] || [ "${channel_in_interface}" == "116" ] || [ "${channel_in_interface}" == "124" ] || [ "${channel_in_interface}" == "132" ]
	    		then
	    			exit 0
	    		else
	    			exit 1
	    		fi
	   		</script>
  		</step>
  		<step no="5.8">
	   		<desc>
	    		Verify channel is same between "sh int" and "sh acsp"
	   		</desc>
	   		<script>
	    		if [ "${channel_in_acsp}" == "${channel_in_interface}" ]
	    		then
	    			exit 0
	    		else
	    			exit 1
	    		fi
	   		</script>
  		</step>
	</stage>
</testcase>
