<?xml version="1.0" encoding="UTF-8"?>
<testcase>
    <brief>Single VLAN Multiple MACs,  When Auth is not enabled on the port, port can be accessed When 802.1X Auth is enabled, port can't be accessed before authenticated When 802.1X Auth is succeeded, port VLAN will use Radius Server returned VLAN When 802.1X auth is succeeded for some hosts, the other hosts still need to be  authenticated, and the Radius returned VLAN must be same with the already  authenticated one. Platform  Dependence SR2024</brief>
    <priority>Accept</priority>
    <automated>no</automated>
    <description>
        
		Pre-Condition:

			Auth is host based and single domain, 802.1X not enabled in the port,
			Port configured VLAN 10, 
			Radius server response user1 return VLAN 20, user2 return VLAN 30, user3 return 
			VLAN20
			Radius users configure(free radius)
			a.	Return vlan id directly
			user1   User-Password := &lt;password&gt;
			        Tunnel-Type = 13,
			        Tunnel-Medium-Type = 6,
			        Tunnel-Private-Group-ID = 20
			user2   User-Password := &lt;password&gt;
			        Tunnel-Type = 13,
			        Tunnel-Medium-Type = 6,
			        Tunnel-Private-Group-ID = 30
			user3   User-Password := &lt;password&gt;
			        Tunnel-Type = 13,
			        Tunnel-Medium-Type = 6,
			        Tunnel-Private-Group-ID = 20
			b.	Return upid
			user1   User-Password := &lt;password&gt;
			        Tunnel-Type = 10,
			        Tunnel-Medium-Type = 1,
			        Tunnel-Private-Group-ID = 20
			user2   User-Password := &lt;password&gt;
			        Tunnel-Type = 10,
			        Tunnel-Medium-Type = 1,
			        Tunnel-Private-Group-ID = 30
			user3   User-Password := &lt;password&gt;
			        Tunnel-Type = 10,
			        Tunnel-Medium-Type = 1,
			        Tunnel-Private-Group-ID = 20
			In this case, we need configure user profile in switch, the clis is:
			user-profile upid20 qos-policy def-user-qos vlan-id 20 
			attribute 20
			user-profile upid30 qos-policy def-user-qos vlan-id 30 
			attribute 30

		Test Procedure:

			1.	Check port access, result 1
			2.	Enable 802.1X authentication, result 2
			security-object &lt;security-object name&gt;
			security-object &lt;security-object name&gt; security aaa radius-
			server primary &lt;ip address of radius server&gt; shared-secret 
			&lt;share-key&gt;
			security-object &lt;security-object name&gt; security aaa radius-
			server accounting primary &lt;ip address of radius server&gt; 
			shared-secret &lt;share-key&gt;
			security-object &lt;security-object name&gt; security protocol-
			suite 802.1x
			security-object &lt;security-object name&gt; security auth-mode 
			host-based
			interface &lt;ethx/y&gt; switchport mode access
			interface &lt;ethx/y&gt; security-object &lt;security-object name&gt;
			vlan 10
			vlan 20
			vlan 30
			3.	Check port access, result 3
			4.	PC1 do 802.1X auth with user1, check port access, result 4
			5.	PC2 do 802.1X auth with user2, check port access, result 5
			6.	PC2 do 802.1X auth with user1, check port access, result 6
			7.	PC2 deauth, check port access, result 7
			8.	PC2 do 802.1X auth with user3, check port access, result 8
			9.	PC!, PC2 deauth, check port access, result 9
    </description>
  	<numofcvg>0</numofcvg>
	  <numofbr>1</numofbr>
	  <tbtype>linux</tbtype>

  	<property name="br.route.netmask" value="255.255.255.0" />
	  <property name="acct1.vlan" value="${br1.vpc2.vlan}" />
	  <property name="acct2.vlan" value="${br1.vpc3.vlan}" />
	  <property name="acct3.vlan" value="${br1.vpc2.vlan}" />
	  	  		
		<property name="conn1.username" value="${pub.radius1.username}1" />
		<property name="conn1.passwd" value="${pub.radius1.passwd}" />	

		<property name="conn2.username" value="${pub.radius1.username}2" />
		<property name="conn2.passwd" value="${pub.radius1.passwd}" />	
			
		<property name="conn3.username" value="${pub.radius1.username}3" />
		<property name="conn3.passwd" value="${pub.radius1.passwd}" />	
					
    <stage>
				<include prefix="0.add.account1" file="subs/ldap_add.xml" args="${conn1.username}, ${conn1.passwd}" obj-args="acct1" />
				<include prefix="0.add.account2" file="subs/ldap_add.xml" args="${conn2.username}, ${conn2.passwd}" obj-args="acct2" />
				<include prefix="0.add.account3" file="subs/ldap_add.xml" args="${conn3.username}, ${conn3.passwd}" obj-args="acct3" />
				
				<step no="1.1">
					<desc>
						-ifconfig to show vpc2's mac info
					</desc>
					<log-file>step1_ifconfig_vpc2_.log</log-file>
					<ssh target="br1.vpc2" timeout="60">
						-v "ifconfig ${br1.vpc2.tif.name} up"
						-v "ifconfig ${br1.vpc2.tif.name}"
					</ssh>
				</step>
		
				<step no="1.2">
					<desc>get raw mac of vpc2</desc>
					<setvar name="br1.vpc2.tif.mac1">
						echo $(${bin.dir}/getbyrexp.py -p "HWaddr ([\da-fA-F:]+)" -f ${log.dir}/step1_ifconfig_vpc2_.log -t str | tr "A-F" "a-f")
					</setvar>
				</step>
		
				<step no="1.3">
					<desc>get mac of br1.vpc2</desc>
					<setvar name="br1.vpc2.tif.mac">
						echo $(echo $(echo ${br1.vpc2.tif.mac1} | cut -d : -f1)$(echo ${br1.vpc2.tif.mac1} | cut -d : -f2,3)$(echo ${br1.vpc2.tif.mac1} | cut -d : -f4,5)$(echo ${br1.vpc2.tif.mac1} | cut -d : -f6))
					</setvar>
				</step>
		
				<step no="2.1">
					<desc>
						-ifconfig to show vpc3's mac info
					</desc>
					<log-file>step2_ifconfig_vpc3_.log</log-file>
					<ssh target="br1.vpc3" timeout="60">
						-v "ifconfig ${br1.vpc3.tif.name} up"
						-v "ifconfig ${br1.vpc3.tif.name}"
					</ssh>
				</step>
		
				<step no="2.2">
					<desc>get raw mac of vpc3</desc>
					<setvar name="br1.vpc3.tif.mac1">
						echo $(${bin.dir}/getbyrexp.py -p "HWaddr ([\da-fA-F:]+)" -f ${log.dir}/step2_ifconfig_vpc3_.log -t str | tr "A-F" "a-f")
					</setvar>
				</step>
		
				<step no="2.3">
					<desc>get mac of br1.vpc3</desc>
					<setvar name="br1.vpc3.tif.mac">
						echo $(echo $(echo ${br1.vpc3.tif.mac1} | cut -d : -f1)$(echo ${br1.vpc3.tif.mac1} | cut -d : -f2,3)$(echo ${br1.vpc3.tif.mac1} | cut -d : -f4,5)$(echo ${br1.vpc3.tif.mac1} | cut -d : -f6))
					</setvar>
				</step>
		
				<step no="3.1">
					<desc>configure mgt0.1 with dhcp service enable</desc>
					<telnet target="${br1.br.wan.ip}">
						-v "interface mgt0.1 vlan ${br1.vpc2.vlan}"
						-v "interface mgt0.1 ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
						-v "interface mgt0.1 dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
						-v "interface mgt0.1 dhcp-server options netmask ${br.route.netmask}"
						-v "interface mgt0.1 dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
						-v "interface mgt0.1 dhcp-server options dns1 ${pub.dns1.ip}"
						-v "interface mgt0.1 dhcp-server enable"
						-v "interface mgt0.2 vlan ${br1.vpc3.vlan}"
						-v "interface mgt0.2 ip ${br1.br.mgt0.2.ip}/${br.lan.netmask}"
						-v "interface mgt0.2 dhcp-server ip-pool ${br1.br.mgt0.2.ip_pool_start} ${br1.br.mgt0.2.ip_pool_end}"
						-v "interface mgt0.2 dhcp-server options netmask ${br.route.netmask}"
						-v "interface mgt0.2 dhcp-server options default-gateway ${br1.br.mgt0.2.ip}"
						-v "interface mgt0.2 dhcp-server options dns1 ${pub.dns1.ip}"
						-v "interface mgt0.2 dhcp-server enable"
					</telnet>
				</step>
		
				<step no="3.2">
					<desc>
						1. Set one security-object with radius-server
					</desc>
					<telnet target="${br1.br.wan.ip}">
						-v "security-object lan1"
						-v "security-object lan1 security protocol-suite 802.1x"
						-v "security-object lan1 security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
					</telnet>
				</step>
		
				<step no="3.3">
					<desc>
						2. Set one user-profile and define the attribute x,
						3. Set the eth1 mode as bridge-access and bind the attribute to it
						4. Bind the security-object to the eth1.
					</desc>
					<telnet target="${br1.br.wan.ip}">
						-v "user-profile lan1 qos-policy def-user-qos vlan-id ${br1.vpc2.vlan} attribute 1"
						-v "user-profile lan2 qos-policy def-user-qos vlan-id ${br1.vpc3.vlan} attribute 2"
						-v "interface eth2 mode bridge-access"
						-v "interface eth2 security-object lan1"
						-v "interface eth2 mac-learning enable"
						-v "aaa mac-format case-sensitivity lower-case"
						-v "aaa mac-format delimiter colon"
						-v "aaa mac-format style five-delimiter"
						-v "_debug auth all"
						-v "clear log all"
						-v "clear auth station"
					</telnet>
				</step>
		
		
		    <step no="5">
					<desc>
						-prepare config file with correct username and wrong password
					</desc>
					<log-file>step5_auth_log.log</log-file>
					<ssh target="br1.vpc2">
						-v "echo -e \&quot; ctrl_interface=DIR=/var/run/wpa_supplicant \\n ap_scan=0 \\n network={ \\n key_mgmt=IEEE8021X \\n eap=MD5 \\n identity=\\x22${conn1.username}\\x22 \\n password=\\x22${conn1.password}\\x22 \\n eapol_flags=0 \\n } \&quot; &gt; /tmp/wpa_supplicant.conf"
					</ssh>
				</step>
		
				<step no="5.1">
					<desc>
						-Laptop auth
					</desc>
					<log-file>step5.1_auth_log.log</log-file>
					<ssh target="br1.vpc2">
						-v "ifconfig ${br1.vpc2.tif.name} up"
						-v "wpa_supplicant -B -i ${br1.vpc2.tif.name} -c /tmp/wpa_supplicant.conf -D wired"
					</ssh>
				</step>
		
				<step no="5.2" delay="15" type="loop-check" loop-max-times="10" loop-interval="5">
					<desc>
						-check connect status
					</desc>
					<log-file>step5.2_check_connection.log</log-file>
					<ssh target="br1.vpc2" prompt=">|.*#" timeout="200">
						-v "wpa_cli"
						-v "stat"
						-v "quit"
					</ssh>
					<log-match>-c -i "wpa_state=COMPLETED"</log-match>
				</step>
		
				<step no="5.3">
					<desc>
						-release ip address
					</desc>
					<ssh target="br1.vpc2" timeout="120">
						-v "dhclient ${br1.vpc2.tif.name} -r"
					</ssh>
				</step>
		
				<step no="5.4" delay="10">
					<desc>
						-get ip address
					</desc>
					<log-file>step5.4_ifconfig_vpc2_.log</log-file>
					<ssh target="br1.vpc2" timeout="120">
						-v "dhclient ${br1.vpc2.tif.name}"
						-v "ifconfig ${br1.vpc2.tif.name}"
					</ssh>
					<log-match>-i "inet addr"</log-match>
				</step>
		
				<step no="6" type="loop-check" loop-max-times="6" loop-interval="10">
					<desc>
						show 802.1x-mac-table
					</desc>
					<log-file>step6_show_8021x_mac_${loop_check.idx}.log</log-file>
					<telnet target="${br1.br.wan.ip}">
						-v "show 802.1x-mac-table"
					</telnet>
					<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.vpc2.tif.mac}[\t ]+${br1.vpc2.vlan}[\t ]+eth1[\t ]+CLOSE[\t ]+N/A" -f ${log.dir}/${log.file}</log-match>
				</step>
		
				<step no="6.1" type="loop-check" loop-max-times="6" loop-interval="10">
					<desc>
						-check auth
					</desc>
					<log-file>step6.1_check_auth_${loop_check.idx}.log</log-file>
					<telnet target="${br1.br.wan.ip}">
						-v "show auth interface eth1"
					</telnet>
					<log-match>-c -i "Protocol-suite=802.1X"</log-match>
					<log-match>-c -i "Auth-mode=port-based"</log-match>
					<log-match>-c -i "${br1.vpc2.tif.mac}" -i "done" -i "${conn1.username}"</log-match>
				</step>
		
				<step no="6.2" delay="10">
					<desc>
						show logging buffered
					</desc>
					<log-file>step6.2_show_logging_buffered.log</log-file>
					<telnet target="${br1.br.wan.ip}" timeout="500">
						-v "show logging buffered"
					</telnet>
					<no-error-check />
					<log-match>-c -i "Station ${br1.vpc1.tif.mac} is authenticated to" -i "thru SSID lan1"</log-match>
					<log-match>-c -i "STA(${br1.vpc1.tif.mac}) login to SSID(eth1) by user_name=${conn1.username}"</log-match>
					<log-match>-c -i "IEEE 802.1X: ${br1.vpc1.tif.mac} BE_AUTH entering state SUCCESS"</log-match>
					<log-match>-c -i "Station is authenticated: SPA=${br1.vpc1.tif.mac}" -i "if=eth1" -i "VLAN-ID=${br1.vpc2.vlan}/${br1.vpc2.vlan}" -i "ssid=lan1"</log-match>
				</step>
		
				<step no="6.3" type="loop-check" loop-max-times="5" loop-interval="10">
					<desc>
						vpc1 ping pub dns
					</desc>
					<log-file>step6.3_ping_log_${loop_check.idx}.log</log-file>
					<ssh target="br1.vpc2" timeout="120">
						-v "ping ${pub.dns1.ip} -c 4"
					</ssh>
					<log-match>-c -i "from ${pub.dns1.ip}: " -i "ttl="</log-match>
				</step>
		</stage>		
		


		<post-process>
			<stage>
	
				<include prefix="del.account1" file="subs/ldap_delete.xml" args="${conn1.username}" />
	
				<include prefix="del.account2" file="subs/ldap_delete.xml" args="${conn2.username}" />
	
			</stage>
	
			<include file="include/br_default_post_process.xml" />
		</post-process>
</testcase>