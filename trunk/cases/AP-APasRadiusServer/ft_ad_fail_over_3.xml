<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>when the primary server ldap-bind fails,it fails over to backup server</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-a local radius server must be configed first
		-AP's clock should be sync to the AD server via a ntp server
		-config a primary AD server,binddn or basedn is wrong,exec net-join
		-config a backup AD server,admin user configed on AP
		-the primary server and backup server are in the same domain
		-setup a ssid using wpa2-tkip-802.1x,radius server is local

		Test Procedure:
		-_de radi ex to check the fail-over
		-client connect to ssid
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.proto" value="wpa-aes-8021x" />
	<property name="conn1.username" value="${pub.ad1.username}" />
	<property name="conn1.passwd" value="${pub.ad1.passwd}" />

	<stage>

		<step no="1">
			<desc>set security-object parameters</desc>
			<telnet target="ap1">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "security-object autoap"
				-v "security-object autoap default-user-profile-attr 1"
				-v "security-object autoap security protocol-suite wpa-aes-8021x"
			</telnet>
		</step>

		<step no="2">
			<desc>set local radius parameters</desc>
			<telnet target="ap1">
				-v "security-object autoap security aaa radius primary ${ap1.forwards.ip}"
				-v "aaa radius-server local db-type active-directory primary server 1.1.1.1"
				-v "aaa radius-server local db-type active-directory primary domain ${pub.ad1.name} fullname ${pub.ad1.realm} default"
				-v "aaa radius-server local db-type active-directory primary domain ${pub.ad1.name} binddn ${pub.ad1.binddn}123 password ${pub.ad1.bindpwd}123"
				-v "aaa radius-server local db-type active-directory primary login admin-user ${pub.ad1.admin} password ${pub.ad1.adminpwd}"
				-v "aaa radius-server local db-type active-directory backup1 server ${pub.ad1.ip}"
				-v "aaa radius-server local db-type active-directory backup1 domain ${pub.ad1.name} fullname ${pub.ad1.realm} default"
				-v "aaa radius-server local db-type active-directory backup1 domain ${pub.ad1.name} binddn ${pub.ad1.binddn} password ${pub.ad1.bindpwd}"
			</telnet>
		</step>

		<step no="2.1">
			<desc>config ssid and bind it to interface</desc>
			<telnet target="ap1">
				-v "aaa radius-server local db-type active-directory backup1 login admin-user ${pub.ad1.admin} password ${pub.ad1.adminpwd}"
				-v "aaa radius-server local retry-interval 90"
				-v "aaa radius-server local en"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile ttt vlan-id 1 attribute 1"
				-v "interface wifi0 radio channel 1"
				-v "exec aaa net-join domain ${pub.ad1.name} fullname ${pub.ad1.realm} server ${pub.ad1.name} username ${pub.ad1.admin} password ${pub.ad1.adminpwd}"
			</telnet>
			<no-error-check/>
		</step>

		<step no="2.2">
			<desc>show status of radius server on AP1</desc>
			<log-file>show_rad_srv.log</log-file>
			<telnet target="ap1">
				-v "show aaa radius-server"
			</telnet>
			<log-match>-i "Enabled" -i "Local RADIUS" -p 3</log-match>
			<log-match>-i "Remote Retry Period: *30 secs"</log-match>
			<log-match>-i "primary active-directory (active)"</log-match>
			<log-match>-i "backup1 active-directory:"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "primary active-directory \(active\)" -ps p1 "Full Domain Name:\s*${pub.ad1.realm}" p1 "Domain Name\s*${pub.ad1.name}" p1 "Server:\s*1.1.1.1" p1 "BindDN:\s*${pub.ad1.binddn}123" -e "backup1 active-directory:" -f "${log.dir}/${log.file}"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "backup1 active-directory:" -ps p1 "Full Domain Name:\s*${pub.ad1.realm}" p1 "Domain Name\s*${pub.ad1.name}" p1 "Server:\s*${pub.ad1.ip}" p1 "BindDN:\s*${pub.ad1.binddn}" -f "${log.dir}/${log.file}"</log-match>
		</step>

		<step no="3">
			<desc>open debug all and clear log all</desc>
			<telnet target="ap1">
				-v "_debug radiusd excessive"
				-v "clear log all"
			</telnet>
		</step>

		<include prefix="4" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<include prefix="5" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step5_show_logging_buffered.log" />

		<step no="6">
			<desc>check if failover successful</desc>
			<log-file>step5_show_logging_buffered.log</log-file>
			<log-match>-c -i "${pub.ad1.binddn}123 bind to 1.1.1.1:" -i "Can't contact LDAP server"</log-match>
			<log-match>-c -i "keep attemptting to this LDAP server within"</log-match>
			<log-match>-c -i "switch to backup1 active directory"</log-match>
			<log-match>-i "will keep on the LDAP server (${pub.ad1.ip}) within"</log-match>
			<log-match>-i "Bind was successful"</log-match>
		</step>

		<step no="6.1">
			<desc>open debug all and clear log all</desc>
			<telnet target="ap1">
				-v "_debug radiusd excessive"
				-v "clear log all"
			</telnet>
		</step>

		<include prefix="7" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<include prefix="8" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step8_show_logging_buffered.log" />

		<step no="8.1">
			<desc>check if sending primary active directory after success failover</desc>
			<log-file>step8_show_logging_buffered.log</log-file>
			<log-match>-c -i "retry primary LDAP server"</log-match>
			<log-match>-c -i "switch to primary active directory"</log-match>
		</step>

		<step no="9">
			<desc>Get the first times of sending message to primary active directory</desc>
			<setvar name="first.primary.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*connect to 1.1.1.1:\d+, authentication 0" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="9.1">
			<desc>Get the first times of sending messages to backup directory</desc>
			<setvar name="first.backup1.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*switch to backup1 active directory" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="9.2">
			<desc>
				check if the interval is between 30 to 50.
			</desc>
			<log-file>step9.2_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${first.backup1.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${first.primary.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple())) &gt;= 30.0 and (mktime(datetime.strptime('${first.backup1.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${first.primary.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple())) &lt;= 50.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="10">
			<desc>Get the second times of sending message to primary active directory</desc>
			<setvar name="retry.primary.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step8_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*switch to primary active directory" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="10.1">
			<desc>Get the second times of sending messages to backup directory</desc>
			<setvar name="retry.backup.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step8_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*switch to backup1 active directory" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="10.2">
			<desc>
				check if the interval is between 70 to 110.
			</desc>
			<log-file>step10.2_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${retry.backup.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${retry.primary.times}', '%Y-%m-%d %H:%M:%S').timetuple())) &gt;= 70.0 and (mktime(datetime.strptime('${retry.backup.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${retry.primary.times}', '%Y-%m-%d %H:%M:%S').timetuple())) &lt;= 110.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="11">
			<desc>show status of radius server on AP1</desc>
			<log-file>step11_show_rad_srv1.log</log-file>
			<telnet target="ap1">
				-v "show aaa radius-server"
			</telnet>
			<log-match>-i "backup1 active-directory (active):"</log-match>
			<log-match>-i "primary active-directory:"</log-match>
		</step>

		<include prefix="12" file="subs/chk_sta_conn_in_ap.xml" args="ap1, sta1, wpa-aes-8021x, WPA/CCMP, wpa-8021x, aes" />
	</stage>
</testcase>