<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Exist a accessible tftp server, redirect output of show command to tftp server(hostname or ip address)</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		AP connect to a tftp server, exist valid config file in tftp
		server

		Test Procedure:
		1. Login HiveAP
		2. Create some configurations and save config
		3. Check running config and current config
		4. Redirect running config to tftp server
		5. Check if output is correct in tftp server
		6. Redirect current config to tftp server
		7. Check if output is correct in tftp server
		8. Save config from tftp server to bootstrap
		9. Check bootstrap config by CLI
		10. Redirect bootstrap config to tftp server
		11. Check if output is correct in tftp server
		12. Redirect output of show interface to tftp server
		13. Check if output is correct
		14. Redirect output of show logging buffered to rftp
		server
		15. Check log message in tftp server
		16. Redirect output of show tech to tftp server
		17. Check if output is correct in tftp server
		Expectant result
		Can redirect successful, all output is correct
	</description>
	<numofbr>1</numofbr>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="1">
			<desc>
				1. Login HiveAP and create some configurations and save config
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "ssid ${ssid.name}"
				-v "save config"
			</telnet>
		</step>

		<step no="2">
			<desc>
				2. Check running config
			</desc>
			<log-file>step2_show_running_config.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show running-config"
			</telnet>
			<log-match>-e "ssid ${ssid.name}"</log-match>
		</step>

		<step no="2.1">
			<desc>
				2.1. Check current config
			</desc>
			<log-file>step2.1_show_config_current.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show config current"
			</telnet>
			<log-match>-e "ssid ${ssid.name}"</log-match>
		</step>

		<step no="3">
			<desc>
				3. Redirect running config to tftp server
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "show running-config > tftp://${pub.tftp1.tip}:${job.id}runconfig.txt"
			</telnet>
		</step>

		<step no="4">
			<desc>
				4. Check if output is correct in tftp server
			</desc>
			<log-file>step4_runconfig.log</log-file>
			<ssh host="${pub.tftp1.ip}">
				-v "cat /tftpboot/${job.id}runconfig.txt"
			</ssh>
			<log-match>-e "ssid ${ssid.name}"</log-match>
		</step>

		<step no="5">
			<desc>
				5. Redirect current config to tftp server
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "show config current > tftp://${pub.tftp1.tip}:${job.id}currentconfig.txt"
			</telnet>
		</step>

		<step no="6">
			<desc>
				6. Check if output is correct in tftp server
			</desc>
			<log-file>step6_currentconfig.log</log-file>
			<ssh host="${pub.tftp1.ip}">
				-v "cat /tftpboot/${job.id}currentconfig.txt"
			</ssh>
			<log-match>-e "ssid ${ssid.name}"</log-match>
		</step>

		<step no="7">
			<desc>
				7. Save config from tftp server to bootstrap
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "save config tftp://${pub.tftp1.tip}:${job.id}currentconfig.txt bootstrap"
			</telnet>
		</step>

		<step no="8">
			<desc>
				8. Check bootstrap config by CLI
			</desc>
			<log-file>step8_bootconfig.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show config bootstrap"
			</telnet>
			<!-- <log-match>-e "console page 0"</log-match> -->
			<!-- <log-match>-e "console timeout 0"</log-match> -->
			<log-match>-e "ssid ${ssid.name}"</log-match>
		</step>

		<step no="9">
			<desc>
				9. Redirect bootstrap config to tftp server
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "show config bootstrap > tftp://${pub.tftp1.tip}:${job.id}bootconfig_01.txt"
			</telnet>
		</step>

		<step no="10">
			<desc>
				10. Check if output is correct in tftp server
			</desc>
			<log-file>step10_bootconfig.log</log-file>
			<ssh host="${pub.tftp1.ip}">
				-v "cat /tftpboot/${job.id}bootconfig_01.txt"
			</ssh>
			<log-match>-e "ssid ${ssid.name}"</log-match>
			<!-- <log-match>-e "console page 0"</log-match> -->
			<!-- <log-match>-e "console timeout 0"</log-match> -->
		</step>

		<step no="11">
			<desc>
				11. Redirect output of show interface to tftp server
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "show interface > tftp://${pub.tftp1.tip}:${job.id}interface.txt"
			</telnet>
		</step>

		<step no="12">
			<desc>
				12. Check if output is correct
			</desc>
			<log-file>step12_interface.log</log-file>
			<ssh host="${pub.tftp1.ip}">
				-v "cat /tftpboot/${job.id}interface.txt"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Mgt0\s+[\w:]+\s+\-\s+[UD]\s+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Eth0\s+[\w:]+\s+\w+\s+[UD]\s+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Wifi0\s+[\w:]+\s+\w+\s+[UD]\s+" -f ${log.dir}/${log.file}</log-match>
			<!--<log-match bin="${bin.dir}/searchbyrexp.py">-p "Wifi1\s+[\w:]+\s+\w+\s+[UD]\s+" -f ${log.dir}/${log.file}</log-match>-->
		</step>

		<step no="13">
			<desc>
				clear log all
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "clear log all"
			</telnet>
		</step>

		<step no="13.1">
			<desc>
				13. Redirect output of show logging buffered to rftp
				server
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "show logging buffered > tftp://${pub.tftp1.tip}:${job.id}buffered.txt"
			</telnet>
		</step>

		<step no="14">
			<desc>
				14. Check log message in tftp server
			</desc>
			<log-file>step14_buffered.log</log-file>
			<ssh host="${pub.tftp1.ip}">
				-v "cat /tftpboot/${job.id}buffered.txt"
			</ssh>
			<log-match>-e "info" -c</log-match>
			<no-error-check />
		</step>

		<step no="15">
			<desc>
				15. Redirect output of show tech to tftp server
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "show tech > tftp://${pub.tftp1.tip}:${job.id}tech.txt"
			</telnet>
		</step>

		<step no="16">
			<desc>
				16. Check if output is correct in tftp server
				Expectant result
			</desc>
			<log-file>step16_tech.log</log-file>
			<ssh host="${pub.tftp1.ip}">
				-v "ll /tftpboot/${job.id}tech.txt"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\d+\s+\w+\s+\d+\s+\d+:\d+\s+/tftpboot/${job.id}tech.txt" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p " 0\s+\w+\s+\d+\s+\d+:\d+\s+/tftpboot/${job.id}tech.txt" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>
	<post-process>
		<stage>
			<step no="8">
				<desc>Clear bootstrap config of AP1</desc>
				<log-file>step8_ap1_bootstrap.log</log-file>
				<console target="br1.br" timeout="80">
					-v "reset config bootstrap"
				</console>
			</step>
			<step no="9">
				<desc>Remove config file in MPC</desc>
				<ssh host="${pub.tftp1.ip}">
					-v "rm -f /tftpboot/${job.id}tech.txt"
					-v "rm -f /tftpboot/${job.id}buffered.txt"
					-v "rm -f /tftpboot/${job.id}interface.txt"
					-v "rm -f /tftpboot/${job.id}bootconfig_01.txt"
					-v "rm -f /tftpboot/${job.id}runconfig.txt"
					-v "rm -f /tftpboot/${job.id}currentconfig.txt"
				</ssh>
			</step>
		</stage>

		<include file="include/br_default_post_process.xml" />
	</post-process>

</testcase>