<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Routing key scenarios testing</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>

		Pre-Condition:

		After routing protocol enable, GW can establish neighbors with other routers,
		VPN tunnel establish successfully
		BR1 ip:192.168.1.1/24, mgt0.1 ip 10.1.1.1/24, mgt0.2 ip 20.1.1.1/24
		mgt0.3 is 40.1.1.1/24 and configure as home office
		Laptop1 ip:10.1.1.2/24, Laptop3 ip 20.1.1.2/24, Laptop4 ip 40.1.1.2/24
		BR2 ip:192.168.2.1/24, mgt0.1 ip 30.1.1.1/24, Laptop2 ip 30.1.1.2/24
		GW1 ip: 10.155.1.1/24
		GW2 ip: 10.155.2.1/24
		PC3 ip: 172.16.1.1/24
		PC/Server ip: 172.18.1.0/24

		Test Procedure:

		1. Push configuration from HM, including GW and BR, make sure enable
		routing protocol (RIPv2 or OSPF) and advertise on GW1/GW2, using split
		tunnel mode, result 1
		2.Laptop1 ping Laptop3, result 2
		3.Laptop1 ping Laptop2, result 3
		4.Laptop1 ping PC3/PC4, result 4
		5.Laptop1 ping PC/Server, result 5
		6.PC2 ping PC3, result 6
		7.Laptop4 ping PC3, result 7
		7.Configure tunnel drop for the user-profile of Laptop1 on BR1, repeat step 2-
		5, result 8
		8.Configure tunnel all for the user-profile of Laptop1 on BR1, repeat
		step 2-5,
		result 9
		9. Configure tunnel exception for the user-profile of Laptop1 on BR1,
		exception for PC/Server and Laptop2, repeat step 2-5, result 10
	</description>

	<numofbr>2</numofbr>
	<numofcvg>2</numofcvg>
	<tbtype>winlin</tbtype>
	<cvg-opt-same-backnet>no</cvg-opt-same-backnet>


	<property name="vpn.client.list" value="clientList1" />
	<property name="vpn.server.name" value="vpnServer1" />

	<stage>
		<step no="pre.0.1" delay="600">
			<desc>enable wan port nat if FW nonexists</desc>
			<if>"no" == "${cvg1.cvg.fw_existed}"</if>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="5">
				-v "interface eth0 mode wan nat"
			</telnet>
		</step>

		<step no="pre.0.2">
			<desc>enable wan port nat if FW nonexists</desc>
			<if>"no" == "${cvg2.cvg.fw_existed}"</if>
			<telnet target="${cvg2.cvg.cons_ip}" port="${cvg2.cvg.cons_port}" timeout="5">
				-v "interface eth0 mode wan nat"
			</telnet>
		</step>

		<step no="pre.0.3">
			<desc>Enable DHCP server on BR1 interface mgt0.1</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "vlan ${br1.vpc1.vlan}"
				-v "interface vlan ${br1.vpc1.vlan}"
				-v "interface vlan${br1.vpc1.vlan} ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options netmask 255.255.255.0"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options dns1 ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server enable"
			</telnet>
		</step>

		<step no="pre.0.4" delay="10">
			<desc>Enable DHCP server on BR1 interface mgt0.2</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "vlan ${br1.vpc2.vlan}"
				-v "interface vlan ${br1.vpc2.vlan}"
				-v "interface vlan${br1.vpc2.vlan} ip ${br1.br.mgt0.2.ip}/${br.lan.netmask}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server ip-pool ${br1.br.mgt0.2.ip_pool_start} ${br1.br.mgt0.2.ip_pool_end}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options netmask 255.255.255.0"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options default-gateway ${br1.br.mgt0.2.ip}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options dns1 ${br1.br.mgt0.2.ip}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server enable"
			</telnet>
		</step>

		<step no="pre.0.5" delay="10">
			<desc>Enable DHCP server on BR1 interface mgt0.3</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "vlan ${br1.vpc3.vlan}"
				-v "interface vlan ${br1.vpc3.vlan}"
				-v "interface vlan${br1.vpc3.vlan} ip ${br1.br.mgt0.3.ip}/${br.lan.netmask}"
				-v "interface vlan${br1.vpc3.vlan} dhcp-server ip-pool ${br1.br.mgt0.3.ip_pool_start} ${br1.br.mgt0.3.ip_pool_end}"
				-v "interface vlan${br1.vpc3.vlan} dhcp-server options netmask 255.255.255.0"
				-v "interface vlan${br1.vpc3.vlan} dhcp-server options default-gateway ${br1.br.mgt0.3.ip}"
				-v "interface vlan${br1.vpc3.vlan} dhcp-server options dns1 ${br1.br.mgt0.3.ip}"
				-v "interface vlan${br1.vpc3.vlan} dhcp-server enable"
			</telnet>
		</step>

		<step no="pre.0.6">
			<desc>Enable DHCP server on BR2 interface mgt0.1</desc>
			<telnet target="${br2.br.wan.ip}">
				-v "vlan ${br2.vpc1.vlan}"
				-v "interface vlan ${br2.vpc1.vlan}"
				-v "interface vlan${br2.vpc1.vlan} ip ${br2.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface vlan${br2.vpc1.vlan} dhcp-server ip-pool ${br2.br.mgt0.1.ip_pool_start} ${br2.br.mgt0.1.ip_pool_end}"
				-v "interface vlan${br2.vpc1.vlan} dhcp-server options netmask 255.255.255.0"
				-v "interface vlan${br2.vpc1.vlan} dhcp-server options default-gateway ${br2.br.mgt0.1.ip}"
				-v "interface vlan${br2.vpc1.vlan} dhcp-server options dns1 ${br2.br.mgt0.1.ip}"
				-v "interface vlan${br2.vpc1.vlan} dhcp-server enable"
			</telnet>
		</step>
		
		<step no="pre.0.7" delay="10">
			<desc>Enable DHCP server on BR2 interface mgt0.2</desc>
			<telnet target="${br2.br.wan.ip}">
				-v "vlan ${br2.vpc2.vlan}"
				-v "interface vlan ${br2.vpc2.vlan}"
				-v "interface vlan${br2.vpc2.vlan} ip ${br2.br.mgt0.2.ip}/${br.lan.netmask}"
				-v "interface vlan${br2.vpc2.vlan} dhcp-server ip-pool ${br2.br.mgt0.2.ip_pool_start} ${br2.br.mgt0.2.ip_pool_end}"
				-v "interface vlan${br2.vpc2.vlan} dhcp-server options netmask 255.255.255.0"
				-v "interface vlan${br2.vpc2.vlan} dhcp-server options default-gateway ${br2.br.mgt0.2.ip}"
				-v "interface vlan${br2.vpc2.vlan} dhcp-server options dns1 ${br2.br.mgt0.2.ip}"
				-v "interface vlan${br2.vpc2.vlan} dhcp-server enable"
			</telnet>
		</step>

		<step no="1">
			<desc>Config CVGs as VPN server</desc>
		</step>

		<step no="1.1a">
			<desc>config CVG1 act as l3 VPN server</desc>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="60">
				-v "save vpn ee-cert tftp://${pub.tftp1.tip}:certs/server_cert.pem"
				-v "save vpn private-key tftp://${pub.tftp1.tip}:certs/server_key.pem"
				-v "vpn xauth-client-list ${vpn.client.list} local"
				-v "vpn xauth-client-list ${vpn.client.list} client-name ${br1.br.name} password aerohive"
				-v "vpn xauth-client-list ${vpn.client.list} client-name ${br2.br.name} password aerohive"
				-v "vpn server-ipsec-tunnel ${vpn.server.name} vpn-mode layer-3"
				-v "vpn ipsec-tunnel ${vpn.server.name} client-list ${vpn.client.list}"
				-v "vpn tunnel-policy vpn_tunnel_policy server ipsec-tunnel ${vpn.server.name}"
				-v ""
			</telnet>
		</step>

		<step no="1.1b">
			<desc>enable ospf on eth1 if cvg has two arms</desc>
			<if>"two" == "${cvg1.cvg.arm_type}"</if>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="10">
				-v "routing protocol ospf advertise eth1"
				-v "routing protocol ospf router-id ${cvg1.cvg.lan.ip}"
				-v "routing protocol type ospf"
				-v "routing protocol enable"
			</telnet>
		</step>

		<step no="1.1c">
			<desc>enable ospf on eth0 if cvg has one arms</desc>
			<if>"one" == "${cvg1.cvg.arm_type}"</if>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="10">
				-v "routing protocol ospf advertise eth0"
				-v "routing protocol ospf router-id ${cvg1.cvg.wan.ip}"
				-v "routing protocol type ospf"
				-v "routing protocol enable"
			</telnet>
		</step>

		<step no="1.2a">
			<desc>config CVG2 act as l3 VPN server</desc>
			<telnet target="${cvg2.cvg.cons_ip}" port="${cvg2.cvg.cons_port}" timeout="60">
				-v "save vpn ee-cert tftp://${pub.tftp1.tip}:certs/server_cert.pem"
				-v "save vpn private-key tftp://${pub.tftp1.tip}:certs/server_key.pem"
				-v "vpn xauth-client-list ${vpn.client.list} local"
				-v "vpn xauth-client-list ${vpn.client.list} client-name ${br1.br.name} password aerohive"
				-v "vpn xauth-client-list ${vpn.client.list} client-name ${br2.br.name} password aerohive"
				-v "vpn server-ipsec-tunnel ${vpn.server.name} vpn-mode layer-3"
				-v "vpn ipsec-tunnel ${vpn.server.name} client-list ${vpn.client.list}"
				-v "vpn tunnel-policy vpn_tunnel_policy server ipsec-tunnel ${vpn.server.name}"
				-v ""
				-v ""
			</telnet>
		</step>

		<step no="1.2b">
			<desc>enable ospf on cvg2 eth1 if it has two arms</desc>
			<if>"two" == "${cvg2.cvg.arm_type}"</if>
			<telnet target="${cvg2.cvg.cons_ip}" port="${cvg2.cvg.cons_port}" timeout="10">
				-v "routing protocol ospf advertise eth1"
				-v "routing protocol ospf router-id ${cvg2.cvg.lan.ip}"
				-v "routing protocol type ospf"
				-v "routing protocol enable"
			</telnet>
		</step>

		<step no="1.2c">
			<desc>enable ospf on cvg2 eth0 if it has one arms</desc>
			<if>"one" == "${cvg2.cvg.arm_type}"</if>
			<telnet target="${cvg2.cvg.cons_ip}" port="${cvg2.cvg.cons_port}" timeout="10">
				-v "routing protocol ospf advertise eth0"
				-v "routing protocol ospf router-id ${cvg2.cvg.wan.ip}"
				-v "routing protocol type ospf"
				-v "routing protocol enable"
			</telnet>
		</step>

		<step no="1.3a" type="loop-check" loop-max-times="6" loop-interval="10">
			<desc>On GW, OSPF neighbro were established </desc>
			<if>"two" == "${cvg1.cvg.arm_type}"</if>
			<log-file>step1.3a.show_ospf_neighbor_1.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="10">
				-v "show ospf neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Full/DR.+eth1:${cvg1.cvg.lan.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="1.3b" type="loop-check" loop-max-times="6" loop-interval="10">
			<desc>On GW, OSPF neighbro were established </desc>
			<if>"one" == "${cvg1.cvg.arm_type}"</if>
			<log-file>step1.3b.show_ospf_neighbor_1.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="10">
				-v "show ospf neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Full/DR.+eth0:${cvg1.cvg.wan.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="2.1">
			<desc>config BR1 as l3 VPN client</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "save vpn ca-cert tftp://${pub.tftp1.tip}:certs/cacert.pem"
				-v "vpn client-ipsec-tunnel ${br1.br.name}_ipsec_1 vpn-mode layer-3"
				-v "vpn ipsec-tunnel ${br1.br.name}_ipsec_1 gateway ${cvg1.cvg.tunnel.ip} client-name ${br1.br.name} password aerohive"
				-v "vpn tunnel-policy vpn_tunnel_policy client ipsec-tunnel ${br1.br.name}_ipsec_1 primary"
				-v ""
				-v ""
				-v "vpn client-ipsec-tunnel ${br1.br.name}_ipsec_2 vpn-mode layer-3"
				-v "vpn ipsec-tunnel ${br1.br.name}_ipsec_2 gateway ${cvg2.cvg.tunnel.ip} client-name ${br1.br.name} password aerohive"
				-v "vpn tunnel-policy vpn_tunnel_policy client ipsec-tunnel ${br1.br.name}_ipsec_2"
				-v "routing route-request enable"
				-v ""
				-v ""
				-v ""
				-v ""
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.ip}/${br.lan.netmask}"
				-v ""
				-v ""
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v ""
				-v ""
				-v ""
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.2.ip}/${br.lan.netmask}"
				-v ""
				-v ""
				-v ""
				-v ""
				-v "routing internal-sub-network ${br1.br.mgt0.3.ip}/${br.lan.netmask}"
				-v ""
				-v ""
				-v ""
				-v ""
			</telnet>
		</step>

		<step no="2.2">
			<desc>config BR2 as l3 VPN client</desc>
			<telnet target="${br2.br.wan.ip}" slow="yes">
				-v "save vpn ca-cert tftp://${pub.tftp1.tip}:certs/cacert.pem"
				-v "vpn client-ipsec-tunnel ${br2.br.name}_ipsec_1 vpn-mode layer-3"
				-v "vpn ipsec-tunnel ${br2.br.name}_ipsec_1 gateway ${cvg1.cvg.tunnel.ip} client-name ${br2.br.name} password aerohive"
				-v "vpn tunnel-policy vpn_tunnel_policy client ipsec-tunnel ${br2.br.name}_ipsec_1 primary"
				-v ""
				-v "vpn client-ipsec-tunnel ${br2.br.name}_ipsec_2 vpn-mode layer-3"
				-v "vpn ipsec-tunnel ${br2.br.name}_ipsec_2 gateway ${cvg2.cvg.tunnel.ip} client-name ${br2.br.name} password aerohive"
				-v "vpn tunnel-policy vpn_tunnel_policy client ipsec-tunnel ${br2.br.name}_ipsec_2"
				-v "routing route-request enable"
				-v ""
				-v ""
				-v ""
				-v "routing internal-sub-network ${br2.br.mgt0.ip}/${br.lan.netmask}"
				-v ""
				-v ""
				-v ""
				-v "routing internal-sub-network ${br2.br.mgt0.1.ip}/${br.lan.netmask}"
				-v ""
				-v ""
				-v ""
			</telnet>
		</step>

		<step no="set_lan_info">
			<multi-setvar>
				echo "br1.br.mgt0.1.route=$(echo ${br1.br.mgt0.1.ip} | cut -d. -f1,2,3).0"
				echo "br1.br.mgt0.2.route=$(echo ${br1.br.mgt0.2.ip} | cut -d. -f1,2,3).0"
				echo "br1.br.mgt0.3.route=$(echo ${br1.br.mgt0.3.ip} | cut -d. -f1,2,3).0"
				echo "br2.br.mgt0.1.route=$(echo ${br2.br.mgt0.1.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.cvg.lan.route=$(echo ${cvg1.cvg.lan.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.vpc1.route=$(echo ${cvg1.vpc1.tif.ip} | cut -d. -f1,2,3).0"
				echo "cvg2.cvg.lan.route=$(echo ${cvg1.cvg.lan.ip} | cut -d. -f1,2,3).0"
				echo "cvg2.vpc1.route=$(echo ${cvg1.vpc1.tif.ip} | cut -d. -f1,2,3).0"
			</multi-setvar>
		</step>

		<step no="3.1a" delay="10" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check vpn ike sa on BR1
				destination to CVG public address
			</desc>
			<log-file>setp3.1a.ike_sa_br_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "show vpn ike sa"
			</telnet>
			<log-match>-p 3 -i "9" -p 4 -i "I" -i "${cvg1.cvg.tunnel.ip}\[4500\]"</log-match>
			<log-match>-p 3 -i "9" -p 4 -i "I" -i "${cvg2.cvg.tunnel.ip}\[4500\]"</log-match>
		</step>

		<step no="3.1b" delay="10" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check vpn ike sa on BR2
				destination to CVG public address
			</desc>
			<log-file>setp3.1b.ike_sa_br_${loop_check.idx}.log</log-file>
			<telnet target="${br2.br.wan.ip}" slow="yes">
				-v "show vpn ike sa"
			</telnet>
			<log-match>-p 3 -i "9" -p 4 -i "I" -i "${cvg1.cvg.tunnel.ip}\[4500\]"</log-match>
			<log-match>-p 3 -i "9" -p 4 -i "I" -i "${cvg2.cvg.tunnel.ip}\[4500\]"</log-match>
		</step>

		<step no="3.2a" delay="10" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check vpn ike sa on CVG1 side
				destionation to BR public address
			</desc>
			<log-file>setp3.2a.ike_sa_cvg_${loop_check.idx}.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="5">
				-v "show vpn ike sa"
			</telnet>
			<log-match>-p 3 -i "9" -p 4 -i "R" -i "${br1.br.nat.ip}"</log-match>
			<log-match>-p 3 -i "9" -p 4 -i "R" -i "${br2.br.nat.ip}"</log-match>
		</step>

		<step no="3.2b" delay="10" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check vpn ike sa on CVG2 side
				destionation to BR public address
			</desc>
			<log-file>setp3.2b.ike_sa_cvg_${loop_check.idx}.log</log-file>
			<telnet target="${cvg2.cvg.cons_ip}" port="${cvg2.cvg.cons_port}" timeout="5">
				-v "show vpn ike sa"
			</telnet>
			<log-match>-p 3 -i "9" -p 4 -i "R" -i "${br1.br.nat.ip}"</log-match>
			<log-match>-p 3 -i "9" -p 4 -i "R" -i "${br2.br.nat.ip}"</log-match>
		</step>

		<step no="3.3a" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check gre tunnel on br1 side
				remote to CVG wan address, local mgt0 address ,gateway CVG public address
			</desc>
			<log-file>setp3.3a.show_gre_tunnel_br_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show vpn layer-3-tunnel"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*${cvg1.cvg.wan.ip}[\t ]*${br1.br.mgt0.ip}[\t ]*\d+[\t ]*${cvg1.cvg.tunnel.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*${cvg2.cvg.wan.ip}[\t ]*${br1.br.mgt0.ip}[\t ]*\d+[\t ]*${cvg2.cvg.tunnel.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.3b" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check gre tunnel on br2 side
				remote to CVG wan address, local mgt0 address ,gateway CVG public address
			</desc>
			<log-file>setp3.3b.show_gre_tunnel_br_${loop_check.idx}.log</log-file>
			<telnet target="${br2.br.wan.ip}">
				-v "show vpn layer-3-tunnel"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*${cvg1.cvg.wan.ip}[\t ]*${br2.br.mgt0.ip}[\t ]*\d+[\t ]*${cvg1.cvg.tunnel.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*${cvg2.cvg.wan.ip}[\t ]*${br2.br.mgt0.ip}[\t ]*\d+[\t ]*${cvg2.cvg.tunnel.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.5a" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check gre tunnel on cvg1 side
				local to CVG wan address
			</desc>
			<log-file>setp3.5a.show_gre_tunnel_cvg_${loop_check.idx}.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="5">
				-v "show vpn layer-3-tunnel"
			</telnet>
			<log-match>-p 1 -i "tunnel0" -p 3 -i "any" -p 4 -i "${cvg1.cvg.wan.ip}" -p 6 -i "anonymous"</log-match>
		</step>

		<step no="3.5b" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check gre tunnel on cvg side
				local to CVG2 wan address
			</desc>
			<log-file>setp3.5b.show_gre_tunnel_cvg_${loop_check.idx}.log</log-file>
			<telnet target="${cvg2.cvg.cons_ip}" port="${cvg2.cvg.cons_port}" timeout="5">
				-v "show vpn layer-3-tunnel"
			</telnet>
			<log-match>-p 1 -i "tunnel0" -p 3 -i "any" -p 4 -i "${cvg2.cvg.wan.ip}" -p 6 -i "anonymous"</log-match>
		</step>

		<step no="3.6a" type="loop-check" loop-max-times="10" loop-interval="30">
			<desc>On GW, CVG1 will add the tunnel routes according to BR's modification </desc>
			<log-file>setp3.6a.show_route_cvg_${loop_check.idx}.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="60">
				-v "show ip route"
			</telnet>
			<log-match>-p 1 -i "${br1.br.mgt0.1.route}" -p 8 -i "tunnel0"</log-match>
			<log-match>-p 1 -i "${br1.br.mgt0.2.route}" -p 8 -i "tunnel0"</log-match>
			<log-match>-p 1 -i "${br2.br.mgt0.1.route}" -p 8 -i "tunnel0"</log-match>
		</step>

		<step no="3.6b" type="loop-check" loop-max-times="10" loop-interval="30">
			<desc>On GW, CVG2 will add the tunnel routes according to BR's modification </desc>
			<log-file>setp3.6b.show_route_cvg_${loop_check.idx}.log</log-file>
			<telnet target="${cvg2.cvg.cons_ip}" port="${cvg2.cvg.cons_port}" timeout="10">
				-v "show ip route"
			</telnet>
			<log-match>-p 1 -i "${br1.br.mgt0.1.route}" -p 8 -i "tunnel0"</log-match>
			<log-match>-p 1 -i "${br1.br.mgt0.2.route}" -p 8 -i "tunnel0"</log-match>
			<log-match>-p 1 -i "${br2.br.mgt0.1.route}" -p 8 -i "tunnel0"</log-match>
		</step>

		<step no="3.7a" type="loop-check" loop-max-times="10" loop-interval="15">
			<desc> On BR1, all subnets get from GW will be tunneled</desc>
			<log-file>step3.7a.show_route_br_01_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show ip route"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${cvg1.cvg.lan.route}.+255.255.255.0.+tunnel\d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${cvg2.cvg.lan.route}.+255.255.255.0.+tunnel\d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${cvg1.vpc1.route}.+255.255.255.0.+tunnel\d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${cvg2.vpc1.route}.+255.255.255.0.+tunnel\d+" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.7b" type="loop-check" loop-max-times="10" loop-interval="15">
			<desc> On BR2, all subnets get from GW will be tunneled</desc>
			<log-file>step3.7b.show_route_br_01_${loop_check.idx}.log</log-file>
			<telnet target="${br2.br.wan.ip}">
				-v "show ip route"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${cvg1.cvg.lan.route}.+255.255.255.0.+tunnel\d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${cvg2.cvg.lan.route}.+255.255.255.0.+tunnel\d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${cvg1.vpc1.route}.+255.255.255.0.+tunnel\d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${cvg2.vpc1.route}.+255.255.255.0.+tunnel\d+" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4">
			<desc>
				setup all  eth interface as access mode
			</desc>
		</step>

		<step no="4.1a">
			<desc>
				set all wired interface as access mode on br1
				eth1 access br1.vlan1, eth4 access br1.vlan2
			</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "user-profile lan1 qos-policy def-user-qos vlan-id ${br1.vpc1.vlan} attribute 1"
				-v "user-profile lan2 qos-policy def-user-qos vlan-id ${br1.vpc2.vlan} attribute 2"
				-v "interface ${br1.br.lan.int1} switchport mode access"
				-v "interface ${br1.br.lan.int1} switchport access vlan ${br1.vpc1.vlan}"
				-v "interface ${br1.br.lan.int4} switchport mode access"
				-v "interface ${br1.br.lan.int4} switchport access vlan ${br1.vpc2.vlan}"
				-v "interface ${br1.br.lan.int1} switchport user-profile-attribute 1"
				-v "interface ${br1.br.lan.int4} switchport user-profile-attribute 2"
			</telnet>
		</step>
		<step no="4.2">
			<desc>
				set all wired interface as access mode on rb2
				eth1 access br2.vlan1, eth4 access br2.vlan2
			</desc>
			<telnet target="${br2.br.wan.ip}" slow="yes">
				-v "user-profile lan1 qos-policy def-user-qos vlan-id ${br2.vpc1.vlan} attribute 1"
				-v "user-profile lan2 qos-policy def-user-qos vlan-id ${br2.vpc2.vlan} attribute 2"
				-v "interface ${br2.br.lan.int1} switchport mode access"
				-v "interface ${br2.br.lan.int1} switchport access vlan ${br2.vpc1.vlan}"
				-v "interface ${br2.br.lan.int4} switchport mode access"
				-v "interface ${br2.br.lan.int4} switchport access vlan ${br2.vpc2.vlan}"
				-v "interface ${br2.br.lan.int1} switchport user-profile-attribute 1"
				-v "interface ${br2.br.lan.int4} switchport user-profile-attribute 2"
			</telnet>
		</step>

		<!--<step no="4.1b" delay="10">
			<desc>config SSID1 access vlan br1.vlan2</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface wifi0 mode dual"
				-v "security-object sta1"
				-v "security-object sta1 default-user-profile-attr 3"
				-v "ssid ${conn1.ssid}"
				-v "ssid ${conn1.ssid} security-object sta1"
				-v "interface wifi0 ssid ${conn1.ssid}"
				-v "user-profile sta1 qos-policy def-user-qos vlan-id ${br1.vlan1} attribute 3"
			</telnet>
		</step>

		<step no="4.1c" delay="10">
			<desc>set SSID2 for br1.station2, set vlan br1.vlan2</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "security-object sta2"
				-v "security-object sta2 default-user-profile-attr 4"
				-v "ssid ${conn2.ssid}"
				-v "ssid ${conn2.ssid} security-object sta2"
				-v "interface wifi0 ssid ${conn2.ssid}"
				-v "user-profile sta2 qos-policy def-user-qos vlan-id ${br1.vlan2} attribute 4"
			</telnet>
		</step>

		<step no="4.1d" delay="10">
			<desc>set SSID3 for br1.station3, set vlan br1.vlan3</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "security-object sta3"
				-v "security-object sta3 default-user-profile-attr 5"
				-v "ssid ${conn3.ssid}"
				-v "ssid ${conn3.ssid} security-object sta3"
				-v "interface wifi0 ssid ${conn3.ssid}"
				-v "user-profile sta3 qos-policy def-user-qos vlan-id ${br1.vlan3} attribute 5"
			</telnet>
		</step>

		<step no="4.2">
			<desc>config SSID4 access vlan br2.vlan1</desc>
			<telnet target="${br2.br.wan.ip}" slow="yes">
				-v "interface wifi0 mode dual"
				-v "security-object sta4"
				-v "security-object sta4 default-user-profile-attr 6"
				-v "ssid ${conn4.ssid}"
				-v "ssid ${conn4.ssid} security-object sta4"
				-v "interface wifi0 ssid ${conn4.ssid}"
				-v "user-profile sta4 qos-policy def-user-qos vlan-id ${br2.vlan1} attribute 6"
			</telnet>
		</step>-->

		<step no="5.1">
			<desc>br1.vpc1 get ip addr from dhcp server of mgt0.1</desc>
			<log-file>ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name} -r"
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="5.1b">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="5.2">
			<desc>br1.vpc4 get ip addr from dhcp server of mgt0.2</desc>
			<log-file>ifconfig_vpc4_.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "dhclient ${br1.vpc4.tif.name} -r"
				-v "dhclient ${br1.vpc4.tif.name}"
				-v "ifconfig ${br1.vpc4.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="5.2b">
			<desc>set br1.vpc4.tif.ip var for vpc4 on BR side</desc>
			<setvar name="br1.vpc4.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc4.mif.ip} -u ${br1.vpc4.user} -p ${br1.vpc4.passwd} -i ${br1.vpc4.tif.name} -nomask
			</setvar>
		</step>

		<step no="5.2c" type="loop-check" loop-max-times="5" loop-interval="10">
			<desc>br1.vpc4 ping pub.dns1.ip</desc>
			<log-file>step5.2c_ping_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc4">
				-v "ping ${pub.dns1.ip} -c 4"
			</ssh>
			<log-match>-c -i "from ${pub.dns1.ip}: " -i "ttl="</log-match>
		</step>
		
		
		<step no="5.3">
			<desc>br2.vpc1 get ip addr from dhcp server of mgt0.1</desc>
			<log-file>ifconfig_vpc1_.log</log-file>
			<ssh target="br2.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name} -r"
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="5.3b">
			<desc>set br2.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br2.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br2.vpc1.mif.ip} -u ${br2.vpc1.user} -p ${br2.vpc1.passwd} -i ${br2.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="5.4">
			<desc>br2.vpc4 get ip addr from dhcp server of mgt0.2</desc>
			<log-file>ifconfig_vpc4_.log</log-file>
			<ssh target="br2.vpc4" timeout="120">
				-v "dhclient ${br2.vpc4.tif.name} -r"
				-v "dhclient ${br2.vpc4.tif.name}"
				-v "ifconfig ${br2.vpc4.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="5.4b">
			<desc>set br2.vpc4.tif.ip var for vpc4 on BR side</desc>
			<setvar name="br2.vpc4.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br2.vpc4.mif.ip} -u ${br2.vpc4.user} -p ${br2.vpc4.passwd} -i ${br2.vpc4.tif.name} -nomask
			</setvar>
		</step>

		<step no="5.4c" type="loop-check" loop-max-times="5" loop-interval="10">
			<desc>br2.vpc4 ping pub.dns1.ip</desc>
			<log-file>step5.2c_ping_${loop_check.idx}.log</log-file>
			<ssh target="br2.vpc4">
				-v "ping ${pub.dns1.ip} -c 4"
			</ssh>
			<log-match>-c -i "from ${pub.dns1.ip}: " -i "ttl="</log-match>
		</step>

	</stage>

	

	<stage>
		<step no="6">
			<desc>
				1. Push configuration from HM, including GW and BR, make sure enable
				routing protocol (RIPv2 or OSPF) and advertise on GW1/GW2, using split
				tunnel mode, result 1: BRs get routes about aggregation routing of BR,
				PC3 and PC/Server from GW, and will update the routes periodically (60s);
				While tunnel establish from BRs to GW, and add the interfaces mgt0.x,
				BR will send the new add subnets to GW through HTTP POST packet,
				and GW will update its route table, GW��s route table has route about
				mgt0.1/0.2 about BR1, mgt0.1 about BR2
			</desc>
		</step>
		
		<step no="open.debug">
			<desc>
				open debug switch on br1
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "_ff id 1 src-ip ${br1.vpc1.tif.ip} bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log buffered"
			</telnet>
		</step>
		
		<step no="7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				br1.vpc1  ping  br1.vpc4,ping is successful
			</desc>
			<log-file>step7_ping_br1.vpc4_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${br1.vpc4.tif.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${br1.vpc4.tif.ip}" -i "ttl="</log-match>
		</step>
		
		<step no="7.1" delay="20">
			<desc>
				show logging buffered,the traffic from br1.vpc1 to br1.vpc4 is forwarded on the br1 local ,not forwarded on tunnel
			</desc>
			<log-file>step8.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match>-c -i "(i) ${br1.br.lan.kport4} ${br1.vpc4.tif.ip}-&gt;${br1.vpc1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(i) ${br1.br.lan.kport1} ${br1.vpc1.tif.ip}-&gt;${br1.vpc4.tif.ip}" -i "icmp-echo-req"</log-match>
			<no-error-check />
		</step>
		
		<step no="8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				br1.vpc1 ping br2.vpc1,ping is successful
			</desc>
			<log-file>step8_ping_br2.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${br2.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${br2.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>
		
		<step no="8.1" delay="20">
			<desc>
				show logging buffered,the traffic from br1.vpc1 to br2.vpc1 is forwarded  on tunnel
			</desc>
			<log-file>step8.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match>-c -i "(o) tunnel0 ${br1.vpc1.tif.ip}-&gt;${br2.vpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(i) ${br1.br.lan.kport1} ${br1.vpc1.tif.ip}-&gt;${br2.vpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<no-error-check />
		</step>
		
		<step no="9" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				br1.vpc1 ping cvg1.vpc1,ping is successful
			</desc>
			<log-file>step9_ping_cvg1.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${cvg1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${cvg1.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>
		
		<step no="9.1" delay="20">
			<desc>
				show logging buffered on br1,the traffic from br1.vpc1 to cvg1.vpc1 is forwarded  on tunnel
			</desc>
			<log-file>step9.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match>-c -i "(o) tunnel0 ${br1.vpc1.tif.ip}-&gt;${cvg1.vpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(i) ${br1.br.lan.kport1} ${br1.vpc1.tif.ip}-&gt;${cvg1.vpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<no-error-check />
		</step>
		
		<step no="open.debug">
			<desc>
				open debug switch on cvg1
			</desc>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="60">
				-v "_ff id 1 src-ip ${cvg1.vpc1.tif.ip} bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log buffered"
			</telnet>
		</step>
		
		<step no="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				cvg1.vpc1 ping cvg2.vpc1,ping is failed
			</desc>
			<log-file>step10_ping_cvg2.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="cvg1.vpc1" timeout="120">
				-v "ping ${cvg2.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -n -i "from ${cvg2.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>
		
	</stage>
</testcase>
