<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Two AP scheduled run at the same time,check if the function can work.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		1) select AP1 as DA.(reboot AP1 first,after 1 minute,reboot AP2)
		2) AP1:
		"radio profile na"
		"radio profile na phymode 11na"
		"radio profile na dfs"
		"interface wifi1 radio profile na"
		"interface wifi1 mode access"
		"ssid test-na1"
		"interface wifi1 ssid test-na1"
		"radio profile ng
		"radio profile ng phymode 11ng"
		"interface wifi0 radio profile ng"
		"ssid test-ng1"
		"interface wifi0 ssid test-ng1"
		AP2:
		"radio profile na"
		"radio profile na phymode 11na"
		"radio profile na dfs"
		"interface wifi1 radio profile na"
		"interface wifi1 mode access"
		"ssid test-na2"
		"interface wifi1 ssid test-na2"
		"radio profile ng
		"radio profile ng phymode 11ng"
		"interface wifi0 radio profile ng"
		"ssid test-ng2"
		"interface wifi0 ssid test-ng2"

		Test Procedure:
		1.Base on the current time on AP1, set wifi1 schedule run 1 minute later.
		AP1:
		"radio profile na acsp access channel-auto-select time-range XX:XX XX:XX"
		2.Base on the current time on AP2, set wifi1 schedule run 1 minute later.
		AP2:
		"radio profile na acsp access
		channel-auto-select time-range XX:XX XX:XX"
		3.show AP2 wifi1’s channel,save in channel list {ch1}
		"show interface wifi1 channel"
		4.for AP1 is DA,when two AP schedule run at the same time,AP1 will do first,and AP2 should wait,after AP1 done,then AP2 do schedule run.check if AP2 receive sched response wait msg and received sched response pass msg.and AP2 wifi1 all channel in {ch1} be scaned.
		AP2:
		"show logging buffered | in received sched response wait msg"
		"show logging buffered | in received sched response pass msg"
		5.Base on the current time on AP1, set wifi0 schedule run 1 minute later.
		AP1:
		"radio profile ng acsp access channel-auto-select time-range XX:XX XX:XX"
		6.Base on the current time on AP2, set wifi0 schedule run 1 minute later.
		AP2:
		"radio profile ng acsp access channel-auto-select time-range XX:XX XX:XX"
		7.show AP2 wifi0’s channel,save in channel list {ch2}
		"show interface wifi0 channel"
		8.for AP1 is DA,when two AP schedule run at the same time,AP1 will do first,and AP2 should
		wait,after AP1 done,then AP2 do schedule run.check if AP2 receive sched response wait msg and received sched response pass msg.and AP2 wifi0 all channel in {ch2} be scaned.
		AP2:
		"show logging buffered | in received sched response wait msg"
		"show logging buffered | in received sched response pass msg"
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="1">
			<desc>
				select AP1 as DA.(reboot AP1 first)
			</desc>
			<console target="ap1" timeout="120">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "save config"
				-v "reboot"
			</console>
		</step>

		<step no="1.1" delay="60">
			<desc>
				after 1 minute,reboot AP2
			</desc>
			<console target="ap2" timeout="120">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "save config"
				-v "reboot"
			</console>
		</step>

		<step no="2">
			<desc>
				2) AP1:
				"radio profile ng
				"radio profile ng phymode 11ng"
				"interface wifi0 radio profile ng"
				"ssid test-ng1"
				"interface wifi0 ssid test-ng1"
			</desc>
			<console target="ap1">
				-v "radio profile ng"
				-v "radio profile ng phymode 11ng"
				-v "interface wifi0 radio profile ng"
				-v "interface wifi0 mode access"
				-v "ssid ${ssid.name}_ng1"
				-v "interface wifi0 ssid ${ssid.name}_ng1"
			</console>
		</step>
		
		
		
		<step no="2.1">
		  <if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>
				2) AP1:
				"radio profile na"
				"radio profile na phymode 11na"
				"interface wifi1 radio profile na"
				"interface wifi1 mode access"
				"ssid test-na1"
				"interface wifi1 ssid test-na1"
			</desc>
			<console target="ap1">
				-v "interface wifi1 mode access"
				-v "radio profile na"
				-v "radio profile na phymode 11na"
				-v "interface wifi1 radio profile na"
				-v "ssid ${ssid.name}_na1"
				-v "interface wifi1 ssid ${ssid.name}_na1"
			</console>
		</step>
		
		

		<step no="2.2">
			<desc>
				AP2:
				"radio profile ng
				"radio profile ng phymode 11ng"
				"interface wifi0 radio profile ng"
				"ssid test-ng2"
				"interface wifi0 ssid test-ng2"
			</desc>
			<console target="ap2">
				-v "radio profile ng"
				-v "radio profile ng phymode 11ng"
				-v "interface wifi0 radio profile ng"
				-v "interface wifi0 mode access"
				-v "ssid ${ssid.name}_ng2"
				-v "interface wifi0 ssid ${ssid.name}_ng2"
			</console>
		</step>
		
		<step no="2.3">
		  <if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>
				AP2:
				"radio profile na"
				"radio profile na phymode 11na"
				"interface wifi1 radio profile na"
				"interface wifi1 mode access"
				"ssid test-na2"
				"interface wifi1 ssid test-na2"
			</desc>
			<console target="ap2">
				-v "interface wifi1 mode access"
				-v "radio profile na"
				-v "radio profile na phymode 11na"
				-v "interface wifi1 radio profile na"
				-v "ssid ${ssid.name}_na2"
				-v "interface wifi1 ssid ${ssid.name}_na2"
			</console>
		</step>
		

		<step no="3">
			<desc>
				set current time for ap1.
			</desc>
			<console target="ap1">
				-v "clock date-time 2011-11-06 13:53:00"
			</console>
		</step>

		<step no="3.1">
			<desc>
				set current time for ap2.
			</desc>
			<console target="ap2">
				-v "clock date-time 2011-11-06 13:53:06"
			</console>
		</step>


<!--<step no="3.2" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				1.check if AP1 is DA."show acsp channel-info arbiter" on AP2, Arbiter IP should equal to AP1’s mgt0 ip address.
			</desc>
			<log-file>step3.2_show_acsp_channel_info_arbiter_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show acsp channel-info arbiter"
			</console>
			<log-match>-e "Arbiter IP:" -i "${ap1.mgt0.ip}"</log-match>
		</step> -->

		<step no="4">
			<desc>
				Open acsp debug mode "_debug dcd chnl" "debug con"; clear logs
				"_debug dcd chnl"
				"debug console"
			</desc>
			<console target="ap2">
				-v "_debug dcd chnl"
			</console>
		</step>

		<step no="4.1">
			<desc>
				clear log all
			</desc>
			<console target="ap2">
				-v "clear log all"
			</console>
		</step>

		<step no="4.2">
			<desc>
				Open acsp debug mode "_debug dcd chnl" "debug con"; clear logs
				"_debug dcd chnl"
				"debug console"
			</desc>
			<console target="ap1">
				-v "_debug dcd chnl"
			</console>
		</step>

		<step no="4.3">
			<desc>
				clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>
	</stage>
  <stage>
    <if>"${ap1.wifi1.existed}" =="true"</if>
		<step no="5">
			<desc>
				show clock for wifi1.
			</desc>
			<log-file>show_wifi1_clock_info.log</log-file>
			<console target="ap2">
				-v "show clock"
			</console>
		</step>

		<step no="5.1">
			<desc>
				get schedule start time(format:%H:%M).
			</desc>
			<setvar name="wifi1.schedule.starttime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/show_wifi1_clock_info.log -p "(\d+:\d+):\d+" --script "(datetime.strptime(m.group(1),'%H:%M')+timedelta(minutes=2)).strftime('%H:%M')"
			</setvar>
		</step>

		<step no="5.2">
			<desc>
				get schedule end time(format:%H:%M).
			</desc>
			<setvar name="wifi1.schedule.endtime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/show_wifi1_clock_info.log -p "(\d+:\d+):\d+" --script "(datetime.strptime(m.group(1),'%H:%M')+timedelta(minutes=4)).strftime('%H:%M')"
			</setvar>
		</step>

		<step no="6">
			<desc>
				2.Base on the current time, set schedule run time.
				"radio profile na acsp access channel-auto-select time-range XX:XX XX:XX"
			</desc>
			<console target="ap1">
				-v "radio profile na acsp access channel-auto-select time-range ${wifi1.schedule.starttime} ${wifi1.schedule.endtime}"
			</console>
		</step>

		<step no="6.1">
			<desc>
				2.Base on the current time, set schedule run time.
				"radio profile na acsp access channel-auto-select time-range XX:XX XX:XX"
			</desc>
			<console target="ap2">
				-v "radio profile na acsp access channel-auto-select time-range ${wifi1.schedule.starttime} ${wifi1.schedule.endtime}"
			</console>
		</step>

		<step no="7">
			<desc>
				show interface wifi1 channel info.
			</desc>
			<log-file>step7_show_wifi1_channel_info.log</log-file>
			<console target="ap2">
				-v "show interface wifi1 channel"
			</console>
		</step>

		<step no="7.1">
			<desc>
				get wifi1 all channel for ap2.
			</desc>
			<setvar name="ap2.wifi1.channel">
				perl ${case.dir}/bin/get_wifi_all_channel.pl ${log.dir}/step7_show_wifi1_channel_info.log
			</setvar>
		</step>

		<step no="7.2">
			<desc>
				show interface wifi1 channel info.
			</desc>
			<log-file>step7.2_show_wifi1_channel_info.log</log-file>
			<console target="ap1">
				-v "show interface wifi1 channel"
			</console>
		</step>

		<step no="7.3">
			<desc>
				get wifi1 all channel for ap1.
			</desc>
			<setvar name="ap1.wifi1.channel">
				perl ${case.dir}/bin/get_wifi_all_channel.pl ${log.dir}/step7.2_show_wifi1_channel_info.log
			</setvar>
		</step>

		<step no="8" delay="120" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				AP2:
				"show logging buffered"
			</desc>
			<log-file>step8_show_wifi1_acsp_schedule_work_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "wifi1" -i "received sched response"</log-match>
		</step>

		<step no="8.1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				ap1:
				"show logging buffered"
			</desc>
			<log-file>step8.1_show_wifi1_acsp_schedule_work_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "wifi1" -i "received sched response"</log-match>
		</step>

		<step no="8.2">
			<desc>
				AP2:
				"show logging buffered"
			</desc>
			<log-file>step8.2_show_wifi1_acsp_schedule_work.log</log-file>
			<console target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
		</step>

		<step no="8.3">
			<desc>
				ap1:
				"show logging buffered"
			</desc>
			<log-file>step8.3_show_wifi1_acsp_schedule_work.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
		</step>

		<step no="8.4">
			<desc>
				check the number of ap2 received "sched wait msg"
			</desc>
			<setvar name="ap2_wifi1_sched_wait_number">
				${bin.dir}/getbyrexp.py -p "wifi1.*:\s*received sched response wait msg(.*) from arbiter\(${ap1.mgt0.ip}\)" -f ${log.dir}/step8.2_show_wifi1_acsp_schedule_work.log -t str --script_ms "1 if len(ms) else 0"
			</setvar>
		</step>

		<step no="9">
			<desc>
				check ap2 received pass msg when ap2 don't received wait msg
			</desc>
			<if>${ap2_wifi1_sched_wait_number} == 0</if>
			<log-file>step8.2_show_wifi1_acsp_schedule_work.log</log-file>
			<log-match>-e "wifi1" -i "received sched response pass msg"</log-match>
		</step>

		<step no="9.1">
			<desc>
				check ap1 received wait msg when ap2 don't received wait msg
			</desc>
			<if>${ap2_wifi1_sched_wait_number} == 0</if>
			<log-file>step8.3_show_wifi1_acsp_schedule_work.log</log-file>
			<log-match>-e "wifi1" -i "received sched response wait msg"</log-match>
		</step>

		<step no="9.1.1">
			<desc>
				get ap received schedule wait time(format:%Y-%M-%D %H:%M:%S).
			</desc>
			<if>${ap2_wifi1_sched_wait_number} == 0</if>
			<setvar name="wifi1.receive.sched.waittime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step8.3_show_wifi1_acsp_schedule_work.log -p "(\d.*\d)\s*.*wifi1.*:\s*received sched response wait msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "datetime.strptime(m.group(1),'%Y-%m-%d %H:%M:%S')"
			</setvar>
		</step>

		<step no="9.2" delay="90">
			<desc>
				ap1:
				"show logging buffered"
			</desc>
			<if>${ap2_wifi1_sched_wait_number} == 0</if>
			<log-file>step9.2_show_wifi1_acsp_schedule_work.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.*:\s*received sched response pass msg.*from arbiter\(${ap1.mgt0.ip}\)" -e "${wifi1.receive.sched.waittime}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="9.3">
			<desc>
				get schedule begin check time(format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi1_sched_wait_number} == 0</if>
			<setvar name="wifi1.schedulewait.begin.checktime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step9.2_show_wifi1_acsp_schedule_work.log -p "(\d.*\d):\d+\s*.*wifi1.*:\s*received sched response pass msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "(datetime.strptime(m.group(1),'%Y-%m-%d %H:%M')-timedelta(minutes=1)).strftime('%Y-%m-%d %H:%M')"
			</setvar>
		</step>

		<step no="9.4">
			<desc>
				get schedule end check time((format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi1_sched_wait_number} == 0</if>
			<setvar name="wifi1.schedulewait.end.checktime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step9.2_show_wifi1_acsp_schedule_work.log -p "(\d.*\d):\d+\s*.*wifi1.*:\s*received sched response pass msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "(datetime.strptime(m.group(1),'%Y-%m-%d %H:%M')+timedelta(minutes=2)).strftime('%Y-%m-%d %H:%M')"
			</setvar>
		</step>

		<step no="9.5" delay="120">
			<desc>
				Check if ACSP schedule run work.
			</desc>
			<if>${ap2_wifi1_sched_wait_number} == 0</if>
			<log-file>step9.5_show_wifi1_collecting_channel.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match loop-values="${ap1.wifi1.channel}" bin="${bin.dir}/searchbyrexp.py">-b "${wifi1.schedulewait.end.checktime}" -p "collecting raw data for channel\(${loop.v}\)" -e "${wifi1.schedulewait.begin.checktime}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="10">
			<desc>
				check ap2 received wait msg
			</desc>
			<if>${ap2_wifi1_sched_wait_number} != 0</if>
			<log-file>step8.2_show_wifi1_acsp_schedule_work.log</log-file>
			<log-match>-e "wifi1" -i "received sched response wait msg"</log-match>
		</step>

		<step no="10.1">
			<desc>
				check ap1 received pass msg when ap2 received wait msg
			</desc>
			<if>${ap2_wifi1_sched_wait_number} != 0</if>
			<log-file>step8.3_show_wifi1_acsp_schedule_work.log</log-file>
			<log-match>-e "wifi1" -i "received sched response pass msg"</log-match>
		</step>

		<step no="10.1.1">
			<desc>
				get ap received schedule wait time (format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi1_sched_wait_number} != 0</if>
			<setvar name="wifi1.receive.sched.waittime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step8.2_show_wifi1_acsp_schedule_work.log -p "(\d.*\d)\s*.*wifi1.*:\s*received sched response wait msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "datetime.strptime(m.group(1),'%Y-%m-%d %H:%M:%S')"
			</setvar>
		</step>

		<step no="10.2" delay="90">
			<desc>
				"show logging buffered"
			</desc>
			<if>${ap2_wifi1_sched_wait_number} != 0</if>
			<log-file>step10.2_show_wifi1_acsp_schedule_work.log</log-file>
			<console target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.*:\s*received sched response pass msg.*from arbiter\(${ap1.mgt0.ip}\)" -e "${wifi1.receive.sched.waittime}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="10.3">
			<desc>
				get schedule begin check time(format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi1_sched_wait_number} != 0</if>
			<setvar name="wifi1.schedulewait.begin.checktime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step10.2_show_wifi1_acsp_schedule_work.log -p "(\d.*\d):\d+\s*.*wifi1.*:\s*received sched response pass msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "(datetime.strptime(m.group(1),'%Y-%m-%d %H:%M')-timedelta(minutes=1)).strftime('%Y-%m-%d %H:%M')"
			</setvar>
		</step>

		<step no="10.4">
			<desc>
				get schedule end check time((format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi1_sched_wait_number} != 0</if>
			<setvar name="wifi1.schedulewait.end.checktime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step10.2_show_wifi1_acsp_schedule_work.log -p "(\d.*\d):\d+\s*.*wifi1.*:\s*received sched response pass msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "(datetime.strptime(m.group(1),'%Y-%m-%d %H:%M')+timedelta(minutes=2)).strftime('%Y-%m-%d %H:%M')"
			</setvar>
		</step>

		<step no="10.5" delay="120">
			<desc>
				Check if ACSP schedule run work.
			</desc>
			<if>${ap2_wifi1_sched_wait_number} != 0</if>
			<log-file>step10.5_show_wifi1_collecting_channel.log</log-file>
			<console target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match loop-values="${ap2.wifi1.channel}" bin="${bin.dir}/searchbyrexp.py">-b "${wifi1.schedulewait.end.checktime}" -p "collecting raw data for channel\(${loop.v}\)" -e "${wifi1.schedulewait.begin.checktime}" -f ${log.dir}/${log.file}</log-match>
		</step>
  </stage>
  
  <stage>
		<step no="11">
			<desc>
				show clock for wifi0.
			</desc>
			<log-file>show_wifi0_clock_info.log</log-file>
			<console target="ap2">
				-v "show clock"
			</console>
		</step>

		<step no="11.1">
			<desc>
				get schedule start time(format:%H:%M).
			</desc>
			<setvar name="wifi0.schedule.starttime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/show_wifi0_clock_info.log -p "(\d+:\d+):\d+" --script "(datetime.strptime(m.group(1),'%H:%M')+timedelta(minutes=2)).strftime('%H:%M')"
			</setvar>
		</step>

		<step no="11.2">
			<desc>
				get schedule end time(format:%H:%M).
			</desc>
			<setvar name="wifi0.schedule.endtime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/show_wifi0_clock_info.log -p "(\d+:\d+):\d+" --script "(datetime.strptime(m.group(1),'%H:%M')+timedelta(minutes=4)).strftime('%H:%M')"
			</setvar>
		</step>

		<step no="12">
			<desc>
				2. Open acsp debug mode "_debug dcd chnl" "debug con";
			</desc>
			<console target="ap2">
				-v "_debug dcd chnl"
			</console>
		</step>

		<step no="12.1">
			<desc>
				clear log all
			</desc>
			<console target="ap2">
				-v "clear log all"
			</console>
		</step>

		<step no="12.2">
			<desc>
				2. Open acsp debug mode "_debug dcd chnl" "debug con";
			</desc>
			<console target="ap1">
				-v "_debug dcd chnl"
			</console>
		</step>

		<step no="12.3">
			<desc>
				clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="13">
			<desc>
				2.Base on the current time, set schedule run time.
				"radio profile na acsp access channel-auto-select time-range XX:XX XX:XX"
			</desc>
			<console target="ap1">
				-v "radio profile ng acsp access channel-auto-select time-range ${wifi0.schedule.starttime} ${wifi0.schedule.endtime}"
			</console>
		</step>

		<step no="13.1">
			<desc>
				2.Base on the current time, set schedule run time.
				"radio profile na acsp access channel-auto-select time-range XX:XX XX:XX"
			</desc>
			<console target="ap2">
				-v "radio profile ng acsp access channel-auto-select time-range ${wifi0.schedule.starttime} ${wifi0.schedule.endtime}"
			</console>
		</step>

		<step no="14">
			<desc>
				show interface wifi0 channel info.
			</desc>
			<log-file>step14_show_wifi0_channel_info.log</log-file>
			<console target="ap2">
				-v "show interface wifi0 channel"
			</console>
		</step>

		<step no="14.1">
			<desc>
				get wifi0 all channel for ap2.
			</desc>
			<setvar name="ap2.wifi0.channel">
				perl ${case.dir}/bin/get_wifi_all_channel.pl ${log.dir}/step14_show_wifi0_channel_info.log
			</setvar>
		</step>

		<step no="14.2">
			<desc>
				show interface wifi0 channel info.
			</desc>
			<log-file>step14.2_show_wifi0_channel_info.log</log-file>
			<console target="ap1">
				-v "show interface wifi0 channel"
			</console>
		</step>

		<step no="14.3">
			<desc>
				get wifi0 all channel for ap2.
			</desc>
			<setvar name="ap1.wifi0.channel">
				perl ${case.dir}/bin/get_wifi_all_channel.pl ${log.dir}/step14.2_show_wifi0_channel_info.log
			</setvar>
		</step>

		<step no="15" delay="120" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				AP2:
				"show logging buffered"
			</desc>
			<log-file>step15_show_wifi0_acsp_schedule_work_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "wifi0" -i "received sched response"</log-match>
		</step>

		<step no="15.1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				ap1:
				"show logging buffered "
			</desc>
			<log-file>step15.1_show_wifi0_acsp_schedule_work_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "wifi0" -i "received sched response"</log-match>
		</step>

		<step no="15.2">
			<desc>
				AP2:
				"show logging buffered"
			</desc>
			<log-file>step15.2_show_wifi0_acsp_schedule_work.log</log-file>
			<console target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
		</step>

		<step no="15.3">
			<desc>
				ap1:
				"show logging buffered "
			</desc>
			<log-file>step15.3_show_wifi0_acsp_schedule_work.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
		</step>

		<step no="15.4">
			<desc>
				check the number of ap2's wifi0 received "sched wait msg"
			</desc>
			<setvar name="ap2_wifi0_sched_wait_number">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received sched response wait msg(.*) from arbiter\(${ap1.mgt0.ip}\)" -f ${log.dir}/step15.2_show_wifi0_acsp_schedule_work.log -t str --script_ms "1 if len(ms) else 0"
			</setvar>
		</step>

		<step no="16">
			<desc>
				check ap2 received pass msg when ap2 don't received wait msg
			</desc>
			<if>${ap2_wifi0_sched_wait_number} == 0</if>
			<log-file>step15.2_show_wifi0_acsp_schedule_work.log</log-file>
			<log-match>-e "wifi0" -i "received sched response pass msg"</log-match>
		</step>

		<step no="16.1">
			<desc>
				check ap1 received wait msg when ap2 don't received wait msg
			</desc>
			<if>${ap2_wifi0_sched_wait_number} == 0</if>
			<log-file>step15.3_show_wifi0_acsp_schedule_work.log</log-file>
			<log-match>-e "wifi0" -i "received sched response wait msg"</log-match>
		</step>

		<step no="16.1.1">
			<desc>
				get ap received schedule wait time(format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi0_sched_wait_number} == 0</if>
			<setvar name="wifi0.receive.sched.waittime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step15.3_show_wifi0_acsp_schedule_work.log -p "(\d.*\d)\s*.*wifi0.*:\s*received sched response wait msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "datetime.strptime(m.group(1),'%Y-%m-%d %H:%M:%S')"
			</setvar>
		</step>

		<step no="16.2" delay="90">
			<desc>
				ap1:
				"show logging buffered"
			</desc>
			<if>${ap2_wifi0_sched_wait_number} == 0</if>
			<log-file>step16.2_show_wifi0_acsp_schedule_work.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*:\s*received sched response pass msg.*from arbiter\(${ap1.mgt0.ip}\)" -e "${wifi0.receive.sched.waittime}" -f ${log.dir}/${log.file}</log-match>
		</step>

    <step no="16.3">
			<desc>
				get schedule begin check time(format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi0_sched_wait_number} == 0</if>
			<setvar name="wifi0.schedulewait.begin.checktime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step16.2_show_wifi0_acsp_schedule_work.log -p "(\d.*\d):\d+\s*.*wifi0.*:\s*received sched response pass msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "(datetime.strptime(m.group(1),'%Y-%m-%d %H:%M')-timedelta(minutes=1)).strftime('%Y-%m-%d %H:%M')"
			</setvar>
		</step> 

		<step no="16.4">
			<desc>
				get schedule end check time((format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi0_sched_wait_number} == 0</if>
			<setvar name="wifi0.schedulewait.end.checktime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step16.2_show_wifi0_acsp_schedule_work.log -p "(\d.*\d+):\d+\s*.*wifi0.*:\s*received sched response pass msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "(datetime.strptime(m.group(1),'%Y-%m-%d %H:%M')+timedelta(minutes=2)).strftime('%Y-%m-%d %H:%M')"
			</setvar>
		</step>

		<step no="16.5" delay="120">
			<desc>
				Check if ACSP schedule run work.
			</desc>
			<if>${ap2_wifi0_sched_wait_number} == 0</if>
			<log-file>step16.5_show_wifi0_collecting_channel.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match loop-values="${ap1.wifi0.channel}" bin="${bin.dir}/searchbyrexp.py">-b "${wifi0.schedulewait.end.checktime}" -p "collecting raw data for channel\(${loop.v}\)" -e "${wifi0.schedulewait.begin.checktime}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="17">
			<desc>
				check ap2 received wait msg when ap2 received wait msg
			</desc>
			<if>${ap2_wifi0_sched_wait_number} != 0</if>
			<log-file>step15.2_show_wifi0_acsp_schedule_work.log</log-file>
			<log-match>-e "wifi0" -i "received sched response wait msg"</log-match>
		</step>

		<step no="17.1">
			<desc>
				check ap1 received pass msg when ap2 received wait msg
			</desc>
			<if>${ap2_wifi0_sched_wait_number} != 0</if>
			<log-file>step15.3_show_wifi0_acsp_schedule_work.log</log-file>
			<log-match>-e "wifi0" -i "received sched response pass msg"</log-match>
		</step>

		<step no="17.1.1">
			<desc>
				get ap received schedule wait time(format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi0_sched_wait_number} != 0</if>
			<setvar name="wifi0.receive.sched.waittime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step15.2_show_wifi0_acsp_schedule_work.log -p "(\d.*\d)\s*.*wifi0.*:\s*received sched response wait msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "datetime.strptime(m.group(1),'%Y-%m-%d %H:%M:%S')"
			</setvar>
		</step>

		<step no="17.2" delay="120">
			<desc>
				"show logging buffered",make sure ap2 received sched response pass msg
			</desc>
			<if>${ap2_wifi0_sched_wait_number} != 0</if>
			<log-file>step17.2_show_wifi0_acsp_schedule_work.log</log-file>
			<console target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*:\s*received sched response pass msg.*from arbiter\(${ap1.mgt0.ip}\)" -e "${wifi0.receive.sched.waittime}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="17.3">
			<desc>
				get schedule begin check time(format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi0_sched_wait_number} != 0</if>
			<setvar name="wifi0.schedulewait.begin.checktime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step17.2_show_wifi0_acsp_schedule_work.log -p "(\d.*\d):\d+\s*.*wifi0.*:\s*received sched response pass msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "(datetime.strptime(m.group(1),'%Y-%m-%d %H:%M')-timedelta(minutes=1)).strftime('%Y-%m-%d %H:%M')"
			</setvar>
		</step>

		<step no="17.4">
			<desc>
				get schedule end check time((format:%Y-%M-%D %H:%M).
			</desc>
			<if>${ap2_wifi0_sched_wait_number} != 0</if>
			<setvar name="wifi0.schedulewait.end.checktime">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step17.2_show_wifi0_acsp_schedule_work.log -p "(\d.*\d+):\d+\s*.*wifi0.*:\s*received sched response pass msg(.*) from arbiter\(${ap1.mgt0.ip}\)" --script "(datetime.strptime(m.group(1),'%Y-%m-%d %H:%M')+timedelta(minutes=2)).strftime('%Y-%m-%d %H:%M')"
			</setvar>
		</step>

		<step no="17.5" delay="120">
			<desc>
				Check if ACSP schedule run work.
			</desc>
			<if>${ap2_wifi0_sched_wait_number} != 0</if>
			<log-file>step17.5_show_wifi0_collecting_channel.log</log-file>
			<console target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match loop-values="${ap2.wifi0.channel}" bin="${bin.dir}/searchbyrexp.py">-b "${wifi0.schedulewait.end.checktime}" -p "collecting raw data for channel\(${loop.v}\)" -e "${wifi0.schedulewait.begin.checktime}" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>
</testcase>