<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Three ap boot at the same time, check if quick re-scan work.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		AP1:
		"radio profile ng"
		"radio profile ng phymode 11ng"
		"interface wifi0 radio profile ng"
		"ssid test-ng1"
		"hive test-hive"
		"interface mgt0 hive test-hive"
		AP2:
		"radio profile ng"
		"radio profile ng phymode 11ng"
		"interface wifi0 radio profile ng"
		"ssid test-ng2"
		"hive test-hive"
		"interface mgt0 hive test-hive"
		AP3:
		"radio profile ng"
		"radio profile ng phymode 11ng"
		"interface wifi0 radio profile ng"
		"ssid test-ng3"
		"hive test-hive"
		"interface mgt0 hive test-hive"

		Test Procedure:
		1.bind ssid to AP wifi0,then shutdown AP1 AP2 AP3 wifi0.
		AP1:
		"interface wifi0 ssid test-ng1"
		"interface wifi0 ssid test-ng1 shutdown"
		AP2:
		"interface wifi0 ssid test-ng2"
		"interface wifi0 ssid test-ng2 shutdown"
		AP3:
		"interface wifi0 ssid test-ng3"
		"interface wifi0 ssid test-ng3 shutdown"
		2.check if AP wifi0 is down.
		AP1:
		show acsp | include "Link down"
		AP2:
		show acsp | include "Link down"
		AP3:
		show acsp | include "Link down"
		3.open channel debug mode
		AP1:
		"_debug dcd chnl"
		AP2:
		"_debug dcd chnl"
		AP3:
		"_debug dcd chnl"
		4.no
		shutdown AP1 AP2 AP3 wifi0 at same time.
		AP1:
		"no interface wifi0 ssid test-ng1 shutdown"
		AP2:
		"no interface wifi0 ssid test-ng2 shutdown"
		AP3:
		"no interface wifi0 ssid test-ng3 shutdown"
		5.check if 3 APs is scanning.
		AP1:
		show acsp | include "Scanning"
		AP2:
		show acsp | include "Scanning"
		AP3:
		show acsp | include "Scanning"
		6. After scan all channel, AP will select a channel and send channel_reuse_request to arbiter,When AP’s channel_reuse request is rejected by the arbiter, the arbiter should include the channel number it just granted (to another AP) into the reject message. AP can choose to do a quick channel rescan operation by only rescan that particular channel (and its adjacent channels, if it is on 2.4GHz band), then resubmit its channel_reuse request with the updated channel cost.
		7.check if AP1/AP2/AP3 received channel response deny or pass msg. Two AP of total 3 aps will receive response deny msg and one AP wil get response pass message.
		AP1: show logging buffered | include "received
		channel response deny msg"
		AP1: show logging buffered | include "received channel response pass msg"
		AP2: show logging buffered | include "received channel response deny msg"
		AP2: show logging buffered | include "received channel response pass msg"
		AP3: show logging buffered | include "received channel response deny msg"
		AP3: show logging buffered | include "received channel response pass msg"
		8.when AP receive channel response deny msg,it will do quick scan.and only scan its adjacent 4 channels,other channels will be skipped.for example,if permitted channel is 1,AP will only scan channel 1’s adjacent 4 channels,that is channel 1/2/3/4/5.and channel 6/7/8/9/10/11 will be skipped. if permitted chan is 5,AP will only scan channel 5’s adjacent 4 channels,that is channel 1/2/3/4/5/6/7/8/9.and channel 10/11 will be skipped. if permitted chan is 9,AP will only scan channel 9’s adjacent 4 channels, that is channel 5/6/7/8/9/10/11.and channel 1/2/3/4 will be skipped.
		9.check if quick scan function
		work on ap that receive channel response deny msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
		How to get skip channel: show logging buffered | include "skip channel"
		How to get scan channel: show logging buffered | include "collecting raw data for"
		10. After 2 minutes later, check if all AP go through listen and run state.
		AP1:show logging buffered | include listen
		AP1:show logging buffered | include run
		AP2:show logging buffered | include listen
		AP2:show logging buffered | include run
		AP3:show logging buffered | include listen
		AP3:show logging buffered | include run
	</description>
	<numofap>3</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="1">
			<desc>
				AP1:
				"radio profile ng"
				"radio profile ng phymode 11ng"
				"interface wifi0 radio profile ng"
				"ssid test-ng1"
				"interface wifi0 ssid test-ng1"
				"hive test-hive"
				"interface mgt0 hive test-hive"
			</desc>
			<telnet target="ap1">
				-v "radio profile ng"
				-v "radio profile ng phymode 11ng"
				-v "interface wifi0 radio profile ng"
				-v "ssid ${ssid.name}_ng1"
				-v "interface wifi0 ssid ${ssid.name}_ng1"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</telnet>
		</step>

		<step no="2">
			<desc>
				AP2:
				"radio profile ng"
				"radio profile ng phymode 11ng"
				"interface wifi0 radio profile ng"
				"ssid test-ng2"
				"interface wifi0 ssid test-ng2"
				"hive test-hive"
				"interface mgt0 hive test-hive"
			</desc>
			<telnet target="ap2">
				-v "radio profile ng"
				-v "radio profile ng phymode 11ng"
				-v "interface wifi0 radio profile ng"
				-v "ssid ${ssid.name}_ng2"
				-v "interface wifi0 ssid ${ssid.name}_ng2"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</telnet>
		</step>

		<step no="3">
			<desc>
				AP3:
				"radio profile ng"
				"radio profile ng phymode 11ng"
				"interface wifi0 radio profile ng"
				"ssid test-ng3"
				"interface wifi0 ssid test-ng3"
				"hive test-hive"
				"interface mgt0 hive test-hive"
			</desc>
			<telnet target="ap3">
				-v "radio profile ng"
				-v "radio profile ng phymode 11ng"
				-v "interface wifi0 radio profile ng"
				-v "ssid ${ssid.name}_ng3"
				-v "interface wifi0 ssid ${ssid.name}_ng3"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</telnet>
		</step>

		<step no="4">
			<desc>
				shutdown AP1's wifi0.
				AP1:"interface wifi0 ssid test-ng1 shutdown"
			</desc>
			<telnet target="ap1">
				-v "interface wifi0 ssid ${ssid.name}_ng1 shutdown"
			</telnet>
		</step>

		<step no="4.1">
			<desc>
				shutdown AP2's wifi0.
				AP2:"interface wifi0 ssid test-ng2 shutdown"
			</desc>
			<telnet target="ap2">
				-v "interface wifi0 ssid ${ssid.name}_ng2 shutdown"
			</telnet>
		</step>

		<step no="4.2">
			<desc>
				shutdown AP3's wifi0.
				AP3:"interface wifi0 ssid test-ng3 shutdown"
			</desc>
			<telnet target="ap3">
				-v "interface wifi0 ssid ${ssid.name}_ng3 shutdown"
			</telnet>
		</step>

		<step no="5">
			<desc>
				2.check if AP1's wifi0 is down.
				AP1:
				show acsp | include "Link down"
			</desc>
			<log-file>step5_show_acsp.log</log-file>
			<telnet target="ap1">
				-v "show acsp"
			</telnet>
			<log-match>-e "Wifi0 *Disable(Link down)"</log-match>
		</step>

		<step no="5.1">
			<desc>
				AP2:
				show acsp | include "Link down"
			</desc>
			<log-file>step5.1_show_acsp.log</log-file>
			<telnet target="ap2">
				-v "show acsp"
			</telnet>
			<log-match>-e "Wifi0 *Disable(Link down)"</log-match>
		</step>

		<step no="5.2">
			<desc>
				AP3:
				show acsp | include "Link down"
			</desc>
			<log-file>step5.2_show_acsp.log</log-file>
			<telnet target="ap3">
				-v "show acsp"
			</telnet>
			<log-match>-e "Wifi0 *Disable(Link down)"</log-match>
		</step>

		<step no="6">
			<desc>
				open channel debug mode on ap1.
			</desc>
			<telnet target="ap1">
				-v "_debug dcd chnl"
				-v "clear log all"
			</telnet>
		</step>

		<step no="6.1">
			<desc>
				open channel debug mode on ap2.
			</desc>
			<telnet target="ap2">
				-v "_debug dcd chnl"
				-v "clear log all"
			</telnet>
		</step>

		<step no="6.2">
			<desc>
				open channel debug mode on ap3.
			</desc>
			<telnet target="ap3">
				-v "_debug dcd chnl"
				-v "clear log all"
			</telnet>
		</step>

		<step no="7">
			<desc>
				no shutdown AP1's wifi0.
				AP1:"no interface wifi0 ssid test-ng1 shutdown"
			</desc>
			<telnet target="ap1">
				-v "no interface wifi0 ssid ${ssid.name}_ng1 shutdown"
			</telnet>
		</step>

		<step no="7.1">
			<desc>
				no shutdown AP2's wifi0.
				AP2:"no interface wifi0 ssid test-ng2 shutdown"
			</desc>
			<telnet target="ap2">
				-v "no interface wifi0 ssid ${ssid.name}_ng2 shutdown"
			</telnet>
		</step>

		<step no="7.2">
			<desc>
				no shutdown AP3's wifi0.
				AP3:"no interface wifi0 ssid test-ng3 shutdown"
			</desc>
			<telnet target="ap3">
				-v "no interface wifi0 ssid ${ssid.name}_ng3 shutdown"
			</telnet>
		</step>

		<step no="8">
			<desc>
				check if AP1's wifi0 is scanning.
				AP1:
				show acsp | include "scanning"
			</desc>
			<log-file>step8_show_acsp.log</log-file>
			<telnet target="ap1">
				-v "show acsp"
			</telnet>
			<log-match>-e "Wifi0 *Scanning"</log-match>
		</step>

		<step no="8.1">
			<desc>
				AP2:
				show acsp | include "scanning"
			</desc>
			<log-file>step8.1_show_acsp.log</log-file>
			<telnet target="ap2">
				-v "show acsp"
			</telnet>
			<log-match>-e "Wifi0 *Scanning"</log-match>
		</step>

		<step no="8.2">
			<desc>
				AP3:
				show acsp | include "scanning"
			</desc>
			<log-file>step8.2_show_acsp.log</log-file>
			<telnet target="ap3">
				-v "show acsp"
			</telnet>
			<log-match>-e "Wifi0 *Scanning"</log-match>
		</step>

		<step no="9" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				AP1: show logging buffered
			</desc>
			<log-file>step9_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match>-e "wifi0" -i "received channel response"</log-match>
		</step>

		<step no="9.1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				AP2: show logging buffered
			</desc>
			<log-file>step9.1_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match>-e "wifi0" -i "received channel response"</log-match>
		</step>

		<step no="9.2" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				AP3: show logging buffered
			</desc>
			<log-file>step9.2_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap3">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match>-e "wifi0" -i "received channel response"</log-match>
		</step>

		<step no="9.3">
			<desc>
				AP1: show logging buffered
			</desc>
			<log-file>step9.3_show_logging_buffered.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="9.4">
			<desc>
				AP2: show logging buffered
			</desc>
			<log-file>step9.4_show_logging_buffered.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="9.5">
			<desc>
				AP3: show logging buffered
			</desc>
			<log-file>step9.5_show_logging_buffered.log</log-file>
			<telnet target="ap3">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="10">
			<desc>
				get the number of ap1 "received channel response deny msg from arbiter" ,if ap1 received channel response deny msg from arbiter,the number is 1,else 0
			</desc>
			<setvar name="ap1_channel_deny_number">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -f ${log.dir}/step9.3_show_logging_buffered.log -t str --script_ms "1 if len(ms) else 0"
			</setvar>
		</step>

		<step no="10.1">
			<desc>
				get the number of ap2 "received channel response deny msg from arbiter" ,if ap2 received channel response deny msg from arbiter,the number is 1,else 0
			</desc>
			<setvar name="ap2_channel_deny_number">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -f ${log.dir}/step9.4_show_logging_buffered.log -t str --script_ms "1 if len(ms) else 0"
			</setvar>
		</step>

		<step no="10.2">
			<desc>
				get the number of ap3 "received channel response deny msg from arbiter" ,if ap3 received channel response deny msg from arbiter,the number is 1,else 0
			</desc>
			<setvar name="ap3_channel_deny_number">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -f ${log.dir}/step9.5_show_logging_buffered.log -t str --script_ms "1 if len(ms) else 0"
			</setvar>
		</step>

		<step no="11.0">
			<desc>
				check ap1 received pass msg when ap1 don't receive deny msg.
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<log-file>step9.3_show_logging_buffered.log</log-file>
			<log-match>-e "wifi0" -i "received channel response pass msg"</log-match>
		</step>

		<step no="11.0.1">
			<desc>
				get ap1 received deny msg time(format:%Y-%M-%D %H:%M:%S).
			</desc>
			<if>${ap1_channel_deny_number} == 1</if>
			<setvar name="ap1.receive.deny.time">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step9.3_show_logging_buffered.log -p "(\d.*\d)\s*.*wifi0.*:\s*received channel response deny msg" -t str -g0
			</setvar>
		</step>

		<step no="11.1">
			<desc>
				check ap2 received pass msg when ap2 don't receive deny msg.
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<log-file>step9.4_show_logging_buffered.log</log-file>
			<log-match>-e "wifi0" -i "received channel response pass msg"</log-match>
		</step>

		<step no="11.1.1">
			<desc>
				get ap2 received deny msg time(format:%Y-%M-%D %H:%M:%S).
			</desc>
			<if>${ap2_channel_deny_number} == 1</if>
			<setvar name="ap2.receive.deny.time">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step9.4_show_logging_buffered.log -p "(\d.*\d)\s*.*wifi0.*:\s*received channel response deny msg" -t str -g0
			</setvar>
		</step>

		<step no="11.2">
			<desc>
				check ap3 received pass msg when ap3 don't receive deny msg.
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<log-file>step9.5_show_logging_buffered.log</log-file>
			<log-match>-e "wifi0" -i "received channel response pass msg"</log-match>
		</step>

		<step no="11.2.1">
			<desc>
				get ap3 received deny msg time(format:%Y-%M-%D %H:%M:%S).
			</desc>
			<if>${ap3_channel_deny_number} == 1</if>
			<setvar name="ap3.receive.deny.time">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step9.5_show_logging_buffered.log -p "(\d.*\d)\s*.*wifi0.*:\s*received channel response deny msg" -t str -g0
			</setvar>
		</step>

		<step no="12">
			<desc>
				show logging buffered.
			</desc>
			<log-file>step12_show_logging_buffered.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="12.1">
			<desc>
				show logging buffered.
			</desc>
			<log-file>step12.1_show_logging_buffered.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="12.2">
			<desc>
				show logging buffered.
			</desc>
			<log-file>step12.2_show_logging_buffered.log</log-file>
			<telnet target="ap3">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="13">
			<desc>
				if AP1 received channel response pass msg,get permit channel for ap1
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<setvar name="ap1_permit_channel">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -f ${log.dir}/step9.3_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="13.1">
			<desc>
				AP1:
				show interface wifi0 channel
			</desc>
			<log-file>step13.1_show_interface_wifi0_channel.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0 channel"
			</telnet>
		</step>

		<step no="14">
			<desc>
				if AP2 received channel response pass msg,get permit channel for ap2
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<setvar name="ap2_permit_channel">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -f ${log.dir}/step9.4_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="14.1">
			<desc>
				AP2:
				show interface wifi0 channel
			</desc>
			<log-file>step14.1_show_interface_wifi0_channel.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi0 channel"
			</telnet>
		</step>

		<step no="15">
			<desc>
				if AP3 received channel response pass msg,get permit channel for ap3
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<setvar name="ap3_permit_channel">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -f ${log.dir}/step9.5_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="15.1">
			<desc>
				AP3:
				show interface wifi0 channel
			</desc>
			<log-file>step15.1_show_interface_wifi0_channel.log</log-file>
			<telnet target="ap3">
				-v "show interface wifi0 channel"
			</telnet>
		</step>

		<step no="16">
			<desc>
				get AP2's scan channel when ap1 received channel response pass msg
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<setvar name="ap2_scan_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step14.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap1_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap1_permit_channel}')+1+4])"
			</setvar>
		</step>

		<step no="16.1">
			<desc>
				get AP2's skip channel when ap1 received channel response pass msg
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<setvar name="ap2_skip_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step14.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap1_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap1_permit_channel}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="16.2">
			<desc>
				get AP3's scan channel when ap1 received channel response pass msg
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<setvar name="ap3_scan_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step15.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap1_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap1_permit_channel}')+1+4])"
			</setvar>
		</step>

		<step no="16.3">
			<desc>
				get AP3's skip channel when ap1 received channel response pass msg
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<setvar name="ap3_skip_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step15.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap1_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap1_permit_channel}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="16.4">
			<desc>
				ap2:
				check if quick scan function work on ap2 when ap1 received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<log-file>step12.1_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap2_skip_channel}">-e "wifi0" -i "ACSP skip channel ${loop.v} for quick scan"</log-match>
			<log-match loop-values="${ap2_scan_channel}">-e "wifi0" -i "collecting raw data for channel(${loop.v})"</log-match>
		</step>

		<step no="16.5">
			<desc>
				ap3:
				check if quick scan function work on ap3 when ap1 received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<log-file>step12.2_show_logging_buffered.log</log-file>
			<no-error-check />
			<log-match loop-values="${ap3_skip_channel}">-e "wifi0" -i "ACSP skip channel ${loop.v} for quick scan"</log-match>
			<log-match loop-values="${ap3_scan_channel}">-e "wifi0" -i "collecting raw data for channel(${loop.v})"</log-match>
		</step>

		<step no="17">
			<desc>
				get AP1's scan channel when ap2 received channel response pass msg
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<setvar name="ap1_scan_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step13.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap2_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap2_permit_channel}')+1+4])"
			</setvar>
		</step>

		<step no="17.1">
			<desc>
				get AP1's skip channel when ap2 received channel response pass msg
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<setvar name="ap1_skip_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step13.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap2_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap2_permit_channel}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="17.2">
			<desc>
				get AP3's scan channel when ap2 received channel response pass msg
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<setvar name="ap3_scan_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step15.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap2_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap2_permit_channel}')+1+4])"
			</setvar>
		</step>

		<step no="17.3">
			<desc>
				get AP3's skip channel when ap2 received channel response pass msg
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<setvar name="ap3_skip_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step15.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap2_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap2_permit_channel}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="17.4">
			<desc>
				ap1:
				check if quick scan function work on ap1 when ap2 received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<log-file>step12_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap1_skip_channel}">-e "wifi0" -i "ACSP skip channel ${loop.v} for quick scan"</log-match>
			<log-match loop-values="${ap1_scan_channel}">-e "wifi0" -i "collecting raw data for channel(${loop.v})"</log-match>
		</step>

		<step no="17.5">
			<desc>
				ap3:
				check if quick scan function work on ap3 when ap2 received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<log-file>step12.2_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap3_skip_channel}">-e "wifi0" -i "ACSP skip channel ${loop.v} for quick scan"</log-match>
			<log-match loop-values="${ap3_scan_channel}">-e "wifi0" -i "collecting raw data for channel(${loop.v})"</log-match>
		</step>

		<step no="18">
			<desc>
				get AP1's scan channel when ap3 received channel response pass msg
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<setvar name="ap1_scan_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step13.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap3_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap3_permit_channel}')+1+4])"
			</setvar>
		</step>

		<step no="18.1">
			<desc>
				get AP1's skip channel when ap3 received channel response pass msg
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<setvar name="ap1_skip_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step13.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap3_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap3_permit_channel}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="18.2">
			<desc>
				get AP2's scan channel when ap3 received channel response pass msg
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<setvar name="ap2_scan_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step14.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap3_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap3_permit_channel}')+1+4])"
			</setvar>
		</step>

		<step no="18.3">
			<desc>
				get AP2's skip channel when ap3 received channel response pass msg
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<setvar name="ap2_skip_channel">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step14.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap3_permit_channel}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap3_permit_channel}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="18.4">
			<desc>
				ap1:
				check if quick scan function work on ap1 when ap3 received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<log-file>step12_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap1_skip_channel}">-e "wifi0" -i "ACSP skip channel ${loop.v} for quick scan"</log-match>
			<log-match loop-values="${ap1_scan_channel}">-e "wifi0" -i "collecting raw data for channel(${loop.v})"</log-match>
		</step>

		<step no="18.5">
			<desc>
				ap2:
				check if quick scan function work on ap2 when ap3 received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<log-file>step12.1_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap2_skip_channel}">-e "wifi0" -i "ACSP skip channel ${loop.v} for quick scan"</log-match>
			<log-match loop-values="${ap2_scan_channel}">-e "wifi0" -i "collecting raw data for channel(${loop.v})"</log-match>
		</step>

		<step no="19">
			<desc>
				show logging buffered in order to check if quick scan function work on ap1 again.
			</desc>
			<log-file>step19_show_logging_buffered.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="19.1">
			<desc>
				show logging buffered in order to check if quick scan function work on ap2 again.
			</desc>
			<log-file>step19.1_show_logging_buffered.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="19.2">
			<desc>
				show logging buffered in order to check if quick scan function work on ap3 again.
			</desc>
			<log-file>step19.2_show_logging_buffered.log</log-file>
			<telnet target="ap3">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="20">
			<desc>
				get the number of ap1 "received channel response deny msg from arbiter" when ap1 recived channel response deny msg first,if ap1 received it again,the number is 2,else 1
			</desc>
			<if>${ap1_channel_deny_number} == 1</if>
			<setvar name="ap1_channel_deny_number_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -e "${ap1.receive.deny.time} debug\ \ \ wifi0" -f ${log.dir}/step19_show_logging_buffered.log -t str --script_ms "len(ms)"
			</setvar>
		</step>

		<step no="20.1">
			<desc>
				get the number of ap2 "received channel response deny msg from arbiter" when ap2 recived channel response deny msg first,if ap2 received it again,the number is 2,else 1
			</desc>
			<if>${ap2_channel_deny_number} == 1</if>
			<setvar name="ap2_channel_deny_number_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -e "${ap2.receive.deny.time} debug\ \ \ wifi0" -f ${log.dir}/step19.1_show_logging_buffered.log -t str --script_ms "len(ms)"
			</setvar>
		</step>

		<step no="20.2">
			<desc>
				get the number of ap3 "received channel response deny msg from arbiter" when ap3 recived channel response deny msg first,if ap3 received it again,the number is 2,else 1
			</desc>
			<if>${ap3_channel_deny_number} == 1</if>
			<setvar name="ap3_channel_deny_number_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -e "${ap3.receive.deny.time} debug\ \ \ wifi0" -f ${log.dir}/step19.2_show_logging_buffered.log -t str --script_ms "len(ms)"
			</setvar>
		</step>

		<step no="20.3">
			<desc>
				get the number of ap1 "received channel response deny msg from arbiter" when ap1 recived channel response pass msg first,the number is 0
			</desc>
			<if>${ap1_channel_deny_number} == 0</if>
			<setvar name="ap1_channel_deny_number_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -e "${ap1.receive.deny.time} debug\ \ \ wifi0" -f ${log.dir}/step19_show_logging_buffered.log -t str --script_ms "len(ms)"
			</setvar>
		</step>

		<step no="20.4">
			<desc>
				get the number of ap2 "received channel response deny msg from arbiter" when ap2 recived channel response pass msg first,the number is 0
			</desc>
			<if>${ap2_channel_deny_number} == 0</if>
			<setvar name="ap2_channel_deny_number_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -e "${ap2.receive.deny.time} debug\ \ \ wifi0" -f ${log.dir}/step19.1_show_logging_buffered.log -t str --script_ms "len(ms)"
			</setvar>
		</step>

		<step no="20.5">
			<desc>
				get the number of ap3 "received channel response deny msg from arbiter" when ap3 recived channel response pass msg first,the number is 0
			</desc>
			<if>${ap3_channel_deny_number} == 0</if>
			<setvar name="ap3_channel_deny_number_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response deny msg(.*) from arbiter" -e "${ap3.receive.deny.time} debug\ \ \ wifi0" -f ${log.dir}/step19.2_show_logging_buffered.log -t str --script_ms "len(ms)"
			</setvar>
		</step>

		<step no="21">
			<desc>
				if AP2 received channel response pass msg,get permit channel when ap1 received channel response pass msg first.
			</desc>
			<if>${ap1_channel_deny_number} == 0 &amp;&amp; ${ap2_channel_deny_number_second} == 1</if>
			<setvar name="ap2_permit_channel_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -e "${ap2.receive.deny.time}" -f ${log.dir}/step19.1_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="21.1">
			<desc>
				get AP3's scan channel when ap2 and ap1 all received channel response pass msg
			</desc>
			<if>${ap1_channel_deny_number} == 0 &amp;&amp; ${ap2_channel_deny_number_second} == 1</if>
			<setvar name="ap3_scan_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step15.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap2_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap2_permit_channel_second}')+1+4])"
			</setvar>
		</step>

		<step no="21.2">
			<desc>
				get AP3's skip channel when ap2 and ap1 all received channel response pass msg
			</desc>
			<if>${ap1_channel_deny_number} == 0 &amp;&amp; ${ap2_channel_deny_number_second} == 1</if>
			<setvar name="ap3_skip_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step15.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap2_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap2_permit_channel_second}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="21.3">
			<desc>
				ap3:
				check if quick scan function work on ap3 when ap1 and ap2 all received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap1_channel_deny_number} == 0 &amp;&amp; ${ap2_channel_deny_number_second} == 1</if>
			<log-file>step19.2_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap3_skip_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*ACSP skip channel ${loop.v} for quick scan" -e "${ap3.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
			<log-match loop-values="${ap3_scan_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*collecting raw data for channel\(${loop.v}\)" -e "${ap3.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="22">
			<desc>
				if AP3 received channel response pass msg,get permit channel when ap1 received channel response pass msg first.
			</desc>
			<if>${ap1_channel_deny_number} == 0 &amp;&amp; ${ap3_channel_deny_number_second} == 1</if>
			<setvar name="ap3_permit_channel_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -e "${ap3.receive.deny.time}" -f ${log.dir}/step19.2_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="22.1">
			<desc>
				get AP2's scan channel when ap3 and ap1 all received channel response pass msg
			</desc>
			<if>${ap1_channel_deny_number} == 0 &amp;&amp; ${ap3_channel_deny_number_second} == 1</if>
			<setvar name="ap2_scan_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step14.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap3_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap3_permit_channel_second}')+1+4])"
			</setvar>
		</step>

		<step no="22.2">
			<desc>
				get AP2's skip channel when ap3 and ap1 all received channel response pass msg
			</desc>
			<if>${ap1_channel_deny_number} == 0 &amp;&amp; ${ap3_channel_deny_number_second} == 1</if>
			<setvar name="ap2_skip_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step14.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap3_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap3_permit_channel_second}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="22.3">
			<desc>
				ap2:
				check if quick scan function work on ap2 when ap1 and ap3 all received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap1_channel_deny_number} == 0 &amp;&amp; ${ap3_channel_deny_number_second} == 1</if>
			<log-file>step19.1_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap2_skip_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*ACSP skip channel ${loop.v} for quick scan" -e "${ap2.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
			<log-match loop-values="${ap2_scan_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*collecting raw data for channel\(${loop.v}\)" -e "${ap2.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="23">
			<desc>
				if AP1 received channel response pass msg,get permit channel when ap2 received channel response pass msg first.
			</desc>
			<if>${ap2_channel_deny_number} == 0 &amp;&amp; ${ap1_channel_deny_number_second} == 1</if>
			<setvar name="ap1_permit_channel_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -e "${ap1.receive.deny.time}" -f ${log.dir}/step19_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="23.1">
			<desc>
				get AP3's scan channel when ap2 and ap1 all received channel response pass msg
			</desc>
			<if>${ap2_channel_deny_number} == 0 &amp;&amp; ${ap1_channel_deny_number_second} == 1</if>
			<setvar name="ap3_scan_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step15.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap1_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap1_permit_channel_second}')+1+4])"
			</setvar>
		</step>

		<step no="23.2">
			<desc>
				get AP3's skip channel when ap2 and ap1 all received channel response pass msg
			</desc>
			<if>${ap2_channel_deny_number} == 0 &amp;&amp; ${ap1_channel_deny_number_second} == 1</if>
			<setvar name="ap3_skip_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step15.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap1_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap1_permit_channel_second}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="23.3">
			<desc>
				ap3:
				check if quick scan function work on ap3 when ap1 and ap2 all received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap2_channel_deny_number} == 0 &amp;&amp; ${ap1_channel_deny_number_second} == 1</if>
			<log-file>step19.2_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap3_skip_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*ACSP skip channel ${loop.v} for quick scan" -e "${ap3.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
			<log-match loop-values="${ap3_scan_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*collecting raw data for channel\(${loop.v}\)" -e "${ap3.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="24">
			<desc>
				if AP3 received channel response pass msg,get permit channel when ap2 received channel response pass msg first.
			</desc>
			<if>${ap2_channel_deny_number} == 0 &amp;&amp; ${ap3_channel_deny_number_second} == 1</if>
			<setvar name="ap3_permit_channel_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -e "${ap3.receive.deny.time}" -f ${log.dir}/step19.2_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="24.1">
			<desc>
				get AP1's scan channel when ap3 and ap2 all received channel response pass msg
			</desc>
			<if>${ap2_channel_deny_number} == 0 &amp;&amp; ${ap3_channel_deny_number_second} == 1</if>
			<setvar name="ap1_scan_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step13.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap3_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap3_permit_channel_second}')+1+4])"
			</setvar>
		</step>

		<step no="24.2">
			<desc>
				get AP1's skip channel when ap3 and ap2 all received channel response pass msg
			</desc>
			<if>${ap2_channel_deny_number} == 0 &amp;&amp; ${ap3_channel_deny_number_second} == 1</if>
			<setvar name="ap1_skip_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step13.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap3_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap3_permit_channel_second}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="24.3">
			<desc>
				ap1:
				check if quick scan function work on ap1 when ap2 and ap3 all received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap2_channel_deny_number} == 0 &amp;&amp; ${ap3_channel_deny_number_second} == 1</if>
			<log-file>step19_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap1_skip_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*ACSP skip channel ${loop.v} for quick scan" -e "${ap1.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
			<log-match loop-values="${ap1_scan_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*collecting raw data for channel\(${loop.v}\)" -e "${ap1.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="25">
			<desc>
				if AP1 received channel response pass msg,get permit channel when ap3 received channel response pass msg first.
			</desc>
			<if>${ap3_channel_deny_number} == 0 &amp;&amp; ${ap1_channel_deny_number_second} == 1</if>
			<setvar name="ap1_permit_channel_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -e "${ap1.receive.deny.time}" -f ${log.dir}/step19_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="25.1">
			<desc>
				get AP2's scan channel when ap3 and ap1 all received channel response pass msg
			</desc>
			<if>${ap3_channel_deny_number} == 0 &amp;&amp; ${ap1_channel_deny_number_second} == 1</if>
			<setvar name="ap2_scan_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step14.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap1_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap1_permit_channel_second}')+1+4])"
			</setvar>
		</step>

		<step no="25.2">
			<desc>
				get AP2's skip channel when ap3 and ap1 all received channel response pass msg
			</desc>
			<if>${ap3_channel_deny_number} == 0 &amp;&amp; ${ap1_channel_deny_number_second} == 1</if>
			<setvar name="ap2_skip_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step14.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap1_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap1_permit_channel_second}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="25.3">
			<desc>
				ap2:
				check if quick scan function work on ap2 when ap1 and ap3 all received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap3_channel_deny_number} == 0 &amp;&amp; ${ap1_channel_deny_number_second} == 1</if>
			<log-file>step19.1_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap2_skip_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*ACSP skip channel ${loop.v} for quick scan" -e "${ap2.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
			<log-match loop-values="${ap2_scan_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*collecting raw data for channel\(${loop.v}\)" -e "${ap2.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="26">
			<desc>
				if AP2 received channel response pass msg,get permit channel when ap3 received channel response pass msg first.
			</desc>
			<if>${ap3_channel_deny_number} == 0 &amp;&amp; ${ap2_channel_deny_number_second} == 1</if>
			<setvar name="ap2_permit_channel_second">
				${bin.dir}/getbyrexp.py -p "wifi0.*:\s*received channel response pass msg\(permitted chan: (\d+)\)" -e "${ap2.receive.deny.time}" -f ${log.dir}/step19.1_show_logging_buffered.log -t str
			</setvar>
		</step>

		<step no="26.1">
			<desc>
				get AP1's scan channel when ap3 and ap2 all received channel response pass msg
			</desc>
			<if>${ap3_channel_deny_number} == 0 &amp;&amp; ${ap2_channel_deny_number_second} == 1</if>
			<setvar name="ap1_scan_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step13.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap2_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap2_permit_channel_second}')+1+4])"
			</setvar>
		</step>

		<step no="26.2">
			<desc>
				get AP1's skip channel when ap3 and ap2 all received channel response pass msg
			</desc>
			<if>${ap3_channel_deny_number} == 0 &amp;&amp; ${ap2_channel_deny_number_second} == 1</if>
			<setvar name="ap1_skip_channel_second">
				${bin.dir}/getbyrexp.py -p "Channel\s*(\d+)\s*:" -f ${log.dir}/step13.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern, line))" --script_ms "','.join(ms).replace(','.join(','.join(ms).split(',')[','.join(ms).split(',').index('${ap2_permit_channel_second}')-len(','.join(ms).split(','))-4:','.join(ms).split(',').index('${ap2_permit_channel_second}')+1+4]),'').replace(',,',',').strip(',')"
			</setvar>
		</step>

		<step no="26.3">
			<desc>
				ap1:
				check if quick scan function work on ap1 when ap2 and ap3 all received channel response pass msg. make sure skipped channel and scanned channel obey the algorithm of step 8.
			</desc>
			<if>${ap3_channel_deny_number} == 0 &amp;&amp; ${ap2_channel_deny_number_second} == 1</if>
			<log-file>step19_show_logging_buffered.log</log-file>
			<log-match loop-values="${ap1_skip_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*ACSP skip channel ${loop.v} for quick scan" -e "${ap1.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
			<log-match loop-values="${ap1_scan_channel_second}" bin="${bin.dir}/searchbyrexp.py">-p "wifi0.*collecting raw data for channel\(${loop.v}\)" -e "${ap1.receive.deny.time}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="27">
			<desc>
				check if AP1 go through listen and run state.
			</desc>
			<log-file>step27_show_logging_buffered.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match>-e "wifi0" -i "LISTEN state "</log-match>
			<log-match>-e "wifi0" -i "RUN state"</log-match>
		</step>

		<step no="27.1">
			<desc>
				check if AP2 go through listen and run state.
			</desc>
			<log-file>step27.1_show_logging_buffered.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match>-e "wifi0" -i "LISTEN state "</log-match>
			<log-match>-e "wifi0" -i "RUN state"</log-match>
		</step>

		<step no="27.2">
			<desc>
				check if AP3 go through listen and run state.
			</desc>
			<log-file>step27.2_show_logging_buffered.log</log-file>
			<telnet target="ap3">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match>-e "wifi0" -i "LISTEN state "</log-match>
			<log-match>-e "wifi0" -i "RUN state"</log-match>
		</step>
	</stage>
</testcase>