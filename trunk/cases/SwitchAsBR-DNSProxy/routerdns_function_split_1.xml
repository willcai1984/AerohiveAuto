<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Split DNS mode, when domain name request match configured internal domain name pattern will use internal DNS server, other will use external DNS server</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Set interface eth0 to wan mode
		Set interface eth1 to access mode and enable mac-learning
		Eth0 can obtain ip address from DHCP server
		Disable dhcp client on mgt0 and configure a static ip address
		Enable DHCP server on interface vlan${br1.vpc1.vlan}
		Enable DNS server on vlan${br1.vpc1.vlan}
		Set a SSID and bind it to interface wifi0
		Connect a client to SSID and make client obtain ip address from vlan${br1.vpc1.vlan}
		Only set one internal DNS server dns1 or dns2 or dns3
		Only set one external DNS server dns1 or dns2 or dns3
		Set internal domain name test.com
		Set filter _ff id 1 dst-port 53 bidirectional
		Open debug _kdebug fe basic/detail and debug console
		Use Wireshark to capture packet on client and DNS server
		Config:
		security-object 11
		security-object 11 default-user-profile-attr 100
		ssid routerdnstest
		ssid routerdnstest security-object 11
		interface eth0 mode wan
		interface eth0 manage telnet
		interface eth1 mode bridge-access
		interface eth1 mac-learning enable
		interface wifi0 ssid
		routerdnstest
		interface vlan${br1.vpc1.vlan} vlan 100
		interface vlan${br1.vpc1.vlan} ip 100.100.100.1/24
		interface mgt0 ip 172.17.112.101 255.255.255.0
		no interface mgt0 dhcp client
		interface vlan${br1.vpc1.vlan} dhcp-server options default-gateway 100.100.100.1
		interface vlan${br1.vpc1.vlan} dhcp-server options dns1 100.100.100.1
		interface vlan${br1.vpc1.vlan} dhcp-server ip-pool 100.100.100.10 100.100.100.100
		interface vlan${br1.vpc1.vlan} dhcp-server enable
		interface vlan${br1.vpc1.vlan} dns-server enable
		interface vlan${br1.vpc1.vlan} dns-server int-domain-name test.com
		interface vlan${br1.vpc1.vlan} dns-server int-resolve dns1 172.16.130.161
		interface vlan${br1.vpc1.vlan} dns-server ext-resolve dns1 10.155.32.231
		clock time-zone 8
		console page 100
		console timeout 0
		capwap client server name 10.155.32.121
		user-profile xx qos-policy def-user-qos vlan-id 100 attribute 100
		vpn client-ipsec-tunnel vl22 vpn-mode layer-3
		vpn ipsec-tunnel vl22 gateway 10.155.32.172 client-name ap password ***
		vpn
		tunnel-policy vl22 client ipsec-tunnel vl22 primary
		routing route-request enable
		routing internal-sub-network 172.17.112.0/22
		routing internal-sub-network 100.100.100.0/22

		Test Procedure:
		1.Ping xxx.test.com on client, verify which DNS server will be used
		2.Ping xxx.yyy.com on client, verify which DNS server will be used
	</description>
	<numofbr>1</numofbr>
	<numofcvg>1</numofcvg>
	<cvg-opt-arm>two</cvg-opt-arm>
	<cvg-opt-fw>yes</cvg-opt-fw>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${job.sid}-1" />
	<property name="br1.vpc1.mask" value="255.255.255.0" />
	<stage>
		<include prefix="1" file="subs/vpn_setup_one_sw.xml" obj-args="cvg1, br1" />

		<step no="2.2">
			<desc>
				config vlan${br1.vpc1.vlan} with dhcp service enable,dns service enable
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "vlan ${br1.vpc1.vlan}"
				-v "interface vlan ${br1.vpc1.vlan}"
				-v "interface vlan${br1.vpc1.vlan} ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options netmask ${br1.vpc1.mask}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options dns1 ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server enable"
				-v "interface vlan${br1.vpc1.vlan} dns-server int-domain-name ${cvg1.dns1.domain1}"
				-v "interface vlan${br1.vpc1.vlan} dns-server int-resolve dns1 ${cvg1.dns1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dns-server ext-resolve dns1 ${pub.dns1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dns-server enable"
			</telnet>
			<no-error-check />
		</step>

		<step no="2.3">
			<desc>
				Set interface eth0 to wan mode,eth1 to access mode and enable mac-learning
			</desc>
			<telnet target="${br1.br.wan.ip}">
				<!-- -v "user-profile lan1 qos-policy def-user-qos vlan-id ${br1.vpc1.vlan} attribute 1" -v "interface eth1 mode bridge-access user-profile-attribute 1" -v "interface eth1 mac-learning enable" -->
				-v "interface ${br1.br.lan.int1} switchport mode access"
				-v "interface ${br1.br.lan.int1} switchport access vlan ${br1.vpc1.vlan}"
			</telnet>
			<no-error-check />
		</step>


		<step no="2.5">
			<desc>br1.vpc1 get ip addr from dhcp server of mgt0.1</desc>
			<log-file>ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name} -r"
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="2.6">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="4.1">
			<desc>
				packet capture on internal dns server
			</desc>
			<log-file>step4.1_inndns1_packet_capture.log</log-file>
			<ssh host="${cvg1.dns1.mip}">
				-v "nohup tshark -l -i ${cvg1.dns1.tif.name} ip proto 17 and src ${br1.br.mgt0.1.ip} &gt; ${job.id}intdns_ping_1.log &amp;"
			</ssh>
		</step>

		<step no="4.2">
			<desc>
				get cvg1.dns1 tshark process
			</desc>
			<setvar name="dns1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4.1_inndns1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4.3">
			<desc>
				packet capture on external dns server
			</desc>
			<log-file>step4.3_pubdns1_packet_capture.log</log-file>
			<ssh host="${pub.dns1.ip}">
				-v "nohup tshark -l -i ${pub.dns1.tif.name} ip proto 17 and src ${br1.br.mgt0.1.ip} &gt; ${job.id}extdns_ping_1.log &amp;"
			</ssh>
		</step>

		<step no="4.4">
			<desc>
				get pub.dns1 tshark process
			</desc>
			<setvar name="pubdns1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4.3_pubdns1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4.5">
			<desc>
				vpc1 ping internal domain name
			</desc>
			<log-file>step4.5_vpc_ping_internal_domain.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${cvg1.dns1.domain1} -c 10"
			</ssh>
			<log-match>-c -i "from ${cvg1.dns1.domain1}" -i "ttl="</log-match>
		</step>

		<step no="4.6">
			<desc>
				check ping packet on internal dns server
			</desc>
			<log-file>4.6.intdns_check_ping_packet.log</log-file>
			<ssh host="${cvg1.dns1.mip}">
				-v "kill -9 ${dns1.tshark.id_1}"
				-v "cat ${job.id}intdns_ping_1.log"
				-v "rm -f ${job.id}intdns_ping_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${cvg1.dns1.ip}.+DNS.+Standard query.+A.+${cvg1.dns1.domain1}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.7">
			<desc>
				check ping packet on external dns server
			</desc>
			<log-file>extdns_check_ping_packet_int.log</log-file>
			<ssh host="${pub.dns1.ip}">
				-v "kill -9 ${pubdns1.tshark.id_1}"
				-v "cat ${job.id}extdns_ping_1.log"
				-v "rm -f ${job.id}extdns_ping_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${pub.dns1.ip}.+DNS.+Standard query.+A.+${cvg1.dns1.domain1}" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5">
			<desc>
				packet capture on external dns server
			</desc>
			<log-file>step5_dns_server_packet_capture.log</log-file>
			<ssh host="${pub.dns1.ip}" slow="20">
				-v "nohup tshark -l -i ${pub.http_server.tif.name} ip proto 17 &gt; ${job.id}ping_2.log &amp;"
			</ssh>
		</step>

		<step no="5.1">
			<desc>
				get tcpdump process
			</desc>
			<setvar name="tcpdump.id_2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_dns_server_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="5.2">
			<desc>
				sta ping external domain name
			</desc>
			<log-file>step5.2_vpc_ping_external_domain.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${pub.dns1.domain1} -c 5"
			</ssh>
			<log-match>-c -i "from ${pub.dns1.domain1}" -i "ttl="</log-match>
		</step>

		<step no="5.3">
			<desc>
				check ping packet on external dns server
			</desc>
			<log-file>step5.3_check_ping_packet.log</log-file>
			<ssh host="${pub.dns1.ip}">
				-v "kill ${tcpdump.id_2}"
				-v "cat ${job.id}ping_2.log | grep ${pub.dns1.domain1}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)${pub.br_fw.ip}\s+-&gt;\s+${pub.dns1.ip}.*${pub.dns1.domain1}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				clear file
			</desc>
			<ssh host="${pub.dns1.ip}">
				-v "kill -9 ${pubdns1.tshark.id_1}"
				-v "rm -f ${job.id}extdns_ping_1.log"
				-v "rm -f ${job.id}ping_2.log"
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				clear file
			</desc>
			<ssh host="${cvg1.dns1.mip}">
				-v "kill -9 ${dns1.tshark.id_1}"
				-v "rm -f ${job.id}intdns_ping_1.log"
			</ssh>
		</step>
	</stage>

	<failed-process>
		<stage>
			<step no="0">
				<desc>
					clear file
				</desc>
				<ssh host="${pub.dns1.ip}">
					-v "kill -9 ${pubdns1.tshark.id_1}"
					-v "rm -f ${job.id}extdns_ping_1.log"
					-v "rm -f ${job.id}ping_2.log"
				</ssh>
				<no-error-check />
			</step>

			<step no="0.1">
				<desc>
					clear file
				</desc>
				<ssh host="${cvg1.dns1.mip}">
					-v "kill -9 ${dns1.tshark.id_1}"
					-v "rm -f ${job.id}intdns_ping_1.log"
				</ssh>
				<no-error-check />
			</step>
		</stage>

		<include file="include/br_default_post_process.xml" />
	</failed-process>
</testcase>