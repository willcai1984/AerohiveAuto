<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Split mode, DNS server of mgt0(mgt0.x) is enabled, if DHCP option configure a usable DNS server, which DNS server be used</brief>
	<priority>Middle</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Set interface ${br1.br.wan.int1} to wan mode
		Set interface eth1 to access mode and enable mac-learning
		${br1.br.wan.int1} can obtain ip address from DHCP server
		Disable dhcp client on mgt0 and configure a static ip address
		Enable DHCP server on interface mgt0.1
		Enable DNS server on interface mgt0.1
		Set DNS server on dhcp-server option of mgt0.1
		Set a SSID and bind it to interface wifi0
		Connect a client to SSID and make client obtain ip address from mgt0.1
		Only set one internal DNS server dns1
		Only set one external DNS server dns1
		Set internal domain name test.com
		Set internal domain name xxx.com with destination DNS server a.b.c.d
		Use Wireshark to capture packet on client and DNS server
		Set filter _ff id 1 dst-port 53 bidirectional
		Open debug _kdebug fe basic/detail and debug console
		Running-config:
		AH-457d80#show running-config | in mgt0.1
		interface mgt0.1 vlan 100
		interface mgt0.1 ip 100.100.100.1/24
		interface mgt0.1 dhcp-server options default-gateway 100.100.100.1
		interface mgt0.1 dhcp-server options
		dns1 100.100.100.1
		interface mgt0.1 dhcp-server options dns2 172.17.112.1
		interface mgt0.1 dhcp-server ip-pool 100.100.100.10 100.100.100.100
		interface mgt0.1 dhcp-server enable
		interface mgt0.1 dns-server enable
		interface mgt0.1 dns-server int-domain-name zhhtest.com
		interface mgt0.1 dns-server int-domain-name xxx.com 172.16.130.164
		interface mgt0.1 dns-server int-resolve dns1 172.16.130.161
		interface mgt0.1 dns-server ext-resolve dns1 10.155.32.231

		Test Procedure:
		1. Check if obtain DNS server from DHCP server mgt0.1
		2. Ping xxx.test.com from client, verify which DNS server be used
		3. Ping aaa.xxx.com from client, verify which DNS server be used
		4. Ping xxx.yyy.com from client, verify which DNS server be used
	</description>
	<numofbr>1</numofbr>
	<numofcvg>1</numofcvg>
	<cvg-opt-arm>two</cvg-opt-arm>
	<cvg-opt-fw>yes</cvg-opt-fw>
	<tbtype>linux</tbtype>
	<property name="br1.vpc1.mask" value="255.255.255.0" />
	<stage>
		<include prefix="1" file="subs/vpn_setup_one_sw.xml" obj-args="cvg1, br1" />
		<step no="2.2">
			<desc>
				config mgt0.1 with dhcp service enable,dns service enable
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "vlan ${br1.vpc1.vlan}"
				-v "interface vlan ${br1.vpc1.vlan}"
				-v "interface vlan${br1.vpc1.vlan} ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options netmask ${br1.vpc1.mask}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options dns1 ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server enable"
				-v "interface vlan${br1.vpc1.vlan} dns-server int-domain-name ${cvg1.dns1.domain1}"
				-v "interface vlan${br1.vpc1.vlan} dns-server int-resolve dns1 ${cvg1.dns1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dns-server ext-resolve dns1 ${pub.dns1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dns-server int-domain-name ${cvg1.dns2.domain1} ${cvg1.dns2.ip}"
				-v "interface vlan${br1.vpc1.vlan} dns-server enable"
			</telnet>
			<no-error-check />
		</step>

		<step no="2.3">
			<desc>
				Set interface eth1 to access mode and enable mac-learning
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface ${br1.br.lan.int1} switchport mode access"
				-v "interface ${br1.br.lan.int1} switchport access vlan ${br1.vpc1.vlan}"
			</telnet>
			<no-error-check />
		</step>

		<step no="2.5">
			<desc>br1.vpc1 get ip addr from dhcp server of mgt0.1</desc>
			<log-file>ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="2.6">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="4.1">
			<desc>
				packet capture on internal dns server,cvg1.dns1
			</desc>
			<log-file>step4.1_inndns1_packet_capture.log</log-file>
			<ssh host="${cvg1.dns1.mip}">
				-v "nohup tshark -l -i ${cvg1.dns1.tif.name} ip proto 17 &gt; ${job.id}intdns_ping_1.log &amp;"
			</ssh>
		</step>

		<step no="4.2">
			<desc>
				get cvg1.dns1 tshark process
			</desc>
			<setvar name="dns1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4.1_inndns1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4.3">
			<desc>
				packet capture on internal dns server,cvg1.dns2
			</desc>
			<log-file>step4.3_inndns1_packet_capture.log</log-file>
			<ssh host="${cvg1.dns2.mip}">
				-v "nohup tshark -l -i ${cvg1.dns2.tif.name} ip proto 17 &gt; ${job.id}intdns_ping_2.log &amp;"
			</ssh>
		</step>

		<step no="4.4">
			<desc>
				get cvg1.dns2 tshark process
			</desc>
			<setvar name="dns1.tshark.id_2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4.3_inndns1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4.5">
			<desc>
				vpc ping internal domain name
			</desc>
			<log-file>step4.5_vpc_ping_internal_domain.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${cvg1.dns1.domain1} -c 4"
			</ssh>
			<log-match>-c -i "from ${cvg1.dns1.domain1}" -i "ttl="</log-match>
		</step>

		<step no="5">
			<desc>
				vpc ping internal domain name
			</desc>
			<log-file>step5_vpc_ping_internal_domain.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${cvg1.dns2.domain1} -c 10"
			</ssh>
			<log-match>-c -i "from ${cvg1.dns2.domain1}" -i "ttl="</log-match>
		</step>

		<step no="5.1">
			<desc>
				check ping packet on internal dns server
			</desc>
			<log-file>step5.1_intdns_check_ping_packet.log</log-file>
			<ssh host="${cvg1.dns1.mip}">
				-v "kill -9 ${dns1.tshark.id_1}"
				-v "cat ${job.id}intdns_ping_1.log"
				-v "rm -f ${job.id}intdns_ping_1.log"
			</ssh>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${cvg1.dns1.ip}.+DNS.+Standard query.+A.+${cvg1.dns1.domain1}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${cvg1.dns2.ip}.+DNS.+Standard query.+A.+${cvg1.dns2.domain1}" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.2">
			<desc>
				check ping packet on internal dns server
			</desc>
			<log-file>step5.2_intdns_check_ping_packet.log</log-file>
			<ssh host="${cvg1.dns2.mip}">
				-v "kill -9 ${dns1.tshark.id_2}"
				-v "cat ${job.id}intdns_ping_2.log"
				-v "rm -f ${job.id}intdns_ping_2.log"
			</ssh>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${cvg1.dns2.ip}.+DNS.+Standard query.+A.+${cvg1.dns2.domain1}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				packet capture on external dns server
			</desc>
			<log-file>step6_dns_server_packet_capture.log</log-file>
			<ssh host="${pub.dns1.ip}" slow="20">
				-v "nohup tshark -l -i ${pub.http_server.tif.name} ip proto 17 &gt; ${job.id}ping_3.log &amp;"
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				get tcpdump process
			</desc>
			<setvar name="tcpdump.id_3">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step6_dns_server_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="6.2">
			<desc>
				vpc ping external domain name
			</desc>
			<log-file>step6.2_vpc_ping_external_domain.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${pub.dns1.domain1} -c 5"
			</ssh>
			<log-match>-c -i "from ${pub.dns1.domain1}" -i "ttl="</log-match>
		</step>

		<step no="6.3">
			<desc>
				check ping packet on external dns server
			</desc>
			<log-file>step6.3_check_ping_packet.log</log-file>
			<ssh host="${pub.dns1.ip}">
				-v "kill ${tcpdump.id_3}"
				-v "cat ${job.id}ping_3.log | grep '${pub.dns1.domain1}'"
			</ssh>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)${pub.br_fw.ip}\s+-&gt;\s+${pub.dns1.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<step no="0.1">
				<desc>
					clear file
				</desc>
				<ssh host="${cvg1.dns1.mip}">
					-v "kill -9 ${dns1.tshark.id_1}"
					-v "rm -f ${job.id}intdns_ping_1.log"
				</ssh>
				<no-error-check />
			</step>

			<step no="0.2">
				<desc>
					clear file
				</desc>
				<ssh host="${cvg1.dns2.mip}">
					-v "kill -9 ${dns1.tshark.id_2}"
					-v "rm -f ${job.id}intdns_ping_2.log"
				</ssh>
				<no-error-check />
			</step>

			<step no="0.3">
				<desc>
					kill dns server ping process
					clear file
				</desc>
				<ssh host="${pub.dns1.ip}" prompt=".*#">
					-v "kill -9 ${tcpdump.id_3}"
					-v "rm -f ${job.id}ping_3.log"
				</ssh>
				<no-error-check />
			</step>
		</stage>

		<include file="include/br_default_post_process.xml" />
	</post-process>
</testcase>