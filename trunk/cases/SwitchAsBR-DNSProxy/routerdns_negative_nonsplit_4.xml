<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Kill all dns process, verify if can restart</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>

		Pre-Condition:

		Set interface eth0 to wan mode
		Set interface eth1 to access mode and enable mac-learning
		Eth0 can obtain ip address from DHCP server
		Disable dhcp client on mgt0 and configure a static ip address
		Enable DHCP server on interface mgt0.1
		Enable DNS server on mgt0.1
		Set DNS mode to nonsplit
		Set internal DNS server to mgt0.1
		Enable DHCP server on interface mgt0.2
		Enable DNS server on mgt0.2
		Set internal DNS server to mgt0.2
		Set DNS mode to nonsplit
		Set SSID and bind it to interface wifi0
		Connect a client to SSID and make client obtain ip address from mgt0.1
		Use Wireshark to capture packet on client and DNS server
		Set filter _ff id 1 dst-port 53 bidirectional
		Open debug _kdebug fe basic and debug console

		Test Procedure:

		1. Kill all dns process, verify if all process can restart, verify if config still exist
		2. Send dns request from client, verify if dns can works normal
	</description>
	<numofbr>1</numofbr>
	<numofcvg>1</numofcvg>
	<cvg-opt-arm>two</cvg-opt-arm>
	<cvg-opt-fw>yes</cvg-opt-fw>
	<tbtype>winlin</tbtype>

	<property name="br.route.netmask" value="255.255.255.0" />
	<property name="br1.vpc1.mask" value="255.255.255.0" />
	<stage>
		<include prefix="1" file="subs/vpn_setup_one_sw.xml" obj-args="cvg1, br1" />

		<step no="2.1">
			<desc>
				Set interface eth0 to wan mode,eth1 to access mode and enable mac-learning
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface ${br1.br.lan.int1} switchport mode access"
				-v "interface ${br1.br.lan.int1} switchport access vlan ${br1.vpc1.vlan}"
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				Enable DHCP server on interface mgt0.1
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "vlan ${br1.vpc1.vlan}"
				-v "interface vlan ${br1.vpc1.vlan}"
				-v "interface vlan${br1.vpc1.vlan} ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options netmask ${br1.vpc1.mask}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options dns1 ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server enable"
				-v "interface vlan${br1.vpc1.vlan} dns-server int-domain-name ${cvg1.dns1.domain1}"
				-v "interface vlan${br1.vpc1.vlan} dns-server int-resolve dns1 ${cvg1.dns1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dns-server ext-resolve dns1 ${pub.dns1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dns-server mode nonsplit"
				-v "interface vlan${br1.vpc1.vlan} dns-server enable"
			</telnet>
			<no-error-check />
		</step>

		<!-- <step no="2.3"> <desc> Enable DNS server on interface mgt0.1, set DNS mode to nonsplit </desc> <telnet target="${br1.br.wan.ip}"> -v "interface mgt0.1 dns-server int-domain-name ${cvg1.dns1.domain1}" -v "interface mgt0.1 dns-server int-resolve dns1 ${cvg1.dns1.ip}" -v "interface mgt0.1 dns-server ext-resolve dns1 ${pub.dns1.ip}" -v "interface mgt0.1 dns-server mode nonsplit" -v "interface mgt0.1 dns-server enable" </telnet> </step> -->
		<step no="2.4">
			<desc>
				Enable DHCP server on interface mgt0.2
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "vlan ${br1.vpc2.vlan}"
				-v "interface vlan ${br1.vpc2.vlan}"
				-v "interface vlan${br1.vpc2.vlan} ip ${br1.br.mgt0.2.ip}/${br.lan.netmask}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server ip-pool ${br1.br.mgt0.2.ip_pool_start} ${br1.br.mgt0.2.ip_pool_end}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options netmask ${br1.vpc1.mask}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options default-gateway ${br1.br.mgt0.2.ip}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options dns1 ${br1.br.mgt0.2.ip}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server enable"
				-v "interface vlan${br1.vpc2.vlan} dns-server int-domain-name ${cvg1.dns1.domain1}"
				-v "interface vlan${br1.vpc2.vlan} dns-server int-resolve dns1 ${cvg1.dns1.ip}"
				-v "interface vlan${br1.vpc2.vlan} dns-server ext-resolve dns1 ${pub.dns1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dns-server mode nonsplit"
				-v "interface vlan${br1.vpc2.vlan} dns-server enable"
			</telnet>
			<no-error-check />
		</step>

		<!-- <step no="2.5"> <desc> Enable DNS server on interface mgt0.2, set DNS mode to nonsplit </desc> <telnet target="${br1.br.wan.ip}"> -v "interface mgt0.2 dns-server int-domain-name ${cvg1.dns1.domain1}" -v "interface mgt0.2 dns-server int-resolve dns1 ${cvg1.dns1.ip}" -v "interface mgt0.2 dns-server ext-resolve dns1 ${pub.dns1.ip}" -v "interface mgt0.2 dns-server mode nonsplit" -v "interface mgt0.2 dns-server enable" </telnet> </step> -->

		<step no="set_lan_info">
			<multi-setvar>
				echo "br1.br.mgt0.1.route=$(echo ${br1.br.mgt0.1.ip} | cut -d. -f1,2,3).0"
				echo "br1.br.mgt0.2.route=$(echo ${br1.br.mgt0.2.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.dns1.route=$(echo ${cvg1.dns1.ip} | cut -d. -f1,2,3).0"
			</multi-setvar>
		</step>

		<step no="2.5">
			<desc>br1.vpc1 get ip addr from dhcp server of mgt0.1</desc>
			<log-file>ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="2.6">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="3">
			<desc>Check route distribution is correct</desc>
		</step>

		<step no="3.1" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>On GW, will add the tunnel routes according to BR's modification </desc>
			<log-file>3.1.show_route_cvg_${loop_check.idx}.log</log-file>
			<telnet target="${cvg1.cvg.tunnel.ip}" timeout="15">
				-v "show ip route"
			</telnet>
			<log-match>-p 1 -i "${br1.br.mgt0.1.route}" -p 8 -i "${cvg1.tunnel.id}"</log-match>
			<log-match>-p 1 -i "${br1.br.mgt0.2.route}" -p 8 -i "${cvg1.tunnel.id}"</log-match>
		</step>

		<step no="3.2" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>-check the ip route tablelist</desc>
			<log-file>3.2_show_l3_ip_route_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "show ip route"
			</telnet>
			<log-match>-p 1 -i "${cvg1.dns1.route}" -p 3 -i "${br.route.netmask}" -p 8 -i "${br1.tunnel.id}"</log-match>
		</step>

		<step no="4">
			<desc>
				Set filter _ff id 1 dst-port 53 bidirectional,Open debug _kdebug fe basic/detail and debug console
			</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "clear log buffered"
				-v "_ff id 1 dst-port 53 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</telnet>
		</step>

		<step no="4.1">
			<desc>
				Kill all dns process
			</desc>
			<log-file>step4.1_Killall_dns_process.log</log-file>
			<telnet target="${br1.br.wan.ip}" prompt="\$|AH.*#">
				-b -sp "${br1.br.shellpwd}"
				-v "_shell"
				-v "killall -9 dnsmasq"
				-v "exit"
				-v ""
			</telnet>
			<no-error-check />
			<failed>next</failed>
		</step>

		<step no="4.2" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				verify if all process can restart
			</desc>
			<log-file>step4.2_check_process.log</log-file>
			<telnet target="${br1.br.wan.ip}" prompt="\$|AH.*#">
				-b -sp "${br1.br.shellpwd}"
				-v "_shell"
				-v "ps"
				-v "exit 0"
				-v ""
			</telnet>
			<log-match>-i "dnsmasq_mgt0.conf"</log-match>
			<log-match>-i "dnsmasq_vlan${br1.vpc1.vlan}"</log-match>
			<log-match>-i "dnsmasq_vlan${br1.vpc2.vlan}"</log-match>
			<failed>next</failed>
		</step>

		<step no="4.3">
			<desc>
				verify if config still exist
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "show running-config"
			</telnet>
			<log-match>-i "interface vlan${br1.vpc1.vlan} dns-server int-domain-name ${cvg1.dns1.domain1}"</log-match>
			<log-match>-i "interface vlan${br1.vpc1.vlan} dns-server int-resolve dns1 ${cvg1.dns1.ip}"</log-match>
			<log-match>-i "interface vlan${br1.vpc2.vlan} dns-server int-domain-name ${cvg1.dns1.domain1}"</log-match>
			<log-match>-i "interface vlan${br1.vpc2.vlan} dns-server int-resolve dns1 ${cvg1.dns1.ip}"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>

		<step no="5">
			<desc>
				2. Send dns request from client, verify if dns can works normal
			</desc>
		</step>

		<step no="5">
			<desc>
				packet capture on br1.vpc1
			</desc>
			<log-file>step5_vpc1_packet_capture.log</log-file>
			<ssh target="br1.vpc1" slow="10" timeout="60">
				-v "nohup tshark -l -i ${br1.vpc1.tif.name} ip proto 17 &gt; ${job.id}vpc1_ping_1.log &amp;"
				-v ""
			</ssh>
		</step>

		<step no="5.1">
			<desc>
				get vpc1 tshark process
			</desc>
			<setvar name="vpc1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_vpc1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="5.2">
			<desc>
				packet capture on internal dns server
			</desc>
			<log-file>step5.2_inndns1_packet_capture.log</log-file>
			<ssh host="${cvg1.dns1.mip}" slow="10" timeout="60">
				-v "nohup tshark -l -i ${cvg1.dns1.tif.name} ip proto 17 and src ${br1.br.mgt0.1.ip} &gt; ${job.id}intdns_ping_1.log &amp;"
				-v ""
			</ssh>
		</step>

		<step no="5.3">
			<desc>
				get cvg1.dns1 tshark process
			</desc>
			<setvar name="dns1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5.2_inndns1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="5.4">
			<desc>
				packet capture on external dns server
			</desc>
			<log-file>step5.4_pubdns1_packet_capture.log</log-file>
			<ssh host="${pub.dns1.ip}" slow="30" timeout="60">
				-v "nohup tshark -l -i ${pub.dns1.tif.name} ip proto 17 and src ${br1.br.mgt0.1.ip} &gt; ${job.id}extdns_ping_1.log &amp;"
			</ssh>
		</step>

		<step no="5.5">
			<desc>
				get pub.dns1 tshark process
			</desc>
			<setvar name="pubdns1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5.4_pubdns1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="5.6" delay="10">
			<desc>
				br1.vpc1 ping internal domain name
			</desc>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${cvg1.dns1.domain1} -c 4"
			</ssh>
			<log-match>-c -i "from ${cvg1.dns1.domain1}" -i "ttl="</log-match>
		</step>

		<step no="5.7">
			<desc>
				check ping packet on vpc1
			</desc>
			<log-file>vpc1_check_ping_packet_int.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "kill -9 ${vpc1.tshark.id_1}"
				-v "cat ${job.id}vpc1_ping_1.log"
				-v "rm -f ${job.id}vpc1_ping_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.vpc1.tif.ip} -&gt; ${br1.br.mgt0.1.ip}.+DNS.+Standard query.+A.+${cvg1.dns1.domain1}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.8">
			<desc>
				check ping packet on internal dns server
			</desc>
			<log-file>5.8.intdns_check_ping_packet.log</log-file>
			<ssh host="${cvg1.dns1.mip}">
				-v "kill -9 ${dns1.tshark.id_1}"
				-v "cat ${job.id}intdns_ping_1.log"
				-v "rm -f ${job.id}intdns_ping_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${cvg1.dns1.ip}.+DNS.+Standard query.+A.+${cvg1.dns1.domain1}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.9">
			<desc>
				check ping packet on external dns server
			</desc>
			<log-file>extdns_check_ping_packet_int.log</log-file>
			<ssh host="${pub.dns1.ip}">
				-v "kill -9 ${pubdns1.tshark.id_1}"
				-v "cat ${job.id}extdns_ping_1.log | grep '${cvg1.dns1.domain1}'"
				-v "rm -f ${job.id}extdns_ping_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${pub.dns1.ip}.+DNS.+Standard query.+A.+${cvg1.dns1.domain1}" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				packet capture on br1.vpc1
			</desc>
			<log-file>step6_vpc1_packet_capture.log</log-file>
			<ssh target="br1.vpc1" slow="10" timeout="60">
				-v "nohup tshark -l -i ${br1.vpc1.tif.name} ip proto 17 &gt; ${job.id}vpc1_ping_1.log &amp;"
				-v ""
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				get vpc1 tshark process
			</desc>
			<setvar name="vpc1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step6_vpc1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="6.2">
			<desc>
				packet capture on internal dns server
			</desc>
			<log-file>step6.2_inndns1_packet_capture.log</log-file>
			<ssh host="${cvg1.dns1.mip}" slow="10" timeout="60">
				-v "nohup tshark -l -i ${cvg1.dns1.tif.name} ip proto 17 and src ${br1.br.mgt0.1.ip} &gt; ${job.id}intdns_ping_1.log &amp;"
				-v ""
			</ssh>
		</step>

		<step no="6.3.1">
			<desc>
				get cvg1.dns1 tshark process
			</desc>
			<setvar name="dns1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step6.2_inndns1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="6.3.2">
			<desc>
				packet capture on external dns server
			</desc>
			<log-file>step6.3_pubdns1_packet_capture.log</log-file>
			<ssh host="${pub.dns1.ip}" slow="30" timeout="60">
				-v "nohup tshark -l -i ${pub.dns1.tif.name} ip proto 17 and src ${br1.br.mgt0.1.ip} &gt; ${job.id}extdns_ping_1.log &amp;"
			</ssh>
		</step>

		<step no="6.4">
			<desc>
				get pub.dns1 tshark process
			</desc>
			<setvar name="pubdns1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step6.3_pubdns1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="6.5" delay="10">
			<desc>
				vpc1 ping external domain name
			</desc>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${pub.dns1.domain1} -c 4"
			</ssh>
			<log-match>-n -c -i "from ${pub.dns1.domain1}" -i "ttl="</log-match>
		</step>

		<step no="6.6">
			<desc>
				check ping packet on vpc1
			</desc>
			<log-file>vpc1_check_ping_packet_ext.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "kill -9 ${vpc1.tshark.id_1}"
				-v "cat ${job.id}vpc1_ping_1.log"
				-v "rm -f ${job.id}vpc1_ping_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.vpc1.tif.ip} -&gt; ${br1.br.mgt0.1.ip}.+DNS.+Standard query.+A.+${pub.dns1.domain1}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6.7">
			<desc>
				check ping packet on internal dns server,
				all dns request send to inner dns under nonsplit mode
			</desc>
			<log-file>intdns_check_ping_packet_ext.log</log-file>
			<ssh host="${cvg1.dns1.mip}">
				-v "kill -9 ${dns1.tshark.id_1}"
				-v "cat ${job.id}intdns_ping_1.log"
				-v "rm -f ${job.id}intdns_ping_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${cvg1.dns1.ip}.+DNS.+Standard query.+A.+$${pub.dns1.domain1}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6.8">
			<desc>
				check ping packet on external dns server,
				no dns request sent to external dns under non-split mode
			</desc>
			<log-file>extdns_check_ping_packet_ext.log</log-file>
			<ssh host="${pub.dns1.ip}">
				-v "kill -9 ${pubdns1.tshark.id_1}"
				-v "cat ${job.id}extdns_ping_1.log | grep '${pub.dns1.domain1}'"
				-v "rm -f ${job.id}extdns_ping_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.br.mgt0.1.ip} -&gt; ${pub.dns1.ip}.+DNS.+Standard query.+A.+${pub.dns1.domain1}" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

	</stage>

	<failed-process>
		<stage>
			<step no="0.1">
				<desc>
					kill tshark process on br1.vpc1
				</desc>
				<ssh target="br1.sta1">
					-v "kill -9 ${sta1.tshark.id_1}"
					-v "rm -f ${job.id}sta1_ping_1.log"
				</ssh>
				<no-error-check />
			</step>

			<step no="0.2">
				<desc>
					kill tshark process on cvg1.dns1
				</desc>
				<ssh host="${cvg1.dns1.mip}">
					-v "kill -9 ${dns1.tshark.id_1}"
					-v "rm -f ${job.id}dns1_ping_1.log"
				</ssh>
				<no-error-check />
			</step>

			<step no="0.3">
				<desc>
					kill tshark process on pub.dns1
				</desc>
				<ssh host="${pub.dns1.ip}">
					-v "kill -9 ${pubdns1.tshark.id_1}"
					-v "rm -f ${job.id}extdns_ping_1.log"
				</ssh>
				<no-error-check />
			</step>
		</stage>

		<include file="include/br_default_post_process.xml" />

	</failed-process>
</testcase>
