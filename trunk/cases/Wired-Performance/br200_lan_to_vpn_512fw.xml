<testcase>
	<brief>BR200 LAN to VPN WITH 512 FW</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>
	<description>
		Wired Performance Test
        
        DUT: BR200, CVG
        
        Case Type: BR200 LAN to VPN WITH 512 FW
		
		IXIA Port 1
		IXIA Port 4
	</description>
	<!--use property to set default values -->
	<property name="chassis.def" value="10.155.33.216" />
	<property name="tclServer.def" value="10.155.49.11" />
	<property name="tclPort.def" value="8009" />
	<property name="txPort.def" value="1/1/5" />
	<property name="rxPort.def" value="1/1/8" />
	<!--quickTest default values-->
	<property name="frameSizeList.def" value="64,128,256,512,1024,1280,1432,1518" />
	<property name="trials.def" value="1" />
	<property name="duration.def" value="120" />
	<property name="initialRate.def" value="5" />
	<property name="minRate.def" value="0.2" />
	<property name="maxRate.def" value="20" />
	<property name="resolution.def" value="0.1" />
	<property name="tolerance.def" value="0" />
	<property name="srcIP.def" value="192.168.85.2" />
	<property name="srcGateway.def" value="192.168.85.1" />
	<property name="dstIP.def" value="192.168.201.2" />
	<property name="dstGateway.def" value="192.168.201.1" />
	
	<pre-process>
		<stage>
			<step no="0">
				<desc>show case name</desc>
				<script>
					echo "${case.name}"
				</script>
			</step>
		</stage>
		
		<include prefix="p1" file="${case.dir}/subs/wp_pubswitch_init.xml" />
		<include prefix="p2" file="${case.dir}/subs/wp_image_upgrade.xml" />
		<include prefix="p3" file="${case.dir}/subs/wp_pubswitch_init.xml" />
	</pre-process>
	
	<!--handle job variables,if set via job variables, use it , else use default value -->
	<stage>
		<step no="1.1">
			<desc>record case start time</desc>
			<setvar name="case.start_time">
				date "+%F %T"
			</setvar>
		</step>
		<step no="1.2">
			<desc>handle job variables and default values</desc>
			<multi-setvar>
				if [ "${chassis}" == "" ]; then echo "chassis=${chassis.def}"; else echo "chassis=${chassis}"; fi
				if [ "${tclServer}" == "" ]; then echo "tclServer=${tclServer.def}"; else echo "tclServer=${tclServer}"; fi
				if [ "${tclPort}" == "" ]; then echo "tclPort=${tclPort.def}"; else echo "tclPort=${tclPort}"; fi
				if [ "${ixiaPort1}" == "" ]; then echo "txPort=${txPort.def}"; else echo "txPort=${ixiaPort1}"; fi
				if [ "${ixiaPort4}" == "" ]; then echo "rxPort=${rxPort.def}"; else echo "rxPort=${ixiaPort4}"; fi
				if [ "${frameSizeList}" == "" ]; then echo "frameSizeList=${frameSizeList.def}"; else echo "frameSizeList=${frameSizeList}"; fi
				if [ "${trials}" == "" ]; then echo "trials=${trials.def}"; else echo "trials=${trials}"; fi
				if [ "${duration}" == "" ]; then echo "duration=${duration.def}"; else echo "duration=${duration}"; fi
				if [ "${initialRate}" == "" ]; then echo "initialRate=${initialRate.def}"; else echo "initialRate=${initialRate}"; fi
				if [ "${minRate}" == "" ]; then echo "minRate=${minRate.def}"; else echo "minRate=${minRate}"; fi
				if [ "${maxRate}" == "" ]; then echo "maxRate=${maxRate.def}"; else echo "maxRate=${maxRate}"; fi
				if [ "${resolution}" == "" ]; then echo "resolution=${resolution.def}"; else echo "resolution=${resolution}"; fi
				if [ "${tolerance}" == "" ]; then echo "tolerance=${tolerance.def}"; else echo "tolerance=${tolerance}"; fi
				if [ "${srcIP}" == "" ]; then echo "srcIP=${srcIP.def}"; else echo "srcIP=${srcIP}"; fi
				if [ "${srcGateway}" == "" ]; then echo "srcGateway=${srcGateway.def}"; else echo "srcGateway=${srcGateway}"; fi
				if [ "${dstIP}" == "" ]; then echo "dstIP=${dstIP.def}"; else echo "dstIP=${dstIP}"; fi
				if [ "${dstGateway}" == "" ]; then echo "dstGateway=${dstGateway.def}"; else echo "dstGateway=${dstGateway}"; fi
			</multi-setvar>
		</step>
	</stage>
	
	<!--config DUT and public devices-->
	<stage>
        <step no="2.1">
			<desc>config BR</desc>
			<console cons-name="wp-br200-1" cons-host="${mpc.mif.ip}">
                -v "no interface eth0 dhcp client"
                -v "interface eth0 ip 20.1.1.1/24"
                -v "vpn client-ipsec-tunnel client_ipsec vpn-mode layer-3"
                -v "vpn ipsec-tunnel client_ipsec gateway 20.1.1.2 client-name xdchen password aerohive"
                -v "vpn ipsec-tunnel client_ipsec ike phase1 auth-method psk"
                -v "vpn ipsec-tunnel client_ipsec ike phase1 psk aerohive"
				-v "vpn ipsec-tunnel client_ipsec dpd idle-interval 0 retry 65535 retry-interval 60"
                -v "vpn tunnel-policy vpn_tunnel_policy client ipsec-tunnel client_ipsec primary"
                -v "routing route-request enable"
                -v "routing internal-sub-network 192.168.85.0/24"
			</console>
		</step>
        
        <step no="2.2">
			<desc>config CVG</desc>
            <telnet target="${tb.vmserver.ip}" port="${tb.cvg1.cons_port}">
				-v "interface mgt0 ip 192.168.84.1 255.255.255.0"
				-v "interface eth0 mode wan"
				-v "interface eth1 mode wan"
				-v "no interface mgt0 dhcp client"
				-v "no interface eth0 dhcp client"
				-v "no interface eth1 dhcp client"
				-v "no interface eth1 mode wan nat"
				-v "interface eth0 ip 20.1.1.2/24"
				-v "interface eth1 ip 192.168.201.1/24"
				-v "vpn xauth-client-list client_list local"
				-v "vpn xauth-client-list client_list client-name xdchen password aerohive"
				-v "vpn server-ipsec-tunnel server_ipsec vpn-mode layer-3"
				-v "vpn ipsec-tunnel server_ipsec client-list client_list"
				-v "vpn ipsec-tunnel server_ipsec ike phase1 auth-method psk"
				-v "vpn ipsec-tunnel server_ipsec ike phase1 psk aerohive"
				-v "vpn ipsec-tunnel server_ipsec local-ike-id address 20.1.1.2"
				-v "vpn ipsec-tunnel server_ipsec dpd idle-interval 0 retry 65535 retry-interval 60"
				-v "vpn tunnel-policy vpn_tunnel_policy server ipsec-tunnel server_ipsec"
				-v "routing internal-sub-network 192.168.201.0/24"
				-v "routing internal-sub-network 192.168.84.0/24"
            </telnet>
		</step>
        
		<step no="2.3">
			<desc>config sw1</desc>
			<console cons-name="wp-sw1" cons-host="${mpc.mif.ip}">
				-v "no interface eth1/2 shutdown"
				-v "no interface eth1/22 shutdown"
			</console>
		</step>
		<step no="2.4">
			<desc>config sw2</desc>
			<console cons-name="wp-sw2" cons-host="${mpc.mif.ip}">
				-v "no interface eth1/3 shutdown"
				-v "no interface eth1/21 shutdown"
			</console>
		</step>
		
		<step no="2.5" type="loop-check" loop-max-times="10" loop-interval="10" delay="5">
			<desc>show vpn ipsec-tunnel</desc>
			<log-file>show_vpn_tunnel.log</log-file>
			<telnet target="${tb.vmserver.ip}" port="${tb.cvg1.cons_port}">
                -v "show vpn ipsec-tunnel"
            </telnet>
			<log-match>-i '\d+\.\d+\.\d+\.\d+\[(500|4500)\]\s+\d+\.\d+\.\d+\.\d+\[(500|4500)\]' -re</log-match>
		</step>
	</stage>
	
	<!--run rfc2544 throughput -->
	<stage>
		<step no="3.1" timeout="36000">
			<desc>run quicktest - rfc2544 throughput</desc>
			<log-file>quicktest_rfc2544.log</log-file>
			<script timeout="36000">
				tclsh8.5 ${case.dir}/bin/snake_rfc2544_quicktest.tcl \
				-chassis ${chassis} \
				-name ${case.name} \
				-L4Protocol none \
				-BiDirectional False \
				-tclServer ${tclServer} \
				-tclPort ${tclPort} \
				-txPort ${txPort} \
				-rxPort ${rxPort} \
				-frameSizeList ${frameSizeList} \
				-trials ${trials} \
				-duration ${duration} \
				-initialRate ${initialRate} \
				-minRate ${minRate} \
				-maxRate ${maxRate} \
				-resolution ${resolution} \
				-tolerance ${tolerance} \
				-srcIP ${srcIP} \
				-srcGateway ${srcGateway} \
				-dstIP ${dstIP} \
				-dstGateway ${dstGateway} > ${log.dir}/${log.file}
			</script>
		</step>
		<step no="3.2">
			<desc>get quicktest result path</desc>
			<setvar name="quicktest.result.path">
				perl -ne 'chomp;if(s/result path: //){print"$_\\results.csv"}' ${log.dir}/quicktest_rfc2544.log
			</setvar>
		</step>
		<step no="3.3">
			<desc>copy result from tclServer to mpc</desc>
			<log-file>qt_${case.name}_${job.id}.csv</log-file>
			<script>
				staf ${tclServer} fs copy file "${quicktest.result.path}" \
				tofile "${log.dir}/${log.file}" tomachine ${mpc.mif.ip}
			</script>
		</step>
	</stage>
    
	<failed-process>
		<stage>
			<step no="f1">
				<desc>show debug info on DUT</desc>
				<console cons-name="wp-br200-1" cons-host="${mpc.mif.ip}">
					-v "show interface"
					-v "show vpn ike event"
					-v "show log buffered | include err"
				</console>
				<no-error-check />
			</step>
			<step no="f2">
				<desc>show debug info on CVG</desc>
				<telnet target="${tb.vmserver.ip}" port="${tb.cvg1.cons_port}">
					-v "show interface"
					-v "show vpn ike event"
					-v "show log buffered | include err"
				</telnet>
				<no-error-check />
			</step>
		</stage>
		<include prefix="f3" file="${case.dir}/subs/wp_default_failed_process.xml" />
	</failed-process>
	
	<post-process>
		<stage>
			<step no="post-1">
				<desc>release all ixia ports connected by ixNetwork TCL Server</desc>
				<ssh target="${mpc.mif.ip}" prompt="%.*|root@.*#">
					-v "tclsh8.5"
					-v "package req IxTclNetwork"
					-v "ixNet connect ${tclServer} -port ${tclPort} -version 6.30"
					-v "ixTclNet::ReleasePorts"
					-v "ctrl-c"
				</ssh>
			</step>
		</stage>
	</post-process>
</testcase>