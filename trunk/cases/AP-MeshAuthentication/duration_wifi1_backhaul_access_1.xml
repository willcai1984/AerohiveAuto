<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>wifi1 can switch default route when one portal unreachable</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Test Procedure:
		1. MP estabilish wifi neighbor with porta1 and porta2.
		2. MP select portal1 as default route.(metric is least).
		3. Unplug the Ethernet cable from portal1, result 2.
		Test Result:
		1. MP select portal2 as default route immediately
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<stage>
		<if>"${ap.eth1.existed}" == "true" &amp;&amp;"${ap.wifi1.existed}" == "true"</if>
		<step no="1">
			<desc>
				configure portal AP1 wifi1 to dual mode
			</desc>
			<log-file>step1_config_ap1_wifi1.log</log-file>
			<telnet target="ap1">
				-v "interface wifi0 mode access"
				-v "interface wifi1 mode dual"
				-v "ssid ${ssid.name}"
				-v "interface wifi1 ssid ${ssid.name}"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "radio profile na"
				-v "radio profile na phymode 11na"
				-v "interface wifi1 radio profile na"
				-v "interface wifi1 radio channel 157"
				-v "save config"
			</telnet>
		</step>

		<step no="2">
			<desc>
				configure mesh AP2 wifi1 to dual mode
			</desc>
			<log-file>step2_config_ap2_wifi1.log</log-file>
			<telnet target="ap2">
				-v "interface wifi0 mode access"
				-v "interface wifi1 mode dual"
				-v "ssid ${ssid.name}2"
				-v "interface wifi1 ssid ${ssid.name}2"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "radio profile na"
				-v "radio profile na phymode 11na"
				-v "interface wifi1 radio profile na"
				-v "interface wifi1 radio channel 157"
				-v "save config"
			</telnet>
		</step>

		<step no="3">
			<desc>
				-show interface in ap2
			</desc>
			<log-file>step3_show_interface_ap2.log</log-file>
			<telnet target="ap2">
				-v "show interface"
			</telnet>
		</step>

		<step no="3.1">
			<desc>
				Get mgt0 mac in ap2
			</desc>
			<setvar name="ap2.mgt0.mac">
				${bin.dir}/getbyrexp.py -p "Mgt0 *(\S+) *" -f ${log.dir}/step3_show_interface_ap2.log -t str
			</setvar>
		</step>

		<step no="3.2">
			<desc>
				Get wifi1.1 mac in ap2
			</desc>
			<setvar name="ap2.wifi11.mac">
				${bin.dir}/getbyrexp.py -p "Wifi1 *(\S+) dual" -f ${log.dir}/step3_show_interface_ap2.log -t str
			</setvar>
		</step>

		<step no="4">
			<desc>
				show route in ap2
			</desc>
			<log-file>step4_ap2_show_route.log</log-file>
			<telnet target="ap2">
				-v "show route"
			</telnet>
			<log-match>-e "0000:0000:0000\s+${ap2.mgt0.mac}\s+eth[01]" -re</log-match>
		</step>


		<step no="5">
			<desc>
				Shutdown AP2 ethernet interface
			</desc>
			<log-file>step5_ap2_eth_shutdown.log</log-file>
			<console target="ap2">
				-v "interface eth0 shutdown"
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="5.1">
			<desc>
				-show interface in ap2
			</desc>
			<log-file>step5.1_show_interface_ap2.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="6">
			<desc>
				-show interface in ap1
			</desc>
			<log-file>step6_show_interface_ap1.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
		</step>

		<step no="6.1">
			<desc>
				Get mgt0 mac in ap1
			</desc>
			<setvar name="ap1.mgt0.mac">
				${bin.dir}/getbyrexp.py -p "Mgt0 *(\S+) *" -f ${log.dir}/step6_show_interface_ap1.log -t str
			</setvar>
		</step>

		<step no="6.2">
			<desc>
				Get wifi1.1 mac in ap1
			</desc>
			<setvar name="ap1.wifi11.mac">
				${bin.dir}/getbyrexp.py -p "Wifi1 *(\S+) dual" -f ${log.dir}/step6_show_interface_ap1.log -t str
			</setvar>
		</step>

		<step no="7" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check ap2 hive neighbor list to confirm ap1 and ap2 have established hive neighbor
			</desc>
			<log-file>step7_ap2_show_hive_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show hive ${hive.name} neighbor"
			</console>
			<no-error-check />
			<log-match>-i "Auth" -i "${ap1.wifi11.mac}" -i "${hive.name}"</log-match>
		</step>

		<step no="8" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check ap1 hive neighbor list to confirm ap1 and ap2 have established hive neighbor
			</desc>
			<log-file>step8_ap1_show_hive_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show hive ${hive.name} neighbor"
			</telnet>
			<no-error-check />
			<log-match>-i "Auth" -i "${ap2.wifi11.mac}" -i "${hive.name}"</log-match>
		</step>

		<step no="9" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step9_amrp_neighbor_check_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="50">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1.wifi11.mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="10" delay="15">
			<desc>
				show route in ap2
			</desc>
			<log-file>step10_ap2_show_route.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
			<log-match>-e "0000:0000:0000\s+${ap1.wifi11.mac}\s+wifi1.1" -re</log-match>
		</step>

		<step no="11" delay="15">
			<desc>
				show route in ap1
			</desc>
			<log-file>step11_ap1_show_route.log</log-file>
			<telnet target="ap1">
				-v "show route"
			</telnet>
			<log-match>-e "${ap2.mgt0.mac}\s+${ap2.wifi11.mac}\s+wifi1\.1" -re </log-match>
		</step>

		<step no="12">
			<desc>
				ap1 ping ap2
			</desc>
			<log-file>step12_ap1_ping_ap2.log</log-file>
			<telnet target="ap1">
				-v "ping ${ap2.mgt0.ip}"
			</telnet>
			<log-match>-c -i "from " -i "ttl="</log-match>
		</step>

		<step no="12.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}2"
			</multi-setvar>
		</step>

		<include prefix="connect_ap" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap2" />

		<step no="13">
			<desc>Show ssid station in AP2</desc>
			<log-file>step13_show_ssid_station_1.log</log-file>
			<console target="ap2">
				-v "show ssid ${ssid.name}2 station"
			</console>
		</step>

		<step no="14">
			<desc>Get laptop1 ip in AP2</desc>
			<setvar name="sta1.ip.ap2">
				perl ${bin.dir}/getstring.pl -k "${sta1.tif.mac}" -p 2 \
				-f ${log.dir}/step13_show_ssid_station_1.log
			</setvar>
		</step>

		<step no="15">
			<desc>Compare laptop1 show ip to AP2 show station ip</desc>
			<script>
				if [ ${sta1.ip.ap2} != ${sta1.tif.ip} ];
				then exit 1;
				fi
			</script>
		</step>

		<include prefix="16" file="subs/sta_ping.xml" args="sta1, ${ap1.mgt0.ip}, 10" />

		<step no="17">
			<desc>
				Delete file
			</desc>
			<ssh target="sta1" timeout="120">
				-v "rm -f ${tb.ftp.file1_large}"
			</ssh>
		</step>

		<step no="17.1">
			<desc>
				check file Size
			</desc>
			<log-file>step17.1_check_file_size.log</log-file>
			<ssh host="${tb.ftp}">
				-v "ll -n cd /root"
			</ssh>
		</step>

		<step no="17.2">
			<desc>get from-access counters</desc>
			<setvar name="file.size">
				${bin.dir}/getbyrexp.py -p "\S+\s+\d+\s+\d+\s+\d+\s+(\d+).*${tb.ftp.file1_large}" -f ${log.dir}/step17.1_check_file_size.log
			</setvar>
		</step>

		<step no="18">
			<desc>
				Laptop1 uses FTP connect to server and download files
			</desc>
			<log-file>step18_download_files.log</log-file>
			<ssh target="sta1" timeout="1800">
				-v "curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file1_large} -o ${tb.ftp.file1_large}"
			</ssh>
			<no-error-check />
		</step>

		<step no="18.1">
			<desc>
				check file
			</desc>
			<log-file>test.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ll -n"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\S+\s+\d+\s+\d+\s+\d+\s+${file.size}.*${tb.ftp.file1_large}" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>

	<stage>
		<if>"${ap.eth1.existed}" != "true" &amp;&amp;"${ap.wifi1.existed}" == "true"</if>
		<step no="21">
			<desc>
				configure portal AP1 wifi1 to dual mode
			</desc>
			<log-file>step1_config_ap1_wifi1.log</log-file>
			<telnet target="ap1">
				-v "interface wifi0 mode access"
				-v "interface wifi1 mode dual"
				-v "ssid ${ssid.name}"
				-v "interface wifi1 ssid ${ssid.name}"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "radio profile na"
				-v "radio profile na phymode 11na"
				-v "interface wifi1 radio profile na"
				-v "interface wifi1 radio channel 157"
				-v "save config"
			</telnet>
		</step>

		<step no="22">
			<desc>
				configure mesh AP2 wifi1 to dual mode
			</desc>
			<log-file>step2_config_ap2_wifi1.log</log-file>
			<telnet target="ap2">
				-v "interface wifi0 mode access"
				-v "interface wifi1 mode dual"
				-v "ssid ${ssid.name}2"
				-v "interface wifi1 ssid ${ssid.name}2"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "radio profile na"
				-v "radio profile na phymode 11na"
				-v "interface wifi1 radio profile na"
				-v "interface wifi1 radio channel 157"
				-v "save config"
			</telnet>
		</step>

		<step no="23">
			<desc>
				-show interface in ap2
			</desc>
			<log-file>step3_show_interface_ap2.log</log-file>
			<telnet target="ap2">
				-v "show interface"
			</telnet>
		</step>

		<step no="23.1">
			<desc>
				Get mgt0 mac in ap2
			</desc>
			<setvar name="ap2.mgt0.mac">
				${bin.dir}/getbyrexp.py -p "Mgt0 *(\S+) *" -f ${log.dir}/step3_show_interface_ap2.log -t str
			</setvar>
		</step>

		<step no="23.2">
			<desc>
				Get wifi1.1 mac in ap2
			</desc>
			<setvar name="ap2.wifi11.mac">
				${bin.dir}/getbyrexp.py -p "Wifi1 *(\S+) dual" -f ${log.dir}/step3_show_interface_ap2.log -t str
			</setvar>
		</step>

		<step no="24">
			<desc>
				show route in ap2
			</desc>
			<log-file>step4_ap2_show_route.log</log-file>
			<telnet target="ap2">
				-v "show route"
			</telnet>
			<log-match>-e "0000:0000:0000\s+${ap2.mgt0.mac}\s+eth[01]" -re</log-match>
		</step>


		<step no="25">
			<desc>
				Shutdown AP2 ethernet interface
			</desc>
			<log-file>step5_ap2_eth_shutdown.log</log-file>
			<console target="ap2">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="25.1">
			<desc>
				-show interface in ap2
			</desc>
			<log-file>step5.1_show_interface_ap2.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="26">
			<desc>
				-show interface in ap1
			</desc>
			<log-file>step6_show_interface_ap1.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
		</step>

		<step no="26.1">
			<desc>
				Get mgt0 mac in ap1
			</desc>
			<setvar name="ap1.mgt0.mac">
				${bin.dir}/getbyrexp.py -p "Mgt0 *(\S+) *" -f ${log.dir}/step6_show_interface_ap1.log -t str
			</setvar>
		</step>

		<step no="26.2">
			<desc>
				Get wifi1.1 mac in ap1
			</desc>
			<setvar name="ap1.wifi11.mac">
				${bin.dir}/getbyrexp.py -p "Wifi1 *(\S+) dual" -f ${log.dir}/step6_show_interface_ap1.log -t str
			</setvar>
		</step>

		<step no="27" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check ap2 hive neighbor list to confirm ap1 and ap2 have established hive neighbor
			</desc>
			<log-file>step7_ap2_show_hive_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show hive ${hive.name} neighbor"
			</console>
			<no-error-check />
			<log-match>-i "Auth" -i "${ap1.wifi11.mac}" -i "${hive.name}"</log-match>
		</step>

		<step no="28" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check ap1 hive neighbor list to confirm ap1 and ap2 have established hive neighbor
			</desc>
			<log-file>step8_ap1_show_hive_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show hive ${hive.name} neighbor"
			</telnet>
			<no-error-check />
			<log-match>-i "Auth" -i "${ap2.wifi11.mac}" -i "${hive.name}"</log-match>
		</step>

		<step no="29" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step9_amrp_neighbor_check_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="50">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1.wifi11.mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="30" delay="15">
			<desc>
				show route in ap2
			</desc>
			<log-file>step10_ap2_show_route.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
			<log-match>-e "0000:0000:0000\s+${ap1.wifi11.mac}\s+wifi1.1" -re</log-match>
		</step>

		<step no="31" delay="15">
			<desc>
				show route in ap1
			</desc>
			<log-file>step11_ap1_show_route.log</log-file>
			<telnet target="ap1">
				-v "show route"
			</telnet>
			<log-match>-e "${ap2.mgt0.mac}\s+${ap2.wifi11.mac}\s+wifi1\.1" -re </log-match>
		</step>

		<step no="32">
			<desc>
				ap1 ping ap2
			</desc>
			<log-file>step12_ap1_ping_ap2.log</log-file>
			<telnet target="ap1">
				-v "ping ${ap2.mgt0.ip}"
			</telnet>
			<log-match>-c -i "from " -i "ttl="</log-match>
		</step>

		<step no="32.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}2"
			</multi-setvar>
		</step>

		<include prefix="connect_ap" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap2" />

		<step no="33">
			<desc>Show ssid station in AP2</desc>
			<log-file>step13_show_ssid_station_1.log</log-file>
			<console target="ap2">
				-v "show ssid ${ssid.name}2 station"
			</console>
		</step>

		<step no="34">
			<desc>Get laptop1 ip in AP2</desc>
			<setvar name="sta1.ip.ap2">
				perl ${bin.dir}/getstring.pl -k "${sta1.tif.mac}" -p 2 \
				-f ${log.dir}/step13_show_ssid_station_1.log
			</setvar>
		</step>

		<step no="35">
			<desc>Compare laptop1 show ip to AP2 show station ip</desc>
			<script>
				if [ ${sta1.ip.ap2} != ${sta1.tif.ip} ];
				then exit 1;
				fi
			</script>
		</step>

		<include prefix="36" file="subs/sta_ping.xml" args="sta1, ${ap1.mgt0.ip}, 10" />

		<step no="37">
			<desc>
				Delete file
			</desc>
			<ssh target="sta1" timeout="120">
				-v "rm -f ${tb.ftp.file1_large}"
			</ssh>
		</step>

		<step no="37.1">
			<desc>
				check file Size
			</desc>
			<log-file>step17.1_check_file_size.log</log-file>
			<ssh host="${tb.ftp}">
				-v "ll -n cd /root"
			</ssh>
		</step>

		<step no="37.2">
			<desc>get from-access counters</desc>
			<setvar name="file.size">
				${bin.dir}/getbyrexp.py -p "\S+\s+\d+\s+\d+\s+\d+\s+(\d+).*${tb.ftp.file1_large}" -f ${log.dir}/step17.1_check_file_size.log
			</setvar>
		</step>

		<step no="38">
			<desc>
				Laptop1 uses FTP connect to server and download files
			</desc>
			<log-file>step18_download_files.log</log-file>
			<ssh target="sta1" timeout="1800">
				-v "curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file1_large} -o ${tb.ftp.file1_large}"
			</ssh>
			<no-error-check />
		</step>

		<step no="38.1">
			<desc>
				check file
			</desc>
			<log-file>test.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ll -n"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\S+\s+\d+\s+\d+\s+\d+\s+${file.size}.*${tb.ftp.file1_large}" -f ${log.dir}/${log.file}</log-match>
		</step>

	</stage>
</testcase>