<testcase>
	<brief>Check CLI UI user is login user whichever user login AP</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<description>

		Description
		Check CLI UI user is login user whichever user login AP
		Pre-condition
		Create a read-write user xxx
		Create a read-only user aaa
		Create new root-admin user testtest
		Test procedure
		1. Use new root-admin user testtest to login AP, check CLI UI user by show system process in CLI or check by ps in shell
		2. Use read-write xxx user to login AP, check CLI UI user by show system process in CLI or check by ps in shell
		3. Use read-only user aaa to login AP, check CLI UI user by show system process in CLI or check by ps in shell
		Expect result
		1. CLI UI user should be login user testtest
		2. CLI UI user should be login user xxx
		3. CLI UI user should be login user aaa
		Test result
		If user name length exceed 8 characters, can only display 8characters in shell

	</description>

	<property name="root_admin_user_name" value="testtest" />
	<property name="root_admin_user_passwd" value="rootadmin" />
	<stage>

		<property name="read_write_user_name" value="write" />
		<property name="read_write_user_passwd" value="readwrite" />
		<property name="read_only_user_name" value="onlyuser" />
		<property name="read_only_user_passwd" value="readonly" />


		<step no="1">
			<desc>Create a read-write user, a read-only user and set new root-admin user</desc>
			<ssh target="ap1" timeout="80">
				-v "admin read-write ${read_write_user_name} password ${read_write_user_passwd}"
				-v "admin read-only ${read_only_user_name} password ${read_only_user_passwd}"
				-v "admin root-admin ${root_admin_user_name} password ${root_admin_user_passwd}"
				-v "save config"
			</ssh>
		</step>

		<step no="2">
			<desc>Use read write user login AP and check CLI UI user by CLI</desc>
			<log-file>step2_cliui_user.log</log-file>
			<ssh target="ap1" user="${read_write_user_name}" password="${read_write_user_passwd}">
				-v "show system processes"
			</ssh>
			<log-match>-i "ah_cli_ui" -c</log-match>
			<log-match>-i "${read_write_user_name}"</log-match>
			<no-error-check />
		</step>

		<step no="3">
			<desc>Use read only user login AP and check CLI UI user by CLI</desc>
			<log-file>step3_cliui_user.log</log-file>
			<ssh target="ap1" user="${read_only_user_name}" password="${read_only_user_passwd}">
				-v "show system processes"
			</ssh>
			<log-match> -i "${read_only_user_name}"</log-match>
			<log-match> -i "ah_cli_ui" -c</log-match>
			<no-error-check />
		</step>

		<step no="4">
			<desc>Use new root admin user login AP and check CLI UI user by CLI</desc>
			<log-file>step4_cliui_user.log</log-file>
			<ssh target="ap1" user="${root_admin_user_name}" password="${root_admin_user_passwd}">
				-v "show system processes"
			</ssh>
			<log-match> -i "${root_admin_user_name}"</log-match>
			<log-match> -i "ah_cli_ui" -c</log-match>
			<no-error-check />
		</step>
	</stage>
	<post-process>
		<stage> 
		        <step no="1">
				<desc>exit from current user</desc>
				<console target="ap1">					
					-v "save config"
					-v "exit"
				</console>
			</step>
			
			<step no="2">
				<desc>Use new root admin user login AP and change root admin user to default</desc>
				<console target="ap1" user="${root_admin_user_name}" password="${root_admin_user_passwd}">
					-v "admin root-admin ${ap.def.user} password ${ap.def.passwd}"
					-v "save config"
					-v "exit"
				</console>
			</step>
		</stage>
		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>
