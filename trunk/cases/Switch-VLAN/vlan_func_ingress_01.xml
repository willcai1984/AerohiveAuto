<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>(IxPort: CoF=3) Vlan separation:  Check incoming frames can be sent to a exactly vlan by ingress rules</brief>
	<priority>high</priority>
	<automated>yes</automated>

	<description>
		Topology to use	
		IXIA port1++++(access)Switch(trunk)++++IXIA port2
		+(trunk)
		+
		IXIA port3

		Description	Vlan separation:  Check incoming frames can be sent to a exactly vlan by ingress rules
		Platform Dependence	SR2024
		Pre-condition	?	Reset config of switch to factory default
		?	Create vlan related vlan first on switch
		?	Set IXIA port1 connect to a switch access port, PVID 10
		?	set IXIA port2 connect to a switch trunk port, PVID 20, allow 10, 20,30
		?	Set IXIA port3 connect to a switch trunk port, PVID 20, allow 20,30
		Test procedure	1.	Set IXIA port2, IXIA port3 to capture frames
		2.	For untagged frames
		3.	IXIA port1 send untagged frames       Result1
		4.	IXIA port1 send priority-tagged frames???       Result2

		5.	Set IXIA port1, IXIA port2 to capture frames
		6.	For tagged frames
		7.	IXIA port2 send vlan 30 tagged frames        Result3
		Expect result	Result1:   IXIA PORT2 should receive all of the frames sent by IXIA PORT1
		IXIA PORT3 don’t receive any frames
		?pass

		Result2:   IXIA PORT2 should receive all of the frames sent by IXIA PORT1;
		IXIA PORT3 don’t receive any frames
		?pass
		Result3:   IXIA PORT3 should receive all of the frames sent by IXIA PORT1;
		IXIA PORT1 don’t receive any frames
		?pass
	</description>

	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>
	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include file="include/sw_default_pre_process.xml" />
	</pre-process>
	<property name="sw1.port1.ixia_port.mac" value="0000.0000.0015"/>
	<property name="sw1.port2.ixia_port.mac" value="0000.0000.0016"/>

	<stage>

		<step no="1">
			<desc>
				configure switch, port1, port2 and port3 are trunk ports, with different allow vlans
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "vlan ${tb.vlan3}"
				-v "interface ${sw1.port1} switchport mode access"
				-v "interface ${sw1.port1} switchport access vlan ${tb.vlan1}"
				-v "interface ${sw1.port2} switchport mode trunk"
				-v "interface ${sw1.port2} switchport trunk native vlan ${tb.vlan2}"
				-v "no interface ${sw1.port2} switchport trunk allow vlan all"
				-v "interface ${sw1.port2} switchport trunk allow vlan ${tb.vlan1}"
				-v "interface ${sw1.port2} switchport trunk allow vlan ${tb.vlan2}"
				-v "interface ${sw1.port2} switchport trunk allow vlan ${tb.vlan3}"
				-v "interface ${sw1.port3} switchport mode trunk" 
				-v "no interface ${sw1.port3} switchport trunk allow vlan all"
				-v "interface ${sw1.port3} switchport trunk native vlan ${tb.vlan2}"
				-v "interface ${sw1.port3} switchport trunk allow vlan ${tb.vlan2}"
				-v "interface ${sw1.port3} switchport trunk allow vlan ${tb.vlan3}"
				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
				-v "show vlan id ${tb.vlan3}"
			</telnet>
		</step>

		<property name="stream1.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream1.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream1.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream1.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream1.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream1.txvlan" value="${tb.vlan1}" />
		<property name="stream1.etype" value="0x0800" />
		<property name="stream1.UDFoffset" value="34" />
		<property name="stream1.patternOffset1" value="38" />

		<step no="2.1">
			<desc>add udf1 to check vlan${stream1.txvlan}</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x ${stream1.txvlan}`"
			</setvar>
		</step>
		<step no="2.2">
			<desc>
				build stream1, port1 sends untagged pkt, start transmit and get statistics
			</desc>
			<log-file>eth2test1.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure stream-->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1}
				-mac_dst ${stream1.rxport1.mac}
				-mac_src ${stream1.txport1.mac}
				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.UDFoffset}
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream1.rxport1},${stream1.rxport2}
				-mac_dst ${stream1.rxport1.mac}
				-mac_src ${stream1.txport1.mac}
				-vlan enable
				-eth2_protocol ${stream1.etype}
				-patternOffset2 ${stream1.patternOffset1}
				-pattern1In 0x${stream1.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="4">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test1.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<property name="stream2.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream2.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream2.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream2.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream2.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream2.txvlan" value="${tb.vlan1}" />
		<property name="stream2.etype" value="0x0800" />
		<property name="stream2.UDFoffset" value="38" />
		<property name="stream2.patternOffset1" value="38" />

		<step no="5.1">
			<desc>add udf1 to check vlan${stream2.txvlan}</desc>
			<setvar name="stream2.UDFsignature1">
				echo "8100`printf %04x $(expr 8192 + ${stream2.txvlan})`"
			</setvar>
		</step>
		<step no="5.2">
			<desc>
				build stream2, port1 sends priority-tagged frames, start transmit and get statistics
			</desc>
			<log-file>eth2test2.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream2.txport1}
				-mac_dst ${stream2.rxport1.mac}
				-mac_src ${stream2.txport1.mac}
				-vlan enable
				-vlan_id 0
				-vlan_dot1p 1
				-vlan_cfi 0
				-eth2_protocol ${stream2.etype}
				-udf_offset ${stream2.UDFoffset}
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream2.rxport1},${stream2.rxport2}
				-mac_dst ${stream2.rxport1.mac}
				-mac_src ${stream2.txport1.mac}
				-vlan enable
				-eth2_protocol ${stream2.etype}
				-patternOffset2 ${stream2.patternOffset1}
				-pattern1In 0x${stream2.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream2.txport1} -rxPortList ${stream2.rxport1},${stream2.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream2.txport1} -oneRxPort ${stream2.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream2.txport1} -oneRxPort ${stream2.rxport2}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="6">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="7">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test2.log</log-file>
			<!-- it's bug 19903, not fixed -->
			<log-match>-e "checkEqualTxWithRX ${stream2.txport1} ${stream2.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream2.txport1} ${stream2.rxport2} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<property name="stream3.txport1" value="${sw1.port2.ixia_port}" />
		<property name="stream3.rxport1" value="${sw1.port1.ixia_port}" />
		<property name="stream3.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream3.txport1.mac" value="${sw1.port2.ixia_port.mac}" />
		<property name="stream3.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream3.txvlan" value="${tb.vlan3}" />
		<property name="stream3.etype" value="0x0800" />
		<property name="stream3.UDFoffset" value="38" />
		<property name="stream3.patternOffset1" value="38" />

		<step no="8.1">
			<desc>add udf1 to check vlan${stream3.txvlan}</desc>
			<setvar name="stream3.UDFsignature1">
				echo "8100`printf %04x ${stream3.txvlan}`"
			</setvar>
		</step>
		<step no="8.2">
			<desc>
				build stream3, port2 sends vlan${stream3.txvlan} tagged frames, start transmit and get statistics
			</desc>
			<log-file>eth2test3.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream3.txport1}
				-mac_dst ${stream3.rxport1.mac}
				-mac_src ${stream3.txport1.mac}
				-vlan enable
				-vlan_id ${stream3.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream3.etype}
				-udf_offset ${stream3.UDFoffset}
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream3.rxport1},${stream3.rxport2}
				-mac_dst ${stream3.rxport1.mac}
				-mac_src ${stream3.txport1.mac}
				-vlan enable
				-eth2_protocol ${stream3.etype}
				-patternOffset2 ${stream3.patternOffset1}
				-pattern1In 0x${stream3.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream3.txport1} -rxPortList ${stream3.rxport1},${stream3.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream3.txport1} -oneRxPort ${stream3.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream3.txport1} -oneRxPort ${stream3.rxport2}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="9">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="10">
			<desc>
				analyse statistics on rxport, both port1 and port3
			</desc>
			<log-file>eth2test3.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream3.txport1} ${stream3.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream3.txport1} ${stream3.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
