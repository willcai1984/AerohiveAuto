<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>(IxPort: CoF=4) Check frames forwarding for trunk and access</brief>
	<priority>accept</priority>
	<automated>yes</automated>

	<description>
		Topology to use	                          IXIA port1
		|
		SWITCH
		------------------------------------------------------------
		|                 |                 |                    |
		IXIA port2   IXIA port3       IXIA port4      IXIA port5
		Description	Check frames forwarding for trunk and access
		Platform Dependence	SR2024
		Pre-condition	?	Create vlan 10 - 70 first
		?	IXIA port1 connect switch port1, port1 is trunk port, pvid is 70, allow-vlan all
		Test procedure	For trunk port
		1.	IXIA port2 connect switch port2, port2 is trunk port,pvid is 1, allow vlan is 10-30
		2.	IXIA port3 connect switch port3, port3 is trunk port, pvid is 1, allow vlan is 20-40
		3.	IXIA port4 connect switch port4, port4 is trunk port, pvid is 1, allow vlan is 30-50
		4.	IXIA port5 connect switch port5, port5 is trunk port, pvid is 1, allow vlan is 40-60
		5.	IXIA port1 send tagged broadcast frames with vlan tag 10 -70 alternating, capture frames on IXIA port2,port3,port4,port5              Result1
		For access port	
		6.	IXIA port2 connect switch port2, port2 is access port,pvid is 20
		7.	IXIA port3 connect switch port3, port3 is access port, pvid is 30
		8.	IXIA port4 connect switch port4, port4 is access port, pvid is 40
		9.	IXIA port5 connect switch port5, port5 is access port, pvid is 50

		10.	IXIA port1 send vlan tagged broadcast frames with vlan tag 10-70, capture frames on IXIA port2,port3,port4,port5           Result2

		Expect result	Result1:   IXIA port2 should receive the vlan 10-30 tagged broadcast frames
		IXIA port3 should receive the vlan 20-40 tagged broadcast frames
		IXIA port4 should receive the vlan 30-50 tagged broadcast frames
		IXIA port5 should receive the vlan 40-60 tagged broadcast frames
		Vlan 61-70 tagged broadcast frames are dropped.

		Result2:   IXIA port2 should receive the vlan 20 tagged broadcast frames
		IXIA port3 should receive the vlan 30 tagged broadcast frames
		IXIA port4 should receive the vlan 40 tagged broadcast frames
		IXIA port5 should receive the vlan 50 tagged broadcast frames
	</description>

	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>

	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include file="include/sw_default_pre_process.xml" />
	</pre-process>
	<property name="sw1.port1.ixia_port.mac" value="0000.0000.0015"/>

	<stage>
		<step no="1.1">
			<desc>create three new vlans</desc>
			<multi-setvar>
				echo "tb.vlan4=`expr ${tb.vlan1} + 1`"
				echo "tb.vlan5=`expr ${tb.vlan2} + 1`"
				echo "tb.vlan6=`expr ${tb.vlan3} + 1`"
			</multi-setvar>
		</step>
		<step no="1.2">
			<desc>
				configure switch, port1, port2, port3 and port4 are trunk ports, with different allow vlans
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "vlan ${tb.vlan3}"
				-v "vlan ${tb.vlan4}"
				-v "vlan ${tb.vlan5}"
				-v "vlan ${tb.vlan6}"
				-v "interface ${sw1.port1} switchport mode trunk"
				-v "interface ${sw1.port1} switchport trunk native vlan ${tb.vlan6}"
				-v "interface ${sw1.port1} switchport trunk allow vlan all"
				-v "interface ${sw1.port2} switchport mode trunk"
				-v "no interface ${sw1.port2} switchport trunk allow vlan all"
				-v "interface ${sw1.port2} switchport trunk allow vlan ${tb.vlan1}"
				-v "interface ${sw1.port2} switchport trunk allow vlan ${tb.vlan2}"
				-v "interface ${sw1.port2} switchport trunk allow vlan ${tb.vlan3}"
				-v "interface ${sw1.port3} switchport mode trunk"
				-v "no interface ${sw1.port3} switchport trunk allow vlan all"
				-v "interface ${sw1.port3} switchport trunk allow vlan ${tb.vlan3}"
				-v "interface ${sw1.port3} switchport trunk allow vlan ${tb.vlan4}"
				-v "interface ${sw1.port3} switchport trunk allow vlan ${tb.vlan5}"
				-v "interface ${sw1.port4} switchport mode trunk"
				-v "no interface ${sw1.port4} switchport trunk allow vlan all"
				-v "interface ${sw1.port4} switchport trunk allow vlan ${tb.vlan4}"
				-v "interface ${sw1.port4} switchport trunk allow vlan ${tb.vlan5}"
				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
				-v "show vlan id ${tb.vlan3}"
				-v "show vlan id ${tb.vlan4}"
				-v "show vlan id ${tb.vlan5}"
				-v "show vlan id ${tb.vlan6}"
			</telnet>
		</step>
		<pre-process>
			<stage>
				<!-- self defined steps -->
			</stage>
			<include file="include/sw_default_pre_process.xml" />
		</pre-process>
		<property name="stream1.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream1.txvlan" value="${tb.vlan1}" />
		<property name="stream1.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream1.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream1.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream1.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream1.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream1.etype" value="0x0800" />
		<property name="stream1.UDFoffset" value="38" />
		<!-- <property name="stream1.UDFsignature" value="0xBDBDBDBD" /> -->

		<step no="2.1">
			<desc>add udf1 to check vlan${stream1.txvlan}</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x ${stream1.txvlan}`"
			</setvar>
		</step>
		<step no="2.2">
			<desc>
				build stream1, port1 sends broadcast pkt to vlan${stream1.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test1.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}
				-mac_dst ${stream1.rxport1.mac}
				-mac_src ${stream1.txport1.mac}
				-vlan enable
				-vlan_id ${stream1.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x${stream1.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="2.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="2.4">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test1.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport3} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<property name="stream2.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream2.txvlan" value="${tb.vlan2}" />
		<property name="stream2.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream2.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream2.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream2.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream2.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream2.etype" value="0x0800" />
		<property name="stream2.UDFoffset" value="38" />
		<step no="3.1">
			<desc>add udf1 to check vlan${stream2.txvlan}</desc>
			<setvar name="stream2.UDFsignature1">
				echo "8100`printf %04x ${stream2.txvlan}`"
			</setvar>
		</step>
		<step no="3.2">
			<desc>
				build stream2, port1 sends broadcast pkt to vlan${stream2.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test2.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream2.txport1},${stream2.rxport1},${stream2.rxport2},${stream2.rxport3}
				-mac_dst ${stream2.rxport1.mac}
				-mac_src ${stream2.txport1.mac}
				-vlan enable
				-vlan_id ${stream2.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream2.etype}
				-udf_offset ${stream2.UDFoffset}
				-rate_pps 5
				-patternOffset2 ${stream2.UDFoffset}
				-pattern1In 0x${stream2.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream2.txport1} -rxPortList ${stream2.rxport1},${stream2.rxport2},${stream2.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream2.txport1} -oneRxPort ${stream2.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream2.txport1} -oneRxPort ${stream2.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream2.txport1} -oneRxPort ${stream2.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="3.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="3.4">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test2.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream2.txport1} ${stream2.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream2.txport1} ${stream2.rxport2} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream2.txport1} ${stream2.rxport3} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<property name="stream3.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream3.txvlan" value="${tb.vlan3}" />
		<property name="stream3.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream3.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream3.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream3.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream3.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream3.etype" value="0x0800" />
		<property name="stream3.UDFoffset" value="38" />
		<step no="4.1">
			<desc>add udf1 to check vlan${stream3.txvlan}</desc>
			<setvar name="stream3.UDFsignature1">
				echo "8100`printf %04x ${stream3.txvlan}`"
			</setvar>
		</step>
		<step no="4.2">
			<desc>
				build stream3, port1 sends broadcast pkt to vlan${stream3.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test3.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream3.txport1},${stream3.rxport1},${stream3.rxport2},${stream3.rxport3}
				-mac_dst ${stream3.rxport1.mac}
				-mac_src ${stream3.txport1.mac}
				-vlan enable
				-vlan_id ${stream3.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream3.etype}
				-udf_offset ${stream3.UDFoffset}
				-patternOffset2 ${stream3.UDFoffset}
				-pattern1In 0x${stream3.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream3.txport1} -rxPortList ${stream3.rxport1},${stream3.rxport2},${stream3.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream3.txport1} -oneRxPort ${stream3.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream3.txport1} -oneRxPort ${stream3.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream3.txport1} -oneRxPort ${stream3.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="4.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="4.4">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test3.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream3.txport1} ${stream3.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream3.txport1} ${stream3.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream3.txport1} ${stream3.rxport3} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<property name="stream4.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream4.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream4.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream4.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream4.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream4.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream4.etype" value="0x0800" />
		<property name="stream4.UDFoffset" value="38" />
		<step no="5.1">
			<desc>add udf1 to check vlan${stream4.txvlan}, and txvlan</desc>
			<multi-setvar>
				echo "stream4.txvlan=${tb.vlan4}"
				echo "stream4.UDFsignature1=$(echo "8100`printf %04x ${tb.vlan4}`")"
			</multi-setvar>
		</step>
		<step no="5.2">
			<desc>
				build stream4, port1 sends broadcast pkt to vlan${stream4.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test4.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream4.txport1},${stream4.rxport1},${stream4.rxport2},${stream4.rxport3}
				-mac_dst ${stream4.rxport1.mac}
				-mac_src ${stream4.txport1.mac}
				-vlan enable
				-vlan_id ${stream4.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream4.etype}
				-udf_offset ${stream4.UDFoffset}
				-rate_pps 5
				-patternOffset2 ${stream4.UDFoffset}
				-pattern1In 0x${stream4.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream4.txport1} -rxPortList ${stream4.rxport1},${stream4.rxport2},${stream4.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream4.txport1} -oneRxPort ${stream4.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream4.txport1} -oneRxPort ${stream4.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream4.txport1} -oneRxPort ${stream4.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="5.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="5.4">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test4.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream4.txport1} ${stream4.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream4.txport1} ${stream4.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream4.txport1} ${stream4.rxport3} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<property name="stream5.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream5.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream5.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream5.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream5.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream5.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream5.etype" value="0x0800" />
		<property name="stream5.UDFoffset" value="38" />
		<step no="6.1">
			<desc>add udf1 to check vlan${stream5.txvlan}</desc>
			<multi-setvar>
				echo "stream5.txvlan=${tb.vlan5}"
				echo "stream5.UDFsignature1=$(echo "8100`printf %04x ${tb.vlan5}`")"
			</multi-setvar>
		</step>
		<step no="6.2">
			<desc>
				build stream5, port1 sends broadcast pkt to vlan${stream5.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test5.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream5.txport1},${stream5.rxport1},${stream5.rxport2},${stream5.rxport3}
				-mac_dst ${stream5.rxport1.mac}
				-mac_src ${stream5.txport1.mac}
				-vlan enable
				-vlan_id ${stream5.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream5.etype}
				-udf_offset ${stream5.UDFoffset}
				-patternOffset2 ${stream5.UDFoffset}
				-pattern1In 0x${stream5.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream5.txport1} -rxPortList ${stream5.rxport1},${stream5.rxport2},${stream5.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream5.txport1} -oneRxPort ${stream5.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream5.txport1} -oneRxPort ${stream5.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream5.txport1} -oneRxPort ${stream5.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="6.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="6.4">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test5.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream5.txport1} ${stream5.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream5.txport1} ${stream5.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream5.txport1} ${stream5.rxport3} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<property name="stream6.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream6.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream6.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream6.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream6.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream6.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream6.etype" value="0x0800" />
		<property name="stream6.UDFoffset" value="38" />
		<step no="7.1">
			<desc>add udf1 to check vlan${stream6.txvlan}</desc>
			<multi-setvar>
				echo "stream6.txvlan=${tb.vlan6}"
				echo "stream6.UDFsignature1=$(echo "8100`printf %04x ${tb.vlan6}`")"
			</multi-setvar>
		</step>
		<step no="7.2">
			<desc>
				build stream6, port1 sends broadcast pkt to vlan${stream6.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test6.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream6.txport1},${stream6.rxport1},${stream6.rxport2},${stream6.rxport3}
				-mac_dst ${stream6.rxport1.mac}
				-mac_src ${stream6.txport1.mac}
				-vlan enable
				-vlan_id ${stream6.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream6.etype}
				-udf_offset ${stream6.UDFoffset}
				-patternOffset2 ${stream6.UDFoffset}
				-pattern1In 0x${stream6.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream6.txport1} -rxPortList ${stream6.rxport1},${stream6.rxport2},${stream6.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream6.txport1} -oneRxPort ${stream6.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream6.txport1} -oneRxPort ${stream6.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream6.txport1} -oneRxPort ${stream6.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="7.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="7.4">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test6.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream6.txport1} ${stream6.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream6.txport1} ${stream6.rxport2} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream6.txport1} ${stream6.rxport3} framesSent userDefinedStat2 result is block"</log-match>
		</step>


		<step no="8">
			<desc>
				change port2, 3, 4 to access
			</desc>
			<telnet target="sw1">
				-v "interface ${sw1.port2} switchport mode access"
				-v "interface ${sw1.port2} switchport access vlan ${tb.vlan1}"
				-v "interface ${sw1.port3} switchport mode access"
				-v "interface ${sw1.port3} switchport access vlan ${tb.vlan2}"
				-v "interface ${sw1.port4} switchport mode access"
				-v "interface ${sw1.port4} switchport access vlan ${tb.vlan3}"
				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
				-v "show vlan id ${tb.vlan3}"
				-v "show vlan id ${tb.vlan4}"
				-v "show vlan id ${tb.vlan5}"
				-v "show vlan id ${tb.vlan6}"
			</telnet>
		</step>

		<property name="stream7.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream7.txvlan" value="${tb.vlan1}" />
		<property name="stream7.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream7.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream7.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream7.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream7.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream7.etype" value="0x0800" />
		<property name="stream7.UDFoffset" value="38" />
		<property name="stream7.patternOffset2" value="34" />
		<property name="stream7.UDFsignature1" value="08000000" />

		<step no="9.1">
			<desc>
				build stream7, port1 sends broadcast pkt to vlan${stream7.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test7.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream7.txport1}
				-mac_dst ${stream7.rxport1.mac}
				-mac_src ${stream7.txport1.mac}
				-vlan enable
				-vlan_id ${stream7.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream7.etype}
				-udf_offset ${stream7.UDFoffset}
				-patternOffset2 ${stream7.UDFoffset}
				-pattern1In 0x${stream7.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream7.rxport1}
				-mac_dst ${stream7.rxport1.mac}
				-mac_src ${stream7.txport1.mac}
				-eth2_protocol ${stream7.etype}
				-udf_offset ${stream7.patternOffset2}
				-patternOffset2 ${stream7.patternOffset2}
				-pattern1In 0x${stream7.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream7.rxport2}
				-mac_dst ${stream7.rxport1.mac}
				-mac_src ${stream7.txport1.mac}
				-eth2_protocol ${stream7.etype}
				-udf_offset ${stream7.patternOffset2}
				-patternOffset2 ${stream7.patternOffset2}
				-pattern1In 0x${stream7.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream7.rxport3}
				-mac_dst ${stream7.rxport1.mac}
				-mac_src ${stream7.txport1.mac}
				-eth2_protocol ${stream7.etype}
				-udf_offset ${stream7.patternOffset2}
				-patternOffset2 ${stream7.patternOffset2}
				-pattern1In 0x${stream7.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream7.txport1} -rxPortList ${stream7.rxport1},${stream7.rxport2},${stream7.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream7.txport1} -oneRxPort ${stream7.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream7.txport1} -oneRxPort ${stream7.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream7.txport1} -oneRxPort ${stream7.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="9.2">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="9.3">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test7.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream7.txport1} ${stream7.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream7.txport1} ${stream7.rxport2} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream7.txport1} ${stream7.rxport3} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<property name="stream8.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream8.txvlan" value="${tb.vlan2}" />
		<property name="stream8.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream8.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream8.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream8.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream8.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream8.etype" value="0x0800" />
		<property name="stream8.UDFoffset" value="38" />
		<property name="stream8.patternOffset2" value="34" />
		<property name="stream8.UDFsignature1" value="08000000" />

		<step no="10.1">
			<desc>
				build stream8, port1 sends broadcast pkt to vlan${stream8.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test8.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream8.txport1}
				-mac_dst ${stream8.rxport1.mac}
				-mac_src ${stream8.txport1.mac}
				-vlan enable
				-vlan_id ${stream8.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream8.etype}
				-udf_offset ${stream8.UDFoffset}
				-patternOffset2 ${stream8.UDFoffset}
				-pattern1In 0x${stream8.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream8.rxport1}
				-mac_dst ${stream8.rxport1.mac}
				-mac_src ${stream8.txport1.mac}
				-eth2_protocol ${stream8.etype}
				-udf_offset ${stream8.patternOffset2}
				-patternOffset2 ${stream8.patternOffset2}
				-pattern1In 0x${stream7.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream8.rxport2}
				-mac_dst ${stream8.rxport1.mac}
				-mac_src ${stream8.txport1.mac}
				-eth2_protocol ${stream8.etype}
				-udf_offset ${stream8.patternOffset2}
				-patternOffset2 ${stream8.patternOffset2}
				-pattern1In 0x${stream8.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream8.rxport3}
				-mac_dst ${stream8.rxport1.mac}
				-mac_src ${stream8.txport1.mac}
				-eth2_protocol ${stream8.etype}
				-udf_offset ${stream8.patternOffset2}
				-patternOffset2 ${stream8.patternOffset2}
				-pattern1In 0x${stream8.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream8.txport1} -rxPortList ${stream8.rxport1},${stream8.rxport2},${stream8.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream8.txport1} -oneRxPort ${stream8.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream8.txport1} -oneRxPort ${stream8.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream8.txport1} -oneRxPort ${stream8.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="10.2">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="10.3">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test8.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream8.txport1} ${stream8.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream8.txport1} ${stream8.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream8.txport1} ${stream8.rxport3} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<property name="stream9.txport1" value="${sw1.port1.ixia_port}" />
		<property name="stream9.txvlan" value="${tb.vlan3}" />
		<property name="stream9.rxport1" value="${sw1.port2.ixia_port}" />
		<property name="stream9.rxport2" value="${sw1.port3.ixia_port}" />
		<property name="stream9.rxport3" value="${sw1.port4.ixia_port}" />
		<property name="stream9.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
		<property name="stream9.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream9.etype" value="0x0800" />
		<property name="stream9.UDFoffset" value="38" />
		<property name="stream9.patternOffset2" value="34" />
		<property name="stream9.UDFsignature1" value="08000000" />

		<step no="11.1">
			<desc>
				build stream9, port1 sends broadcast pkt to vlan${stream9.txvlan}, start transmit and get statistics
			</desc>
			<log-file>eth2test9.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream9.txport1}
				-mac_dst ${stream9.rxport1.mac}
				-mac_src ${stream9.txport1.mac}
				-vlan enable
				-vlan_id ${stream9.txvlan}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream9.etype}
				-udf_offset ${stream9.UDFoffset}
				-patternOffset2 ${stream9.UDFoffset}
				-pattern1In 0x${stream9.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream9.rxport1}
				-mac_dst ${stream9.rxport1.mac}
				-mac_src ${stream9.txport1.mac}
				-eth2_protocol ${stream9.etype}
				-udf_offset ${stream9.patternOffset2}
				-patternOffset2 ${stream9.patternOffset2}
				-pattern1In 0x${stream9.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream9.rxport2}
				-mac_dst ${stream9.rxport1.mac}
				-mac_src ${stream9.txport1.mac}
				-eth2_protocol ${stream9.etype}
				-udf_offset ${stream9.patternOffset2}
				-patternOffset2 ${stream9.patternOffset2}
				-pattern1In 0x${stream9.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream9.rxport3}
				-mac_dst ${stream9.rxport1.mac}
				-mac_src ${stream9.txport1.mac}
				-eth2_protocol ${stream9.etype}
				-udf_offset ${stream9.patternOffset2}
				-patternOffset2 ${stream9.patternOffset2}
				-pattern1In 0x${stream9.UDFsignature1}
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "start_trans_getstats -txPortList ${stream9.txport1} -rxPortList ${stream9.rxport1},${stream9.rxport2},${stream9.rxport3}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream9.txport1} -oneRxPort ${stream9.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream9.txport1} -oneRxPort ${stream9.rxport2}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${stream9.txport1} -oneRxPort ${stream9.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="11.2">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="11.3">
			<desc>
				analyse statistics on rxport, both port2 and port3
			</desc>
			<log-file>eth2test9.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream9.txport1} ${stream9.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream9.txport1} ${stream9.rxport2} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream9.txport1} ${stream9.rxport3} framesSent userDefinedStat2 result is equal"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
