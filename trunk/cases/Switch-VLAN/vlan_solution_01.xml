<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>(IxPort: CoF=3) Check system configuration when reset to factory default config</brief>
	<priority>accept</priority>
	<automated>yes</automated>

	<description>
		Topology to use	IXIA port1++++++DUT+++++++IXIA port2
		|
		IXIA port3
		Description	Check system configuration when reset to factory default config
		Platform Dependence	SR2024
		Pre-condition	IXIA port1 connect to DUT port1, with access, vlan 1
		IXIA port2 connect to DUT port2, with trunk, native-vlan 1, allow vlan all
		IXIA port3 connect to DUT port3, with trunk, native-vlan 2, allow vlan 1,2
		Test procedure	1.	Reset config of switch to set the config as factory default
		2.	Check the all ports mode      Result1
		3.	Check the all ports vlan      Result2
		Show interface switchport
		4.	IXIA port1 send untagged frames, capture frames on IXIA port2,IXIA port3       Result3
		5.	IXIA port2 send vlan 1 tagged frames, capture frames on IXIA port1, IXIA port3            Result4
		Expect result	Result1:   the default switch port mode is access
		Result2:   the default switch port vlan is 1, active-vlan is 1
		Result3:   IXIA port2 should receive vlan 1 tagged frames
		IXIA port3 should receive vlan 1 tagged frames
		Result4:   IXIA port1 should receive untagged frames
		IXIA port3 should receive vlan 1 tagged frames

	</description>

	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>

	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include file="include/sw_default_pre_process.xml" />
	</pre-process>

	<property name="sw1.port1.ixia_port.mac" value="0000.0000.0015"/>
	<property name="sw1.port2.ixia_port.mac" value="0000.0000.0016"/>
	<property name="sw1.port3.ixia_port.mac" value="0000.0000.0017"/>
	<property name="stream1.txport1" value="${sw1.port1.ixia_port}" />
	<property name="stream1.rxport1" value="${sw1.port2.ixia_port}" />
	<property name="stream1.rxport2" value="${sw1.port3.ixia_port}" />
	<property name="stream1.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
	<property name="stream1.rxport1.mac" value="ffff.ffff.ffff" />
	<property name="stream1.etype" value="0x0800" />
	<property name="stream1.UDFoffset" value="34" />
	<property name="stream1.patternOffset1" value="38" />

	<stage>
		<step no="1">
			<desc>
				configure switch, port1 is access, port2, port3 are trunk port with different vlans
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "interface ${sw1.port1} switchport mode access"
				-v "interface ${sw1.port1} switchport access vlan ${tb.vlan1}"
				-v "interface ${sw1.port2} switchport mode trunk"
				-v "interface ${sw1.port2} switchport trunk native vlan ${tb.vlan1}"
				-v "interface ${sw1.port2} switchport trunk allow vlan all"
				-v "interface ${sw1.port3} switchport mode trunk"
				-v "no interface ${sw1.port3} switchport trunk allow vlan all"
				-v "interface ${sw1.port3} switchport trunk native vlan ${tb.vlan2}"
				-v "interface ${sw1.port3} switchport trunk allow vlan ${tb.vlan1}"
				-v "interface ${sw1.port3} switchport trunk allow vlan ${tb.vlan2}"
				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
				-v "show interface switchport"
			</telnet>
		</step>

		<step no="2.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x ${tb.vlan1}`"
			</setvar>
		</step>
		<step no="2.2">
			<desc>
				build stream, txport is port1, rxport are port2 and port3, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				<!-- -vlan enable
				-vlan_id ${tb.vlan1}
				-vlan_dot1p 0
				-vlan_cfi 0
				-->
				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream1.rxport2}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.patternOffset1}
				-pattern1In 0x${stream1.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="4">
			<desc>
				analyse statistics on rxport, port2 received untagged pkt, while pkt received on port3 is tagged 
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<property name="stream2.txport1" value="${sw1.port2.ixia_port}" />
		<property name="stream2.rxport1" value="${sw1.port1.ixia_port}"  />
		<property name="stream2.rxport2" value="${sw1.port3.ixia_port}"  />
		<property name="stream2.txport1.mac" value="${sw1.port2.ixia_port.mac}" />
		<property name="stream2.rxport1.mac" value="ffff.ffff.ffff" />
		<property name="stream2.etype" value="0x0800" />
		<property name="stream2.UDFoffset" value="38" />
		<property name="stream2.patternOffset1" value="34" />
		<step no="5.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream2.UDFsignature1">
				echo "8100`printf %04x ${tb.vlan1}`"
			</setvar>
		</step>
		<step no="5.2">
			<desc>
				build stream, txport is port2, rxport are port1 and port3, start transmit and get statistics
			</desc>
			<log-file>eth2test2.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}" 
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream2.txport1},${stream2.rxport2}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream2.txport1.mac}
				-vlan enable
				-vlan_id ${tb.vlan1}
				-vlan_dot1p 0
				-vlan_cfi 0
				-eth2_protocol ${stream2.etype}
				-udf_offset ${stream2.UDFoffset}
				-patternOffset2 ${stream2.UDFoffset}
				-pattern1In 0x${stream2.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream2.rxport1}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream2.txport1.mac}
				-eth2_protocol ${stream2.etype}
				-patternOffset2 ${stream2.patternOffset1}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream2.txport1} -rxPortList ${stream2.rxport1},${stream2.rxport2}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream2.txport1} -oneRxPort ${stream2.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream2.txport1} -oneRxPort ${stream2.rxport2}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="6">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="7">
			<desc>
				analyse statistics on rxport, port1 received untagged pkt, while pkt received on port3 is tagged 
			</desc>
			<log-file>eth2test2.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream2.txport1} ${stream2.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream2.txport1} ${stream2.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
