<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>AP should remove group's membership table in GRE Terminator and create membership in GRE Initiator when clients L3 roamed through static tunnel</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		On portal1
		mgt0 ip: 10.10.1.1/24
		user-profile vlan 10, attribute 77,binding mobility-policy sj
		security-object sj default-user-profile-attr 77
		ssid B security-object sj (different with ssid on portal2)
		mobility-policy sj inxp gre-tunnel from 20.20.1.1/32
		interface wifi0 ssid B
		exec capture remote-sniffer
		On portal2
		mgt0 ip: 20.20.1.1/24
		user-profile vlan 10, attribute 77,binding mobility-policy sj
		ssid A security-object sj
		ssid A multicast conversion-to-unicast auto
		mobility-policy sj inxp gre-tunnel to 10.10.1.1
		interface wifi0 ssid A
		exec capture remote-sniffer
		Laptop connects to portal2 on ssid A
		Active multicast source stream is 238.1.1.1 , in vlan 10
		Test Procedure:
		1.Laptop connects to ssid A, check it can obtain ip on subnet 10.10.1.0/24
		2.On portal1 and portal2, "show route" to check tunnel is created
		3.Laptop reports to join group 238.1.1.1, check igmp snooping on portal1 and portal2, and check multicast packet forwarding on portal1 and portal2
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="sta1.capture.multicast.packet.result" value="sta1.capture.multicast.packet.result" />
	<property name="file.dir" value="/tmp" />
	<property name="conn1.ssid" value="${ssid.name}" />

	<stage>
		<step no="1">
			<desc>
				On portal1
				mgt0 ip: 10.10.1.1/24
				security-object sj default-user-profile-attr 77
				ssid A security-object sj
				interface wifi0 ssid A
				exec capture remote-sniffer
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "ssid ${ssid.name}_1"
				-v "interface wifi0 ssid ${ssid.name}_1"
				-v "security-object FWtest"
				-v "security-object FWtest default-user-profile-attr 77"
				-v "ssid ${ssid.name}_1 security-object FWtest"
				-v "ssid ${ssid.name}_1 multicast conversion-to-unicast auto"
			</console>
		</step>

		<step no="2">
			<desc>
				On portal2
				mgt0 ip: 20.20.1.1/24
				user-profile vlan 10, attribute 77,binding mobility-policy sj
				ssid A security-object sj
				mobility-policy sj inxp gre-tunnel to 10.10.1.1
				interface wifi0 ssid A
				exec capture remote-sniffer
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "ssid ${ssid.name} multicast conversion-to-unicast auto"
				-v "security-object FWtest"
				-v "security-object FWtest default-user-profile-attr 77"
				-v "ssid ${ssid.name} security-object FWtest"
				-v "mobility-policy FWtest inxp gre-tunnel to ${ap1.mgt0.ip} password aerohive"
				-v "user-profile ttt qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy FWtest attribute 77"
				-v "exec capture remote-sniffer"
			</console>
		</step>

		<step no="2.1">
			<desc>
				close dhcp client
			</desc>
			<console target="ap2">
				-v "no interface mgt0 dhcp client"
			</console>
		</step>

		<step no="2.2">
			<desc>
				open dhcp client
			</desc>
			<console target="ap2">
				-v "interface mgt0 dhcp client"
			</console>
		</step>

		<step no="2.3">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>step2.3_show_interface_mgt0_info.log</log-file>
			<console target="ap2" timeout="180">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="2.4">
			<desc>Get ap2's mgt0 ip</desc>
			<setvar name="ap2.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.3_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="2.5">
			<desc>
				clear log all on ap1 and open debug mode.
			</desc>
			<telnet target="ap1">
				-v "_ff src-ip ${pub.mtcast1.ip}"
				-v "_kdebug fe detail"
				-v "_kdebug fe basic"
				-v "_kdebug fe forw"
				-v "_kdebug fe_arp basic"
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2.6">
			<desc>
				clear log all on ap2 and open debug mode.
			</desc>
			<telnet target="ap2">
				-v "_ff src-ip ${pub.mtcast1.ip}"
				-v "_kdebug fe detail"
				-v "_kdebug fe basic"
				-v "_kdebug fe_arp basic"
				-v "_kdebug fe forw"
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2.7">
			<desc>
				On portal1
				mgt0 ip: 10.10.1.1/24
				security-object sj default-user-profile-attr 77
				ssid A security-object sj
				interface wifi0 ssid A
				exec capture remote-sniffer
			</desc>
			<telnet target="ap1">
				-v "mobility-policy FWtest inxp gre-tunnel from ${ap2.mgt0.ip}/32 password aerohive"
				-v "user-profile ttt qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy FWtest attribute 77"
			</telnet>
		</step>

		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn1, sta1, ap2" />

		<step no="3.1">
			<desc>
				check if station abtained ip
			</desc>
			<if>"${tb.os}" == "linux"</if>
			<log-file>step3.1_check_ip.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="3.2">
			<desc>
				check if station abtained ip
			</desc>
			<if>"${tb.os}" == "windows"</if>
			<log-file>step3.2_check_ip.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match> -e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="3.3">
			<desc>
				show sta
			</desc>
			<log-file>step3.3_show_station.log</log-file>
			<telnet target="ap2">
				-v "show station"
			</telnet>
			<log-match>-c -e "${sta1.tif.mac} *${sta1.tif.ip}"</log-match>
		</step>

		<step no="4" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show route on ap1
			</desc>
			<log-file>step4_show_route_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show route"
			</telnet>
			<log-match>-e "mgt0" -i "LTO"</log-match>
		</step>

		<step no="4.1">
			<desc>
				show route on ap2
			</desc>
			<log-file>step4.1_show_route_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show route"
			</telnet>
			<log-match>-e "wifi0.1" -i "LTO"</log-match>
		</step>

		<step no="4.2">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1">
				-v "rm -f ${file.dir}/${sta1.capture.multicast.packet.result}"
			</ssh>
		</step>

		<step no="5">
			<desc>
				capture packet on sta1
			</desc>
			<log-file>step5_capture_packet.log</log-file>
			<ssh target="sta1">
				-v "nohup tshark -i ${sta1.tif.name} dst port ${pub.mtcast1.group1.port} -V &gt; ${file.dir}/${sta1.capture.multicast.packet.result} &amp;"
			</ssh>
		</step>

		<step no="5.1">
			<desc>
				get pid of "tshark" on sta1
			</desc>
			<setvar name="sta1.multicast.tshark.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_capture_packet.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="6">
			<desc>
				Laptop1 report to join group 238.1.1.1,
			</desc>
			<log-file>step6_join_group.log</log-file>
			<ssh target="sta1">
				-v "nohup ./mrecv -d ${pub.mtcast1.group1.ip} &amp;"
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				get pid of "mrecv" on sta1
			</desc>
			<setvar name="sta1.join.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step6_join_group.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="7" delay="5">
			<desc>
				"show interface wifi0 multicast" to check multicast group’s membership table on portal1
			</desc>
			<log-file>step7_check_group_membership.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0 multicast"
			</telnet>
			<log-match>-n -e "Group IP address : ${pub.mtcast1.group1.ip}"</log-match>
			<log-match>-n -e "Group MAC address : ${pub.mtcast1.group1.mac}"</log-match>
			<log-match>-n -c -e "MAC Address : ${sta1.tif.mac} *IP Address : ${sta1.tif.ip}"</log-match>
		</step>

		<step no="7.1">
			<desc>
				"show interface wifi0 multicast" to check multicast group’s membership table on portal2
			</desc>
			<log-file>step7.1_check_group_membership.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi0 multicast"
			</telnet>
			<log-match>-e "Group IP address : ${pub.mtcast1.group1.ip}"</log-match>
			<log-match>-e "Group MAC address : ${pub.mtcast1.group1.mac}"</log-match>
			<log-match>-c -e "MAC Address : ${sta1.tif.mac} *IP Address : ${sta1.tif.ip}"</log-match>
		</step>

		<step no="8">
			<desc>
				"show log buffered" on ap1
			</desc>
			<log-file>step8_show_log_buffered.log</log-file>
			<telnet target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchblocks.py">-b "\(u\) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -ps p1 "\[fe\]: flood the pkt out on tunnel" -e "\[fe\]: QoS:" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="8.1">
			<desc>
				"show log buffered" on ap2
			</desc>
			<log-file>step8.1_show_log_buffered.log</log-file>
			<telnet target="ap2" timeout="500">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchblocks.py">-b "mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -ps p "\[fe\]: pkt out tunnel achored on access zone" -e "\[fe\]: QoS:" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="10">
			<desc>
				kill tshark process.
			</desc>
			<ssh target="sta1">
				-v "kill ${sta1.multicast.tshark.pid}"
			</ssh>
		</step>

		<step no="10.1">
			<desc>
				cat files
			</desc>
			<log-file>step10.1_check_result.log</log-file>
			<ssh target="sta1">
				-v "cat ${file.dir}/${sta1.capture.multicast.packet.result}"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${pub.mtcast1.ip} \(${pub.mtcast1.ip}\), Dst: ${pub.mtcast1.group1.ip} \(${pub.mtcast1.group1.ip}\)" -ps p1 "(?i)Protocol: ${pub.mtcast1.protocol}" -e "User Datagram Protocol.*Dst Port:.*${pub.mtcast1.group1.port}" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>

	<post-process>
		<include file="include/default_post_process.xml" />

		<stage>
			<step no="0">
				<desc>
					kill process which run in background.
				</desc>
				<ssh target="sta1">
					-v "kill ${sta1.join.pid}"
					-v "kill ${sta1.muticast.tshark.pid}"
					-v "rm -f ${file.dir}/${sta1.capture.multicast.packet.result}"
				</ssh>
			</step>
		</stage>
	</post-process>
</testcase>