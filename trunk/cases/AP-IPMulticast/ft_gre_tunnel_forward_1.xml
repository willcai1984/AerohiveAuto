<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>multicast packets selective forwarding on static gre tunnel</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Active multicast source group is 238.1.1.1,and 238.1.1.2
		Laptop1 connects to portal2, and be authenticated
		Static tunnel(INXP) is set up between portal1 and portal2
		Portal1 and portal2 open debug:
		_kdebug fe basic
		Debug constole

		Test Procedure:
		1. Laptop1 reports to join multicast group 238.1.1.1 and 238.1.1.2,
		check multicast packet forwarding portal1,verify debug on portal2
		2. On portal1, allow all multicast packet except group 238.1.1.1 to
		verify CLI:
		forwarding-engine tunnel selective-multicast-forward allow-all except 238.1.1.1
		3. On portal1, allow all multicast packet except 238.1.1.2, verify the allowing list is overlying
		CLI:
		forwarding-engine tunnel selective-multicast-forward allow-all except 238.1.1.2
		4. On portal1, cancel the allow-all except ip and then set except list with netmask to
		check multicast packet forwarding on gre tunnel:
		CLI push:
		no forwarding-engine tunnel selective-multicast-forward allow-all except 238.1.1.1
		no forwarding-engine tunnel
		selective-multicast-forward allow-all except 238.1.1.2
		forwarding-engine tunnel selective-multicast-forward allow-all except 224.0.0.0/3
		5. On portal1, cancel the allow-all except list and switch mode to block-all and set except 238.1.1.1 to verify
		CLI:
		no forwarding-engine tunnel selective-multicast-forward allow-all except 224.0.0.0/3
		forwarding-engine tunnel selective-multicast-forward block-all
		forwarding-engine tunnel selective-multicast-forward block-all except 238.1.1.1
		6. On portal1, block all multicast packet except 238.1.1.2, verify the blocking list is overlying
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="mtcast.proto" value="UDP" />
	<stage>
		<step no="0.1">
			<if>"${ap1.eth1.existed}" == "true"</if>
			<desc>shutdown ap's eth1 interface</desc>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>
		<step no="0.2">
			<if>"${ap2.eth1.existed}" == "true"</if>
			<desc>shutdown ap's eth1 interface</desc>
			<console target="ap2">
				-v "interface eth1 shutdown"
			</console>
		</step>
		
		<step no="1.1">
			<desc>
				On portal1
				mgt0 ip: 10.10.1.1/24
				security-object sj default-user-profile-attr 77
				ssid A security-object sj
				interface wifi0 ssid A
				exec capture remote-sniffer
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<include prefix="1.2" file="subs/get_ap_ip_mac.xml" obj-args="ap1" />

		<step no="1.3">
			<desc>
				On portal2
				mgt0 ip: 20.20.1.1/24
				user-profile vlan 10, attribute 77,binding mobility-policy sj
				ssid A security-object sj
				mobility-policy sj inxp gre-tunnel to 10.10.1.1
				interface wifi0 ssid A
				exec capture remote-sniffer
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} multicast conversion-to-unicast auto"
				-v "security-object FWtest"
				-v "security-object FWtest default-user-profile-attr 77"
				-v "ssid ${ssid.name} security-object FWtest"
				-v "mobility-policy FWtest inxp gre-tunnel to ${ap1.mgt0.ip} password aerohive"
				-v "user-profile ttt qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy FWtest attribute 77"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "exec capture remote-sniffer"
			</console>
		</step>

		<include prefix="1.4" file="subs/get_ap_ip_mac.xml" obj-args="ap2" />

		<step no="1.5">
			<desc>
				On portal1
				mgt0 ip: 10.10.1.1/24
				security-object sj default-user-profile-attr 77
				ssid A security-object sj
				interface wifi0 ssid A
				exec capture remote-sniffer
			</desc>
			<telnet target="ap1">
				-v "mobility-policy FWtest inxp gre-tunnel from ${ap2.mgt0.ip}/32 password aerohive"
				-v "user-profile ttt qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy FWtest attribute 77"
			</telnet>
		</step>
		
		<property name="conn1.ssid" value="${ssid.name}" />
		<include prefix="2.1" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap2" />

		<step no="2.2">
			<desc>check show sta on AP2</desc>
			<telnet target="ap2">
				-v "show station"
			</telnet>
			<log-match>-c -e "${sta1.tif.mac} *${sta1.tif.ip}"</log-match>
		</step>

		<step no="3.1">
			<desc>
				clear log all on ap1 and open debug mode.
			</desc>
			<telnet target="ap1">
				-v "_ff id 1 protocol 47 bidirectional"
				-v "_ff id 2 src-ip ${pub.mtcast1.ip} bidirectional"
				-v "_kdebug fe detail"
				-v "_kdebug fe basic"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="3.2">
			<desc>
				clear log all on ap2 and open debug mode.
			</desc>
			<telnet target="ap2">
				-v "_ff id 1 protocol 47 bidirectional"
				-v "_ff id 2 dst-ip ${sta1.tif.ip} bidirectional"
				-v "_ff id 3 src-ip ${pub.mtcast1.ip} bidirectional"
				-v "_kdebug fe detail"
				-v "_kdebug fe basic"
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="4.1">
			<desc>show route</desc>
			<telnet target="ap1">
				-v "show route"
			</telnet>
			<log-match>-i "mgt0" -i "LTO"</log-match>
		</step>
		<step no="4.2">
			<desc>show route</desc>
			<telnet target="ap2">
				-v "show route"
			</telnet>
			<log-match>-i "wifi0.1" -i "LTO"</log-match>
		</step>

		<step no="5.1">
			<desc>Laptop1 report to join multicast group 1</desc>
			<log-file>step5.1_join_group.log</log-file>
			<ssh target="sta1">
				-v "nohup /usr/local/auto/bin/join_mcast_group --group ${pub.mtcast1.group1.ip} &amp;"
			</ssh>
		</step>
		<step no="5.2">
			<desc>get pid of "join_mcast_group" on sta1</desc>
			<setvar name="sta1.join.group1.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5.1_join_group.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>
		<step no="5.3">
			<desc>Laptop1 report to join multicast group 2</desc>
			<log-file>step5.3_join_group.log</log-file>
			<ssh target="sta1">
				-v "nohup /usr/local/auto/bin/join_mcast_group --group ${pub.mtcast1.group2.ip} &amp;"
			</ssh>
		</step>
		<step no="5.4">
			<desc>get pid of "join_mcast_group" on sta1</desc>
			<setvar name="sta1.join.group2.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5.3_join_group.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="6.1" delay="5">
			<desc>"show log buffered" on ap1</desc>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-i "(i) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="6.2">
			<desc>"show log buffered" on ap2</desc>
			<log-file>step6.2_show_log_buff.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchblocks.py">
				-b "(?i)\(r\) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}.*${mtcast.proto}"
				-ps
				p "\[fe\]: GRE decap pkt with tunnel"
				p "\(u\) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-e "\(i\) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-f ${log.dir}/${log.file}
			</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">
				-b "(?i)\(r\) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}.*${mtcast.proto}"
				-ps
				p "\[fe\]: GRE decap pkt with tunnel"
				p "\(u\) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-e "\(i\) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-f ${log.dir}/${log.file}
			</log-match>
			<log-match>-c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="7.1">
			<desc>
				2. On portal1, allow all multicast packet except group 238.1.1.1 to verify
				CLI:
				forwarding-engine tunnel selective-multicast-forward allow-all except 238.1.1.1
			</desc>
			<telnet target="ap1">
				-v "forwarding-engine tunnel selective-multicast-forward allow-all except ${pub.mtcast1.group1.ip}"
			</telnet>
		</step>
		<step no="7.2">
			<desc>clear log all</desc>
			<telnet target="ap1">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>
		<step no="7.3">
			<desc>clear log all</desc>
			<telnet target="ap2">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="8.1" delay="5">
			<desc>"show log buffered" on ap1</desc>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-i "(i) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="8.2">
			<desc>"show log buffered" on ap2</desc>
			<log-file>step8.2_show_log_buff.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchblocks.py">
				-b "(?i)\(r\) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}.*${mtcast.proto}"
				-ps
				p "\[fe\]: GRE decap pkt with tunnel"
				p "\(u\) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-e "\(i\) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-f ${log.dir}/${log.file}
			</log-match>
			<log-match>-n -c -i "(r) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-n -c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="9.1">
			<desc>
				3. On portal1, allow all multicast packet except 238.1.1.2, verify the allowing list is overlying
				CLI:
				forwarding-engine tunnel selective-multicast-forward allow-all except 238.1.1.2
			</desc>
			<telnet target="ap1">
				-v "forwarding-engine tunnel selective-multicast-forward allow-all except ${pub.mtcast1.group2.ip}"
			</telnet>
		</step>
		<step no="9.2">
			<desc>clear log all</desc>
			<telnet target="ap1">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>
		<step no="9.3">
			<desc>clear log all</desc>
			<telnet target="ap2">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="10.1" delay="5">
			<desc>"show log buffered" on ap1</desc>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-i "(i) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="10.2">
			<desc>"show log buffered" on ap2</desc>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-n -c -i "(r) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-n -c -i "(r) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-n -c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-n -c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="11.1">
			<desc>
				4. On portal1, cancel the allow-all except ip and then set except list with netmask to
				check multicast packet forwarding on gre tunnel:
				CLI push:
				no forwarding-engine tunnel selective-multicast-forward allow-all except
			</desc>
			<telnet target="ap1">
				-v "no forwarding-engine tunnel selective-multicast-forward allow-all except ${pub.mtcast1.group1.ip}"
				-v "no forwarding-engine tunnel selective-multicast-forward allow-all except ${pub.mtcast1.group2.ip}"
				-v "forwarding-engine tunnel selective-multicast-forward allow-all except ${pub.mtcast1.group2.ip}/3"
			</telnet>
		</step>
		<step no="11.2">
			<desc>clear log all</desc>
			<telnet target="ap1">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>
		<step no="11.3">
			<desc>clear log all</desc>
			<telnet target="ap2">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="12.1" delay="5">
			<desc>"show log buffered" on ap1</desc>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-i "(i) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>
		<step no="12.2">
			<desc>"show log buffered" on ap2</desc>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-n -c -i "(r) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-n -c -i "(r) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-n -c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-n -c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="13.1">
			<desc>
				5. On portal1, cancel the allow-all except list and switch mode to block-all and set except 238.1.1.1 to verify
				CLI:
				no forwarding-engine tunnel selective-multicast-forward allow-all except 224.0.0.0/3
				forwarding-engine tunnel selective-multicast-forward block-all
				forwarding-engine tunnel selective-multicast-forwardblock-all except 238.1.1.1
			</desc>
			<telnet target="ap1">
				-v "no forwarding-engine tunnel selective-multicast-forward allow-all except ${pub.mtcast1.group2.ip}/3"
				-v "forwarding-engine tunnel selective-multicast-forward block-all"
				-v "forwarding-engine tunnel selective-multicast-forward block-all except ${pub.mtcast1.group1.ip}"
			</telnet>
		</step>
		<step no="13.2">
			<desc>clear log all</desc>
			<telnet target="ap1">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>
		<step no="13.3">
			<desc>clear log all</desc>
			<telnet target="ap2">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>
		
		<step no="14.1" delay="5">
			<desc>"show log buffered" on ap1</desc>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-i "(i) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="14.2">
			<desc>"show log buffered" on ap2</desc>
			<log-file>step14.2_show_log_buff.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchblocks.py">
				-b "(?i)\(r\) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}.*${mtcast.proto}"
				-ps
				p "\[fe\]: GRE decap pkt with tunnel"
				p "\(u\) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-e "\(i\) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-f ${log.dir}/${log.file}
			</log-match>
			<log-match>-n -c -i "(r) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-n -c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="15.1">
			<desc>
				6. On portal1, block all multicast packet except 238.1.1.2, verify the blocking list is overlying
			</desc>
			<telnet target="ap1">
				-v "forwarding-engine tunnel selective-multicast-forward block-all except ${pub.mtcast1.group2.ip}"
			</telnet>
		</step>
		<step no="15.2">
			<desc>clear log all</desc>
			<telnet target="ap1">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>
		<step no="15.3">
			<desc>clear log all</desc>
			<telnet target="ap2">
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="16.1" delay="5">
			<desc>"show log buffered" on ap1</desc>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-i "(i) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>

		<step no="16.2">
			<desc>"show log buffered" on ap2</desc>
			<log-file>step16.2_show_log_buff.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchblocks.py">
				-b "(?i)\(r\) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}.*${mtcast.proto}"
				-ps
				p "\[fe\]: GRE decap pkt with tunnel"
				p "\(u\) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-e "\(i\) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-f ${log.dir}/${log.file}
			</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">
				-b "(?i)\(r\) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}.*${mtcast.proto}"
				-ps
				p "\[fe\]: GRE decap pkt with tunnel"
				p "\(u\) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-e "\(i\) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)"
				-f ${log.dir}/${log.file}</log-match>
			<log-match>-c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${mtcast.proto}"</log-match>
			<log-match>-c -i "(o) wifi0.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group2.ip}" -i "${mtcast.proto}"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<step no="p1">
				<desc>kill process which run in background.</desc>
				<ssh target="sta1">
					-v "kill ${sta1.join.group1.pid}"
					-v "kill ${sta1.join.group2.pid}"
				</ssh>
			</step>
		</stage>

		<include prefix="p2" file="include/default_post_process.xml" />
	</post-process>
</testcase>