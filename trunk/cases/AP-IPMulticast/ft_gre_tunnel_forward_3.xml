<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>"Gre tunnel selective multicast block-all" should not block broadcast packet </brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Portal1:
		Gre tunnel selective forwarding with default value allow-all
		Disable forwarding-engine proxy-arp
		Portal2:
		Active multicast source group is 238.1.1.1
		Laptop2 connects to portal2, and be authenticated

		Test Procedure:
		1. Laptop1 ping laptop2 to verify
		2. On portal1, block gre tunnel selective multicast forwarding, then laptop1 ping
		laptop2 to verify (clear arp on laptop1,laptop2)
		"forwarding-engine tunnel selective-multicast-forward block-all"
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.pif" value="wifi1" />
	<property name="conn1.channel" value="36" />
	<property name="sta1.capture.multicast.packet.result" value="sta1.capture.multicast.packet.result" />
	<property name="file.dir" value="/tmp" />

	<stage>
		<step no="1">
			<desc>
				Active multicast source group is 238.1.1.1
				Laptop1 connects to portal1, and be authenticated
				Static tunnel(INXP) is set up from portal1 to portal2
				On portal1, gre tunneling selective forwarding with default value allow-all
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} multicast conversion-to-unicast auto"
				-v "security-object FWtest"
				-v "security-object FWtest default-user-profile-attr 77"
				-v "ssid ${ssid.name} security-object FWtest"
				-v "exec capture remote-sniffer"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "mobility-policy FWtest inxp gre-tunnel from ${ap2.mgt0.ip}/32 password aerohive"
				-v "user-profile ttt qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy FWtest attribute 77"
				-v "no forwarding-engine proxy-arp enable"
			</console>
		</step>

		<step no="1.1">
			<desc>
				close dhcp client
			</desc>
			<console target="ap1">
				-v "no interface mgt0 dhcp client"
			</console>
		</step>

		<step no="1.2">
			<desc>
				open dhcp client
			</desc>
			<console target="ap1">
				-v "interface mgt0 dhcp client"
			</console>
		</step>

		<step no="1.3">
			<desc>
				show interface wifi0 info
			</desc>
			<log-file>step1.3_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="1.4">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step1.3_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="2">
			<desc>
				Laptop2 connects to portal2, and be authenticated
				Static tunnel(INXP) is set up from portal1 to portal2
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "interface wifi1 mode access"
				-v "interface wifi1 radio channel 36"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} multicast conversion-to-unicast auto"
				-v "security-object FWtest"
				-v "security-object FWtest default-user-profile-attr 77"
				-v "ssid ${ssid.name} security-object FWtest"
				-v "exec capture remote-sniffer"
				-v "interface wifi1 ssid ${ssid.name}"
				-v "mobility-policy FWtest inxp gre-tunnel to ${ap1.mgt0.ip} password aerohive"
				-v "user-profile ttt qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy FWtest attribute 77"
			</console>
		</step>

		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn1, sta1, ap2" />

		<step no="3.1">
			<desc>
				show sta
			</desc>
			<log-file>step3.1_show_station.log</log-file>
			<telnet target="ap2">
				-v "show station"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}"</log-match>
		</step>

		<step no="3.2">
			<desc>
				capture packet on sta1
			</desc>
			<log-file>step3.2_capture_packet.log</log-file>
			<ssh target="sta1">
				-v "rm -f ${file.dir}/${sta1.capture.multicast.packet.result}"
				-v "nohup tshark -i ${sta1.tif.name} host ${pub.mtcast1.group1.ip} -V &gt; ${file.dir}/${sta1.capture.multicast.packet.result} &amp;"
			</ssh>
		</step>

		<step no="3.3">
			<desc>
				get pid of "tshark" on sta1
			</desc>
			<setvar name="sta1.tshark.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3.2_capture_packet.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4">
			<desc>
				sta1 reports to join group1 238.1.1.1
			</desc>
			<log-file>step4_join_group.log</log-file>
			<ssh target="sta1">
				-v "nohup ./mrecv -d ${pub.mtcast1.group1.ip} &amp;"
			</ssh>
		</step>

		<step no="4.1">
			<desc>
				get pid of "mrecv" on sta1
			</desc>
			<setvar name="sta1.join.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4_join_group.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="5" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show route
			</desc>
			<log-file>step5_show_route_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show route"
			</telnet>
			<log-match>-i "mgt0" -i "LTO"</log-match>
		</step>

		<step no="5.1">
			<desc>
				show route
			</desc>
			<log-file>step5.1_show_route.log</log-file>
			<telnet target="ap2">
				-v "show route"
			</telnet>
			<log-match>-i "wifi1.1" -i "LTO"</log-match>
		</step>

		<step no="6">
			<desc>
				kill process
			</desc>
			<ssh target="sta1">
				-v "kill ${sta1.tshark.pid}"
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				cat files
			</desc>
			<log-file>step6.1_check_result.log</log-file>
			<ssh target="sta1">
				-v "cat ${file.dir}/${sta1.capture.multicast.packet.result}"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${pub.mtcast1.ip} \(${pub.mtcast1.ip}\), Dst: ${pub.mtcast1.group1.ip} \(${pub.mtcast1.group1.ip}\)" -ps p1 "(?i)Protocol: ${pub.mtcast1.protocol}" -e "User Datagram Protocol.*Dst Port:.*${pub.mtcast1.group1.port}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="7">
			<desc>
				clear log all on ap1 and open debug mode.
			</desc>
			<telnet target="ap1">
				-v "_ff id 1 protocol 47 bidirectional"
				-v "_ff id 2 src-ip ${pub.mtcast1.ip} bidirectional"
				-v "_kdebug fe detail"
				-v "_kdebug fe basic"
				-v "clear forwarding-engine ip-session"
				-v "clear forwarding-engine mac-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="7.1">
			<desc>
				clear log all on ap2 and open debug mode.
			</desc>
			<telnet target="ap2">
				-v "_ff id 1 protocol 47 bidirectional"
				-v "_ff id 2 src-ip ${pub.mtcast1.ip} bidirectional"
				-v "_kdebug fe detail"
				-v "_kdebug fe basic"
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="7.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>step7.2_show_logging_buffered.log</log-file>
			<telnet target="ap2" timeout="2000">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchblocks.py">-b "(?i)\(r\) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}.*${pub.mtcast1.protocol}" -ps p "\[fe\]: GRE decap pkt with tunnel" p "\(u\) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)" -e "\(i\) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)" -f ${log.dir}/${log.file}</log-match>
			<log-match>-c -i "(o) wifi1.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${pub.mtcast1.protocol}"</log-match>
		</step>

		<step no="7.3">
			<desc>
				show logging buffered
			</desc>
			<log-file>step7.3_show_logging_buffered.log</log-file>
			<telnet target="ap1" timeout="500">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-i "(i) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${pub.mtcast1.protocol}"</log-match>
		</step>

		<step no="7.4">
			<desc>
				clear log all on ap1 and open debug mode.
			</desc>
			<telnet target="ap1">
				-v "no _ff id 1"
				-v "no _ff id 2"
				-v "_ff id 1 etype 0806 bidirectional"
				-v "_ff id 2 dst-ip ${tb.unreach.ip1} bidirectional"
				-v "clear forwarding-engine ip-session"
				-v "clear forwarding-engine mac-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="7.5">
			<desc>
				clear log all on ap2 and open debug mode.
			</desc>
			<telnet target="ap2">
				-v "no _ff id 1"
				-v "no _ff id 2"
				-v "_ff id 1 etype 0806 bidirectional"
				-v "_ff id 2 dst-ip ${tb.unreach.ip1} bidirectional"
				-v "clear forwarding-engine ip-session"
				-v "clear forwarding-engine mac-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="8" delay="5">
			<desc>
				--ap1 ping ap2
			</desc>
			<log-file>step8_ping.log</log-file>
			<telnet target="ap1" timeout="300">
				-v "ping ${tb.unreach.ip1} count 50" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="8.1">
			<desc>
				show logging buffered
			</desc>
			<log-file>step8.1_show_logging_buffered.log</log-file>
			<telnet target="ap2" timeout="180">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) wifi1.1" -i "-&gt;ffff:ffff:ffff arp " -i "-&gt;${tb.unreach.ip1}(0000:0000:0000)"</log-match>
			<log-match>-i "(r) mgt0" -i "-&gt;ffff:ffff:ffff arp " -i "-&gt;${tb.unreach.ip1}(0000:0000:0000)"</log-match>
		</step>

		<step no="9">
			<desc>
				2. On portal1, block gre tunnel selective multicast forwarding, then laptop1 ping
				laptop2 to verify (clear arp on laptop1,laptop2)
				"forwarding-engine tunnel selective-multicast-forward block-all"
			</desc>
			<telnet target="ap1">
				-v "forwarding-engine tunnel selective-multicast-forward block-all"
			</telnet>
		</step>

		<step no="9.1">
			<desc>
				clear log all on ap1 and open debug mode.
			</desc>
			<telnet target="ap1">
				-v "no _ff id 1"
				-v "_ff id 1 protocol 47 bidirectional"
				-v "_ff id 3 src-ip ${pub.mtcast1.ip} bidirectional"
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear forwarding-engine mac-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="9.2">
			<desc>
				clear log all on ap2 and open debug mode.
			</desc>
			<telnet target="ap2">
				-v "no _ff id 1"
				-v "_ff id 1 protocol 47 bidirectional"
				-v "_ff id 3 src-ip ${pub.mtcast1.ip} bidirectional"
				-v "clear arp-cache"
				-v "clear forwarding-engine ip-session"
				-v "clear forwarding-engine mac-session"
				-v "clear log all"
			</telnet>
		</step>

		<step no="10" delay="5">
			<desc>
				--ap1 ping ap2
			</desc>
			<log-file>step10_ping.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "ping ${tb.unreach.ip1} count 50" ; exit 0
			</telnet>
			<no-error-check />
		</step>

		<step no="11">
			<desc>
				show logging buffered
			</desc>
			<log-file>step11_show_logging_buffered.log</log-file>
			<telnet target="ap2" timeout="180">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-n -c -i "(r) mgt0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${pub.mtcast1.protocol}"</log-match>
			<log-match>-n -c -i "(o) wifi1.1 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${pub.mtcast1.protocol}"</log-match>
			<log-match>-i "(o) wifi1.1" -i "-&gt;ffff:ffff:ffff arp " -i "-&gt;${tb.unreach.ip1}(0000:0000:0000)"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "\(r\) mgt0.*-&gt;ffff:ffff:ffff arp\s*.*-&gt;${tb.unreach.ip1}\(0000:0000:0000\)" -ps p "\[fe\]: GRE decap pkt with tunnel" -e "\(u\) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}.*proto\(47\)" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="11.1">
			<desc>
				show logging buffered
			</desc>
			<log-file>step11.1_show_logging_buffered.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "(o) eth0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-i "(i) mgt0 ${ap1.mgt0.ip}-&gt;${ap2.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(i) eth0 ${pub.mtcast1.ip}-&gt;${pub.mtcast1.group1.ip}" -i "${pub.mtcast1.protocol}"</log-match>
		</step>
	</stage>

	<post-process>
		<include file="include/default_post_process.xml" />

		<stage>
			<step no="0">
				<desc>
					kill process which run in background.
				</desc>
				<ssh target="sta1">
					-v "killall tshark -q"
					-v "killall ./mrecv -q"
					-v "rm -f ${file.dir}/${sta1.capture.multicast.packet.result}"
				</ssh>
			</step>
		</stage>
	</post-process>
</testcase>