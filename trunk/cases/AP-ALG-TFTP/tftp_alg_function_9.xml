<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Define QoS class for alg tftp, verify traffic can be forward correctly by QoS</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		security-object zhhtest
		security-object zhhtest default-user-profile-attr 1
		ssid zhhtest
		ssid zhhtest security-object zhhtest
		interface wifi0 ssid zhhtest
		user-profile uu qos-policy def-user-qos vlan-id 1 attribute 1
		ip-policy xx
		ip-policy xx id 1 service tftp action permit
		ip-policy xx id 2 service dhcp-server action permit
		ip-policy xx id 3 service dhcp-client action permit
		ip-policy xx id 4 service icmp action permit
		user-profile uu security ip-policy from-access xx
		alg tftp enable
		alg tftp inactive-data-timeout 300
		Laptop connect to SSID and obtain ip address
		_debug fe alg_tftp_error
		_debug fe alg_tftp_fsm
		_debug fe alg_tftp_gate
		_debug fe alg_tftp_pkt
		_ff id 1 src-mac xxxx:yyyy:zzzz bidirectional
		_kdebug fe basic
		_kdebug fe detail
		debug console
		clear forwarding-engine ip-sessions

		Test Procedure:
		1. Check default QoS class by show alg tftp
		2. Laptop send data to tftp server, check QoS class
		3. Set QoS class to 1 by alg tftp qos 1, show alg tftp to check
		4. Laptop send data to tftp
		server, check QoS class
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${job.sid}-1" />
	<property name="default.qos.class" value="0" />
	<property name="set.qos.class" value="1" />

	<stage>
		<step no="0">
			<desc>
				Check default QoS class by show alg tftp
			</desc>
			<log-file>step0_check_default_qos.log</log-file>
			<telnet target="ap1">
				-v "show alg tftp"
			</telnet>
			<log-match>-i "disable \ \ ${default.qos.class} "</log-match>
		</step>

		<step no="1">
			<desc>
				security-object zhhtest
				security-object zhhtest default-user-profile-attr 1
				ssid zhhtest
				ssid zhhtest security-object zhhtest
				interface wifi0 ssid zhhtest
				user-profile uu qos-policy def-user-qos vlan-id 1 attribute 1
				ip-policy xx
				ip-policy xx id 1 service tftp action permit
				ip-policy xx id 2 service dhcp-server action permit
				ip-policy xx id 3 service dhcp-client action permit
				ip-policy xx id 4 service icmp action permit
				user-profile uu security ip-policy from-access xx
				alg tftp enable
			</desc>
			<telnet target="ap1">
				-v "ssid ${conn1.ssid}"
				-v "security-object ${conn1.ssid}"
				-v "security-object ${conn1.ssid} default-user-profile-attr 1"
				-v "ssid ${conn1.ssid} security-object ${conn1.ssid}"
				-v "interface wifi0 ssid ${conn1.ssid}"
				-v "user-profile uu attribute 1"
				-v "ip-policy xx"
				-v "ip-policy xx id 1 service tftp action permit"
				-v "ip-policy xx id 2 service dhcp-server action permit"
				-v "ip-policy xx id 3 service dhcp-client action permit"
				-v "ip-policy xx id 4 service icmp action permit"
				-v "user-profile uu security ip-policy from-access xx"
				-v "alg tftp enable"
				-v "save config"
			</telnet>
		</step>

		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="3">
			<desc>
				_debug fe alg_tftp_error
				_debug fe alg_tftp_fsm
				_debug fe alg_tftp_gate
				_debug fe alg_tftp_pkt
				_ff id 1 src-mac xxxx:yyyy:zzzz bidirectional
				_kdebug fe basic
				_kdebug fe detail
				debug console
				clear forwarding-engine ip-sessions
			</desc>
			<telnet target="ap1">
				-v "_debug fe alg_tftp_error"
				-v "_debug fe alg_tftp_fsm"
				-v "_debug fe alg_tftp_gate"
				-v "_debug fe alg_tftp_pkt"
				-v "_ff id 1 src-mac ${sta1.tif.mac} bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear forwarding-engine ip-sessions"
				-v "clear log all"
			</telnet>
		</step>

		<step no="4">
			<desc>
				- creat file on tftp
			</desc>
			<ssh host="${pub.tftp1.ip}">
				-v "touch /tftpboot/${job.id}newfile"
			</ssh>
		</step>

		<step no="4.1">
			<desc>
				- get file from tftp
			</desc>
			<log-file>step4.1_get_file.log</log-file>
			<ssh target="sta1">
				-v "tftp ${pub.tftp1.tip} -c get ${job.id}newfile"
			</ssh>
		</step>

		<step no="5">
			<desc>
				Check QoS class
			</desc>
			<log-file>step5_check_qos.log</log-file>
			<telnet target="ap1">
				-v "show alg tftp"
			</telnet>
			<log-match>-i "enable \ \ \ ${default.qos.class} "</log-match>
		</step>

		<include prefix="6" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step6_show_logging_buffered.log" />

		<step no="6.1">
			<desc>
				check log
			</desc>
			<log-file>step6_show_logging_buffered.log</log-file>
			<log-match bin="${bin.dir}/searchblocks.py">-ps p "QoS: ingress pkt fwd\(wifi0.1\) profile=\d+ qos=${default.qos.class}" p "QoS: ingress pkt fwd\(eth0\) profile=\d+ qos=${default.qos.class}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6.2">
			<desc>
				clear log all
			</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="7">
			<desc>
				Set QoS class to 1 by alg tftp qos 1
			</desc>
			<telnet target="ap1">
				-v "alg tftp qos ${set.qos.class}"
			</telnet>
		</step>

		<step no="7.1">
			<desc>
				Check QoS class
			</desc>
			<log-file>step7.1_check_qos.log</log-file>
			<telnet target="ap1">
				-v "show alg tftp"
			</telnet>
			<log-match>-i "enable \ \ \ ${set.qos.class}"</log-match>
		</step>

		<step no="8">
			<desc>
				- get file from tftp
			</desc>
			<log-file>step8_get_file.log</log-file>
			<ssh target="sta1">
				-v "tftp ${pub.tftp1.tip} -c get ${job.id}newfile"
			</ssh>
		</step>

		<include prefix="9" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step9_show_logging_buffered.log" />

		<step no="9.1">
			<desc>
				check log
			</desc>
			<log-file>step9_show_logging_buffered.log</log-file>
			<log-match bin="${bin.dir}/searchblocks.py">-ps p "QoS: ingress pkt fwd\(wifi0.1\) profile=\d+ qos=${set.qos.class}" p "QoS: ingress pkt fwd\(eth0\) profile=\d+ qos=${set.qos.class}" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<step no="0.1">
				<desc>
					clear file on sta1
				</desc>
				<ssh target="sta1">
					-v "rm -f ${job.id}newfile"
				</ssh>
			</step>

			<step no="0.2">
				<desc>
					clear file on tftp
				</desc>
				<ssh host="${pub.tftp1.ip}">
					-v "rm -f /tftpboot/${job.id}newfile"
				</ssh>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>