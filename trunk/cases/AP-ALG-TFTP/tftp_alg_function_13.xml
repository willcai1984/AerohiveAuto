<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify if control/data session can be transferred to L3 neighbor when L3 roaming occur</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Set the same config in three APs:
		security-object zhhtest
		security-object zhhtest default-user-profile-attr 1
		ssid zhhtest
		ssid zhhtest security-object zhhtest
		interface wifi0 ssid zhhtest
		user-profile uu qos-policy def-user-qos vlan-id 1 attribute 1
		ip-policy xx
		ip-policy xx id 1 service tftp action permit
		ip-policy xx id 2 service dhcp-server action permit
		ip-policy xx id 3 service dhcp-client action permit
		ip-policy xx id 4 service icmp action permit
		user-profile uu security ip-policy from-access xx
		alg tftp enable
		alg tftp inactive-data-timeout 1800
		Shutdown SSID of AP2
		Laptop connect to SSID of AP1 and obtain ip address
		_debug fe alg_tftp_error
		_debug fe alg_tftp_fsm
		_debug fe alg_tftp_gate
		_debug fe alg_tftp_pkt
		_ff id 1 src-mac xxxx:yyyy:zzzz bidirectional
		_kdebug fe basic
		_kdebug fe detail
		debug console
		clear forwarding-engine ip-sessions

		Test Procedure:
		1. AP1 send data to tftp server, verify control/data session be created
		2. Up SSID of AP2, shutdown SSID of AP1, make laptop
		roaming to AP2,
		verify if control/data session will be transferred to AP2
		3. Up SSID of AP1, shutdown SSID of AP2, make laptop roaming to AP1,
		verify if control/data session will be transferred to AP1
		4. Up SSID of AP2, shutdown SSID of AP1, make laptop roaming to AP2,
		verify if control/data session will be transferred to AP2
		5. Up SSID of AP1, shutdown SSID of AP2, make laptop roaming to AP1,
		verify if control/data session will be transferred to AP1
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="tftp_test_file_local_dir" value="/tmp" />
	<property name="wifi1_channel" value="44" />

	<stage>
		<step no="1.1">
			<desc>
				-Configure AP1 via ssh
			</desc>
			<ssh target="ap1">
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${ap.def.passwd}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 ssid ${ssid.name}"
				-v "mobility-policy l3roaming dnxp"
				-v "user-profile ${ssid.name} qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "ip-policy fw"
				-v "ip-policy fw service tftp action permit"
				-v "ip-policy fw service dhcp-server action permit"
				-v "ip-policy fw service dhcp-client action permit"
				-v "user-profile ${ssid.name} security ip-policy from-access fw to-access fw"
				-v "alg tftp enable"
				-v "interface wifi1 radio channel ${wifi1_channel}"
			</ssh>
		</step>


		<step no="1.2">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=open"
				echo "conn1.pif=wifi1"
			</multi-setvar>
		</step>

		<include prefix="1.3" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="1.4">
			<desc>
				-Show ap1's interface
			</desc>
			<log-file>step1.2_ap1_interface_info.log</log-file>
			<ssh target="ap1">
				-v "show interface"
			</ssh>
		</step>

		<step no="1.5">
			<desc>
				-Gain ap1's eth0's mac address
			</desc>
			<setvar name="ap1_eth0_mac">
				${bin.dir}/getstring.pl -k "Eth0" -p 2 -f ${log.dir}/step1.2_ap1_interface_info.log
			</setvar>
		</step>

		<step no="3.1">
			<desc>
				-Configure ap2 via ssh
			</desc>
			<console target="ap2">
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${ap.def.passwd}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 ssid ${ssid.name}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "mobility-policy l3roaming dnxp"
				-v "user-profile ${ssid.name} qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "ip-policy fw"
				-v "ip-policy fw service tftp action permit"
				-v "ip-policy fw service dhcp-server action permit"
				-v "ip-policy fw service dhcp-client action permit"
				-v "user-profile ${ssid.name} security ip-policy from-access fw to-access fw"
				-v "alg tftp enable"
				-v "interface wifi1 radio channel ${wifi1_channel}"
			</console>
		</step>

		<include prefix="3.2" file="subs/ap_renew_ip.xml" obj-args="ap2" />

		<step no="3.5">
			<desc>
				-Show ap2's interface
			</desc>
			<log-file>step3.5_ap2_interface_info.log</log-file>
			<ssh target="ap2">
				-v "show interface"
			</ssh>
		</step>

		<step no="3.6">
			<desc>
				-Gain ap2's eth0's mac address
			</desc>
			<setvar name="ap2_eth0_mac">
				${bin.dir}/getstring.pl -k "Eth0" -p 2 -f ${log.dir}/step3.5_ap2_interface_info.log
			</setvar>
		</step>

		<step no="3.7" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				-Check amrp neighbor status on ap1
			</desc>
			<log-file>step.3.7_amrp_dnxp_neighbor_ap1_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show amrp dnxp neighbor"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_eth0_mac}\s+${ap2.mgt0.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.8" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				-Check amrp dnxp neighbor status on ap2
			</desc>
			<log-file>step.3.8_amrp_dnxp_neighbor_ap2_${loop_check.idx}.log</log-file>
			<ssh target="ap2">
				-v "show amrp dnxp neighbor"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_eth0_mac}\s+${ap1.mgt0.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap1.roaming.ap2.first.1">
			<desc>
				-Confirm station state on ap1
			</desc>
			<log-file>step.ap1.roaming.ap2.first.1_show_station.log</log-file>
			<ssh target="ap1">
				-v "show station"
			</ssh>
			<log-match>-e "${sta1.tif.ip}"</log-match>
		</step>

		<step no="ap1.roaming.ap2.first.2.1">
			<desc>
				-Open debug switch on ap1 and clear log buffer
			</desc>
			<ssh target="ap1">
				-v "_kdebug fe sync"
				-v "_kdebug fe session"
				-v "clear log buffered "
			</ssh>
		</step>

		<step no="ap1.roaming.ap2.first.2.2">
			<desc>
				-Open debug switch on ap2 and clear log buffer
			</desc>
			<ssh target="ap2">
				-v "_kdebug fe sync"
				-v "_kdebug fe session"
				-v "clear log buffered "
			</ssh>
		</step>

		<step no="4.1">
			<desc>
				Download a file from tftp server to client,alg tftp disbale
			</desc>
			<log-file>4.1_curl_pid.log</log-file>
			<ssh target="sta1">
				-v "nohup curl --connect-timeout 30 tftp://${tb.tftp}/${tb.ftp.file3_small} -o ${tftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 20k> ${tftp_test_file_local_dir}/4.1_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="ap1.roaming.ap2.first.3.5">
			<desc>
				-Get pid of "curl get""
			</desc>
			<setvar name="alg.curl.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/4.1_curl_pid.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="6">
			<desc>
				Check control session and data session by show forwarding-engine ip-sessions
			</desc>
			<log-file>step6_show_session.log</log-file>
			<console target="ap1">
				-v "show forwarding-engine ip-sessions"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${tb.tftp}/69 -> ${sta1.tif.ip}/\d+; Proto 17" -c 1 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${sta1.tif.ip}/\d+ -> ${tb.tftp}/69; Proto 17" -c 1 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${tb.tftp}/\d+ -> ${sta1.tif.ip}/\d+; Proto 17" -c 2 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${sta1.tif.ip}/\d+ -> ${tb.tftp}/\d+; Proto 17" -c 2 -f ${log.dir}/${log.file}</log-match>
			<failed>next</failed>
		</step>


		<step no="7">
			<desc>
				shutdown SSID of AP1
			</desc>
			<log-file>step7.1_shutdown_SSID_of_AP1.log</log-file>
			<console target="ap1">
				-v "interface wifi1 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<step no="ap1.roaming.ap2.first.5.1" delay="15">
			<desc>
				-Look up log info on ap1
			</desc>
			<log-file>step.ap1.roaming.ap2.first.5.1_ap1_log.log</log-file>
			<ssh target="ap1">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-e "send sess sync msg"</log-match>
			<log-match>-e "send ip data session from sync"</log-match>
			<failed>next</failed>
		</step>

		<step no="ap1.roaming.ap2.first.5.2">
			<desc>
				-Look up log info on ap2
			</desc>
			<log-file>step.ap1.roaming.ap2.first.5.2_ap2_log.log</log-file>
			<ssh target="ap2">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-e "recv session sync msg"</log-match>
			<log-match>-e "receive ip data session from sync"</log-match>
			<failed>next</failed>
		</step>

		<step no="ap1.roaming.ap2.first.5.5">
			<desc>
				-Check l3 roaming status on ap1
			</desc>
			<log-file>step.ap1.roaming.ap2.first.5.5_ap1_log.log</log-file>
			<ssh target="ap1">
				-v "show route"
			</ssh>
			<!-- <log-match>-i "mgt0" -i "LTO" </log-match> -->
			<failed>next</failed>
		</step>

		<step no="ap1.roaming.ap2.first.5.6">
			<desc>
				-Check l3 roaming status on ap2
			</desc>
			<log-file>step.ap1.roaming.ap2.first.5.6_ap2_log.log</log-file>
			<ssh target="ap2">
				-v "show route"
			</ssh>
			<!-- <log-match>-i "wifi" -i "LTO"</log-match> -->
			<failed>next</failed>
		</step>

		<step no="8.1">
			<desc>
				Check control session and data session by show forwarding-engine ip-sessions
			</desc>
			<log-file>step6_show_session.log</log-file>
			<console target="ap1">
				-v "show forwarding-engine ip-sessions"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${tb.tftp}/69 -> ${sta1.tif.ip}/\d+; Proto 17" -c 1 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${sta1.tif.ip}/\d+ -> ${tb.tftp}/69; Proto 17" -c 1 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${tb.tftp}/\d+ -> ${sta1.tif.ip}/\d+; Proto 17" -c 2 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${sta1.tif.ip}/\d+ -> ${tb.tftp}/\d+; Proto 17" -c 2 -f ${log.dir}/${log.file}</log-match>
			<failed>next</failed>
		</step>

		<step no="8.2">
			<desc>
				Check control session and data session by show forwarding-engine ip-sessions
			</desc>
			<log-file>step9_show_session.log</log-file>
			<console target="ap2">
				-v "show forwarding-engine ip-sessions"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${tb.tftp}/69 -> ${sta1.tif.ip}/\d+; Proto 17" -c 1 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${sta1.tif.ip}/\d+ -> ${tb.tftp}/69; Proto 17" -c 1 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${tb.tftp}/\d+ -> ${sta1.tif.ip}/\d+; Proto 17" -c 2 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${sta1.tif.ip}/\d+ -> ${tb.tftp}/\d+; Proto 17" -c 2 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="9.1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>
				-Wait for process end.
			</desc>
			<log-file>step9.1_wait_process_stop_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep ${alg.curl.pid}"
			</ssh>
			<log-match>-n -e "curl"</log-match>
		</step>

		<step no="9.2">
			<desc>
				-Check "curl get" result
			</desc>
			<log-file>step9.2_curl_get.log</log-file>
			<ssh target="sta1">
				-v "cat ${tftp_test_file_local_dir}/4.1_stdout.log"
			</ssh>
			<log-match>-e "curl:.*(timed out|Timeout|couldn't connect to host|Connection time-out)" -re -n</log-match>
			<log-match>-e "100\s+\d+\w\s+100" -re</log-match>
		</step>
	</stage>

</testcase>