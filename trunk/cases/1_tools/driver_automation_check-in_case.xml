<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>It is for driver basic function check</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		1.Reset Dut, and all Dut and server are in the same vlan
		2.Create test account on Radius server
		3.There is a big file on Server, and ftp/tftp service is starting on Server

		Test Procedure:
		. Configure 6 ssid on ap1 with different auth mode, including Open/WEP/WPA-PSK/WPA2-PSK/WPA-Enterprise/WPA2-Enterprise, then bind them to wifi radio, 3 for wifi0 and other 3 for wifi1, result 1
		2. Client1 links to ap1 with open ssid, then get a file from Server, result 2
		3. Client1 and Server send 100 ping packet to each other, result 3
		4. Repeat step 2 to step 3 with other ssid, result 2 and result 3
		5. Configure ap2 and ap3 with the same hive and vlan, then shutdown ap3’s eth interfaces, result 4
		6. Configure a ssid on ap3, and client2 links to ap3 through the ssid, then get a file from Server, result 2
		7. Client2 and Server send 100 ping packet to each other, result 3
		8. Bring up ap3’s eth interfaces, and configure the same backhaul channel on ap2 and ap3, then shutdown ap3’s eth
		interfaces, result 4
		9. Repeat step 6 and step 7, get result 2 and result 3
	</description>
	<numofap>3</numofap>
	<numofsta>2</numofsta>
	<tbtype>linux</tbtype>
	<stage>
		<!-- 1. test stage 2 -->
		<step no="1">
			<desc>
				config the ssid 1-3
			</desc>
			<log-file>ap_config_1.log</log-file>
			<telnet target="ap1">
				-v "user-profile autoap qos-policy def-user-qos vlan-id ${tb.vlan1} attribute 1"
				-v "security-object ${ssid.name}1"
				-v "security-object ${ssid.name}1 security protocol-suite open"
				-v "security-object ${ssid.name}1 default-user-profile-attr 1"
				-v "ssid ${ssid.name}1"
				-v "ssid ${ssid.name}1 security-object ${ssid.name}1"
				-v "security-object ${ssid.name}2"
				-v "security-object ${ssid.name}2 security protocol-suite wep-open 0 hex-key ffffffffffffffffffffffffff default"
				-v "security-object ${ssid.name}2 default-user-profile-attr 1"
				-v "ssid ${ssid.name}2"
				-v "ssid ${ssid.name}2 security-object ${ssid.name}2"
				-v "security-object ${ssid.name}3"
				-v "security-object ${ssid.name}3 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "security-object ${ssid.name}3 default-user-profile-attr 1"
				-v "ssid ${ssid.name}3"
				-v "ssid ${ssid.name}3 security-object ${ssid.name}3"
			</telnet>
		</step>
		<step no="2">
			<desc>
				config the ssid 4-6
			</desc>
			<log-file>ap_config_2.log</log-file>
			<console target="ap1">
				-v "security-object ${ssid.name}4"
				-v "security-object ${ssid.name}4 security protocol-suite wpa2-aes-psk ascii-key aerohive"
				-v "security-object ${ssid.name}4 default-user-profile-attr 1"
				-v "ssid ${ssid.name}4"
				-v "ssid ${ssid.name}4 security-object ${ssid.name}4"
				-v "security-object ${ssid.name}5"
				-v "security-object ${ssid.name}5 security protocol-suite wpa-auto-8021x"
				-v "security-object ${ssid.name}5 security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object ${ssid.name}5 default-user-profile-attr 1"
				-v "ssid ${ssid.name}5"
				-v "ssid ${ssid.name}5 security-object ${ssid.name}5"
				-v "security-object ${ssid.name}6"
				-v "security-object ${ssid.name}6 security protocol-suite wpa2-aes-8021x"
				-v "security-object ${ssid.name}6 security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object ${ssid.name}6 security aaa radius-server accounting primary ${pub.radius1.ip}
				shared-secret ${pub.radius1.sharesecret}"
				-v "security-object ${ssid.name}6 default-user-profile-attr 1"
				-v "ssid ${ssid.name}6"
				-v "ssid ${ssid.name}6 security-object ${ssid.name}6"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>
		<step no="3">
			<desc>
				bind ssid
			</desc>
			<log-file>bind-result.log</log-file>
			<console target="ap1">
				-v "interface wifi0 ssid ${ssid.name}1"
				-v "interface wifi0 ssid ${ssid.name}2"
				-v "interface wifi0 ssid ${ssid.name}3"
			</console>
		</step>
		<step no="3.1">
			<if>"${ap.wifi1.existed}" == "true"</if>
			<desc>
				bind ssid
			</desc>
			<log-file>bind-result.log</log-file>
			<console target="ap1">
				-v "interface wifi1 ssid ${ssid.name}4"
				-v "interface wifi1 ssid ${ssid.name}5"
				-v "interface wifi1 ssid ${ssid.name}6"
				-v "interface wifi1 radio channel 36"
			</console>
		</step>
		<step no="3.1">
			<if>"${ap.wifi1.existed}" != "true"</if>
			<desc>
				bind ssid
			</desc>
			<log-file>bind-result.log</log-file>
			<console target="ap1">
				-v "interface wifi0 ssid ${ssid.name}4"
				-v "interface wifi0 ssid ${ssid.name}5"
				-v "interface wifi0 ssid ${ssid.name}6"
			</console>
		</step>
		<step no="pre1.1">
			<desc>
				-show interface mgt0 in ap1
			</desc>
			<log-file>step_pre1.1c_show_interface_mgt0_ap1.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="pre1.2">
			<desc>
				Get mgt0 ap in ap1
			</desc>
			<setvar name="ap1.mgt0.ip">
				${bin.dir}/getbyrexp.py -p "IP addr=(\S+);" -f ${log.dir}/step_pre1.1c_show_interface_mgt0_ap1.log -t str
			</setvar>
		</step>

		<property name="conn1.ssid" value="${ssid.name}1" />
		<property name="conn1.proto" value="open" />
		<include prefix="4" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		<include prefix="6" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />

		<step no="7.1">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="8" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step8_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step8_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="9.1" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step3.1_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="9.2">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step9.2_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step8_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>

		<property name="conn2.ssid" value="${ssid.name}2" />
		<property name="conn2.proto" value="wep-open" />
		<property name="conn2.keyidx" value="0" />
		<property name="conn2.psk.keytype" value="hex" />
		<property name="conn2.psk" value="ffffffffffffffffffffffffff" />
		<include prefix="10" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta1, ap1" />
		<include prefix="12" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />
		<step no="13.1">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="14" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step14_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step14_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="15" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step15_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="16">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step16_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step14_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>


		<property name="conn3.ssid" value="${ssid.name}3" />
		<property name="conn3.proto" value="wpa-auto-psk" />
		<property name="conn3.psk" value="aerohive" />
		<include prefix="17" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn3, sta1, ap1" />

		<include prefix="19" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />

		<step no="20">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="21" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step21_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step21_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="22" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step33_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>

			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="23">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step23_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step21_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>
	</stage>
	<stage>
		<if>"${ap.wifi1.existed}" == "true"</if>
		<property name="conn4.ssid" value="${ssid.name}4" />
		<property name="conn4.proto" value="wpa2-aes-psk" />
		<property name="conn4.psk" value="aerohive" />
		<property name="conn4.pif" value="wifi1" />
		<property name="conn4.channel" value="36" />
		<include prefix="24" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn4, sta1, ap1" />

		<include prefix="26" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />

		<step no="27">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="28" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step19_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step28_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="29" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step20_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="30">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step16_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step19_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>

		<property name="conn5.ssid" value="${ssid.name}5" />
		<property name="conn5.proto" value="wpa-aes-8021x" />
		<property name="conn5.username" value="${pub.radius1.username}" />
		<property name="conn5.passwd" value="${pub.radius1.passwd}" />
		<property name="conn5.pif" value="wifi1" />
		<property name="conn5.channel" value="36" />
		<include prefix="31" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn5, sta1, ap1" />

		<include prefix="33" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />

		<step no="34">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="35" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step35_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step35_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="36" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step36_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="37">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step37_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step35_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>

		<property name="conn6.ssid" value="${ssid.name}6" />
		<property name="conn6.proto" value="wpa2-aes-8021x" />
		<property name="conn6.username" value="${pub.radius1.username}" />
		<property name="conn6.passwd" value="${pub.radius1.passwd}" />
		<property name="conn6.pif" value="wifi1" />
		<property name="conn6.channel" value="36" />
		<include prefix="38" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn6, sta1, ap1" />

		<include prefix="40" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />

		<step no="41">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="42" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step42_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step42_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="43" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step43_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="44">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step44_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step42_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>
	</stage>
	<!-- 1. test stage 2 -->
	<stage>
		<if>"${ap.wifi1.existed}" != "true"</if>
		<property name="conn4.ssid" value="${ssid.name}4" />
		<property name="conn4.proto" value="wpa2-aes-psk" />
		<property name="conn4.psk" value="aerohive" />
		<include prefix="24.1" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn4, sta1, ap1" />

		<include prefix="26.1" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />

		<step no="27.1">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="28.1" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step19_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step28_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="29.1" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step20_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="30.1">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step16_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step19_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>

		<property name="conn5.ssid" value="${ssid.name}5" />
		<property name="conn5.proto" value="wpa-aes-8021x" />
		<property name="conn5.username" value="${pub.radius1.username}" />
		<property name="conn5.passwd" value="${pub.radius1.passwd}" />
		<include prefix="31.1" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn5, sta1, ap1" />

		<include prefix="33.1" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />

		<step no="34.1">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="35.1" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step35_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step35_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="36.1" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step36_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="37.1">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step37_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step35_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>

		<property name="conn6.ssid" value="${ssid.name}6" />
		<property name="conn6.proto" value="wpa2-aes-8021x" />
		<property name="conn6.username" value="${pub.radius1.username}" />
		<property name="conn6.passwd" value="${pub.radius1.passwd}" />
		<include prefix="38.1" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn6, sta1, ap1" />

		<include prefix="40.1" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 4" />

		<step no="41.1">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="42.1" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step42_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step42_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="43.1" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step43_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="44.1">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step44_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step42_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>
	</stage>

	<stage>
		<if>"${ap.wifi1.existed}" == "true"</if>
		<step no="45">
			<desc>
				config hive and bind it to interface
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
			</console>
		</step>

		<step no="46">
			<desc>
				show ap2's interface wifi1 info
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<console target="ap2">
				-v "show interface wifi1"
			</console>
		</step>

		<step no="47">
			<desc>
				get ap2's wifi1's mac address
			</desc>
			<setvar name="ap2.wifi1.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i wifi1 -o aero -m -width
			</setvar>
		</step>

		<step no="48">
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "user-profile autoap qos-policy def-user-qos vlan-id ${tb.vlan1} attribute 1"
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="49">
			<if>"${ap.eth1.existed}" == "true"</if>
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="50" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap2's acsp neighbor
			</desc>
			<log-file>step50_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap3" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+Backhaul\s+${hive.name}_${job.sid}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="51" delay="35" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step51_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap3" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap2.wifi1.mac}" -i "TWO-WAY"</log-match>
		</step>

		<step no="52">
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} security protocol-suite open"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
			</console>
		</step>

		<property name="conn7.ssid" value="${ssid.name}" />
		<property name="conn7.proto" value="open" />
		<include prefix="53" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn7, sta2, ap2" />

		<include prefix="54" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 5" />


		<step no="56">
			<if>"${ap.wifi1.existed}" =="true"</if>
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap2">
				-v "interface wifi1 radio channel 165"
			</console>
		</step>

		<step no="57">
			<if>"${ap.wifi1.existed}" == "true"</if>
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "no interface eth1 shutdown"
				-v "interface wifi1 radio channel 165"
			</console>
		</step>

		<step no="58">
			<if>"${ap.eth1.existed}" =="true"</if>
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "interface eth1 shutdown"
			</console>
		</step>
		<step no="59" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap2's acsp neighbor
			</desc>
			<log-file>step60_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap3" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+Backhaul\s+${hive.name}_${job.sid}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="60" delay="35" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>ste61_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap3" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap2.wifi1.mac}" -i "TWO-WAY"</log-match>
		</step>

		<property name="conn7.ssid" value="${ssid.name}" />
		<property name="conn7.proto" value="open" />
		<include prefix="61" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn7, sta2, ap2" />

		<include prefix="62" file="subs/sta_ping.xml" args="sta2, ${tb.ftp}, 5" />

	</stage>
	<stage>
		<step no="pre.1">
			<desc>
				-Set SSID for ap1
				-set security-object parameters
			</desc>
			<setvar name="testwifi1dual">
				if [ `echo ${img.prodtype} | grep BR100` ];
				then
				echo true;
				else
				echo false;
				fi
			</setvar>
		</step>
	</stage>
	<stage>
		<if>"${testwifi1dual}" == "true" </if>
		<step no="63">
			<desc>
				config hive and bind it to interface
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "interface eth0 shutdown"
				-v "interface wifi0 mode dual"
			</console>
		</step>

		<step no="64">
			<desc>
				show ap2's interface wifi1 info
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<console target="ap2">
				-v "show interface wifi0"
			</console>
		</step>

		<step no="65">
			<desc>
				get ap2's wifi1's mac address
			</desc>
			<setvar name="ap2.wifi0.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i wifi0 -o aero -m -width
			</setvar>
		</step>

		<step no="66">
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "user-profile autoap qos-policy def-user-qos vlan-id ${tb.vlan1} attribute 1"
				-v "hive ${hive.name}_${job.sid}"
				-v "interface mgt0 hive ${hive.name}_${job.sid}"
				-v "interface eth0 shutdown"
				-v "interface wifi0 mode dual"
			</console>
		</step>

		<step no="67">
			<if>"${ap.eth1.existed}" == "true"</if>
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "interface eth1 shutdown"
				-v "interface wifi0 mode dual"
			</console>
		</step>


		<step no="68" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap2's acsp neighbor
			</desc>
			<log-file>step68_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap3" timeout="180">
				-v "interface wifi0 hive ${hive.name}_${job.sid} shutdown"
				-v "no interface wifi0 hive ${hive.name}_${job.sid} shutdown"
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi0.mac}\s+Backhaul\s+${hive.name}_${job.sid}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="69" delay="35" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step51_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap3" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap2.wifi0.mac}" -i "TWO-WAY"</log-match>
		</step>

		<step no="70">
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} security protocol-suite open"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
			</console>
		</step>

		<property name="conn7.ssid" value="${ssid.name}" />
		<property name="conn7.proto" value="open" />
		<include prefix="71" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn7, sta2, ap2" />

		<include prefix="72" file="subs/sta_ping.xml" args="sta1, ${tb.ftp}, 5" />


		<step no="73">
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap2">
				-v "interface wifi0 radio channel 11"
			</console>
		</step>

		<step no="74">
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "interface wifi0 radio channel 11"
			</console>
		</step>

		<step no="75">
			<if>"${ap.eth1.existed}" =="true"</if>
			<desc>
				-config eth1 of ap2 to access mode
				-enable mac-learning on eth1
			</desc>
			<console target="ap3">
				-v "interface eth1 shutdown"
			</console>
		</step>
		<step no="76" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap2's acsp neighbor
			</desc>
			<log-file>step76_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap3" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi0.mac}\s+Backhaul\s+${hive.name}_${job.sid}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="77" delay="35" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>ste77_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap3" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap2.wifi0.mac}" -i "TWO-WAY"</log-match>
		</step>

		<property name="conn7.ssid" value="${ssid.name}" />
		<property name="conn7.proto" value="open" />
		<include prefix="78" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn7, sta2, ap2" />

		<include prefix="78" file="subs/sta_ping.xml" args="sta2, ${tb.ftp}, 5" />

	</stage>
	<post-process>
		<stage>
			<step no="2">
				<desc>
					delete local files
				</desc>
				<ssh target="sta1">
					-v "killall -q curl"
					-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
					-v "rm -f ${ftp_test_file_local_dir}/step42_stdout.log"
					-v "rm -f ${ftp_test_file_local_dir}/step35_stdout.log"
					-v "rm -f ${ftp_test_file_local_dir}/step28_stdout.log"
					-v "rm -f ${ftp_test_file_local_dir}/step21_stdout.log"
					-v "rm -f ${ftp_test_file_local_dir}/step14_stdout.log"
					-v "rm -f ${ftp_test_file_local_dir}/step8_stdout.log"
					-v "rm -f ${ftp_test_file_local_dir}/step55_stdout.log"
				</ssh>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>
