<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that schedule can take effect on SSIDs bound to wifi1.x when it changed to access mode.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Set interface wifi1 to access mode
		Create a ssid and bind it to interface wifi1

		Test Procedure:
		1.Create a schedule s1 make current time without the duration,
		bind this schedule to ssid, verify ssid status, verify interface, check
		log by show logging buffered | in schedule
		2.Create a schedule s2 make current time within the duration, bind
		it to ssid, verify ssid status, verify interface, check log by show
		logging buffered | in schedule
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<property name="schedule_id_1" value="time-1" />
	<property name="schedule_id_2" value="time-2" />

	<stage>
		<step no="0">
			<desc>
				Set interface wifi1 to access mode
				Create a ssid and bind it to interface wifi1
			</desc>
			<log-file>step0_set_wifi1_access.log</log-file>
			<telnet target="ap1">
				-v "interface wifi1 mode access"
				-v "ssid ${ssid.name}"
				-v "interface wifi1 ssid ${ssid.name}"
			</telnet>
		</step>

		<step no="0.1">
			<desc>
				clear log all
			</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="1">
			<desc>
				check system time
				"show clock"
			</desc>
			<log-file>step1_show_clock.log</log-file>
			<telnet target="ap1">
				-v "show clock"
			</telnet>
		</step>

		<step no="1.1">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_1">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -10
			</setvar>
		</step>

		<step no="1.2">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_2">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -5
			</setvar>
		</step>

		<step no="1.3">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_3">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log 20
			</setvar>
		</step>

		<step no="1.4">
			<desc>
				Create a recurrent schedules
			</desc>
			<log-file>step1.4_create_schedule.log</log-file>
			<telnet target="ap1">
				-v "schedule ${schedule_id_1} recurrent time-range ${data_time_1} to ${data_time_2}"
			</telnet>
		</step>

		<step no="1.5">
			<desc>
				Bind these a schedules to SSID
			</desc>
			<log-file>step1.5_bing_schedule_to_ssid.log</log-file>
			<telnet target="ap1">
				-v "ssid ${ssid.name} schedule ${schedule_id_1}"
			</telnet>
		</step>

		<step no="1.6" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				Check SSID status by show ssid-schedule
			</desc>
			<log-file>step1.6_show_ssid_schedule_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show ssid-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ssid.name}\s+Yes\s+Inactive\s+" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="1.7" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				Check interface wifi1.1 state by show interface
			</desc>
			<log-file>step1.7_show_interface_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match>-p 4 -i "D" -i "Wifi1.1 " -c</log-match>
		</step>

		<step no="1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check log by show logging buffered
			</desc>
			<log-file>step1.8_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "schedule\s+check,Interface\s+is\s+DOWN\s+by\s+schedule\!" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="1.9">
			<desc>
				clear log all
			</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="2">
			<desc>
				Create a schedule s2 make current time within the duration
			</desc>
			<log-file>step2_create_schedule.log</log-file>
			<telnet target="ap1">
				-v "schedule ${schedule_id_2} recurrent time-range ${data_time_1} to ${data_time_3}"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				Bind these a schedules to SSID
			</desc>
			<log-file>step1.5_bing_schedule_to_ssid.log</log-file>
			<telnet target="ap1">
				-v "ssid ${ssid.name} schedule ${schedule_id_2}"
			</telnet>
		</step>

		<step no="2.2" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				Check SSID status by show ssid-schedule
			</desc>
			<log-file>step2.2_show_ssid_schedule_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show ssid-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ssid.name}\s+Yes\s+Active\s+" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="2.3" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				Check interface wifi1.1 state by show interface
			</desc>
			<log-file>step2.3_show_interface_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match>-p 4 -i "U" -i "Wifi1.1 " -c</log-match>
		</step>

		<step no="2.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check log by show logging buffered | in schedule
			</desc>
			<log-file>step2.4_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "schedule\s+check,Interface\s+wifi1.1\s+is\s+UP\s+by\s+schedule\!" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>