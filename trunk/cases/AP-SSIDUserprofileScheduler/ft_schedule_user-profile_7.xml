<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify if scheduled time is correct after change schedule( change the in-use time, add or remove the schedule)</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Create a user-profile
		Create a once or recurrent schedule s1 which make current time
		within the duration
		Bind schedule s1 to user-profile

		Test Procedure:
		1. Check user-profile status by show user-profile-schedule
		2. Modify schedule s1 and make current time without the duration,
		verify user-profile should become inactive
		3. Create another schedule s2 and make current time within the
		duration, bind s2 to user-profile, verify user-profile should be
		active
		4. Unbind s2 from user-profile, verify user-profile should become
		inactive
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<property name="user_profile_1" value="FWtest_1" />
	<property name="schedule_id_1" value="time-1" />
	<property name="schedule_id_2" value="time-2" />

	<stage>
		<step no="0">
			<desc>
				Create a user-profile
			</desc>
			<telnet target="ap1">
				-v "user-profile ${user_profile_1}"
			</telnet>
		</step>

		<step no="1">
			<desc>
				check system time
				"show clock"
			</desc>
			<log-file>step1_show_clock.log</log-file>
			<telnet target="ap1">
				-v "show clock"
			</telnet>
		</step>

		<step no="1.1">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_1">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -10
			</setvar>
		</step>

		<step no="1.2">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_2">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -5
			</setvar>
		</step>

		<step no="1.3">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_3">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log 10
			</setvar>
		</step>

		<step no="1.4">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_4">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log 20
			</setvar>
		</step>

		<step no="1.5">
			<desc>
				Create a schedule s1 which make current time within the duration
			</desc>
			<log-file>step1.5_create_schedule.log</log-file>
			<telnet target="ap1">
				-v "schedule ${schedule_id_1} recurrent time-range ${data_time_2} to ${data_time_3}"
			</telnet>
		</step>

		<step no="1.6">
			<desc>
				Bind s1 to user-profile
			</desc>
			<log-file>step1.6_bind_schedule_to_user_profile.log</log-file>
			<telnet target="ap1">
				-v "user-profile ${user_profile_1} schedule ${schedule_id_1}"
			</telnet>
		</step>

		<step no="1.7" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				Check user-profile status by show user-profile-schedule
			</desc>
			<log-file>step1.7_check_user_profile_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show user-profile-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${user_profile_1}\s+Yes\s+Active\s+" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="2">
			<desc>
				Create a schedule s1 which make current time without the duration
			</desc>
			<log-file>step2_create_schedule.log</log-file>
			<telnet target="ap1">
				-v "schedule ${schedule_id_1} recurrent time-range ${data_time_1} to ${data_time_2}"
			</telnet>
		</step>

		<step no="2.1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				Check user-profile status by show user-profile-schedule
			</desc>
			<log-file>step2.1_check_user_profile_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show user-profile-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${user_profile_1}\s+Yes\s+Inactive\s+" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3">
			<desc>
				Create another schedule s2 and make current time within the duration
			</desc>
			<log-file>step3_create_schedule.log</log-file>
			<telnet target="ap1">
				-v "schedule ${schedule_id_2} recurrent time-range ${data_time_2} to ${data_time_4}"
			</telnet>
		</step>

		<step no="3.1">
			<desc>
				Bind s2 to user-profile
			</desc>
			<log-file>step3.1_bind_schedule_to_user_profile.log</log-file>
			<telnet target="ap1">
				-v "user-profile ${user_profile_1} schedule ${schedule_id_2}"
			</telnet>
		</step>

		<step no="3.2" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				Check user-profile status by show user-profile-schedule
			</desc>
			<log-file>step3.2_check_user_profile_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show user-profile-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${user_profile_1}\s+Yes\s+Active\s+" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4">
			<desc>
				Unbind s2 from user-profile
			</desc>
			<log-file>step4_bind_schedule_to_user_profile.log</log-file>
			<telnet target="ap1">
				-v "no user-profile ${user_profile_1} schedule ${schedule_id_2}"
			</telnet>
		</step>

		<step no="4.1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				Check user-profile status by show user-profile-schedule
			</desc>
			<log-file>step4.1_check_user_profile_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show user-profile-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${user_profile_1}\s+Yes\s+Inactive\s+" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>
</testcase>