<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that there are logs when interface state changed and auth banned/un-banned by schedule</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Create a ssid and bind it to interface wifi0

		Test Procedure:
		1. Create a schedule s1 which make current time without the
		duration, bind this schedule to ssid, check ssid status and interface
		state, check log by show logging buffered | in schedule
		2.Create a schedule s2 which make current time within the
		duration, bind this schedule to ssid, check ssid status and interface
		state, check log
		3.Use a laptop to connect to connect to ssid, check log
		4. Unbind schedule s2 from ssid, check log
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="schedule_id_1" value="time-1" />
	<property name="schedule_id_2" value="time-2" />

	<stage>
		<step no="0">
			<desc>
				Create SSID and bind it to interface wifi0
			</desc>
			<log-file>step0_int_wifi0_ssid.log</log-file>
			<telnet target="ap1">
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
			</telnet>
		</step>

		<step no="0.1">
			<desc>
				clear log all
			</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="1">
			<desc>
				check system time
				"show clock"
			</desc>
			<log-file>step1_show_clock.log</log-file>
			<telnet target="ap1">
				-v "show clock"
			</telnet>
		</step>

		<step no="1.1">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_1">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -10
			</setvar>
		</step>

		<step no="1.2">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_2">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -5
			</setvar>
		</step>

		<step no="1.3">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_3">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log 20
			</setvar>
		</step>

		<step no="1.4">
			<desc>
				Create a recurrent schedules
			</desc>
			<log-file>step1.4_create_schedule.log</log-file>
			<telnet target="ap1">
				-v "schedule ${schedule_id_1} recurrent time-range ${data_time_1} to ${data_time_2}"
			</telnet>
		</step>

		<step no="1.5">
			<desc>
				Bind this schedules to SSID
			</desc>
			<log-file>step1.5_bing_schedule_to_ssid.log</log-file>
			<telnet target="ap1">
				-v "ssid ${ssid.name} schedule ${schedule_id_1}"
			</telnet>
		</step>

		<step no="1.6" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				Check SSID status by show ssid-schedule
			</desc>
			<log-file>step1.6_show_ssid_schedule_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show ssid-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ssid.name}\s+Yes\s+Inactive\s+" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="1.7" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				Check interface wifi0.1 state by show interface
			</desc>
			<log-file>step1.7_show_interface_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match>-p 4 -i "D" -i "Wifi0.1 " -c</log-match>
		</step>

		<step no="1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check log by show logging buffered
			</desc>
			<log-file>step1.8_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "schedule\s+check,Interface\s+is\s+DOWN\s+by\s+schedule\!" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="2">
			<desc>
				Create a recurrent schedules
			</desc>
			<log-file>step2_create_schedule.log</log-file>
			<telnet target="ap1">
				-v "schedule ${schedule_id_2} recurrent time-range ${data_time_1} to ${data_time_3}"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				Bind this schedules to SSID
			</desc>
			<log-file>step2.1_bing_schedule_to_ssid.log</log-file>
			<telnet target="ap1">
				-v "ssid ${ssid.name} schedule ${schedule_id_2}"
			</telnet>
		</step>

		<step no="2.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Check SSID status by show ssid-schedule
			</desc>
			<log-file>step2.2_show_ssid_schedule_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show ssid-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ssid.name}\s+Yes\s+Active\s+" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="2.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Check interface wifi1.1 state by show interface
			</desc>
			<log-file>step2.3_show_interface_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match>-p 4 -i "U" -i "Wifi0.1 " -c</log-match>
		</step>

		<step no="2.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check log by show logging buffered | in schedule
			</desc>
			<log-file>step2.4_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "schedule\s+check,Interface\s+wifi0.1\s+is\s+UP\s+by\s+schedule!" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="2.5">
			<desc>
				clear log all
			</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="3.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=open"
				echo "conn1.pif=wifi0"
			</multi-setvar>
		</step>
		<include prefix="3.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
		<!--<include prefix="3" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<step no="3.1">
			<desc>
				config the laptop to apply the ssid profile,then start to associate
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="3.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check if the client was associated successfully
			</desc>
			<log-file>step3.2_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="3.3">
			<desc>
				dhclient wlan0
			</desc>
			<ssh target="sta1" timeout="100">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>
	-->

		<step no="3.4" delay="10">
			<desc>
				ifconfig to show the ip add
			</desc>
			<log-file>step3.4_ifconfig_wlan0.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr:"</log-match>
		</step>

		<step no="3.5">
			<desc>
				Get laptop1's mac
			</desc>
			<setvar name="sta_mac_1">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step3.4_ifconfig_wlan0.log -i ${sta1.tif.name} -m -width
			</setvar>
		</step>

		<step no="3.6">
			<desc>
				Show interface
			</desc>
			<log-file>step3.6_check_mgt0_and_wifi0.1_ip.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
		</step>

		<step no="3.7">
			<desc>
				Get mgt0 mac
			</desc>
			<setvar name="mgt0_mac_1">
				${bin.dir}/getbyrexp.py -p "(?i)Mgt0\s+(\w+:\w+:\w+)\s+" -f ${log.dir}/step3.6_check_mgt0_and_wifi0.1_ip.log -t str
			</setvar>
		</step>

		<step no="3.8">
			<desc>
				Get mgt0 mac
			</desc>
			<setvar name="wifi0.1_mac_1">
				${bin.dir}/getbyrexp.py -p "(?i)Wifi0.1\s+(\w+:\w+:\w+)\s+" -f ${log.dir}/step3.6_check_mgt0_and_wifi0.1_ip.log -t str
			</setvar>
		</step>

		<step no="3.9" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check log by show logging buffered
			</desc>
			<log-file>step3.9_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Station ${sta_mac_1} is authenticated to ${wifi0.1_mac_1} thru SSID ${ssid.name}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\[mesh\]: set proxy : ${sta_mac_1} ${mgt0_mac_1} wifi0.1" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)set proxy route: ${sta_mac_1} -&gt; ${mgt0_mac_1} ifp wifi0.1" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)receive event &lt;STA join&gt;: ${sta_mac_1}.* associate wifi0.1" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="4">
			<desc>
				Unbind schedule s2 from ssid, check log
			</desc>
			<log-file>step4_Unbind_schedule2.log</log-file>
			<telnet target="ap1">
				-v "no ssid ${ssid.name} schedule ${schedule_id_2}"
			</telnet>
		</step>

		<step no="4.1" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check log by show logging buffered
			</desc>
			<log-file>step4.1_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match>-re -i "Try to deauth all stations from ${wifi0.1_mac_1}\(wifi0.1\) for ssid ${ssid.name} because of event \[interface shutdown\]"</log-match>
			<log-match>-re -i "\[mpi\]: wifi0.1 notify kevent KEVT_IF_CHG, type IF_DOWN\(\d+\)"</log-match>
			<!--<log-match>-re -i "Station ${sta_mac_1} is de-authenticated from ${wifi0.1_mac_1} thru SSID ${ssid.name}"</log-match>-->
			<log-match>-re -i "amrp delete ifp wifi0.1\(${wifi0.1_mac_1}\)"</log-match>
			<log-match>-re -i "receive kevent KEVT_IF_CHG type IF_DOWN from wifi0.1 index \d+"</log-match>
			<log-match>-re -i "\[mesh\]: unset proxy : ${sta_mac_1} ${mgt0_mac_1} wifi0.1"</log-match>
			<log-match>-re -i "\[mpi\]: wifi0.1 notify kevent KEVT_IF_CHG, type IF_GOING_DOWN\(\d+\)"</log-match>
			<log-match>-re -i "sta ${sta_mac_1} is disassociated from ${wifi0.1_mac_1}\(wifi0.1\) in driver"</log-match>
			<log-match>-re -i "receive kevent KEVT_IF_CHG type IF_GOING_DOWN from wifi0.1 index \d+"</log-match>
			<log-match>-re -i "schedule check,Interface\s+is DOWN by schedule\!"</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>