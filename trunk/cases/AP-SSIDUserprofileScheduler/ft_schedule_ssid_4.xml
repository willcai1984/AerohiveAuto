<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>When SSID be bound the max schedules (8 schedules), verify if they take effect</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Create a SSID and bind it to interface wifi0
		A laptop connect to SSID

		Test Procedure:
		1. Create 8 once schedules or 8 recurrent schedules or 4 once
		schedules and 4 recurrent schedules
		2. Bind 8 once schedules to SSID( or 8 recurrent schedules or 4
		once schedules and 4 recurrent schedules)
		3. Check SSID status by show ssid-schedule
		4. Check interface wifi0.1 state by show interface, check log by
		show logging buffered | in schedule
		5. Use a laptop to connect to SSID
		6. Check traffic between associated laptop and SSID
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="schedule_id_1" value="time-1" />
	<property name="schedule_id_2" value="time-2" />
	<property name="schedule_id_3" value="time-3" />
	<property name="schedule_id_4" value="time-4" />
	<property name="schedule_id_5" value="time-5" />
	<property name="schedule_id_6" value="time-6" />
	<property name="schedule_id_7" value="time-7" />
	<property name="schedule_id_8" value="time-8" />

	<stage>
		<step no="0">
			<desc>
				Create a SSID and bind it to interface wifi0
			</desc>
			<log-file>step1_int_wifi0_ssid.log</log-file>
			<telnet target="ap1">
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
			</telnet>
		</step>

		<step no="1">
			<desc>
				check system time
				"show clock"
			</desc>
			<log-file>step1_show_clock.log</log-file>
			<telnet target="ap1">
				-v "show clock"
			</telnet>
		</step>

		<step no="1.1">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_1">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -30
			</setvar>
		</step>

		<step no="1.2">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_2">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -25
			</setvar>
		</step>

		<step no="1.3">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_3">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -20
			</setvar>
		</step>

		<step no="1.4">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_4">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -15
			</setvar>
		</step>

		<step no="1.5">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_5">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log -10
			</setvar>
		</step>

		<step no="1.6">
			<desc>
				get time to create a recurrent schedule
			</desc>
			<setvar name="data_time_6">
				perl ${case.dir}/bin/get_time_hours_month_day.pl ${log.dir}/step1_show_clock.log 20
			</setvar>
		</step>

		<step no="1.7">
			<desc>
				clear log all
			</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="2">
			<desc>
				Create 8 recurrent schedules
			</desc>
			<log-file>step2_create_schedule.log</log-file>
			<telnet target="ap1">
				-v "schedule ${schedule_id_1} recurrent time-range ${data_time_1} to ${data_time_2}"
				-v "schedule ${schedule_id_2} recurrent time-range ${data_time_1} to ${data_time_3}"
				-v "schedule ${schedule_id_3} recurrent time-range ${data_time_1} to ${data_time_4}"
				-v "schedule ${schedule_id_4} recurrent time-range ${data_time_1} to ${data_time_5}"
				-v "schedule ${schedule_id_5} recurrent time-range ${data_time_2} to ${data_time_3}"
				-v "schedule ${schedule_id_6} recurrent time-range ${data_time_2} to ${data_time_4}"
				-v "schedule ${schedule_id_7} recurrent time-range ${data_time_2} to ${data_time_5}"
				-v "schedule ${schedule_id_8} recurrent time-range ${data_time_4} to ${data_time_6}"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				Bind these 8 schedules to SSID
			</desc>
			<log-file>step2.1_bing_schedule_to_ssid.log</log-file>
			<telnet target="ap1">
				-v "ssid ${ssid.name} schedule ${schedule_id_1}"
				-v "ssid ${ssid.name} schedule ${schedule_id_2}"
				-v "ssid ${ssid.name} schedule ${schedule_id_3}"
				-v "ssid ${ssid.name} schedule ${schedule_id_4}"
				-v "ssid ${ssid.name} schedule ${schedule_id_5}"
				-v "ssid ${ssid.name} schedule ${schedule_id_6}"
				-v "ssid ${ssid.name} schedule ${schedule_id_7}"
				-v "ssid ${ssid.name} schedule ${schedule_id_8}"
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				Show running-config can check these 8 schedules
			</desc>
			<log-file>step2.2_show_ssid_schedule.log</log-file>
			<telnet target="ap1">
				-v "show running-config"
			</telnet>
			<log-match>-e "schedule ${schedule_id_1} recurrent time-range ${data_time_1} to ${data_time_2}"</log-match>
			<log-match>-e "schedule ${schedule_id_2} recurrent time-range ${data_time_1} to ${data_time_3}"</log-match>
			<log-match>-e "schedule ${schedule_id_3} recurrent time-range ${data_time_1} to ${data_time_4}"</log-match>
			<log-match>-e "schedule ${schedule_id_4} recurrent time-range ${data_time_1} to ${data_time_5}"</log-match>
			<log-match>-e "schedule ${schedule_id_5} recurrent time-range ${data_time_2} to ${data_time_3}"</log-match>
			<log-match>-e "schedule ${schedule_id_6} recurrent time-range ${data_time_2} to ${data_time_4}"</log-match>
			<log-match>-e "schedule ${schedule_id_7} recurrent time-range ${data_time_2} to ${data_time_5}"</log-match>
			<log-match>-e "schedule ${schedule_id_8} recurrent time-range ${data_time_4} to ${data_time_6}"</log-match>
		</step>

		<step no="2.3">
			<desc>
				Show ssid xxx schedule can see which schedules be bound to interface wifi0
			</desc>
			<log-file>step2.3_show_ssid_schedule.log</log-file>
			<telnet target="ap1">
				-v "show ssid ${ssid.name} schedule"
			</telnet>
			<log-match>-e "${schedule_id_1}"</log-match>
			<log-match>-e "${schedule_id_2}"</log-match>
			<log-match>-e "${schedule_id_3}"</log-match>
			<log-match>-e "${schedule_id_4}"</log-match>
			<log-match>-e "${schedule_id_5}"</log-match>
			<log-match>-e "${schedule_id_6}"</log-match>
			<log-match>-e "${schedule_id_7}"</log-match>
			<log-match>-e "${schedule_id_8}"</log-match>
		</step>

		<step no="3" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				Check SSID status by show ssid-schedule
			</desc>
			<log-file>step3_show_ssid_schedule_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show ssid-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ssid.name}\s+Yes\s+Active\s+" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				Check interface wifi0.1 state by show interface
			</desc>
			<log-file>step4_show_interface_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match>-p 4 -i "U" -i "Wifi0.1 " -c</log-match>
		</step>

		<step no="4.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check log by show logging buffered | in schedule
			</desc>
			<log-file>step4.1_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "schedule\s+check,Interface\s+wifi0.1\s+is\s+UP\s+by\s+schedule\!" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="5.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=open"
				echo "conn1.pif=wifi0"
			</multi-setvar>
		</step>
		<include prefix="5.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
	<!--	<include prefix="5" file="subs/wpa_supplicant_start.xml" args="sta1" />		

		<step no="5.1">
			<desc>
				config the laptop to apply the ssid profile,then start to associate
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="5.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check if the client was associated successfully
			</desc>
			<log-file>step5.2_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="5.3">
			<desc>
				dhclient wlan0
			</desc>
			<ssh target="sta1" timeout="100">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="5.4" delay="10">
			<desc>
				ifconfig to show the ip add
			</desc>
			<log-file>step5.4_ifconfig_wlan0.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr:"</log-match>
		</step>
		-->

		<step no="5.3">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>step5.5_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="5.4">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step5.5_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="5.5">
			<desc>
				sta ping ap
			</desc>
			<log-file>step5.7_sta_ping_ap.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="5.6">
			<desc>
				clear log all
			</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="6">
			<desc>
				system time outside in the schedule
			</desc>
			<telnet target="ap1">
				-v "schedule ${schedule_id_8} recurrent time-range ${data_time_4} to ${data_time_5}"
			</telnet>
		</step>

		<step no="6.1" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				Check SSID status by show ssid-schedule
			</desc>
			<log-file>step6.1_show_ssid_schedule_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show ssid-schedule"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ssid.name}\s+Yes\s+Inactive\s+" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6.2" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				interface wifi0.1 is “D” state
			</desc>
			<log-file>step6.2_show_interface_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match>-p 4 -i "D" -i "Wifi0.1 " -c</log-match>
		</step>

		<step no="6.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check log by show logging buffered | in schedule
			</desc>
			<log-file>step6.3_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "schedule\s+check,Interface\s+wifi0.1\s+is\s+DOWN\s+by\s+schedule\!" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="6.4" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check if the client was associated successfully
			</desc>
			<log-file>step6.4_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-n -e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="6.5">
			<desc>
				sta ping ap
			</desc>
			<log-file>step6.5_sta_ping_ap.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "100% packet loss"</log-match>
		</step>
	</stage>
</testcase>