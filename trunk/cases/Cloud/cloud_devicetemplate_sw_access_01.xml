<testcase>
	<brief>Configure Mirror from vlan</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Port Level
		1. Create Mirror port type(/services/config/mirrorPorts)
		2. Create Mirror configure(/services/config/portmirrorsettingses)
		Device Template Level
		3. Create Device Template and set mirror destination port's mode to Mirror
		4. Bind this Device Template to Device Template profile
		Network policy Level
		5. Bind Device Template profile to Network policy
	</description>
	<tbtype>winlin</tbtype>
	<numofap>0</numofap>
	<pre-process>
		<stage>
			<step no="0">
				<desc>Initialize the DUT db</desc>
				<call step="init.cloud.server" />
			</step>
		</stage>
	</pre-process>
	<post-process>
		<stage>
			<step no="0">
				<desc>Clean up the DUT db</desc>
				<call step="cleanup.cloud.server" />
			</step>
		</stage>
	</post-process>

	<property name="owner.id" value="105" />
	<property name="owner.name" value="mirrortest" />
	<property name="owner.ip" value="10.155.21.21" />
	<property name="owner.mac" value="197701234567" />
	<property name="owner.sn" value="12345678901234" />
	<property name="owner.pt" value="SR_24" />
	<property name="owner.ver" value="6.1.0.2" />
	<property name="owner.func" value="Switch" />
	<property name="owner.des" value="20" />

	<declaration>
		<!-- /services/inventory/devices -->
		<step name="create.device">
			<restapi name="createDevice">
				{
				"ownerId":${owner.id},
				"ipAddress":"${owner.ip}",
				"macAddress":"${owner.mac}",
				"hostname":"${owner.name}",
				"serialNumber":"${owner.sn}",
				"productType":"${owner.pt}",
				"softwareVersion": "${owner.ver}",
				"role":19050,
				"function":"${owner.func}",
				"adminState":"UNMANAGED",
				"isConnected":true
				}
			</restapi>
		</step>

		<!--create traffic filter for create.mirrorport /services/config/trafficfilters -->
		<step name="create.traffic.filter">
			<restapi name="createTrafficFilter">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "traffic-filter",
				"name": "Default",
				"enableSsh": true,
				"enableTelnet": true,
				"enablePing": true,
				"enableSnmp": true,
				"enableInterTraffic": true
				}
			</restapi>
		</step>

		<!--create pse profile for create.mirror.port /services/config/pseprofiles -->
		<step name="create.pse.profile">
			<restapi name="createPseProfile">
				{
				"jsonType":"pse",
				"ownerId":${owner.id},
				"predefined":false,
				"name":"default",
				"powerMode":"_8023AF",
				"powerLimit":16156,
				"priority":"LOW"
				}
			</restapi>
		</step>

		<!-- /services/config/mirrorPorts -->
		<step name="create.mirror.port">
			<restapi name="createMirrorPort">
				{
				"ownerId":${owner.id},
				"predefined":false,
				"jsonType":"mirror-port",
				"name":"${owner.name}",
				"enabled":false,
				"deviceSeries":"SWITCH",
				"trafficClassification":"TRUSTED_TRAFFIC_SOURCE",
				"trafficClassificationQoSPriorityType":"_802DOT1P",
				"enableQoSClass":false,
				"qoSClass":"background",
				"enableTrafficMarkingQoSPriorityType":false,
				"trafficMarkingQoSPriorityType":"DSCP",
				"enableClientDetection":true,
				"trafficFilter":"@{create.traffic.filter}",
				"switchPortAdvancedSettings":
					{
					"ownerId":${owner.id},
					"predefined":false,
					"adminState":"DOWN",
					"transmissionType":"HALF_DUPLEX",
					"transmissionSpeed":597,
					"flowControl":"AUTO",
					"enableAutoMdix":true,
					"debounceTimer":4389,
					"enableLldpTransmit":false,
					"enableLldpReceive":false,
					"enableCdpReceive":true,
					"enableStp":false,
					"enableEdgePort":true,
					"bpduProtection":"FILTER",
					"priority":136,
					"pathCost":87227704,
					"enableBroadcastTraffic":true,
					"enableUnknownUnicastTraffic":true,
					"enableMuticastTraffic":true,
					"enableTcpSynFloodTraffic":false,
					"stormControlThresholdType":"BYTE_BASED",
					"rateLimitType":"KBPS",
					"rateLimitValue":175238746,
					"enablePse":false,
					"pseProfile":"@{create.pse.profile}"
					}
				}
			</restapi>
		</step>

		<!-- /services/config/mirrorPorts -->
		<step name="create.mirror.set">
			<restapi name="createPortMirrorSetting">
				{
				"ownerId":${owner.id},
				"predefined":false,
				<!-- eth1/1=0 eth1/21=20 -->
				"destPort":"${owner.des}",
				<!-- 1,10-20 -->
				"sourceVlan":"1,10-20",
				"enablePortMonitor":true
				}
			</restapi>
		</step>

		<!-- /services/config/devicetemplates -->
		<step name="create.template">
			<restapi name="createDeviceTemplate">
				{
				"ownerId":${owner.id},
				"predefined": false,
				"jsonType": "device-template",
				"name":"${owner.name}",
				"productType": "${owner.pt}",
				"deviceFunction": "${owner.func}",
				"loadBalanceMode": "SRC_DET_MAC_IP_PORT",
				"usbPortEntries": [],
				"ethPortEntries":
					[{
					"ownerId":${owner.id},
					"portAggregationSettings":
						{
						"ownerId": ${owner.id},
						"predefined": false,
						"portChannel": 9
						},
					"portMirrorSettings":
						[{
						"ownerId":${owner.id},
						"predefined":false,
						<!-- eth1/1=0 eth1/21=20 -->
						"destPort":"${owner.des}",
						<!-- 1,10-20 -->
						"sourceVlan":"1,10-20",
						"enablePortMonitor":true
						}],
					"portType": "@{create.mirror.port}",
					"ports":["${owner.des}"],
					"enableMirror": true,
					"enableAggregation": false
					}],
				"sfpPortEntries":
					[{
					"ownerId":${owner.id},
					"portAggregationSettings":
						{
						"ownerId": ${owner.id},
						"predefined": false,
						"portChannel": 9
						},
					"portMirrorSettings":
						[{
						"ownerId":${owner.id},
						"predefined":false,
						<!-- eth1/1=0 eth1/21=20 -->
						"destPort":"${owner.des}",
						<!-- 1,10-20 -->
						"sourceVlan":"1,10-20",
						"enablePortMonitor":true
						}],
					"portType": "@{create.mirror.port}",
					"ports":[30],
					"enableMirror": true,
					"enableAggregation": false
					}],
				"wifiPortEntries":[]
				}
			</restapi>
		</step>

		<!-- /services/config/devicetemplateprofiles -->
		<step name="create.template.profile">
			<restapi name="createDeviceTemplateProfile">
				{
				"ownerId":${owner.id},
				"predefined": false,
				"jsonType": "device-template-profile",
				"name":"${owner.name}",
				"defaultDeviceTemplate": "@{create.template}",
				"enabled": true,
				"productType": "${owner.pt}",
				"deviceFunction": "${owner.func}"
				}
			</restapi>
		</step>

		<!-- /services/config/policies -->
		<step name="create.network.policy">
			<restapi name="createNetworkPolicy">
				{
				"ownerId" : ${owner.id},
				"jsonType": "network-policy",
				"name":"${owner.name}",
				"type" : "NetworkAccessAndSwitching"
				}
			</restapi>
		</step>


		<step name="add.template.profile.into.network.policy">
			<restapi name="assignfeature">
				{
				"jsonType" : "network_policy",
				"networkPolicyId" : "@{create.network.policy}",
				"featureId" : "@{create.template.profile}"
				}
			</restapi>
		</step>

		<step name="assign.network.policy.to.device">
			<restapi name="assignnetworkpolicy">
				{
				"device" :"@{create.device}",
				"networkPolicy" :"@{create.network.policy}"
				}
			</restapi>
		</step>

		<step name="download.cli.to.device">
			<restapi name="downloadcli">
				{
				"networkPolicyId" : "@{create.network.policy}",
				"deviceIds" : [ "@{create.device}"],
				"configDownloadTypes" : ["deviceFull"]
				}
			</restapi>
		</step>
	</declaration>

	<stage>
		<step no="1">
			<call step="add.template.profile.into.network.policy" />
		</step>
		<step no="2">
			<call step="assign.network.policy.to.device" />
		</step>
		<step no="3">
			<call step="download.cli.to.device" />
		</step>
		<step no="4">
			<ssh target="${tb.fileserver}" user="root">
				-v "cat /var/data/fileserver/configuration/${owner.id}/${owner.mac}-deviceFull.config"
			</ssh>
		</step>
	</stage>
	<failed-process />
</testcase>
