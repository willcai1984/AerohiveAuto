<testcase>
	<brief>feature test cases</brief>
	<priority>low</priority>
	<automated>yes</automated>
	<description>
		Verifiy ipfirewall policy rules,the source ip is a wildcard and destinatin name is a hostname
		Verifiy the action of ipfirewall policy rule is permit and the logtype is both  
		Verifiy the ip firewall default action is permit
	</description>
	<numofap>1</numofap>
	<tbtype>winlin</tbtype>
	
	<pre-process>
		<stage>
			<step no="0">
				<desc>Initialize the DUT db</desc>
				<call step="init.cloud.server" />
			</step>
		</stage>
	</pre-process>
	<post-process>
		<stage>
			<step no="0">
				<desc>Clean up the DUT db</desc>
				<call step="cleanup.cloud.server" />
			</step>
		</stage>
	</post-process>
	
	<pre-process />
	<!--Get the devcie info from actual AP after Cloud 3.0 can push configuration to device  -->
	<desc>
		user-profile UserProfile10 qos-policy def-user-qos vlan-id 10 attribute 10
		user-profile UserProfile10 performance-sentinel enable
		user-profile UserProfile10 performance-sentinel guaranteed-bandwidth 12345
	</desc>
	
	<property name="slaBandwidth" value="12345" />
	
	
	<property name="owner.id" value="103" />
	<property name="vlan.id" value="10" />
	<property name="userprofile.id" value="10" />
	
	<property name="timeInterval" value="100" />
	<property name="trafficThreshold" value="100" />
	
	<property name="accessap.mac" value="e01c41002700" />
	<property name="backhaulap.mac" value="e01c410040c0" />
	<property name="accessap.ip" value="10.155.30.88" />
	<property name="backap.ip" value="10.155.33.16" />
	<property name="ap.mac" value="000011112103" />
	
	<declaration>
	<step name="create.IpFirewall" description="">
			<restapi name="createIpFirewall">
				
		{
					 "ownerId":"103",
					 "predefined":false,
					 "jsonType":"ip-firewall",
					 "name":"IpFirewall1",
					 "description":"thisisipfirewallprofile",
					 "rules":[
					  {
					   "jsonType":"ip-firewall-rule",
					   "ownerId":"103",
					   "predefined":false,
					   "ruleId":1490543320,
					   
					   
					   "applicationServices": [
					   
					 
					   
					   
					   
					   
					   
					   
					   
					   
					    ],
				       "networkServices": [
				       {
									"jsonType": "network-service",
									"ownerId": 103,
									"predefined": false,
									"name": "net1",
									"description": "123",
									"protocolType": "PROTOCOL_ID_SVP",
									"cliDefaultFlag": false,
									"protocolNumber": 100,
									"portNumber": 100,
									"idleTimeout": 100,
									"algType": "ALG_TYPE_NONE",
									"serviceType": 100,
									"appId": 100
									}
				       
				       ],
					   
					   
					   "action":"TRAFFIC_DROP",
					   "loggingType":"SESSION_INITIATION",
					   "sourceIp":{
					    "jsonType":"wildcard",
					    "ownerId":103,
					    "predefined":false,
					    "name":"srcip",
					    "description":"thisisaipobjectwithwildcard",
					    "wildcard":"10.155.33.0",
					    "wildcardMask":"255.255.255.0"
					   },
					   "destinationIp":{
					    "jsonType":"hostname",
					    "ownerId":103,
					    "predefined":false,
					    "name":"destip",
					    "description":"",
					    "hostname":"www.baidu.com"
					   }
					  }
					 ]
} 
				
				
				
				
				
						
				
				
			
			</restapi>
		</step>
	
	
	
	
	

	
	
	
		
	<step name="create.access.ip.object.ip.address" description="">
			<restapi name="createIpObjectProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"jsonType": "ip-object",
				"name" : "AccessIpObject",
				"description" : "The IP should include access AP's IP",
				"addressType" : "IP_ADDRESS",
				"entries" :
				[{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"description" : "ip address",
				"addressInfo1" : "${accessap.ip}"
				}]
				}
			</restapi>
		</step>
		
		<step name="create.access.ip.object.ip.address.1" description="">
			<restapi name="createIpObjectProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"jsonType": "ip-object",
				"name" : "AccessIpObjectB",
				"description" : "The IP should include back AP's IP",
				"addressType" : "IP_ADDRESS",
				"entries" :
				[{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"description" : "ip address back",
				"addressInfo1" : "${backap.ip}"
				}]
				}
			</restapi>
		</step>
		
		
	<step name = "create.ipdosprevention" description=""> 
			<restapi name = "createIpDosPrevention">
			   {"ownerId":103,
				"predefined":false,
				"jsonType":"ip-dos-prevention",
				"name":"ip_dosprevent",
				"description":"ip_dosprevent",
				"enableSynCheck":false,
				"dosParams":[
				
				{"ownerId":103,
				"predefined":false,
				"screeningType":"SYN_FLOOD",
				"threshold":10,
				"dosAction":"ALARM",
				"duration":10,
				"enabled":true},
				
				{"ownerId":103,
				"predefined":false,
				"screeningType":"UDP_FLOOD",
				"threshold":10,
				"dosAction":"ALARM",
				"duration":10,
				"enabled":true},
				
				{"ownerId":103,
				"predefined":false,
				"screeningType":"ADDRESS_SWEEP",
				"threshold":10,
				"dosAction":"ALARM",
				"duration":10,
				"enabled":true},
				
				{"ownerId":103,
				"predefined":false,
				"screeningType":"IP_SPOOF",
				"threshold":10,
				"dosAction":"ALARM",
				"duration":10,
				"enabled":true},
				
				{"ownerId":103,
				"predefined":false,
				"screeningType":"PORT_SCAN",
				"threshold":10,
				"dosAction":"ALARM",
				"duration":10,
				"enabled":true},
				
				{"ownerId":103,
				"predefined":false,
				"screeningType":"IP_SPOOF",
				"threshold":10,
				"dosAction":"ALARM",
				"duration":10,
				"enabled":true},
				
				{"ownerId":103,
				"predefined":false,
				"screeningType":"RADIUS_ATTACK",
				"threshold":10,
				"dosAction":"ALARM",
				"duration":10,
				"enabled":true},
				
				{"ownerId":103,
				"predefined":false,
				"screeningType":"ICMP_FLOOD",
				"threshold":10,
				"dosAction":"DISCONNECT",
				"duration":10,
				"enabled":true}]}
			</restapi>
		</step>	
		
	
	
	
	<step name = "create.macdosprevention.station" description=""> 
			<restapi name = "createMacDosPrevention">
				{
				"ownerId": 103,
				"predefined": false,
				"jsonType": "mac-dos-prevention",
				"name": "Aerohive-mac_dos_station",
				"description": "This is one mac dos prevention",
				"dosType": "STATION",
				"dosParams":[
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"PROBE_REQ",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"ASSOC_REQ",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"ASSOC_RESP",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"AUTH",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"DEAUTH",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"EAPOL",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"DISASSOC",
				"threshold":1000,
				"interval":60,
				"enabled":false}]
				}	
			</restapi>
		</step>	
	
	<step name = "create.macdosprevention.ssid" description=""> 
			<restapi name = "createMacDosPrevention">
				{
				"ownerId": 103,
				"predefined": false,
				"jsonType": "mac-dos-prevention",
				"name": "Aerohive-mac_dos_ssid",
				"description": "This is one mac dos prevention2",
				"dosType": "SSID",
				"dosParams":[
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"PROBE_REQ",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"ASSOC_REQ",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"ASSOC_RESP",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"AUTH",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"DEAUTH",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"EAPOL",
				"threshold":1000,
				"interval":60,
				"enabled":false},
				
				{"ownerId":103,
				"predefined":false,
				"dosDetectionType":"DISASSOC",
				"threshold":1000,
				"interval":60,
				"enabled":false}]
				}	
			</restapi>
		</step>	
	
	<step name = "create.trafficfilter" description=""> 
			<restapi name = "createTrafficFilter">
				{
				"ownerId": 103,
				"predefined": false,
				"jsonType": "traffic-filter",
				"name": "Default service filter",
				"description": "This is one mac dos",
				"enableSsh": true,
				"enableTelnet": false,
				"enablePing": true,
				"enableSnmp": false,
				"enableInterTraffic": true
				}	
			</restapi>
		</step>	
		
		
	
		<step name="create.user.profile" description="">
			<restapi name = "createUserProfile">
				{
				"jsonType" : "user-profile",
				"ownerId" : 103,
				"name" : "UserProfile10",
				"predefined" : false,
				"vlan" : {
				"jsonType" : "vlan",
				"ownerId" : 103,
				"name" : "Aerohive_VlanProfile",
				"description" : "Vlan Profile for Demo",
				"predefined" : false,
				"entries" : [ {
				"ownerId" : 103,
				"tags" : [ ],
				"vlanNumber" : ${vlan.id}
				} ]
				},
				"enableFirewall" : true,
 				"inboundIpFirewallId" : "@{create.IpFirewall}",
 				"outboundIpFirewallId" : "@{create.IpFirewall}", 
 				"ipFirewallDefaultAction" : "PERMIT", 			
				"enableSchedule" : false,
				"schedules" : [ ],
				"enableTrafficTunneling" : false,
				
				"enableClientSla" : false,
				"enableQos" : false,
				"restriction" : "DENY_CAR",
				"enableClassification" : false
				
				}
			</restapi>
	</step>
		<step name="create.ssid.profile" description="">
			<restapi name = "createSsidProfile">
				{
								"jsonType" : "ssid-profile",
				"ownerId" : 103,
				"name" : "open",
				"ssid" : "open",
				"description" : "a ssid profile for integration test",
				"radioBand" : "DUAL",
				"industry" : "ENTERPRISE",
				"wirelessNetworkUsage" : "STAFF_AND_TEACHERS",
				"accessSecurity": {
				                  "ownerId": 103,
                                  "jsonType": "openAccess"
				                   },
				"defaultUserProfile" : "@{create.user.profile}",
				"advancedSettings": 
				                  {
				                 "ownerId": 103,
			                   	"predefined": false,
				               	"userProfileApplicationSequence": "CWP_SSID_MAC",
				               	"ignoreBroadcastProbeReq": true,
				               	"veEnableVoiceEnterprise": true,
			               		"veEnable802Dot11k": false,
				               	"veEnable802Dot11v": false,
				               	"veEnable802Dot11r": true,
			               		"wmmEnableWmm": false,
			               		"wmmEnableWmmVideo": false,
			               		"wmmEnableWmmVoice": false,
			               		"wmmEnableUapsd": false,
			               		"multicastConvertIpToUnicast": "DISABLE",
			               		"multicastChannelUtilThreshold":100,
			               		"multicastMemberCountThreshold":3,
			               		"clientMaxClientLimit":5,
			               		"clientEapTimeout":187,
			               		"clientRtsThreshold":1769,
			               		"clientFragmentThreshold":353,
			               		"clientDtimSetting":223,
			               		"clientInactiveClientAgeout":8,
			               		"clientEapRetries":4,
			               		"clientRoamCacheUpdateInterval":19686,
			               		"clientRoamCacheAgeout":440,
			               		"clientLocalCacheTimeout":572714
				                    },
				"rateSettings": 
				               {
				              "ownerId": 103,
			              	"predefined": false,
			              	"enable11a": true,
			              	"enable11bg": true,
			              	"enable11n": true,
		              		"enable11ac": true,
		              		"disable11nHighCapabilities": true,
		                    "rateSet11a": ["BASIC","BASIC","BASIC","OPTIONAL","OPTIONAL",
		                                    "OPTIONAL","NA","NA"],
			              	"rateSet11bg": [
                                    "BASIC","BASIC","BASIC","BASIC",
                                    "OPTIONAL","OPTIONAL","OPTIONAL","OPTIONAL",
                                    "NA", "NA", "NA", "NA"
                                ],
			              	"rateSet11n": [ "OPTIONAL","OPTIONAL","OPTIONAL","OPTIONAL","OPTIONAL",
			              	               "OPTIONAL","OPTIONAL","OPTIONAL","NA","NA","NA","NA",
                                          "OPTIONAL","OPTIONAL","OPTIONAL","OPTIONAL","OPTIONAL", 
                                           "OPTIONAL","OPTIONAL","OPTIONAL",
                                            "NA","NA","NA","NA"],
			              	"enableStreamOne": true,
			              	"enableStreamTwo": true,
			              	"enableStreamThree": true,
			              	"mcsValueOne": 9,
			              	"mcsValueTwo": 9,
			              	"mcsValueThree": 9
			          	        },
				"ipBasedDos": "@{create.ipdosprevention}",
				"stationBasedMacDos": "@{create.macdosprevention.station}",
				"ssidBasedMacDos": "@{create.macdosprevention.ssid}",
				"trafficFilter": "@{create.trafficfilter}",
				"advancedAccessSecurity": 
                            {
                            "ownerId":${owner.id},
					        "predefined":false,
					        "gtkRekeyPeriod":4124,
					        "gtkTimeout":679,
					        "gtkRetries":10,
					        "ptkRekeyPeriod":49523,
					        "ptkTimeout":811,
					        "ptkRetries":3,
							"gmkRekeyPeriod":1603482,
							"replayWindow":10,
							"nonStrict":true,
							"reauthInterval":57688,
							"enablePreauthentication":false,
							"enableProactivePmkIdResponse":true,
							"localTkipCountermeasure":false,
							"remoteTkipCountermeasure":false,
							"enable802Dot11w":true,
							"useOf802Dot11w":"MANDATORY",
							"enableBroadcastOrMulticastIntegrityProtocol":false,
							"enableGmkRekeyPeriod":true,
							"enableGtkRekeyPeriod":true,
							"enablePtkRekeyPeriod":false,
							"enableReauthInterval":false
						}
						
								
				}
			</restapi>
		</step>	
		<step name="create.network.policy" description="">
			<restapi name = "createNetworkPolicy">
				{
				"ownerId" : 103,
				"predefined": false,
   				"jsonType": "network-policy",
				"name" : "Aerohive_UserProfile10",
				"type" : "NetworkAccessAndSwitching"
				}
			</restapi>
		</step>
		
		<!--This step should be removed after Could 3.0 can push configuration to device-->
		<step name="create.device.1.ap330.v6101.as.ap">
			<restapi name = "createDevice">
				{
				"ownerId":103,
				"ipAddress": "${accessap.ip}",
				"macAddress":"000011112103",
				"hostname":"virtual device for test",
				"serialNumber":"1111222233334444",
				"productType":"AP_330",
				"softwareVersion": "6.1.0.1",
				"role":19050,
				"function":"Ap",
				"adminState":"UNMANAGED",
				"isConnected":true
				}
			</restapi>
		</step>
		<step name="add.ssid.profile.into.network.policy" description="">
			<restapi name = "assignfeature">
				{
				"jsonType" : "network_policy",
				"networkPolicyId" : "@{create.network.policy}",
				"featureId" : "@{create.ssid.profile}"
				}
			</restapi>
		</step>
		<step name="assign.network.policy.to.device" description="">
			<restapi name = "assignnetworkpolicy">
				{
				"device" : "@{create.device.1.ap330.v6101.as.ap}",
				"networkPolicy" : "@{create.network.policy}"
				}
			</restapi>
		</step>

		<step name="download.cli.to.device" description="">
			<restapi name = "downloadcli">
				{
				"networkPolicyId" : "@{create.network.policy}",
				"deviceIds" : [ "@{create.device.1.ap330.v6101.as.ap}"],
				"configDownloadTypes" : [ "deviceFull"]
				}
			</restapi>
		</step>
	</declaration>

	<stage>

		<step no="1">
			<call step="create.IpFirewall" />
			<failed>next</failed>
		</step>
	
	
	
	
	
	    <step no="2">
			<call step="create.ipdosprevention" />
			<failed>next</failed>
		</step>
	
	
	
	    <step no="3">
			<call step="create.macdosprevention.station" />
			<failed>next</failed>
		</step>
	
		<step no="4">
			<call step="create.macdosprevention.ssid" />
			<failed>next</failed>
		</step>
	
		<step no="5">
			<call step="create.trafficfilter" />
			<failed>next</failed>
		</step>
		
		<step no="6">
			<call step="create.user.profile" />
			<failed>next</failed>
		</step>
		<step no="7">
			<call step="create.ssid.profile" />
			<failed>next</failed>
		</step>
		
		<step no="8">
			<call step="create.network.policy" />
			<failed>next</failed>
		</step>
		<step no="9">
			<call step="create.device.1.ap330.v6101.as.ap" />
			<failed>next</failed>
		</step>
		
		<step no="10">
			<call step="add.ssid.profile.into.network.policy" />
			<failed>next</failed>
		</step>
		
		<step no="11">
			<call step="assign.network.policy.to.device" />
			<failed>next</failed>
		</step>
		<step no="12">
			<call step="download.cli.to.device" />
			<failed>next</failed>
		</step>
		<step no="13">
			<ssh target="${tb.fileserver}" user="root">
				-v "cat /var/data/fileserver/configuration/${owner.id}/${ap.mac}-deviceFull.config"
			</ssh>
			<log-match>-i "ip-policy IpFirewall1"</log-match>
			<log-match>-i "ip-policy IpFirewall1 id 1 from 168.143.87.77 255.255.255.255 to 168.143.87.77 255.255.255.255 service test action permit log"</log-match>
            <log-match>-i "user-profile UserProfile10 security ip-policy from-access IpFirewall1 to-access IpFirewall1"</log-match>
		</step>
	</stage>
	<failed-process />
	<post-process />
</testcase>