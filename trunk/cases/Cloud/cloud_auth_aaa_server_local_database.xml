<testcase>
	<brief>AAA Server Local Database CLI test for Cloud3.0</brief>
	<priority>low</priority>
	<automated>yes</automated>
	<description>
		AAA Server Local Database CLI test
	</description>
	<numofap>1</numofap>
	<tbtype>winlin</tbtype>
	<description>
	      aaa radius-server local STA-auth default-type leap
          aaa radius-server local db-type local
          aaa radius-server local nas test.aerohive.com shared-key ******
          aaa radius-server local port 1812
          aaa radius-server local user-group Radius-group
          aaa radius-server local shared-secret-auto-gen
          aaa radius-server local enable
          aaa mac-format delimiter colon
          aaa mac-format style no-delimiter
          aaa mac-format case-sensitivity lower-case
          aaa ppsk-server auto-save-interval 600
	</description>
	<pre-process>
		<stage>
			<step no="0">
				<desc>Initialize the DUT db</desc>
				<call step="init.cloud.server" />
			</step>
		</stage>
	</pre-process>
	<post-process>
		<stage>
			<step no="0">
				<desc>Clean up the DUT db</desc>
				<call step="cleanup.cloud.server" />
			</step>
		</stage>
	</post-process>
	<property name="test1" value="ServiceType" />
	<property name="ap.mac" value="FFFFFFFFFF03" />
	<property name="owner.id" value="103" />
	<property name="accessap.ip1" value="10.155.1.100" />
	<property name="accessap.ip2" value="10.155.1.1555" />
	<property name="accessap.ip3" value="10.155.36.1" />
	<property name="accessap.ip4" value="10.155.36.155" />
	<property name="network.mask" value="255.255.25.0" />
	<property name="host.name1" value="ntp1.aerohive.com" />

	<declaration>
	    <step name="create.wildcard.address.profile" description="">
			<restapi name="createWildcardAddressProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"jsonType" : "wildcard",
				"name" : "WildcardIpObject",
				"description" : "this is WildcardIpObject",
				"wildcard": "${accessap.ip3}",
				"wildcardMask" : "${network.mask}"
				}
            </restapi>
		</step>
	 <step name="create.ip.range.address.profile" description="">
			<restapi name="createIpRangeAddressProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" :false,
				"jsonType" : "ip_range",
				"name" : "IpRangeAddressProfile10",
				"description" : "this is IpRangeAddressProfile",
				"ipAddressFrom":"${accessap.ip3}",
				"ipAddressTo" : "${accessap.ip4}"
				}
            </restapi>
		</step>
		<step name="create.hostname.address.profile" description="">
			<restapi name="createHostnameAddressProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"jsonType" : "hostname",
				"name" : "HostnameAddressPrfoile",
				"description" : "this is hostname address profile",
				"hostname":"${host.name1}"
				}
            </restapi>
		</step>
		<step name="create.ip.address.profile" description="">
			<restapi name="createIpAddressProfile">
				{
				"ownerId" : "${owner.id}",
				"predefined" :false,
				"jsonType" : "ip",
				"name" : "IpAddressPrfoile.1",
				"ipAddress":
				"${accessap.ip2}"
				}
            </restapi>
		</step>
		<step name="create.device">
			<restapi name="createDevice">
				{
				"ownerId":${owner.id},
				"ipAddress":"10.155.21.212",
				"macAddress":"FFFFFFFFFF03",
				"hostname":"virtual device for test 102",
				"serialNumber":"1977222233334102",
				"productType":"AP_330",
				"softwareVersion": "6.1.0.2",
				"role":19050,
				"function":"Ap",
				"adminState":"UNMANAGED",
				"isConnected":true
				}
			</restapi>
		</step>
		<step name="create.network.policy">
			<restapi name="createNetworkPolicy">
				{
				"ownerId" : ${owner.id},
				"name":"Cloud_automation",
				"type" : "NetworkAccessAndSwitching"
				}
			</restapi>
		</step>
		<step name="create.radius.user.group" description="">
			<restapi name="createRadiusUserGroup">
				{
				"ownerId":${owner.id},
				"predefined":false,
				"jsonType":"radius-user-group",
				"name":"Radius_user_group_test01",
				"description":"this is a RadiusUserGroup",
				"userProfileAttribute":{
				"ownerId":${owner.id},
				"predefined":false,
				"attrNumber":100,
				"autoGenerated":true},
				"enableReauthorization": true,
				"reauthorizationTime":200,
				"credentialPersistencyStorage":"DRAM",
				"enableVoiceDeviceAuthentication":false
				}
           </restapi>
		</step>
		<step name="create.radius.server.localdb">
			<restapi name="createRadiusServer">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType":"radius-server",
				"name": "AAA_Radius_Server",
				"description": "This is a AAA_Radius_Server",
				"enableAcceptOtherDevsAuthReqs": false,
				"approvedRadiusClients":
				[{
				"ownerId" : ${owner.id},
				"predefined" :false,
				"sharedSecret":"aerohive",
				"description" : "This is description",
				"clientIp" : {
				"ownerId" : ${owner.id},
				"jsonType": "ip",
				"predefined" : false,
				"name" : "ApprovedRadiusClients",
				"description": "This is approvedRadiusClients",
				"ipAddress" : "10.155.201.53"
				}
				}],

				"enableExternalUserDirectory":false,
				"enableLibrarySipServer": false,
				"enableLocalDatabase": true,
				"authentication": "TLS",
				"defaultAuthentication": "TLS",
				"enableVerifyServerCert": false,
				"serverKeyPassword": "aerohive",
				"enableCheckCommonName": false,
				"enableCheckTls": true,
				"enableCheckPeap": false,
				"enableCheckTtls":false,

				"radiusUserGroups":["@{create.radius.user.group}"],
				"caCertificate":
				{
				"ownerId": 103,
				"predefined": false,
				"fileName": "Default_CA.pem",
				"fileSize": 6330162539541418000,
				"fileType": "CERT_KEY",
				"index": 1,
				"encrypted": false,
				"issuer": "aKkUBANMSvx51h99WPxArYwQVuOhVblER2Ed1g6dfugMytx56fUPz5Wum8Z1uLYTesQFJBXE6LyKoGxpmJTk2zEgvKFQmdGOqyX5xUT1qyMErup8Ts5q2dYDlYA4cpMk",
				"subject": "oT0mWEwiulgzYekqfdJ1SEQD7ExAlhuqiy4tk6BU4g2HGdfbJt72EnQW3fTOGffSceE4y1qRt15XR1Y9cslypEPSYktgK1Zd88SCxg9sgnm533LDSFO5qFk1ehc8rkKU",
				"expireTime": "DCDbliPXz27nEWJsD9GUssaoaZ20zNSu"
				},

				"serverCertificate":
				{
				"ownerId": 103,
				"predefined": false,
				"fileName": "Default-Server_cert.pem",
				"fileSize": 6242769194124182000,
				"fileType": "CERT_KEY",
				"index": 8,
				"encrypted": true,
				"issuer": "7aFkH9YpHjatufOEvHbxfmJ3bvk0rzgEfDfh4qAnyxYfcNed5683TTinWtpmrU3y2Hi7T3aIyMZK9yXFe5iUCFPkNI4cQjwyNvdvT3bY6k2Ue8kgMQXwULduHDOpCtcB",
				"subject": "gzoGDAHf5XLkjOlxPWo1o7ofub2FOfELq2vSbjTXOWozZf8n6KbSEDiDJAQ8OGuLbbhGIaCctUwPfcNwfh4v0hl0lfUoOUJuZYmvMo9nucQQFbwcPHyiJnk6ydzX59GN",
				"expireTime": "oLMms4LBpK4qdvTMtfvBgfR00zIfG877"
				},
				"serverPrivateKey":
				{
				"ownerId": 103,
				"predefined": false,
				"fileName": "Default-Server_key.pem",
				"fileSize": 2493645583392905000,
				"fileType": "SELF_GEN_CA",
				"index": 10,
				"encrypted": true,
				"issuer": "uz4tNr3jUdwki47m1UPzKIVrQMninbilqzNu8BxHX8R9y9a6IvB0oFZzvljtuTuUTVkW8E3pwfZPqmZkQr7cmhyIrtYd1GIzQrbVyiM2Hi3k4rx2BZQ8mhS7ahGXctfp",
				"subject": "kYmEBRtOuJXxBSC6pqrQcOE65GdlXw3vhAUtulLGmaqWfRB07De98RGTtQZJIbL15zPm82LlLHOB2LAUzdAhvuprXcCfPioVxWsgf6WgKyy3YRFzLv0QJicqwyfAqnIY",
				"expireTime": "PvbMJ5Nn3EWj5rvvqxOws8KCqxYjTzXy"
				}
				}
			</restapi>
		</step>
		<step name="create.default.devicetemplate" description="">
			<restapi name="createDeviceTemplate">
				{
    				"ownerId":${owner.id},
    				"predefined": false,
    				"jsonType": "device-template",
    				"name": "AP template 1",
    				"description": "this is ap template",
    				"productType": "AP_330",
    				"deviceFunction": "Ap",
    				"loadBalanceMode": "AUTO",
    				"ethPortEntries": 
    				[
    				  {
    				    "ownerId":${owner.id},
    				    "predefined": false,
    				    "portMirrorSettings": [],
    				    "portType": 
    				      {
    				      	"jsonType": "access-port",
    				      	"ownerId":${owner.id},
    				      	"predefined": false,
    				      	"name": "access port",
    				      	"radiusServer": "@{create.radius.server.localdb}",
    				      	"enabled": true
    				      },
    				    "ports": [0,1],
    				    "enableMirror": false,
    				    "enableAggregation": false
    				  }
      				],
      				"sfpPortEntries":[]
  				}
            </restapi>
		</step>
		<step name="create.devicetemplate.profile" description="">
			<restapi name="createDeviceTemplateProfile">
				{
					"jsonType": "device-template-profile",
    				"ownerId":${owner.id},
					"predefined": false,	
					"name":"device template profile",
					"description": "for AP 330",
					"defaultDeviceTemplate":"@{create.default.devicetemplate}",
  					"entries": [
  						{
  							"description":"device template",
  							"deviceTemplate":"@{create.default.devicetemplate}",
  							"ownerId":${owner.id},
  							"predefined": false,
  							"tags":[]
  						}
  					],
					"enabled": true,
					"productType": "AP_330",
					"deviceFunction": "Ap"
  				}
            </restapi>
		</step>
		
		<step name="create.network.policy">
			<restapi name="createNetworkPolicy">
				{
					"ownerId" : ${owner.id},
					"jsonType": "network-policy",
					"name":"network policy",
					"type" : "NetworkAccessAndSwitching"
				}
			</restapi>
		</step>
		
		<step name="add.devicetemplate.profile.into.network.policy">
            <restapi name="assignfeature">
                {
                    "jsonType" : "network_policy",
                    "networkPolicyId" : "@{create.network.policy}",
                    "featureId" : "@{create.devicetemplate.profile}"
                }
            </restapi>
        </step>
        
		<step name="add.devicetemplate.profile.into.network.policy">
            <restapi name="assignfeature">
                {
                    "jsonType" : "network_policy",
                    "networkPolicyId" : "@{create.network.policy}",
                    "featureId" : "@{create.devicetemplate.profile}"
                }
            </restapi>
        </step>
        
        <step name="assign.network.policy.to.device">
			<restapi name="assignnetworkpolicy">
				{
					"device" :"@{create.device}",
					"networkPolicy" :"@{create.network.policy}"
				}
			</restapi>
		</step>
		
		<step name="download.cli.to.device">
			<restapi name="downloadcli">
				{
					"networkPolicyId" : "@{create.network.policy}",
					"deviceIds" : [ "@{create.device}"],
					"configDownloadTypes" : ["deviceFull"]
				}
			</restapi>
		</step>
		
		<step name="update.device.config.ex.of.device1">
            <restapi name="updateDeviceConfigEx">
                {
                  "ownerId":"${owner.id}",
                  "macAddress":"FFFFFFFFFF03",
                  "productType":"AP_330",
                  "deviceFunction":"Ap",
                  "device" : "@{create.device}",
                  "networkPolicy" : "@{create.network.policy}",
                  "ipMode": "STATIC_IP",
				  "ipAddress": "10.155.21.212",
				  "netmask": "255.255.255.0",
				  "defaultGateway": "10.155.21.1",
                  "tags" : [],
                  "enableRadiusAuthenticationServer": true,
				  "radiusAuthenticationServerPort": 1000
                }
            </restapi>
        </step>
		
		
		
		
		
	</declaration>
	<stage>
		<step no="1">
			<call step="create.radius.user.group" />
			<failed>next</failed>
		</step>
		
		<step no="2">
			<call step="create.radius.server.localdb" />
			<failed>next</failed>
		</step>
		
		<step no="3">
			<call step="create.default.devicetemplate" />
			<failed>next</failed>
		</step>
		
		<step no="4">
			<call step="create.devicetemplate.profile" />
			<failed>next</failed>
		</step>
		

		
		<step no="6">
			<call step="create.device" />
			<desc> Create device AP for test </desc>
			<failed>next</failed>
		</step>

		
		<step no="8">
			<call step="update.device.config.ex.of.device1" />
			<desc> Assign network policy to device </desc>
            <failed>next</failed>		
		</step>
		
		
		<step no="9">
			<call step="assign.network.policy.to.device" />
			<desc> Assign network policy to device </desc>
            <failed>next</failed>		
		</step>
		
		<step no="10">
			<call step="download.cli.to.device" />
			<desc> Down CLI to device </desc>
            <failed>next</failed>		
		</step>

		<step no="11">
			<ssh target="${tb.fileserver}" user="root">
				-v "cat
				/var/data/fileserver/configuration/${owner.id}/${ap.mac}-deviceFull.config"
			</ssh>
			<log-match>-i "aaa radius-server local nas 10.155.201.53 shared-key ***"</log-match>
			<log-match>-i "aaa radius-server local sta-auth type tls check-cert-cn"</log-match>
            <log-match>-i "aaa radius-server local sta-auth type tls check-in-db"</log-match>
			<log-match>-i "aaa radius-server local sta-auth ca-cert Default_CA.pem server-cert Default-Server_cert.pem private-key Default-Server_key.pem"</log-match>
			<log-match>-i "aaa radius-server local user-group Radius_user_group_test01"</log-match>
			
		</step>
	</stage>
	<failed-process />
</testcase>