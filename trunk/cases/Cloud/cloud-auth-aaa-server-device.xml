<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Cloud authentication AAA server basic case for device</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		1. Verifiy the AAA radius server with Local Database
		2. The configuration can be correctly push to real device
	</description>
	<numofap>1</numofap>
 	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<pre-process>
		<stage>
			<step no="0">
				<desc>Initialize the DUT db</desc>
				<call step="init.cloud.server" />
			</step>
		</stage>
	</pre-process>
	<post-process>
		<stage>
			<step no="0">
				<desc>Clean up the DUT db</desc>
				<call step="cleanup.cloud.server" />
			</step>
		</stage>
	</post-process>
	<desc>
		security-object SSID-8021X
		security-object SSID-8021X security aaa radius-server primary ${hostanme} shared-secret aerohive 
		security-object SSID-8021X security aaa radius-server accounting primary ${hostanme} shared-secret aerohive 
		security-object SSID-8021X security protocol-suite wpa2-aes-8021x
		ssid SSID-8021X
		ssid SSID-8021X security-object SSID-8021X
	</desc>
	<property name="pub.radius1.ip" value="192.168.10.253" />
	<property name="test1" value="ServiceType" />
	<property name="ap.mac" value="197711112105" />
	<property name="hostanme" value="radius-test.aerohive.com" />
	<property name="owner.id" value="105" />
	<property name="vlan.id" value="105" />
	<property name="userprofile.id" value="105" />
	
	<declaration>
		<step name="create.hostname.address.profile" description="">
			<restapi name="createHostnameAddressProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"jsonType" : "hostname",
				"name" : "HostnameAddressPrfoile",
				"description" : "this is hostname address profile",
				"hostname":"${hostanme}"
				}
            </restapi>
		</step>
		<step name="create.external.radius.server1" description=""> 
			<restapi name="createExternalRadiusServer">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "ext-radius-server-entry",
				"name":"cloud-external-radius-server",
				"description": "This is a radius server",
				"serverType": "ACCOUNTING",
				"sharedSecret": "aerohive",
				"authenticationPort": 1812,
				"accountingPort": 1813,
				"serverIp": refObjectInTestStep="create.hostname.address.profile"
				}
            </restapi>
		</step>
		<step name="create.external.radius.profile.entry1">
			<restapi name="createExternalRadiusProfileEntry">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"serverRole" : "PRIMARY",
				"defaultServerId" : refIdInTestStep="create.external.radius.server1"
				}       
            </restapi>
		</step>
		<step name="create.external.radius.profile1">
			<restapi name="createExternalRadiusProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"jsonType" : "external-radius-profile",
				"name" : "Radius-client",
				"description" : "This is aExternalRadiusProfile",
				"externalRadiusServerOption" : "DESIGNATION",
				"entries" : [refObjectInTestStep="create.external.radius.profile.entry1"]
				}
			</restapi>
		</step>
		
	    <step name="create.ssid.profile.advanced.settings" description="">
			<restapi name="createSsidProfileAdvancedSettings">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"userProfileApplicationSequence": "CWP_SSID_MAC",
				"ignoreBroadcastProbeReq": true,
				"veEnableVoiceEnterprise": true,
				"veEnable802Dot11k": false,
				"veEnable802Dot11v": false,
				"veEnable802Dot11r": true,
				"wmmEnableWmm": false,
				"wmmEnableWmmVideo": false,
				"wmmEnableWmmVoice": false,
				"wmmEnableUapsd": false,
				"multicastConvertIpToUnicast": "DISABLE",
				"multicastChannelUtilThreshold":100,
				"multicastMemberCountThreshold":3,
				"clientMaxClientLimit":5,
				"clientEapTimeout":187,
				"clientRtsThreshold":1769,
				"clientFragmentThreshold":353,
				"clientDtimSetting":223,
				"clientInactiveClientAgeout":8,
				"clientEapRetries":4,
				"clientRoamCacheUpdateInterval":196,
				"clientRoamCacheAgeout":440,
				"clientLocalCacheTimeout":5714
				}
	    </restapi>
		</step>
		<step name="create.traffic.filter" description="">
			<restapi name="createTrafficFilter">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "traffic-filter",
				"name": "Default service filter",
				"description": "This is one mac dos",
				"enableSsh": true,
				"enableTelnet": false,
				"enablePing": true,
				"enableSnmp": false,
				"enableInterTraffic": true
				}
	   </restapi>
		</step>
		<step name="create.ssid.profile.rate.settings" description="">
			<restapi name="createSsidProfileRateSettings">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"enable11a": true,
				"enable11bg": true,
				"enable11n": true,
				"enable11ac":
				true,
				"disable11nHighCapabilities": true,
				"rateSets11a":
				["MUhRnFDxzV0fjeb8f7iHhoKRfSR42HZ4m2OFUo885182kzWYCL0Lx2t7QBoqPL7xLWrIEDdkJglIitVORDNUod6bKsIJD5iLA5Ip0IgBIegc0D1Sqk7QuDYgvZGTWvf2nKALQumXIfaM5SdOIy5IGEts4gpmq7EbLYnVPTH9OUK6j791EM3fEm5K5r18p6l1wkeU8btAWCDosXkWF1U6aZpTD7wD8eSJ8BB6cI8j94r8BmvhN6uYep0XXpDkczv",
				"JEpoOBWMA3FQo7ajbSo4O6B2KTEAgpvTARt03TCHsLQEnAYvpcYiUApImsJmZctLicATYi6hH5n6ax0r73FYMv3TfX7lqzm3QOw8ugkljgM6Vw5spfGUNAoJexiiffpEUirh0ogICmnYIPCKgOhH6901N9tRS5cUxzv9VilGFjw3ez9X8utJ6ybzYLoUoc4MioM28o3GiymTTX95oMozRKlpHXKyVFbUKYzo3KV5Tm0m2gLVCIyu0TOYMz5RpV1"],
				"rateSets11bg":
				["rFF6LDTcROXAn1psrXwHTx4DJVmnaMLSuiRE9P6RxNKk4PLLBiPaXnP0tFcpEj80wb8hE6naJHOQBUG5PUKHarQieKcY3EAvrO6RsYrrqNv3Izh1LQHFNgN70T7W32JPwiW4crylfCcMHr35q7SRLVw5CFwY5WmTtb0zw88KmJX62bUfz6Kvqp0b8wFtSw4iYpgPhDbsJLVWZ3J9G31KnyxAstD8L19DeLGw9jy806R9r6efsSy8MsQnBmXqjRE",
				"UbcVWEqxpN2xxcF9uGy1p7cFD9iMrdEaXtffdwxm531CYzr6ft7U28AO9T3BHImyVFjAIFWb2tGcg84KaEsiRV6jIwa6J3XHYDut0i7ok9bwTuEcbJ5yzoypVdGQwGdsMq6wYODtxcOIpmdSsyT8vuKvR4bf8ESCpCPW22Kurwv5snEnHjXAGWAgOIUJpGIRQRuCgcbMsWvXRcuQbm3tqmnYH2fc1fTOHPuYICAxDeG1cOJXCzp8WusIiG0lEOD"],
				"rateSets11n":
				["npsr9YJGGWTlEDw1jALtDbghzVTrNlvoFeXSJ1hfRZXWpHIxi5fZ2rk2RAyPi78X1q9AQHVb4E2qHhKbNVJ5SRFQbioDTqkH2uCYU4yy4MBJI58TauCtZv4jw5hYL1BFpzSWgdMbY1CDXzl2C3OFqvGUAAXQ9qUI5YUmd0pR4lphtjl8ZgsuvqNOpaUT3NrHf17IotgwCmDrKFLT7J8H7Yh8zwOTdO4GPum91wnbtRt6wT8cvebmbKGOXMAhOY6",
				"dbTi8hsdguqDHuXKR6K2tuo3DTM8hGfbEQU3smdpce6OLiT6ADe9HZvk8D0uDoDN6HTokoZcjgC4zMUtpd050VVjTSg3aKwHdxq87KMPCrFLjJ7E6sCZGIWDHJtQN8JZLargkiipOtLqbydVwz1RVPEbzYdBLECgXHAuxa7WdvPbUDrTaal7wNQZ2svVvoFwz2oBA7I2QyRdM7dGB4RWKQLTyDY8yDl9yymogmqPswIwqDBZIqTneq1mQNgNRu4"],
				"enableStreamOne": true,
				"enableStreamTwo": true,
				"enableStreamThree":
				true,
				"mcsValueOne": 9,
				"mcsValueTwo": 9,
				"mcsValueThree": 9
				}
	    </restapi>
		</step>
		<step name="create.mac.dos.prevention.1" description="">
			<restapi name="createMacDosPrevention">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "mac-dos-prevention",
				"name": "Aerohive-mac-dos1",
				"description": "This is one mac dos prevention",
				"dosType": "SSID",
				"dosParams": [
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"EAPOL",
				"threshold":1462667424,
				"interval":253332708,
				"enableBan":false,
				"ban":630770212,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"ASSOC_RESP",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"AUTH",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"ASSOC_REQ",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"DISASSOC",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_REQ",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false}]
				}
	    </restapi>
		</step>
		<step name="create.mac.dos.prevention.2" description="">
			<restapi name="createMacDosPrevention">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "mac-dos-prevention",
				"name": "Aerohive-mac-dos2",
				"description": "This is one mac dos prevention",
				"dosType": "STATION",
				"dosParams": [
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"EAPOL",
				"threshold":1462667424,
				"interval":253332708,
				"enableBan":false,
				"ban":630770212,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"ASSOC_RESP",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"AUTH",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"ASSOC_REQ",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"DISASSOC",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_REQ",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":950639156,
				"interval":254071646,
				"enableBan":false,
				"ban":848030328,
				"enable":false}]
				}
	    </restapi>
		</step>
		<step name="create.ip.dos.prevention" description="">
			<restapi name="createIpDosPrevention">
				{
				"ownerId":${owner.id},
				"predefined":false,
				"jsonType":"ip-dos-prevention",
				"name":"IP-dos-test",
				"description":"This is one ip dos",
				"enableSynCheck":false,
				"dosParams":[
				
				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"RADIUS_ATTACK",
				"threshold":1497996843,
				"dosAction":"BAN_FOREVER",
				"duration":479164046,
				"enable":true},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"ICMP_FLOOD",
				"threshold":154465117,
				"dosAction":"BAN_FOREVER",
				"duration":1772366886,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"IP_SPOOF",
				"threshold":154465117,
				"dosAction":"BAN_FOREVER",
				"duration":1772366886,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"ADDRESS_SWEEP",
				"threshold":154465117,
				"dosAction":"BAN_FOREVER",
				"duration":1772366886,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"PORT_SCAN",
				"threshold":154465117,
				"dosAction":"BAN_FOREVER",
				"duration":1772366886,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"UDP_FLOOD",
				"threshold":154465117,
				"dosAction":"BAN_FOREVER",
				"duration":1772366886,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"SYN_FLOOD",
				"threshold":154465117,
				"dosAction":"BAN_FOREVER",
				"duration":1772366886,
				"enable":false},
				
				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"ARP_FLOOD",
				"threshold":154465117,
				"dosAction":"BAN_FOREVER",
				"duration":1772366886,
				"enable":false}
				]}}
			</restapi>
		</step> 
        <step name="create.user.profile.1">
			<restapi name = "createUserProfile">
				{
				"jsonType" : "user-profile",
				"ownerId" : ${owner.id},
				"name" : "UserProfile10",
				"predefined" : false,
				"vlan" : {
				"jsonType" : "vlan",
				"ownerId" : ${owner.id},
				"name" : "Aerohive_VlanProfile",
				"description" : "Vlan Profile for Demo",
				"predefined" : false,
				"entries" : [ {
				"ownerId" : ${owner.id},
				"tags" : [ ],
				"vlanNumber" : ${vlan.id}
				} ]
				},
				"enableFirewall" : false,	
				"enableSchedule" : false,
				"schedules" : [ ],
				"enableTrafficTunneling" : true,
				"trafficTunnelingId" : refIdInTestStep = "create.tunnel.policy.dnxp", 
				"enableClientSla" : false,
				"enableQos" : false,
				"restriction" : "DENY_CAR",
	             "radiusAttributeNumber": 105
				}
			</restapi>
		</step>
       <step name="create.ssid.profile.1">
        	<desc>
        		this is an example with reference to other test step
        	</desc>
            <restapi name="createSsidProfile">
                {
                    "jsonType" : "ssid-profile",
                    "ownerId" : ${owner.id},
                    "name" : "SSID-8021X",
                    "ssid" : "SSID-8021X",
                    "description" : "a ssid profile for integration test",
                    "radioBand" : "DUAL",
                    "industry" : "CUSTOM",
                    "wirelessNetworkUsage" : "CUSTOM",
                    "accessSecurity": {
                    "jsonType": "802DOT1X",
                    "ownerId": ${owner.id},
                    "keyManagement": "WPA2_8021X",
                    "encryptionMethod": "CCMP",
                    "keyType": "HEX",
                    "keyValue": "0qbQyejlrjA790ABDSUzwzANyjzx5B4nSR4WUroUbZNK61l6oWJllevYtfuArRgJ"
                    },
                    "defaultUserProfile" : refObjectInTestStep = "create.user.profile.1",
                    "advancedSettings": refObjectInTestStep = "create.ssid.profile.advanced.settings",
                    "rateSettings":refObjectInTestStep="create.ssid.profile.rate.settings",
                    "trafficFilter": refObjectInTestStep = "create.traffic.filter",
            		"externalRadiusProfile": refObjectInTestStep = "create.external.radius.profile1",
                    "ipBasedDos":refObjectInTestStep="create.ip.dos.prevention",
                    "ssidBasedMacDos":refObjectInTestStep="create.mac.dos.prevention.1",
                    "stationBasedMacDos":refObjectInTestStep="create.mac.dos.prevention.2",
                    "advancedAccessSecurity": 
                        {
                            "ownerId":${owner.id},
					        "predefined":false,
					        "gtkRekeyPeriod":4124,
					        "gtkTimeout":679,
					        "gtkRetries":10,
					        "ptkRekeyPeriod":49523,
					        "ptkTimeout":811,
					        "ptkRetries":3,
							"gmkRekeyPeriod":1603482,
							"replayWindow":10,
							"nonStrict":true,
							"reauthInterval":57688,
							"enablePreauthentication":false,
							"enableProactivePmkIdResponse":true,
							"localTkipCountermeasure":false,
							"remoteTkipCountermeasure":false,
							"enable802Dot11w":true,
							"useOf802Dot11w":"MANDATORY",
							"enableBroadcastOrMulticastIntegrityProtocol":false,
							"enableGmkRekeyPeriod":true,
							"enableGtkRekeyPeriod":true,
							"enablePtkRekeyPeriod":false,
							"enableReauthInterval":false
						}
                }
            </restapi>
        </step>   		
        <step name="create.device.1.ap330.v6102.as.ap">
            <restapi name="createDevice">
                {
                    "ownerId":${owner.id},
                    "ipAddress": "10.155.21.21",
                    "macAddress":"000011112105",
                    "hostname":"virtual device for test 1",
                    "serialNumber":"1111222233334444",
                    "productType":"AP_330",
                    "softwareVersion": "6.1.0.2",
                    "role":19050,
                    "function":"Ap",
                    "adminState":"UNMANAGED",
                    "isConnected":true
                }
            </restapi>
        </step>
		<step name="create.network.policy.1">
            <restapi name="createNetworkPolicy">
                {
                "ownerId" : ${owner.id},
                "name" : "Cloud_automation",
                "type" : "NetworkAccessAndSwitching"
                }
            </restapi>
        </step>
        <step name="add.ssid.profile.1.into.network.policy.1">
            <restapi name="assignfeature">
                {
                    "jsonType" : "network_policy",
                    "networkPolicyId" : refIdInTestStep = "create.network.policy.1",
                    "featureId" : refIdInTestStep = "create.ssid.profile.1"
                }
            </restapi>
        </step>
        <step name="assign.network.policy.1.to.device.1">
            <restapi name="assignnetworkpolicy">
                {
                    "device" : refObjectInTestStep = "create.device.1.ap330.v6102.as.ap",
                    "networkPolicy" : refObjectInTestStep = "create.network.policy.1"
                }
            </restapi>
        </step>
        <step name="download.cli.to.device.1">
            <restapi name="downloadcli">
                {
                    "networkPolicyId" : refIdInTestStep = "create.network.policy.1",
                    "deviceIds" : [ refIdInTestStep = "create.device.1.ap330.v6102.as.ap"],
                    "configDownloadTypes" : [ "deviceFull"]
                }
            </restapi>
        </step>
	</declaration>
	
	<stage>

		<step no="1">
			<call step="create.hostname.address.profile" />
			<failed>next</failed>
		</step>
		<step no="2">
			<call step="create.external.radius.server1" />
			<failed>next</failed>
		</step>
		<step no="3">
			<call step="create.external.radius.profile.entry1" />
			<failed>next</failed>
		</step>
		<step no="4">
			<call step="create.external.radius.profile1" />
			<failed>next</failed>
		</step>
		<step no="5">
			<call step="create.ssid.profile.advanced.settings" />
			<failed>next</failed>
		</step>
		<step no="6">
			<call step="create.traffic.filter" />
			<failed>next</failed>
		</step>
		<step no="7">
			<call step="create.ssid.profile.rate.settings" />
			<failed>next</failed>
		</step>
		<step no="8">
			<call step="create.mac.dos.prevention.1" />
			<failed>next</failed>
		</step>
		<step no="9">
			<call step="create.mac.dos.prevention.2" />
			<failed>next</failed>
		</step>
		<step no="10">
			<call step="create.ip.dos.prevention" />
			<failed>next</failed>
		</step>
		<step no="11">
			<call step="create.user.profile.1" />
			<failed>next</failed>
		</step>	
		<step no="12">
			<call step="create.ssid.profile.1" />
			<failed>next</failed>
		</step>
		<step no="13">
			<call step="create.network.policy.1" />
			<failed>next</failed>
		</step>
		<step no="14">
			<call step="create.device.1.ap330.v6102.as.ap" />
			<failed>next</failed>
		</step>

		<step no="15">
			<call step="add.ssid.profile.1.into.network.policy.1" />
            <failed>next</failed>
		</step>
		<step no="16">
			<call step="assign.network.policy.1.to.device.1" />
            <failed>next</failed>		
		</step>
		<step no="17">
			<call step="download.cli.to.device.1" />
            <failed>next</failed>		
		</step>
		<step no="18">
			<ssh target="${tb.fileserver}" user="root">
				-v "cat /var/data/fileserver/configuration/${owner.id}/${ap.mac}-deviceFull.config"
			</ssh>
			<desc> Verify the radius client profile can be correctly create, and it can be bind to ssid.</desc>

			<log-match>-i "security-object SSID-8021X"</log-match>
 			<log-match>-i "security-object SSID-8021X security aaa radius-server primary ${hostanme} shared-secret aerohive"</log-match>
            <log-match>-i "security-object SSID-8021X security aaa radius-server accounting primary ${hostanme} shared-secret aerohive"</log-match>			
			<log-match>-i "security-object SSID-8021X security protocol-suite wpa2-aes-8021x"</log-match>
 			<log-match>-i "ssid SSID-8021X"</log-match>
            <log-match>-i "ssid SSID-8021X security-object SSID-8021X</log-match>			
				
		</step>
	</stage>
	<failed-process />
	<post-process />
</testcase>
	
	
