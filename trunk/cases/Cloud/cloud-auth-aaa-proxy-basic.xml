<testcase>
	<brief>Cloud Auth radius proxy basic case</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		AAA Radius Proxy test
	</description>
	<numofap>1</numofap>
	<tbtype>winlin</tbtype>
	<desc>
       aaa radius-server local STA-auth default-type leap
       aaa radius-server local db-type local
       aaa radius-server local db-type active-directory primary server 10.155.36.116
       aaa radius-server local db-type active-directory primary domain HMQATEST fullname hmqatest.com default
       aaa radius-server local db-type active-directory primary domain HMQATEST binddn test99@hmqatest.com password ******
       aaa radius-server local nas radius.aerohive.com shared-key ******
       aaa radius-server local user-group Radius-group
       aaa radius-server local enable
   </desc>
	<pre-process>
		<stage>
			<step no="0">
				<desc>Initialize the DUT db</desc>
				<call step="init.cloud.server" />
			</step>
		</stage>
	</pre-process>
	<post-process>
		<stage>
			<step no="0">
				<desc>Clean up the DUT db</desc>
				<call step="cleanup.cloud.server" />
			</step>
		</stage>
	</post-process>

	<property name="test1" value="ServiceType" />
	<property name="ap.mac" value="197711112105" />
	<property name="owner.id" value="105" />
	<property name="accessap.ip1" value="10.155.1.100" />
	<property name="host.name1" value="radius.aerohive.com" />
	<declaration>
		<step name="create.traffic.filter" description="">
			<restapi name="createTrafficFilter">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "traffic-filter",
				"name": "Default service filter",
				"description": "This is one mac dos",
				"enableSsh": true,
				"enableTelnet": false,
				"enablePing": true,
				"enableSnmp": false,
				"enableInterTraffic": true
				}
   </restapi>
		</step>
		<step name="create.mac.dos.prevention.1" description="">
			<restapi name="createMacDosPrevention">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "mac-dos-prevention",
				"name": "Aerohive-mac-dos1",
				"description": "This is one mac dos prevention",
				"dosType": "SSID",
				"dosParams": [

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"EAPOL",
				"threshold":155,
				"interval":12,
				"enableBan":false,
				"ban":21,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"ASSOC_RESP",
				"threshold":12,
				"interval":21,
				"enableBan":false,
				"ban":12,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"AUTH",
				"threshold":12,
				"interval":12,
				"enableBan":false,
				"ban":23,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":23,
				"interval":23,
				"enableBan":false,
				"ban":23,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"ASSOC_REQ",
				"threshold":56,
				"interval":56,
				"enableBan":false,
				"ban":67,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"DISASSOC",
				"threshold":67,
				"interval":76,
				"enableBan":false,
				"ban":67,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_REQ",
				"threshold":67,
				"interval":56,
				"enableBan":false,
				"ban":67,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":56,
				"interval":56,
				"enableBan":false,
				"ban":28,
				"enabled":false}]
				}
			</restapi>
		</step>
		<step name="create.mac.dos.prevention.2" description="">
			<restapi name="createMacDosPrevention">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "mac-dos-prevention",
				"name": "Aerohive-mac-dos2",
				"description": "This is one mac dos prevention",
				"dosType":
				"STATION",
				"dosParams": [

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"EAPOL",
				"threshold":155,
				"interval":208,
				"enableBan":false,
				"ban":212,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"ASSOC_RESP",
				"threshold":956,
				"interval":26,
				"enableBan":false,
				"ban":88,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"AUTH",
				"threshold":9156,
				"interval":2646,
				"enableBan":false,
				"ban":328,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":396,
				"interval":46,
				"enableBan":false,
				"ban":848,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"ASSOC_REQ",
				"threshold":956,
				"interval":254,
				"enableBan":false,
				"ban":8480,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"DISASSOC",
				"threshold":9156,
				"interval":1646,
				"enableBan":false,
				"ban":8328,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_REQ",
				"threshold":99156,
				"interval":2646,
				"enableBan":false,
				"ban":8488,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"dosDetectionType":"PROBE_RESP",
				"threshold":95156,
				"interval":2646,
				"enableBan":false,
				"ban":8428,
				"enabled":false}]
				}
    </restapi>
		</step>
		<step name="create.ip.dos.prevention" description="">
			<restapi name="createIpDosPrevention">
				{
				"ownerId":${owner.id},
				"predefined":false,
				"jsonType":"ip-dos-prevention",
				"name":"IP-dos-test",
				"description":"This is one ip dos",
				"enableSynCheck":false,
				"dosParams":[

				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"RADIUS_ATTACK",
				"threshold":1443,
				"dosAction":"BAN_FOREVER",
				"duration":46,
				"enabled":true},

				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"ICMP_FLOOD",
				"threshold":157,
				"dosAction":"BAN_FOREVER",
				"duration":186,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"IP_SPOOF",
				"threshold":15,
				"dosAction":"BAN_FOREVER",
				"duration":186,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"ADDRESS_SWEEP",
				"threshold":5117,
				"dosAction":"BAN_FOREVER",
				"duration":6886,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"PORT_SCAN",
				"threshold":65117,
				"dosAction":"BAN_FOREVER",
				"duration":17586,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"UDP_FLOOD",
				"threshold":1557,
				"dosAction":"BAN_FOREVER",
				"duration":13886,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"SYN_FLOOD",
				"threshold":132,
				"dosAction":"BAN_FOREVER",
				"duration":17723,
				"enabled":false},

				{"ownerId":${owner.id},
				"predefined":false,
				"screeningType":"ARP_FLOOD",
				"threshold":1117,
				"dosAction":"BAN_FOREVER",
				"duration":17886,
				"enabled":false}
				]}}
			</restapi>
		</step>
		<step name="create.ip.object.host.name.address.profile"
			description="">
			<restapi name="createHostnameAddressProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"jsonType" : "hostname",
				"name" : "HostnameAddressPrfoile",
				"description" : "this is hostname address profile",
				"hostname":"${host.name1}"
				}
			</restapi>
		</step>
		<step name="create.device.1.ap330.v6102.as.ap">
			<restapi name="createDevice">
				{
				"ownerId":${owner.id},
				"ipAddress": "10.155.21.21",
				"macAddress":"197711112102",
				"hostname":"virtual device for test 1",
				"serialNumber":"1111222233334444",
				"productType":"AP_330",
				"softwareVersion": "6.1.2.0",
				"role":19050,
				"function":"Ap",
				"adminState":"UNMANAGED",
				"isConnected":true
				}
            </restapi>
		</step>
		<step name="create.external.radius.server.1" description=""> 
			<restapi name="createExternalRadiusServer">
				{
				"ownerId": ${owner.id},
				"predefined": false,
				"jsonType": "ext-radius-server-entry",
				"name":"cloud-external-radius-server",
				"description": "This is a radius server",
				"serverType": "BOTH",
				"sharedSecret": "aerohive",
				"authenticationPort": 1812,
				"accountingPort": 1813,
				"serverIp": "@{create.ip.object.host.name.address.profile}"
				}
            </restapi>
		</step>
		<step name="create.external.radius.profile.1">
			<restapi name="createExternalRadiusProfile">
				{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"jsonType" : "external-radius-profile",
				"name" : "Radius-client",
				"description" : "This is aExternalRadiusProfile",
				"externalRadiusServerOption" : "DESIGNATION",
				"entries" : 
				[{
				"ownerId" : ${owner.id},
				"predefined" : false,
				"serverRole" : "PRIMARY",
				"defaultServerId" : "@{create.external.radius.server.1}"
				}]
				}
			</restapi>
		</step>
		<step name="create.radius.proxy">
			<restapi name="createRadiusProxy">
				{
				"ownerId":${owner.id},
				"predefined":false,
				"jsonType":"radius-proxy",
				"name":"Radius-proxy-test",
				"description":"this is a RadiusProxy",
				"enableAcceptOtherDevsAuthReqs":false,
				"approvedRadiusClients":
				[{
				"ownerId":${owner.id},
				"predefined":false,
				"sharedSecret":"aerohive",
				"description":"This is a radius client",
				"clientIp": "@{create.ip.range.address.profile}"
				}],
				"realmNameFormat":"WINDOWS_NT_DOMAIN",
				"retryDelay":8,
				"retryCount":7,
				"deadTime":1104,
				"injectOperatorNameAttribute":true,
				"realms": 
				[{
				"ownerId":${owner.id},
				"predefined":false,
				"realmName":"ProxyRealm_test",
				"stripRealmName":false,
				"radiusServer": "@{create.external.radius.profile.1}"
				}]
				}
			</restapi>
		</step>
		<step name="create.user.profile.1">
			<restapi name="createUserProfile">
				{
				"jsonType" : "user-profile",
				"ownerId" : ${owner.id},
				"name" : "Aerohive_UserProfile1",
				"predefined" : false,
				"vlan" : {
				"jsonType" : "vlan",
				"ownerId" : ${owner.id},
				"name" : "Aerohive_VlanProfile",
				"description" : "Vlan Profile for Demo",
				"predefined" : false,
				"entries" : [ {
				"ownerId" : ${owner.id},
				"tags" : [ ],
				"vlanNumber" : 1
				} ]
				},
				"enableFirewall" : false,
				"enableSchedule" : false,
				"schedules" : [ ],
				"enableTrafficTunneling" : false,
				"enableClientSla" : false,
				"enableQos" : false,
				"restriction" : "DENY_CAR",
				"enableClassification" : false,
				"clientSlaSettings": {
                    "ownerId": 104,
                    "predefined": false,
                    "bandwidth": 141721,
                     "actionType": "NONE"
                   }
				}
            </restapi>
		</step>
		<step name="create.ssid.profile.1">
			<desc>
				this is an example with reference to other test step
        	</desc>
			<restapi name="createSsidProfile">
				{
				"jsonType" : "ssid-profile",
				"ownerId" : 102,
				"name" : "Cloud-ssid",
				"ssid" : "Cloud-ssid",
				"description" :"This is a ssid profile for integration test",
				"radioBand" : "DUAL",
				"industry" : "ENTERPRISE",
				"wirelessNetworkUsage" :"STAFF_AND_TEACHERS",
				"accessSecurity": {
				"jsonType": "802DOT1X",
				"ownerId": 102,
				"keyManagement": "WEP_8021X",
				"encryptionMethod":
				"CCMP",
				"keyType": "HEX",
				"keyValue":
				"gzCoghUgcL115BMiddQxCWAdn7xk0fqy6S7ExRNP3pKC46ID5p63N2IUpgQ1wPQB"
				},
				"defaultUserProfile" :"@{create.user.profile.1}",
				"advancedSettings": {
				"ownerId":
				${owner.id},
				"predefined": false,
				"userProfileApplicationSequence":
				"CWP_SSID_MAC",
				"ignoreBroadcastProbeReq": true,
				"veEnableVoiceEnterprise": true,
				"veEnable802Dot11k": false,
				"veEnable802Dot11v": false,
				"veEnable802Dot11r": true,
				"wmmEnableWmm": false,
				"wmmEnableWmmVideo": false,
				"wmmEnableWmmVoice": false,
				"wmmEnableUapsd": false,
				"multicastConvertIpToUnicast": "DISABLE",
				"multicastChannelUtilThreshold":100,
				"multicastMemberCountThreshold":3,
				"clientMaxClientLimit":5,
				"clientEapTimeout":187,
				"clientRtsThreshold":1769,
				"clientFragmentThreshold":353,
				"clientDtimSetting":223,
				"clientInactiveClientAgeout":8,
				"clientEapRetries":4,
				"clientRoamCacheUpdateInterval":196,
				"clientRoamCacheAgeout":440,
				"clientLocalCacheTimeout":5714
				},
				"rateSettings":
				{
				"ownerId":
				${owner.id},
				"predefined": false,
				"enable11a": true,
				"enable11bg":
				true,
				"enable11n": true,
				"enable11ac":
				true,
				"disable11nHighCapabilities": true,
				"rateSet11a":["BASIC", "BASIC", "BASIC", "OPTIONAL", "OPTIONAL", "OPTIONAL", "NA", "NA"],
				"rateSet11bg":["BASIC", "BASIC", "BASIC", "BASIC","OPTIONAL", "OPTIONAL", "OPTIONAL", "OPTIONAL","NA", "NA", "NA", "NA"],
				"rateSet11n":["BASIC", "BASIC", "BASIC", "BASIC","OPTIONAL", "OPTIONAL", "OPTIONAL", "OPTIONAL","NA", "NA", "NA", "NA","BASIC","BASIC", "BASIC","BASIC","OPTIONAL", "OPTIONAL", "OPTIONAL", "OPTIONAL","NA", "NA", "NA", "NA"],
				"enableStreamOne": true,
				"enableStreamTwo": true,
				"enableStreamThree":
				true,
				"mcsValueOne": 9,
				"mcsValueTwo": 9,
				"mcsValueThree": 9
				},
				"trafficFilter":"@{create.traffic.filter}",
				"ipBasedDos":"@{create.ip.dos.prevention}",
				"ssidBasedMacDos":"@{create.mac.dos.prevention.1}",
				"stationBasedMacDos":"@{create.mac.dos.prevention.2}",
				"externalRadiusProfile":"@{create.external.radius.profile.1}",
				"advancedAccessSecurity":
				{
				"ownerId":${owner.id},
				"predefined":false,
				"gtkRekeyPeriod":4124,
				"gtkTimeout":679,
				"gtkRetries":10,
				"ptkRekeyPeriod":49523,
				"ptkTimeout":811,
				"ptkRetries":3,
				"gmkRekeyPeriod":1603482,
				"replayWindow":10,
				"nonStrict":true,
				"reauthInterval":57688,
				"enablePreauthentication":false,
				"enableProactivePmkIdResponse":true,
				"localTkipCountermeasure":false,
				"remoteTkipCountermeasure":false,
				"enable802Dot11w":true,
				"useOf802Dot11w":"MANDATORY",
				"enableBroadcastOrMulticastIntegrityProtocol":false,
				"enableGmkRekeyPeriod":true,
				"enableGtkRekeyPeriod":true,
				"enablePtkRekeyPeriod":false,
				"enableReauthInterval":false
				}
				}
			</restapi>
		</step>
		<step name="create.network.policy.1">
			<restapi name="createNetworkPolicy">
				{
				"ownerId" : ${owner.id},
				"name" : "Aerohive_UserProfile1",
				"jsonType": "network-policy",
				"type" : "NetworkAccessAndSwitching"
				}
            </restapi>
		</step>
	<step name="add.ssid.profile.1.into.network.policy.1">
			<restapi name="assignfeature">
				{
				"jsonType" : "network_policy",
				"networkPolicyId" : "@{create.network.policy.1}",
				"featureId" : "@{create.ssid.profile.1}"
				}
            </restapi>
		</step>
		<step name="assign.network.policy.1.to.device.1">
			<restapi name="assignnetworkpolicy">
				{
				"device" :"@{create.device.1.ap330.v6102.as.ap}",
				"networkPolicy" :"@{create.network.policy.1}"
				}
            </restapi>
		</step>

		<step name="download.cli.to.device.1">
			<restapi name="downloadcli">
				{
				"networkPolicyId" : "@{create.network.policy.1}",
				"deviceIds" : [ "@{create.device.1.ap330.v6102.as.ap}"],
				"configDownloadTypes" : ["deviceFull"]
				}
            </restapi>
		</step>
	</declaration>
	<stage>
		<step no="1">
			<call step="add.ssid.profile.1.into.network.policy.1" />
		</step>
		<step no="2">
			<call step="assign.network.policy.1.to.device.1" />
		</step>
		<step no="3">0
			<call step="download.cli.to.device.1" />
		</step>
		<step no="4">
			<ssh target="${tb.fileserver}" user="root">
				-v "cat
				/var/data/fileserver/configuration/${owner.id}/${ap.mac}-deviceFull.config"
			</ssh>
			<log-match>-i "security-object Cloud-ssid"</log-match>
			<log-match>-i "security-object Cloud-ssid security aaa radius-server primary radius.aerohive.com shared-secret"</log-match>
			<log-match>-i "security-object Cloud-ssid security aaa radius-server primary radius.aerohive.com auth-port 1812"</log-match>
			<log-match>-i "security-object Cloud-ssid security aaa radius-server accounting primary radius.aerohive.com shared-secret"</log-match>
			<log-match>-i "security-object Cloud-ssid security aaa radius-server accounting primary radius.aerohive.com acct-port 1813"</log-match>
			<log-match>-i "security-object Cloud-ssid user-profile-allowed all"</log-match>
		</step>
	</stage>
	<failed-process />
</testcase>