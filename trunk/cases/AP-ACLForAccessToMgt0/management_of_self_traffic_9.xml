<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check only specifical user can use telnet/ssh/ping/snmp function by hive.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-Manager IP is on default setup

		Test Procedure:
		-Enable the telnet/ssh/ping/snmp/all and specify a particular IP addr
		and netmask on the wifi1.
		-Associate a computer1 to the mp1 (the computer1 addr is within
		the range of the netmask ).
		-telnet/ssh/ping/snmp the mp1 which can get the result 1.
		-Change the computer1 IP (out of the range of the netmask ). and
		telnet/ssh/ping/snmp the mp1 which can get the result2.
		-Disable the manager ip and telnet/ssh/ping/snmp the mp1 which
		can get the result 1.
		- enable/disable management all can take effect.
		- Shutdown, no shutdown the wifi1, the configuration is still efficient.
		- Restart the box, the configuration is still efficient.
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>		

		<step no="0.1">
			<desc>
				shutdown interface eth1
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="1">
			<desc>
				-config hive on ap1
			</desc>
			<console target="ap1">
				-v "console page 0"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 36"
			</console>
		</step>

		<step no="2">
			<desc>
				-config hive on ap2
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 36"
			</telnet>
		</step>

		<step no="3">
			<desc>
				show ap2's interface wifi1 info
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="3.1">
			<desc>
				get ap2's wifi1's mac address
			</desc>
			<setvar name="ap2_wifi1_mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i wifi1 -o aero -m -width
			</setvar>
		</step>
		
		<step no="3.2">
			<desc>
				show ap1's interface wifi1 info
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<console target="ap1">
				-v "show interface wifi1"
			</console>
		</step>

		<step no="3.3">
			<desc>
				get ap1's wifi1's mac address
			</desc>
			<setvar name="ap1_wifi1_mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i wifi1 -o aero -m -width 2
			</setvar>
		</step>
	
		<step no="4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step4_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>
		

	        <step no="4.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step4.1_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap2" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				-shutdown ap1's eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="7">
			<desc>
				-Enable the telnet/ssh/ping/snmp/all and specify a particular IP addr
				and netmask on the wifi1.
			</desc>
			<console target="ap1">
				-v "hive ${hive.name} manage all"
				-v "admin manager-ip ${mpc.tif.ip}/32"
			</console>
		</step>

		<step no="8">
			<desc>
				-show snmp info
			</desc>
			<log-file>step8_show_snmp_info.log</log-file>
			<console target="ap1">
				-v "show snmp"
			</console>
		</step>

		<step no="8.1">
			<desc>
				get snmp contact info
			</desc>
			<setvar name="ap1.snmp.contact">
				${bin.dir}/getbyrexp.py -p "Syscontact:\s*(\S+)\s*" -t str -f ${log.dir}/step8_show_snmp_info.log
			</setvar>
		</step>

		<step no="within.netmask.manage.all.1">
			<desc>
				-ssh the mp1 which can get the result 1.
			</desc>
			<log-file>within.netmask.manage.all.1_ssh_ap1.log</log-file>
			<ssh target="ap1">
				-v "show admin active"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="within.netmask.manage.all.2">
			<desc>
				-telnet the mp1 which can get the result 1.
			</desc>
			<log-file>within.netmask.manage.all.2_telnet_ap1.log</log-file>
			<telnet target="ap1">
				-v "show admin active"
			</telnet>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="within.netmask.manage.all.3">
			<desc>
				-ping the mp1 which can get the result 1.
			</desc>
			<log-file>within.netmask.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="500">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
		</step>

		<step no="within.netmask.manage.all.3.1">
			<desc>
				check ping result
			</desc>
			<log-file>within.netmask.manage.all.3.1_ping_result.log</log-file>
			<script>
				${bin.dir}/getbyrexp.py -p ",\s*(\d+)% packet loss" -f ${log.dir}/within.netmask.manage.all.3_ping_ap1.log --script "int(m.group(1))&lt;=50" > ${log.dir}/${log.file}
			</script>
			<log-match>-e "True"</log-match>
		</step>

		<step no="within.netmask.manage.all.4">
			<desc>
				--snmp the mp1 which can get the result 1.
			</desc>
			<log-file>within.netmask.manage.all.4_snmp_ap1.log</log-file>
			<script>
			    snmpget -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4.0 > ${log.dir}/${log.file}
			</script>
			<log-match>-e "SNMPv2-MIB::sysContact.0 = STRING: ${ap1.snmp.contact}"</log-match>
		</step>

		<step no="9">
			<desc>
				-open debug mode
			</desc>
			<console target="ap1">
				-v "_ff dst-port 22 bidirectional"
				-v "_ff dst-port 23 bidirectional"
				-v "_ff dst-port 161 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
		</step>

		<step no="9.1">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="without.netmask.manage.all.1">
			<desc>
				-Change the computer2 IP (out of the range of the netmask ).
				ssh mp and check the result
			</desc>
			<log-file>without.netmask.manage.all.1_ssh_ap1.log</log-file>
			<ssh host="${tb.server1}" timeout="500">
				-v "ssh admin@${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "connect to host ${ap1.mgt0.ip} port 22: Connection timed out"</log-match>
		</step>

		<step no="without.netmask.manage.all.1.1">
			<desc>
				show logging buffered
			</desc>
			<log-file>without.netmask.manage.all.1.1_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "src-ip ${tb.server1} not allowed to connect to device"</log-match>
		</step>

		<step no="without.netmask.manage.all.2">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="without.netmask.manage.all.2.1">
			<desc>
				-Change the computer2 IP (out of the range of the netmask ).
				telnet mp and check the result
			</desc>
			<log-file>without.netmask.manage.all.2.1_telnet_ap1.log</log-file>
			<ssh host="${tb.server1}" timeout="500">
				-v "telnet ${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "telnet: connect to address ${ap1.mgt0.ip}: Connection timed out"</log-match>
		</step>

		<step no="without.netmask.manage.all.2.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>without.netmask.manage.all.2.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "src-ip ${tb.server1} not allowed to connect to device"</log-match>
		</step>

		<step no="without.netmask.manage.all.3">
			<desc>
				-Change the computer2 IP (out of the range of the netmask ).
				ping mp and check the result
			</desc>
			<log-file>without.netmask.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${tb.server1}" timeout="500">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
			<log-match>-e "100% packet loss"</log-match>
		</step>

		<step no="without.netmask.manage.all.4">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="without.netmask.manage.all.4.1">
			<desc>
				-Change the computer2 IP (out of the range of the netmask ).
				snmp mp and check the result
			</desc>
			<log-file>without.netmask.manage.all.4.1_snmp_ap1.log</log-file>
			<ssh host="${tb.server1}" timeout="500">
				-v "snmpget -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4.0"
			</ssh>
			<log-match>-e "Timeout: No Response from ${ap1.mgt0.ip}"</log-match>
		</step>

		<step no="without.netmask.manage.all.4.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>without.netmask.manage.all.4.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered | in src-ip" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "src-ip ${tb.server1} not allowed to connect to device"</log-match>
		</step>

		<step no="10">
			<desc>
				-Disable the manager ip and telnet/ssh/ping/snmp the mp which
				can get the result 1.
			</desc>
			<telnet target="ap1">
				-v "no admin manager-ip ${mpc.tif.ip}/32"
			</telnet>
		</step>

		<step no="11">
			<desc>
				delete tmp files
			</desc>
			<ssh host="${tb.server1}">
				-v "rm -f /tmp/remove.manage.ip.1_ssh_ap1.log"
				-v "rm -f /tmp/remove.manage.ip.2_telnet_ap1.log"
			</ssh>
		</step>

		<step no="remove.manage.ip.1">
			<desc>
				ssh mp1 and check the result
			</desc>
			<ssh host="${tb.server1}" prompt='root@.*~.*#'>
				-v 'rm -rf /root/.ssh/known_hosts'
				-v 'echo "clicfg.pl -i 22 -o 60 -d ${ap1.mgt0.ip} -u ${ap.def.user} -p ${ap.def.passwd} -m ${ap.def.prompt} -n -z remove.manage.ip.1_ssh_ap1.log -l /tmp/ -v \"show admin active\"" > /tmp/tmp.sh'
				-v 'sh /tmp/tmp.sh'
				-v 'sleep 20'
				-v ''
			</ssh>
		</step>

		<step no="remove.manage.ip.1.1">
			<desc>
				- check the result of ssh mp1
			</desc>
			<log-file>remove.manage.ip.1.1_check_result.log</log-file>
			<ssh host="${tb.server1}">
				-v "cat /tmp/remove.manage.ip.1_ssh_ap1.log"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="remove.manage.ip.2">
			<desc>
				telnet mp1 and check the result
			</desc>
			<ssh host="${tb.server1}" prompt='root@.*~.*#'>
				-v 'rm -rf /root/.ssh/known_hosts'
				-v 'echo "clicfg.pl -i 23 -o 60 -d ${ap1.mgt0.ip} -u ${ap.def.user} -p ${ap.def.passwd} -m ${ap.def.prompt} -n -z remove.manage.ip.2_telnet_ap1.log -l /tmp/ -v \"show admin active\"" > /tmp/tmp.sh'
				-v 'sh /tmp/tmp.sh'
				-v 'sleep 20'
				-v ''
			</ssh>
		</step>

		<step no="remove.manage.ip.2.1">
			<desc>
				- check the result of telnet mp1
			</desc>
			<log-file>remove.manage.ip.2.1_check_result.log</log-file>
			<ssh host="${tb.server1}">
				-v "cat /tmp/remove.manage.ip.2_telnet_ap1.log"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="remove.manage.ip.3">
			<desc>
				ping mp1 and check the result
			</desc>
			<log-file>remove.manage.ip.3_ping_ap1.log</log-file>
			<ssh host="${tb.server1}" timeout="500">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
		</step>

		<step no="remove.manage.ip.3.1">
			<desc>
				check ping result
			</desc>
			<log-file>remove.manage.ip.3.1_ping_result.log</log-file>
			<script>
				${bin.dir}/getbyrexp.py -p ",\s*(\d+)% packet loss" -f ${log.dir}/remove.manage.ip.3_ping_ap1.log --script "int(m.group(1))&lt;=50" > ${log.dir}/${log.file}
			</script>
			<log-match>-e "True"</log-match>
		</step>

		<step no="remove.manage.ip.4">
			<desc>
				snmp mp1 and check the result
			</desc>
			<log-file>remove.manage.ip.4_snmp_ap1.log</log-file>
			<ssh host="${tb.server1}" timeout="500">
				-v "snmpget -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4.0"
			</ssh>
			<log-match>-e "SNMPv2-MIB::sysContact.0 = STRING: ${ap1.snmp.contact}"</log-match>
		</step>

		<step no="12">
			<desc>
				-Disable the telnet/ssh/ping/snmp/all on the hive.
			</desc>
			<console target="ap1">
				-v "no hive ${hive.name} manage all"
			</console>
		</step>

		<step no="12.1">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="disable.manage.all.1">
			<desc>
				Use the computer2 to ssh the mp1 which can get the result 2.
			</desc>
			<log-file>disable.manage.all.1_ssh_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ssh admin@${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "connect to host ${ap1.mgt0.ip} port 22: Connection timed out"</log-match>
		</step>

		<step no="disable.manage.all.1.1">
			<desc>
				show logging buffered.
			</desc>
			<log-file>disable.manage.all.1.1_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "ssh not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="disable.manage.all.2">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="disable.manage.all.2.1">
			<desc>
				Use the computer2 to telnet the mp1 which can get the result 2.
			</desc>
			<log-file>disable.manage.all.2.1_telnet_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "telnet ${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "telnet: connect to address ${ap1.mgt0.ip}: Connection timed out"</log-match>
		</step>

		<step no="disable.manage.all.2.2">
			<desc>
				show logging buffered.
			</desc>
			<log-file>disable.manage.all.2.2_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "telnet not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="disable.manage.all.3">
			<desc>
				Use the computer2 to ping the mp1 which can get the result 2.
			</desc>
			<log-file>disable.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
			<log-match>-e "100% packet loss"</log-match>
		</step>

		<step no="disable.manage.all.4">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="disable.manage.all.4.1">
			<desc>
				Use the computer2 to snmp the mp1 which can get the result 2.
			</desc>
			<log-file>disable.manage.all.4.1_snmp_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "snmpwalk -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4"
			</ssh>
			<log-match>-e "Timeout: No Response from ${ap1.mgt0.ip}"</log-match>
		</step>

		<step no="disable.manage.all.4.2">
			<desc>
				show logging buffered.
			</desc>
			<log-file>disable.manage.all.4.2_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "snmp not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="13">
			<desc>
				-Shutdown wifi1
			</desc>
			<console target="ap1">
				-v "interface wifi1 hive ${hive.name} shutdown"
			</console>
		</step>

		<step no="13.1" delay="5">
			<desc>
				-no Shutdown the wifi1
			</desc>
			<console target="ap1">
				-v "no interface wifi1 hive ${hive.name} shutdown"
			</console>
		</step>

	        <step no="13.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step13.2_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>
		

	        <step no="13.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step13.3_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="13.4">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="down-up.wifi1.disable.manage.all.1">
			<desc>
				Use the computer2 to ssh the mp1 which can get the result 2.
			</desc>
			<log-file>down-up.wifi1.disable.manage.all.1_ssh_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ssh admin@${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "connect to host ${ap1.mgt0.ip} port 22: Connection timed out"</log-match>
		</step>

		<step no="down-up.wifi1.disable.manage.all.1.1">
			<desc>
				show logging buffered.
			</desc>
			<log-file>down-up.wifi1.disable.manage.all.1.1_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered | in drop" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "ssh not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="down-up.wifi1.disable.manage.all.2">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="down-up.wifi1.disable.manage.all.2.1">
			<desc>
				Use the computer2 to telnet the mp1 which can get the result 2.
			</desc>
			<log-file>down-up.wifi1.disable.manage.all.2.1_telnet_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "telnet ${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "telnet: connect to address ${ap1.mgt0.ip}: Connection timed out"</log-match>
		</step>

		<step no="down-up.wifi1.disable.manage.all.2.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>down-up.wifi1.disable.manage.all.2.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "telnet not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="down-up.wifi1.disable.manage.all.3">
			<desc>
				Use the computer2 to ping the mp1 which can get the result 2.
			</desc>
			<log-file>down-up.wifi1.disable.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
			<log-match>-e "100% packet loss"</log-match>
		</step>

		<step no="down-up.wifi1.disable.manage.all.4">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="down-up.wifi1.disable.manage.all.4.1">
			<desc>
				Use the computer2 to snmp the mp1 which can get the result 2.
			</desc>
			<log-file>down-up.wifi1.disable.manage.all.4.1_snmp_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "snmpwalk -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4"
			</ssh>
			<log-match>-e "Timeout: No Response from ${ap1.mgt0.ip}"</log-match>
		</step>

		<step no="down-up.wifi1.disable.manage.all.4.2">
			<desc>
				show logging buffered.
			</desc>
			<log-file>down-up.wifi1.disable.manage.all.4.2_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "snmp not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="14">
			<desc>
				-Restart the box
			</desc>
			<console target="ap1">
				-v "save config"
				-v "reboot"
			</console>
		</step>

		<step no="14.1">
			<desc>
				-open debug mode
			</desc>
			<console target="ap1">
				-v "_ff dst-port 22 bidirectional"
				-v "_ff dst-port 23 bidirectional"
				-v "_ff dst-port 161 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
		</step>

		<step no="14.2">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="14.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step14.3_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>
		

	        <step no="14.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step14.4_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap2" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="14.5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step14.5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="reboot.disable.manage.all.1">
			<desc>
				Use the computer2 to ssh the mp1 which can get the result 2.
			</desc>
			<log-file>reboot.disable.manage.all.1_ssh_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ssh admin@${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "connect to host ${ap1.mgt0.ip} port 22: Connection timed out"</log-match>
		</step>

		<step no="reboot.disable.manage.all.1.1">
			<desc>
				show logging buffered.
			</desc>
			<log-file>reboot.disable.manage.all.1.1_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "ssh not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="reboot.disable.manage.all.2">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="reboot.disable.manage.all.2.1">
			<desc>
				Use the computer2 to telnet the mp1 which can get the result 2.
			</desc>
			<log-file>reboot.disable.manage.all.2.1_telnet_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "telnet ${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "telnet: connect to address ${ap1.mgt0.ip}: Connection timed out"</log-match>
		</step>

		<step no="reboot.disable.manage.all.2.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>reboot.disable.manage.all.2.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "telnet not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="reboot.disable.manage.all.3">
			<desc>
				Use the computer2 to ping the mp1 which can get the result 2.
			</desc>
			<log-file>reboot.disable.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
			<log-match>-e "100% packet loss"</log-match>
		</step>

		<step no="reboot.disable.manage.all.4">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="reboot.disable.manage.all.4.1">
			<desc>
				Use the computer2 to snmp the mp1 which can get the result 2.
			</desc>
			<log-file>reboot.disable.manage.all.4.1_snmp_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "snmpwalk -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4"
			</ssh>
			<log-match>-e "Timeout: No Response from ${ap1.mgt0.ip}"</log-match>
		</step>

		<step no="reboot.disable.manage.all.4.2">
			<desc>
				show logging buffered.
			</desc>
			<log-file>reboot.disable.manage.all.4.2_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "snmp not enabled on wifi1.1, drop pkt"</log-match>
		</step>

		<step no="15">
			<desc>
				-enable the telnet/ssh/ping/snmp/all on the hive
			</desc>
			<console target="ap1">
				-v "hive ${hive.name} manage all"
			</console>
		</step>

		<step no="enable.manage.all.1">
			<desc>
				Use the computer2 to ssh the mp1 which can get the result 1.
			</desc>
			<log-file>enable.manage.all.1_ssh_ap1.log</log-file>
			<ssh target="ap1">
				-v "show admin active"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="enable.manage.all.2">
			<desc>
				Use the computer2 to telnet the mp1 which can get the result 1.
			</desc>
			<log-file>enable.manage.all.2_telnet_ap1.log</log-file>
			<telnet target="ap1">
				-v "show admin active"
			</telnet>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="enable.manage.all.3">
			<desc>
				Use the computer2 to ping the mp1 which can get the result 1.
			</desc>
			<log-file>enable.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
		</step>

		<step no="enable.manage.all.3.1">
			<desc>
				check ping result
			</desc>
			<log-file>enable.manage.all.3.1_ping_result.log</log-file>
			<script>
				${bin.dir}/getbyrexp.py -p ",\s*(\d+)% packet loss" -f ${log.dir}/enable.manage.all.3_ping_ap1.log --script "int(m.group(1))&lt;=50" > ${log.dir}/${log.file}
			</script>
			<log-match>-e "True"</log-match>
		</step>

		<step no="enable.manage.all.4">
			<desc>
				Use the computer2 to snmp the mp1 which can get the result 1.
			</desc>
			<log-file>enable.manage.all.4_snmp_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "snmpwalk -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4"
			</ssh>
			<log-match>-e "SNMPv2-MIB::sysContact.0 = STRING: ${ap1.snmp.contact}"</log-match>
		</step>

		<step no="16">
			<desc>
				-Shutdown the wifi1
			</desc>
			<console target="ap1">
				-v "interface wifi1 hive ${hive.name} shutdown"
			</console>
		</step>

		<step no="16.1" delay="5">
			<desc>
				-no Shutdown the wifi1
			</desc>
			<console target="ap1">
				-v "no interface wifi1 hive ${hive.name} shutdown"
			</console>
		</step>

	        <step no="16.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step16.2_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>
		

	        <step no="16.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step16.3_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="16.4" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step16.4_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="down-up.wifi1.enable.manage.all.1">
			<desc>
				Use the computer2 to ssh the mp1 which can get the result 1.
			</desc>
			<log-file>down-up.wifi1.enable.manage.all.1_ssh_ap1.log</log-file>
			<ssh target="ap1">
				-v "show admin active"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="down-up.wifi1.enable.manage.all.2">
			<desc>
				Use the computer2 to telnet the mp1 which can get the result 1.
			</desc>
			<log-file>down-up.wifi1.enable.manage.all.2_telnet_ap1.log</log-file>
			<ssh target="ap1">
				-v "show admin active"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="down-up.wifi1.enable.manage.all.3">
			<desc>
				Use the computer2 to ping the mp1 which can get the result 1.
			</desc>
			<log-file>down-up.wifi1.enable.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
		</step>

		<step no="down-up.wifi1.enable.manage.all.3.1">
			<desc>
				check ping result
			</desc>
			<log-file>down-up.wifi1.enable.manage.all.3.1_ping_result.log</log-file>
			<script>
				${bin.dir}/getbyrexp.py -p ",\s*(\d+)% packet loss" -f ${log.dir}/down-up.wifi1.enable.manage.all.3_ping_ap1.log --script "int(m.group(1))&lt;=50" > ${log.dir}/${log.file}
			</script>
		</step>

		<step no="down-up.wifi1.enable.manage.all.4">
			<desc>
				Use the computer2 to snmp the mp1 which can get the result 1.
			</desc>
			<log-file>down-up.wifi1.enable.manage.all.4_snmp_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "snmpwalk -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4"
			</ssh>
			<log-match>-e "SNMPv2-MIB::sysContact.0 = STRING: ${ap1.snmp.contact}"</log-match>
		</step>

		<step no="17">
			<desc>
				-Restart the box
			</desc>
			<console target="ap1">
				-v "save config"
				-v "reboot"
			</console>
		</step>		
            <desc>
				-open debug mode
			</desc>
			<console target="ap1">
				-v "_ff dst-port 22 bidirectional"
				-v "_ff dst-port 23 bidirectional"
				-v "_ff dst-port 161 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
	        <step no="17.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step17.1_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>
		

	        <step no="17.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step17.2_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap2" timeout="180" slow="5">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "show acsp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="17.3" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step17.3_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="reboot.enable.manage.all.1">
			<desc>
				Use the computer2 to ssh the mp1 which can get the result 1.
			</desc>
			<log-file>reboot.enable.manage.all.1_ssh_ap1.log</log-file>
			<ssh target="ap1">
				-v "show admin active"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="reboot.enable.manage.all.2">
			<desc>
				Use the computer2 to telnet the mp1 which can get the result 1.
			</desc>
			<log-file>reboot.enable.manage.all.2_telnet_ap1.log</log-file>
			<ssh target="ap1">
				-v "show admin active"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
		</step>

		<step no="reboot.enable.manage.all.3">
			<desc>
				Use the computer2 to ping the mp1 which can get the result 1.
			</desc>
			<log-file>reboot.enable.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
		</step>

		<step no="reboot.enable.manage.all.3.1">
			<desc>
				check ping result
			</desc>
			<log-file>reboot.enable.manage.all.3.1_ping_result.log</log-file>
			<script>
				${bin.dir}/getbyrexp.py -p ",\s*(\d+)% packet loss" -f ${log.dir}/reboot.enable.manage.all.3_ping_ap1.log --script "int(m.group(1))&lt;=50" > ${log.dir}/${log.file}
			</script>
			<log-match>-e "True"</log-match>
		</step>

		<step no="reboot.enable.manage.all.4">
			<desc>
				Use the computer2 to snmp the mp1 which can get the result 1.
			</desc>
			<log-file>reboot.enable.manage.all.4_snmp_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="300">
				-v "snmpwalk -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4"
			</ssh>
			<log-match>-e "SNMPv2-MIB::sysContact.0 = STRING: ${ap1.snmp.contact}"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<step no="0">
				<desc>
					delete tmp files
				</desc>
				<ssh host="${tb.server1}">
					-v "rm -f /tmp/tmp.sh"
					-v "rm -f /tmp/remove.manage.ip.1_ssh_ap1.log"
					-v "rm -f /tmp/remove.manage.ip.2_telnet_ap1.log"
				</ssh>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>