<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check that console/ssh/ping/snmp/all is forbidden when disable console/ssh/ping/snmp/all by hive.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-Manager IP is on default setup

		Test Procedure:
		-Disable the telnet/ssh/ping/snmp/all on the hive of MP, use the PC to telnet/ssh/ping/snmp the portal1 which can get the result 1.
		-enable the telnet/ssh/ping/snmp/all on the hive of MP, use PC to telnet/ssh/ping/snmp the MP which can get the result 2
		-Set admin manager-ip make which same subnet with PC or different subnet, from PC ping/telnet/ssh/snmp MP
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="0">
			<desc>
				reset config
			</desc>
			<console target="ap1">
				-v "reset config"
			</console>
		</step>

		<step no="0.1">
			<desc>
				shutdown interface eth1
			</desc>
			<if>"${img.prodtype}" != "AP120"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="1">
			<desc>
				-config hive on ap1
			</desc>
			<console target="ap1">
				-v "console page 0"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 36"
			</console>
		</step>

		<step no="2">
			<desc>
				-config hive on ap2
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 36"
			</telnet>
		</step>

		<step no="3">
			<desc>
				show ap2's interface wifi1 info
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="3.1">
			<desc>
				get ap2's wifi1's mac address
			</desc>
			<setvar name="ap2_wifi1_mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i wifi1 -o aero -m -width 2
			</setvar>
		</step>

		<step no="4" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<log-file>step4_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				-shutdown ap1's eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="7">
			<desc>
				-show snmp info
			</desc>
			<log-file>step7_show_snmp_info.log</log-file>
			<console target="ap1">
				-v "show snmp"
			</console>
		</step>

		<step no="7.1">
			<desc>
				get snmp contact info
			</desc>
			<setvar name="ap1.snmp.contact">
				${bin.dir}/getbyrexp.py -p "Syscontact:\s*(\S+)\s*" -t str -f ${log.dir}/step7_show_snmp_info.log
			</setvar>
		</step>

		<step no="8">
			<desc>
				- Disable the telnet/ssh/ping/snmp/all on mp1.
			</desc>
			<console target="ap1">
				-v "no hive ${hive.name} manage all"
			</console>
		</step>

		<step no="9">
			<desc>
				-open debug mode
			</desc>
			<console target="ap1">
				-v "_ff dst-port 22 bidirectional"
				-v "_ff dst-port 23 bidirectional"
				-v "_ff dst-port 161 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
		</step>

		<step no="9.1">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="disable.hive.manage.all.1">
			<desc>
				Use the computer2 to ssh the mp1 which can get the result 1.
			</desc>
			<log-file>disable.hive.manage.all.1_ssh_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "ssh admin@${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "connect to host ${ap1.mgt0.ip} port 22: Connection timed out"</log-match>
			<failed>next</failed>
		</step>

		<step no="disable.hive.manage.all.1.1">
			<desc>
				show logging buffered.
			</desc>
			<log-file>disable.hive.manage.all.1.1_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "ssh not enabled on wifi1.1, drop pkt"</log-match>
			<failed>next</failed>
		</step>

		<step no="disable.hive.manage.all.2">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="disable.hive.manage.all.2.1">
			<desc>
				Use the computer2 to telnet the mp1 which can get the result 1.
			</desc>
			<log-file>disable.hive.manage.all.2.1_telnet_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "telnet ${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "telnet: connect to address ${ap1.mgt0.ip}: Connection timed out"</log-match>
			<failed>next</failed>
		</step>

		<step no="disable.hive.manage.all.2.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>disable.hive.manage.all.2.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "telnet not enabled on wifi1.1, drop pkt"</log-match>
			<failed>next</failed>
		</step>

		<step no="disable.hive.manage.all.3">
			<desc>
				Use the computer2 to ping the mp1 which can get the result 1.
			</desc>
			<log-file>disable.hive.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
			<log-match>-e "100% packet loss"</log-match>
			<failed>next</failed>
		</step>

		<step no="disable.hive.manage.all.4">
			<desc>
				-clear log all.
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="disable.hive.manage.all.4.1">
			<desc>
				Use the computer2 to snmp the mp1 which can get the result 1.
			</desc>
			<log-file>disable.hive.manage.all.4.1_snmp_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "snmpwalk -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4"
			</ssh>
			<log-match>-e "Timeout: No Response from ${ap1.mgt0.ip}"</log-match>
			<failed>next</failed>
		</step>

		<step no="disable.hive.manage.all.4.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>disable.hive.manage.all.4.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "snmp not enabled on wifi1.1, drop pkt"</log-match>
			<failed>next</failed>
		</step>

		<step no="10">
			<desc>
				- enable management all on mp1.
			</desc>
			<console target="ap1">
				-v "hive ${hive.name} manage all"
			</console>
		</step>

		<step no="enable.hive.manage.all.1">
			<desc>
				Use the computer2 to ssh the mp1 which can get the result 2.
			</desc>
			<log-file>enable.hive.manage.all.1_ssh_ap1.log</log-file>
			<ssh target="ap1">
				-v "show admin active"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
			<failed>next</failed>
		</step>

		<step no="enable.hive.manage.all.2">
			<desc>
				Use the computer2 to telnet the mp1 which can get the result 2.
			</desc>
			<log-file>enable.hive.manage.all.2_telnet_ap1.log</log-file>
			<telnet target="ap1">
				-v "show admin active"
			</telnet>
			<log-match>-e "admin" -i "pts"</log-match>
			<failed>next</failed>
		</step>

		<step no="enable.hive.manage.all.3">
			<desc>
				Use the computer2 to ping the mp1 which can get the result 2.
			</desc>
			<log-file>enable.hive.manage.all.3_ping_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
			<failed>next</failed>
		</step>

		<step no="enable.hive.manage.all.3.1">
			<desc>
				check ping result
			</desc>
			<log-file>enable.hive.manage.all.3.1_ping_result.log</log-file>
			<script>
				${bin.dir}/getbyrexp.py -p ",\s*(\d+)% packet loss" -f ${log.dir}/enable.hive.manage.all.3_ping_ap1.log --script "int(m.group(1))&lt;=20" > ${log.dir}/${log.file}
			</script>
			<log-match>-e "True"</log-match>
		</step>

		<step no="enable.hive.manage.all.4">
			<desc>
				Use the computer2 to snmp the mp1 which can get the result 2.
			</desc>
			<log-file>enable.hive.manage.all.4_snmp_ap1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "snmpwalk -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4"
			</ssh>
			<log-match>-e "SNMPv2-MIB::sysContact.0 = STRING: ${ap1.snmp.contact}"</log-match>
			<failed>next</failed>
		</step>

		<step no="11">
			<desc>
				- specify a particular IP addr and netmask on mp1 (pc within netmask).
			</desc>
			<console target="ap1">
				-v "admin manager-ip ${tb.vlan1.network}"
			</console>
		</step>

		<step no="within.netmask.hive.manage.all.1">
			<desc>
				ssh mp1 which can get the result 2
			</desc>
			<ssh target="ap1">
				-v "show admin active"
			</ssh>
			<log-match>-e "admin" -i "pts"</log-match>
			<failed>next</failed>
		</step>

		<step no="within.netmask.hive.manage.all.2">
			<desc>
				telnet mp1 which can get the result 2
			</desc>
			<telnet target="ap1">
				-v "show admin active"
			</telnet>
			<log-match>-e "admin" -i "pts"</log-match>
			<failed>next</failed>
		</step>

		<step no="within.netmask.hive.manage.all.3">
			<desc>
				ping mp1 which can get the result 2
			</desc>
			<log-file>within.netmask.hive.manage.all.3_ping_mp1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
			<failed>next</failed>
		</step>

		<step no="within.netmask.hive.manage.all.3.1">
			<desc>
				check ping result
			</desc>
			<log-file>within.netmask.hive.manage.all.3.1_ping_result.log</log-file>
			<script>
				${bin.dir}/getbyrexp.py -p ",\s*(\d+)% packet loss" -f ${log.dir}/within.netmask.hive.manage.all.3_ping_mp1.log --script "int(m.group(1))&lt;=20" > ${log.dir}/${log.file}
			</script>
			<log-match>-e "True"</log-match>
			<failed>next</failed>
		</step>

		<step no="within.netmask.hive.manage.all.4">
			<desc>
				snmp mp1 which can get the result 2
			</desc>
			<log-file>within.netmask.hive.manage.all.4_snmp_mp1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "snmpget -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4.0"
			</ssh>
			<log-match>-e "SNMPv2-MIB::sysContact.0 = STRING: ${ap1.snmp.contact}"</log-match>
			<failed>next</failed>
		</step>

		<step no="12">
			<desc>
				- specify a particular IP addr and netmask on mp1 (pc without netmask).
			</desc>
			<console target="ap1">
				-v "no admin manager-ip ${tb.vlan1.network}"
				-v "admin manager-ip ${tb.vlan2.network}"
			</console>
		</step>

		<step no="12.1">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="without.netmask.hive.manage.all.1">
			<desc>
				ssh mp1 which can get the result 1
			</desc>
			<log-file>without.netmask.hive.manage.all.1_ssh_mp1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "ssh admin@${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "connect to host ${ap1.mgt0.ip} port 22: Connection timed out"</log-match>
			<failed>next</failed>
		</step>

		<step no="without.netmask.hive.manage.all.1.1">
			<desc>
				show logging buffered
			</desc>
			<log-file>without.netmask.hive.manage.all.1.1_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "src-ip ${mpc.tif.ip} not allowed to connect to device"</log-match>
			<failed>next</failed>
		</step>

		<step no="without.netmask.hive.manage.all.2">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="without.netmask.hive.manage.all.2.1">
			<desc>
				telnet mp1 which can get the result 1
			</desc>
			<log-file>without.netmask.hive.manage.all.2.1_telnet_mp1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "telnet ${ap1.mgt0.ip}"
			</ssh>
			<log-match>-e "telnet: connect to address ${ap1.mgt0.ip}: Connection timed out"</log-match>
			<failed>next</failed>
		</step>

		<step no="without.netmask.hive.manage.all.2.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>without.netmask.hive.manage.all.2.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "src-ip ${mpc.tif.ip} not allowed to connect to device"</log-match>
			<failed>next</failed>
		</step>

		<step no="without.netmask.hive.manage.all.3">
			<desc>
				ping mp1 which can get the result 1
			</desc>
			<log-file>without.netmask.hive.manage.all.3_ping_mp1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "ping ${ap1.mgt0.ip} -c 5" ; exit 0
			</ssh>
			<log-match>-e "100% packet loss"</log-match>
			<failed>next</failed>
		</step>

		<step no="without.netmask.hive.manage.all.4">
			<desc>
				-clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="without.netmask.hive.manage.all.4.1">
			<desc>
				snmp mp1 which can get the result 1
			</desc>
			<log-file>without.netmask.hive.manage.all.4.1_snmp_mp1.log</log-file>
			<ssh host="${mpc.mif.ip}" timeout="600">
				-v "snmpget -v 2c ${ap1.mgt0.ip} -c hivecommunity .1.3.6.1.2.1.1.4.0"
			</ssh>
			<log-match>-e "Timeout: No Response from ${ap1.mgt0.ip}"</log-match>
			<failed>next</failed>
		</step>

		<step no="without.netmask.hive.manage.all.4.2">
			<desc>
				show logging buffered
			</desc>
			<log-file>without.netmask.hive.manage.all.4.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-e "src-ip ${mpc.tif.ip} not allowed to connect to device"</log-match>
			<failed>next</failed>
		</step>
	</stage>
</testcase>