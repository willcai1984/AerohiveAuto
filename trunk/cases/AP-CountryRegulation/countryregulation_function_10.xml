<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check channel setting when region code is set to 'fcc'. </brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1.set region code to world
		2.do some acsp and channel setting
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
    <step no="0">
			<desc>
				Set region code to fcc
				Set interface wifi0  mode access
				Set ssid ${ssid.name}-0 
				Set interface wifi0 ssid ${ssid.name}-0
			</desc>
			<console target="ap1" timeout="180">
				-v "boot-param region-code fcc"
				-v "reset config"
			</console>
		</step>
	
		<step no="1">
			<desc>
				Set region code to fcc
				Set interface wifi0  mode access
				Set ssid ${ssid.name}-0 
				Set interface wifi0 ssid ${ssid.name}-0
			</desc>
			<console target="ap1">
				-v "interface wifi0 mode access"
				-v "ssid ${ssid.name}-0"
				-v "interface wifi0 ssid ${ssid.name}-0"
			</console>
		</step>
		<step no="1.0">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				Set interface  wifi1 mode access
				Set ssid  ${ssid.name}-1
				Set interface wifi1 ssid ${ssid.name}-1
			</desc>
			<console target="ap1">
				-v "interface wifi1 mode access"
				-v "ssid ${ssid.name}-1"
				-v "interface wifi1 ssid ${ssid.name}-1"
			</console>
		</step>
		<step no="1.1">
			<desc>
				Show interface wifi0 channel
			</desc>
			<log-file>step1.1_show_interface_wifi0_channel.log</log-file>
			<console target="ap1">
				-v "show interface wifi0 channel"
			</console>
		</step>

		<step no="1.1.1">
			<desc>
				Get wifi0 channel
			</desc>
			<setvar name="get_wifi0_channel">
				${bin.dir}/getbyrexp.py -p "(?i)Channel\s+(\d+)" -f ${log.dir}/step1.1_show_interface_wifi0_channel.log -s none --script "','.join(re.findall(args.pattern,line))"
			</setvar>
		</step>

		<step no="1.2">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				Show interface wifi1 channel
			</desc>
			<log-file>step1.2_show_interface_wifi1_channel.log</log-file>
			<console target="ap1">
				-v "show interface wifi1 channel"
			</console>
		</step>

		<step no="1.2.1">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				Get wifi1 channel
			</desc>
			<setvar name="get_wifi1_channel">
				${bin.dir}/getbyrexp.py -p "(?i)Channel\s+(\d+)" -f ${log.dir}/step1.2_show_interface_wifi1_channel.log -s none --script "','.join(re.findall(args.pattern,line))"
			</setvar>
		</step>

		<step no="2">
			<desc>
				Set region code to world
			</desc>
			<console target="ap1">
				-v "boot-param region-code world"; exit 0
			</console>
			<no-error-check />
		</step>

		<step no="2.0">
			<desc>
				config log buffered
			</desc>
			<console target="ap1">
				-v "_debug dcd chnl"
				-v "clear log all"
			</console>
		</step>

		<step no="2.1">
			<desc>
				Set wifi0 ssid shutdown and un shutdown
			</desc>
			<console target="ap1">
				-v "interface wifi0 ssid ${ssid.name}-0 shutdown"
				-v "no interface wifi0 ssid ${ssid.name}-0 shutdown"
			</console>
		</step>

		<step no="2.1.1" delay="60">
			<desc>
				Check interface wifi0 channel
			</desc>
			<log-file>step2.1.1_check_interface_wifi0_channel.log</log-file>
			<console target="ap1">
				-v "show logging buffered | include collecting"
			</console>
			<no-error-check />
			<log-match loop-values="${get_wifi0_channel}">-c -i "Channel(${loop.v})"</log-match>
		</step>

		<step no="2.2.0">
			<desc>
				config log buffered
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="2.2">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				Set wifi1 ssid shutdown and un shutdown
			</desc>
			<console target="ap1">
				-v "interface wifi1 ssid ${ssid.name}-1 shutdown"
				-v "no interface wifi1 ssid ${ssid.name}-1 shutdown"
			</console>
		</step>

		<step no="2.2.1" delay="60">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				Check interface wifi1 channel
			</desc>
			<log-file>step2.2.1_check_interface_wifi1_channel.log</log-file>
			<console target="ap1">
				-v "show logging buffered | include collecting"
			</console>
			<log-match loop-values="${get_wifi1_channel}">-c -i "Channel(${loop.v})"</log-match>
		</step>
	</stage>
</testcase>