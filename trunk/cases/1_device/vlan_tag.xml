<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>VLAN configuration mgmt test</brief>
	<priority>high</priority>
	<automated>yes</automated>

	<description>
		Topology to use
		IXIA---------------Switch

		IXIA1 ---- sw.port1
		IXIA2 ---- sw.port2
		IXIA3 ---- sw.port3
		IXIA4 ---- sw.port4

		bug 19875,23186,20819,20024,20050,20060,20079,20120,20642,21696,20723,20819,20094,19789,20600


		Pre-condition:
		Reset config of switch to factory default

		Test procedure:
		1. port1 access vlan 100; port2 native vlan 100, allow all; port3 access vlan 100;
		port4 native vlan 200, allow all; port1 send untagged broadcast packet, port2, port3, port4 received,
		result1;
		2. port1 access vlan 100; port2 native vlan 100, allow 100; port3 access vlan 200;
		port4 native vlan 200, no allow vlan all; port1 send untagged broadcast, port2, port3, port4 received,
		result2;
		3. port1 access vlan 100; port2 native vlan 100, allow all; port3 access vlan 100;
		port4 native vlan 200, allow all; port1 send tagged 100 broadcast packet, port2, port3, port4 received,
		result3;
		4. port1 trunk native vlan 100, allow vlan all; port2 access vlan 100; port3 access vlan 200;
		port4 native vlan 200, allow all;
		port1
		send tagged 100 packet, port2,port3,port4 received,result4;
		5. port1 trunk native vlan 100, allow vlan all; port2 access vlan 100; port3 access vlan 200;
		port4 native vlan 200, allow all; port1 send tagged 200 packet, port2,port3,port4
		received,result5;
		6. port1 trunk native vlan 100, allow vlan all; port2 access vlan 100; port3 access vlan 200;
		port4 native vlan 100, allow all; port1 send tagged 200 packet, port2,port3,port4 received,result6;
		7. port1 trunk native vlan 100, allow all; port2,por3 and port4 add to agg1; agg1 trunk native vlan 200, allow
		vlan all,port1 send untagged packet, result7;
		8. port1 trunk native vlan 200, allow all; port2,por3 and port4 add to agg1; agg1 trunk native vlan 200, allow
		vlan all,port1 send untagged packet, result8;


		Expect result:
		result1: port2 received untagged packet, port3 received untagged packet, port4 received tagged 100 packet;
		result2: port2 received untagged packet, port3 can't received packet, port4 can't received packet;
		result3: port2, port3,
		port4 can't received packet;
		result4: port2, received untagged packet, port3 can't received packet; port4 received tag 100 packet;
		result5: port2 can't received packet; port3 received untagged packet; port4 received untagged packet;
		result6: port2 can't received packet; port3 received untagged packet; port4 received tagged 200 packet;
		result7: port2,3,4 can received tagged 100 packet;
		result8: port2,3,4 can received untagged packet;

	</description>

	<numofsw>1</numofsw>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<comment>
		sw1.port1=eth1/5;
		sw1.port1.phytype=copper;
		sw1.port2=eth1/6;
		sw1.port2.phytype=copper;
		sw1.port3=eth1/7;
		sw1.port3.phytype=copper;
		sw1.port4=eth1/8;
		sw1.port4.phytype=copper;
		sw1.mgt0.port=eth1/1;
		sw1.mgt0.vlan=121;
		sw1.port1.ixia_port=1/1/5;
		sw1.port2.ixia_port=1/1/6;
		sw1.port3.ixia_port=1/1/3;
		sw1.port4.ixia_port=1/1/4;
		pub.chassis1.ip=10.155.33.216;
		pub.tclclient1.ip=10.155.40.10;
		pub.tclserver1.ip=10.155.30.178;
		tb.conserver.ip=10.155.32.228;
		tb.conserver.user=root;
		tb.conserver.passwd=aerohive;
		sw1.cons_name=tb1-SR2024-3;
		sw1.user=admin;
		sw1.passwd=aerohive;
		sw1.prompt="AH-[a-z0-9A-Z_]*#";
		mpc.mif.ip=10.155.32.228;
		mpc.tif.ip=10.68.136.252;
		mpc.user=root;
		mpc.passwd=aerohive;
		mpc.prompt=".*#";
		mpc.tif.name=eth1;
		tb.nvlan=100;
		tb.vlans=100,200,300;
		tb.vlan1=100;
		tb.vlan2=200;
		tb.vlan3=300;
	</comment>
	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include file="include/sw_default_pre_process.xml" />
	</pre-process>

	<property name="sw1.port1.ixia_port.mac" value="0000.0000.0011" />
	<property name="sw1.port2.ixia_port.mac" value="0000.0000.0012" />
	<property name="sw1.port3.ixia_port.mac" value="0000.0000.0013" />
	<property name="sw1.port4.ixia_port.mac" value="0000.0000.0014" />
	<property name="stream1.txport1" value="${sw1.port1.ixia_port}" />
	<property name="stream1.rxport1" value="${sw1.port2.ixia_port}" />
	<property name="stream1.rxport2" value="${sw1.port3.ixia_port}" />
	<property name="stream1.rxport3" value="${sw1.port4.ixia_port}" />
	<property name="stream1.txport1.mac" value="${sw1.port1.ixia_port.mac}" />
	<property name="stream1.rxport1.mac" value="ffff.ffff.ffff" />
	<property name="stream1.etype" value="0x0800" />
	<property name="stream1.UDFoffset" value="34" />
	<property name="stream1.patternOffset1" value="38" />
	<property name="vlan_range" value="1101-1354" />

	<stage>
		<step no="1.0">
			<desc>
				configure switch,
				port1 access vlan 100;
				port2 native vlan 100, allow all;
				port3 access vlan 100;
				port4 native vlan 200, allow all;
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "interface ${sw1.port1} switchport mode access"
				-v "interface ${sw1.port1} switchport access vlan ${tb.vlan1}"

				-v "interface ${sw1.port2} switchport mode trunk"
				-v "interface ${sw1.port2} switchport trunk allow vlan all"
				-v "interface ${sw1.port2} switchport trunk native vlan ${tb.vlan1}"

				-v "interface ${sw1.port3} switchport mode access"
				-v "interface ${sw1.port3} switchport access vlan ${tb.vlan1}"

				-v "interface ${sw1.port4} switchport mode trunk"
				-v "interface ${sw1.port4} switchport trunk allow vlan all"
				-v "interface ${sw1.port4} switchport trunk native vlan ${tb.vlan2}"

				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="1.0.1">
			<desc>
				Show interface mgt0 to get ip address
			</desc>
			<log-file>mgt0_ip_info.log</log-file>
			<console target="sw1">
				-v 'show interface mgt0'
			</console>
			<no-error-check />
		</step>

		<step no="1.0.2">
			<desc>
				Get mgt0's ip address
			</desc>
			<setvar name="sw1.ip">
				python ${bin.dir}/getbyrexp.py -p "IP addr=(\d+\.\d+\.\d+\.\d+);" -f ${log.dir}/mgt0_ip_info.log -t str
			</setvar>
			<no-error-check />
		</step>

		<step no="1.0.3">
			<desc>
				Configure 255 vlans 101-355
			</desc>
			<log-file>step1.1_config.log</log-file>
			<script timeout="180">
				python ${bin.dir}/ssh_execute_cli.py -cli 'vlan (l1)' -list '${vlan_range}' -d ${sw1.ip} -debug -l ${log.dir} -z ${log.file}
			</script>
			<no-error-check />
		</step>

		<step no="1.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x $(expr 0 + ${tb.vlan1})`"
			</setvar>
		</step>
		<step no="1.2">
			<desc>
				build an untagged stream, txport is port1, rxport are port2,port3 and port4, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}"
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				<!-- -vlan enable -vlan_id ${tb.vlan1} -vlan_dot1p 0 -vlan_cfi 0 -->
				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				-v "traffic_configure_eth2 -portListIn ${stream1.rxport3}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.patternOffset1}
				-pattern1In 0x${stream1.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="1.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="1.4">
			<desc>
				analyse statistics on rxport, port2, port3 received untagged pkt, while pkt received on port4 is tagged 100
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport3} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<step no="2.0">
			<desc>
				configure switch:
				port1 access vlan 100;
				port2 native vlan 100, allow 100;
				port3 access vlan 200;
				port4 native vlan 200, no allow vlan all;;
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "interface ${sw1.port1} switchport access vlan ${tb.vlan1}"

				-v "interface ${sw1.port2} switchport mode trunk"
				-v "interface ${sw1.port2} switchport trunk allow vlan 100"
				-v "interface ${sw1.port2} switchport trunk native vlan ${tb.vlan1}"

				-v "interface ${sw1.port3} switchport access vlan ${tb.vlan2}"

				-v "interface ${sw1.port4} switchport mode trunk"
				-v "no interface ${sw1.port4} switchport trunk allow vlan all"
				-v "interface ${sw1.port4} switchport trunk native vlan ${tb.vlan2}"

				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
			</telnet>
		</step>

		<step no="2.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x $(expr 0 + ${tb.vlan1})`"
			</setvar>
		</step>
		<step no="2.2">
			<desc>
				build an untagged stream, txport is port1, rxport are port2,port3 and port4, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}"
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				<!-- -vlan enable -vlan_id ${tb.vlan1} -vlan_dot1p 0 -vlan_cfi 0 -->
				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="2.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="2.4">
			<desc>
				analyse statistics on rxport, port2, received untagged pkt, port3, port4 can't received packet;
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport3} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<step no="3.0">
			<desc>
				configure switch,
				port1 access vlan 100;
				port2 native vlan 100, allow all;
				port3 access vlan 100;
				port4 native vlan 200, allow all;
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "interface ${sw1.port1} switchport access vlan ${tb.vlan1}"

				-v "interface ${sw1.port2} switchport mode trunk"
				-v "interface ${sw1.port2} switchport trunk allow vlan all"
				-v "interface ${sw1.port2} switchport trunk native vlan ${tb.vlan1}"

				-v "interface ${sw1.port3} switchport access vlan ${tb.vlan1}"

				-v "interface ${sw1.port4} switchport mode trunk"
				-v "interface ${sw1.port4} switchport trunk allow vlan all"
				-v "interface ${sw1.port4} switchport trunk native vlan ${tb.vlan2}"

				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
			</telnet>
		</step>

		<step no="3.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x $(expr 0 + ${tb.vlan1})`"
			</setvar>
		</step>
		<step no="3.2">
			<desc>
				build an tag100 stream, txport is port1, rxport are port2,port3 and port4, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}"
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				-vlan enable
				-vlan_id ${tb.vlan1}
				-vlan_dot1p 0
				-vlan_cfi 0

				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.patternOffset1}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="3.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="3.4">
			<desc>
				analyse statistics on rxport, port2, port3, port4 can't received packet; because port1 cant'r receive packet;
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport3} framesSent userDefinedStat2 result is block"</log-match>
		</step>

		<step no="4.0">
			<desc>
				configure switch,
				port1 trunk native vlan 100, allow vlan all;
				port2 access vlan 100;
				port3 access vlan 200;
				port4 native vlan 200, allow all
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "interface ${sw1.port1} switchport mode trunk"
				-v "interface ${sw1.port1} switchport trunk allow vlan all"
				-v "interface ${sw1.port1} switchport trunk native vlan ${tb.vlan1}"

				-v "interface ${sw1.port2} switchport mode access"
				-v "interface ${sw1.port2} switchport access vlan ${tb.vlan1}"

				-v "interface ${sw1.port3} switchport mode access"
				-v "interface ${sw1.port3} switchport access vlan ${tb.vlan2}"

				-v "interface ${sw1.port4} switchport mode trunk"
				-v "interface ${sw1.port4} switchport trunk allow vlan all"
				-v "interface ${sw1.port4} switchport trunk native vlan ${tb.vlan2}"

				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
			</telnet>
		</step>

		<step no="4.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x $(expr 0 + ${tb.vlan1})`"
			</setvar>
		</step>
		<step no="4.2">
			<desc>
				build an tag100 stream, txport is port1, rxport are port2,port3 and port4, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}"
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				-vlan enable
				-vlan_id ${tb.vlan1}
				-vlan_dot1p 0
				-vlan_cfi 0

				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.patternOffset1}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!--configure the second stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.rxport3}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				-vlan enable
				-vlan_id ${tb.vlan1}
				-vlan_dot1p 0
				-vlan_cfi 0

				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.patternOffset1}
				-patternOffset2 ${stream1.patternOffset1}
				-pattern1In 0x${stream1.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="4.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="4.4">
			<desc>
				analyse statistics on rxport, port2 untag,port3 cant't received, port4 is tag100
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport3} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<step no="5.0">
			<desc>
				configure switch,
				port1 trunk native vlan 100, allow vlan all;
				port2 access vlan 100;
				port3 access vlan 200;
				port4 native vlan 200, allow all;
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"

				-v "interface ${sw1.port1} switchport mode trunk"
				-v "interface ${sw1.port1} switchport trunk allow vlan all"
				-v "interface ${sw1.port1} switchport trunk native vlan ${tb.vlan1}"

				-v "interface ${sw1.port2} switchport mode access"
				-v "interface ${sw1.port2} switchport access vlan ${tb.vlan1}"

				-v "interface ${sw1.port3} switchport mode access"
				-v "interface ${sw1.port3} switchport access vlan ${tb.vlan2}"

				-v "interface ${sw1.port4} switchport mode trunk"
				-v "interface ${sw1.port4} switchport trunk allow vlan all"
				-v "interface ${sw1.port4} switchport trunk native vlan ${tb.vlan2}"

				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
			</telnet>
		</step>

		<step no="5.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x $(expr 0 + ${tb.vlan2})`"
			</setvar>
		</step>
		<step no="5.2">
			<desc>
				build an tag200 stream, txport is port1, rxport are port2,port3 and port4, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}"
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				-vlan enable
				-vlan_id ${tb.vlan2}
				-vlan_dot1p 0
				-vlan_cfi 0

				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.patternOffset1}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="5.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="5.4">
			<desc>
				analyse statistics on rxport, port2 can't received packet; port3 received untagged packet; port4 received untagged packe;
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport3} framesSent userDefinedStat2 result is equal"</log-match>
		</step>
		<step no="6.0">
			<desc>
				configure switch,
				port1 trunk native vlan 100, allow vlan all;
				port2 access vlan 100;
				port3 access vlan 200;
				port4 native vlan 100, allow all;
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "interface ${sw1.port1} switchport mode trunk"
				-v "interface ${sw1.port1} switchport trunk allow vlan all"
				-v "interface ${sw1.port1} switchport trunk native vlan ${tb.vlan1}"

				-v "interface ${sw1.port2} switchport access vlan ${tb.vlan1}"

				-v "interface ${sw1.port3} switchport access vlan ${tb.vlan2}"

				-v "interface ${sw1.port4} switchport mode trunk"
				-v "interface ${sw1.port4} switchport trunk allow vlan all"
				-v "interface ${sw1.port4} switchport trunk native vlan ${tb.vlan1}"

				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
			</telnet>
		</step>

		<step no="6.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x $(expr 0 + ${tb.vlan2})`"
			</setvar>
		</step>
		<step no="6.2">
			<desc>
				build an tag200 stream, txport is port1, rxport are port2,port3 and port4, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}"
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				-vlan enable
				-vlan_id ${tb.vlan2}
				-vlan_dot1p 0
				-vlan_cfi 0

				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.patternOffset1}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!--configure the seconde stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.rxport3}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}
				-vlan enable
				-vlan_id ${tb.vlan2}
				-vlan_dot1p 0
				-vlan_cfi 0

				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.patternOffset1}
				-patternOffset2 ${stream1.patternOffset1}
				-pattern1In 0x${stream1.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="6.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="6.4">
			<desc>
				analyse statistics on rxport, port2, received untagged pkt, port3 cant't received, port4 is tagged 200
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport1} framesSent userDefinedStat2 result is block"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport2} framesSent userDefinedStat2 result is equal"</log-match>
			<log-match>-e "checkEqualTxWithRX ${stream1.txport1} ${stream1.rxport3} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<step no="7.0">
			<desc>
				configure switch,
				port1 trunk native vlan 100, allow all;
				port2,por3 and port4 add to agg1;
				agg1 trunk native vlan 200, allow vlan all,
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"

				-v "interface ${sw1.port1} switchport mode trunk"
				-v "interface ${sw1.port1} switchport trunk allow vlan all"
				-v "interface ${sw1.port1} switchport trunk native vlan ${tb.vlan1}"

				-v "agg 1"
				-v "interface agg1 switchport mode trunk"
				-v "interface agg1 switchport trunk native vlan ${tb.vlan2}"
				-v "interface agg1 switchport trunk allow vlan all"

				-v "interface ${sw1.port2} agg 1"
				-v "interface ${sw1.port3} agg 1"
				-v "interface ${sw1.port4} agg 1"

				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
			</telnet>
		</step>

		<step no="7.0.1">
			<desc>
				configure switch,
				port1 trunk native vlan 100, allow all;
				port2,por3 and port4 add to agg1;
				agg1 trunk native vlan 200, allow vlan all,
			</desc>
			<console target="sw1">
				-v "show system command \"killall -9 ah_swd\""
			</console>
		</step>

		<step no="7.0.2" delay="60">
			<desc>
				configure switch,
				port1 trunk native vlan 100, allow all;
				port2,por3 and port4 add to agg1;
				agg1 trunk native vlan 200, allow vlan all,
			</desc>
			<console target="sw1">
				-v "show system command \"ps\""
			</console>
		</step>

		<step no="7.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x $(expr 0 + ${tb.vlan1})`"
			</setvar>
		</step>
		<step no="7.2">
			<desc>
				build untagged stream, txport is port1, rxport are port2,port3 and port4, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}"
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}

				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.patternOffset1}
				-pattern1In 0x${stream1.UDFsignature1}
				-patternMask1In 0x00000000
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""


				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		
		<step no="7.2.1">
		  <desc>show mgt0 on sr2000</desc>
		  <log-file>show_mgt0_ip.log</log-file>
		  <console target="sw1" slow="1">
		   -v ""
		   -v "show interface mgt0"
		   -v ""
		  </console>
		  <no-error-check />
		</step>
		 
		<step no="7.2.2">
		  <desc>get ip of mgt0 to sw1.mgt0.ip</desc>
		  <setvar name="sw1.mgt0.ip">
		   ${bin.dir}/getbyrexp.py -p "IP addr=(\d+\.\d+\.\d+\.\d+);" -f ${log.dir}/show_mgt0_ip.log -t str
		  </setvar>
		</step>
 
		<step no="7.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show interface mgt0"
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="7.4">
			<desc>
				analyse statistics on rxport, port2,3,4 can received tagged 100 packet;
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-re -i "checkEqualTxWithRX \d/\d/\d{1,} \d/\d/\d{1,} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<step no="8.0">
			<desc>
				configure switch,
				port1 trunk native vlan 200, allow all;
				port2,por3 and port4 add to agg1;
				agg1 trunk native vlan 200, allow vlan all
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"

				-v "interface ${sw1.port1} switchport mode trunk"
				-v "interface ${sw1.port1} switchport trunk allow vlan all"
				-v "interface ${sw1.port1} switchport trunk native vlan ${tb.vlan2}"

				-v "agg 1"
				-v "interface agg1 switchport mode trunk"
				-v "interface agg1 switchport trunk native vlan ${tb.vlan2}"
				-v "interface agg1 switchport trunk allow vlan all"

				-v "interface ${sw1.port2} agg 1"
				-v "interface ${sw1.port3} agg 1"
				-v "interface ${sw1.port4} agg 1"

				-v "show vlan brief"
				-v "show vlan summary"
				-v "show vlan id ${tb.vlan1}"
				-v "show vlan id ${tb.vlan2}"
			</telnet>
		</step>

		<step no="8.1">
			<desc>add udf1 to check vlan</desc>
			<setvar name="stream1.UDFsignature1">
				echo "8100`printf %04x $(expr 0 + ${tb.vlan1})`"
			</setvar>
		</step>
		<step no="8.2">
			<desc>
				build untagged stream, txport is port1, rxport are port2,port3 and port4, start transmit and get statistics
			</desc>
			<log-file>eth2test.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200">
				<!-- ixia initialize -->
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -tclServerIP ${pub.tclserver1.ip} -portList ${sw1.port1.ixia_port},${sw1.port2.ixia_port},${sw1.port3.ixia_port},${sw1.port4.ixia_port} -phyList ${sw1.port1.phytype},${sw1.port2.phytype},${sw1.port3.phytype},${sw1.port4.phytype}"
				-v ""

				<!--configure the first stream -->
				-v "traffic_configure_eth2 -portListIn ${stream1.txport1},${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}
				-mac_dst ffff.ffff.ffff
				-mac_src ${stream1.txport1.mac}

				-eth2_protocol ${stream1.etype}
				-udf_offset ${stream1.UDFoffset}
				-patternOffset2 ${stream1.UDFoffset}
				-pattern1In 0x08000000
				-patternMask1In 0x00001111
				-patternOffset1 12
				-userDefinedStat2Pattern pattern1AndPattern2"
				-v ""

				<!-- start transmit -->
				-v "start_trans_getstats -txPortList ${stream1.txport1} -rxPortList ${stream1.rxport1},${stream1.rxport2},${stream1.rxport3}"
				-v ""
				<!-- check the result -->
				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport1}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport2}"
				-v ""

				-v "check_equal_tx_with_rx -oneTxPort ${stream1.txport1} -oneRxPort ${stream1.rxport3}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>
		<step no="8.3">
			<desc>check FDB</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
		</step>
		<step no="8.4">
			<desc>
				analyse statistics on rxport, port2,3,4 can received untagged packet;
			</desc>
			<log-file>eth2test.log</log-file>
			<log-match>-re -i "checkEqualTxWithRX \d/\d/\d{1,} \d/\d/\d{1,} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

	</stage>

	<post-process>
		<stage>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
