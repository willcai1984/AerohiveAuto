<testcase>
	<brief>(IxPort: 10G_F=4) Test sp scheduler.Test when cascade-port congestion . BPDU packet will not drop.background flow is queue 6(in cscd-port).
	fiber_or_copper,port count:4</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<numofsw>1</numofsw>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<description>
		QOSFORVOIP_Function_cascade_1
		Test when cascade-port congestion , queue is 7 and background flow. Test sp scheduler.BPDU packet will go queue 7 .
	</description>
	<comment>
		sw1.port1=eth1/21;
		sw1.port1.phytype=fiber;
		sw1.port5=eth1/25;
		sw1.port1.ixia_port=1/2/1;
		sw1.port1.ixia_port.phytype=fiber;
		sw1.terminal.port=2016;
		tb.conserver.ip=localhost
		ap1.cons_name=tb1-SR2024-2
		pub.chassis1.ip=10.155.33.216;
		pub.tclserver1.ip=10.155.30.164;
		pub.tclclient1.ip=10.155.40.10;
		sw1.tclclient.ip=10.155.32.228;
		sw1.mgmtport=eth1/1;
		sw1.mgmtvlan=121;
		tb.conserver.ip=10.155.32.228;
		tb.conserver.user=root;
		tb.conserver.passwd=aerohive;
		sw1.cons_name=tb1-SR2024-2;
		sw1.user=admin;
		sw1.passwd=aerohive;
		sw1.prompt="AH-[a-z0-9A-Z_]*#";
	</comment>
	<property name="correct_vlan" value="101" />
	<property name="tx_port1" value="${sw1.port7.ixia_port}" />
	<property name="tx_port1.phytype" value="${sw1.port7.ixia_port.phytype}" />
	<property name="tx_port2" value="${sw1.port8.ixia_port}" />
	<property name="tx_port2.phytype" value="${sw1.port8.ixia_port.phytype}" />
	<property name="rx_port1" value="${sw1.port5.ixia_port}" />
	<property name="rx_port1.phytype" value="${sw1.port5.ixia_port.phytype}" />
	<property name="rx_port2" value="${sw1.port6.ixia_port}" />
	<property name="rx_port2.phytype" value="${sw1.port6.ixia_port.phytype}" />
	<property name="qos_name" value="aa" />
	<property name="frame_size" value="1000" />
	<property name="streampercent" value="100" />
	<property name="error" value="0.01" />
	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include prefix="pre" file="include/sw_default_pre_process.xml" />
	</pre-process>

	<stage>
		<step no="1.1">
			<desc>
				basic config. config port as trunk mode. set qos class profile to ${sw1.port1} and ${sw1.port2}, qos marker profile to ${sw1.port3} and ${sw1.port4}, enable qos
			</desc>
			<telnet target="sw1">
				-v 'vlan ${correct_vlan}'
				-v 'no interface ${sw1.port5} shutdown'
				-v 'interface ${sw1.port5} switchport mode trunk'
				-v 'interface ${sw1.port5} switchport trunk allow vlan ${correct_vlan}'
				-v 'no interface ${sw1.port6} shutdown'
				-v 'interface ${sw1.port6} switchport mode trunk'
				-v 'interface ${sw1.port6} switchport trunk allow vlan ${correct_vlan}'
				-v 'no interface ${sw1.port7} shutdown'
				-v 'interface ${sw1.port7} switchport mode trunk'
				-v 'interface ${sw1.port7} switchport trunk allow vlan ${correct_vlan}'
				-v 'no interface ${sw1.port8} shutdown'
				-v 'interface ${sw1.port8} switchport mode trunk'
				-v 'interface ${sw1.port8} switchport trunk allow vlan ${correct_vlan}'
				-v 'qos classifier-profile ${qos_name} 8021p'
				-v 'qos marker-profile ${qos_name} 8021p'
				-v 'interface ${sw1.port5} qos-classifier ${qos_name}'
				-v 'interface ${sw1.port6} qos-classifier ${qos_name}'
				-v 'interface ${sw1.port7} qos-classifier ${qos_name}'
				-v 'interface ${sw1.port8} qos-classifier ${qos_name}'
				-v 'interface ${sw1.port7} qos-marker ${qos_name}'
				-v 'interface ${sw1.port8} qos-marker ${qos_name}'
				-v 'qos enable'
				-v 'spanning-tree enable '
				-v 'agg load-balance mode src-dst-mac'
			</telnet>
		</step>

		<step no="1.2">
			<desc>
				Set qos classifier map of ordered(dot1p)
			</desc>
			<telnet target="sw1">
				-v 'qos classifier-map 8021p 0 0'
				-v 'qos classifier-map 8021p 1 1'
				-v 'qos classifier-map 8021p 2 2'
				-v 'qos classifier-map 8021p 3 3'
				-v 'qos classifier-map 8021p 4 4'
				-v 'qos classifier-map 8021p 5 5'
				-v 'qos classifier-map 8021p 6 6'
				-v 'qos classifier-map 8021p 7 7'
			</telnet>
		</step>

		<step no="1.3">
			<desc>
				show classifier map table to check(dot1p)
			</desc>
			<log-file>step1.3_show_classifier_map.log</log-file>
			<telnet target="sw1">
				-v 'show qos classifier-map 8021p'
			</telnet>
			<log-match>-e '^\d\s+0\s+0' -re</log-match>
			<log-match>-e '^\d\s+1\s+1' -re</log-match>
			<log-match>-e '^\d\s+2\s+2' -re</log-match>
			<log-match>-e '^\d\s+3\s+3' -re</log-match>
			<log-match>-e '^\d\s+4\s+4' -re</log-match>
			<log-match>-e '^\d\s+5\s+5' -re</log-match>
			<log-match>-e '^\d\s+6\s+6' -re</log-match>
			<log-match>-e '^\d\s+7\s+7' -re</log-match>
		</step>

		<step no="1.4">
			<desc>
				Set qos marker map ordered(dot1p)
			</desc>
			<telnet target="sw1">
				-v 'qos marker-map 8021p 0 0'
				-v 'qos marker-map 8021p 1 1'
				-v 'qos marker-map 8021p 2 2'
				-v 'qos marker-map 8021p 3 3'
				-v 'qos marker-map 8021p 4 4'
				-v 'qos marker-map 8021p 5 5'
				-v 'qos marker-map 8021p 6 6'
				-v 'qos marker-map 8021p 7 7'
			</telnet>
		</step>

		<step no="1.5">
			<desc>
				show marker map table to check(dot1p)
			</desc>
			<log-file>step1.5_show_marker_map.log</log-file>
			<telnet target="sw1">
				-v 'show qos marker-map 8021p'
			</telnet>
			<log-match>-e '^\d\s+0\s+0' -re</log-match>
			<log-match>-e '^\d\s+1\s+1' -re</log-match>
			<log-match>-e '^\d\s+2\s+2' -re</log-match>
			<log-match>-e '^\d\s+3\s+3' -re</log-match>
			<log-match>-e '^\d\s+4\s+4' -re</log-match>
			<log-match>-e '^\d\s+5\s+5' -re</log-match>
			<log-match>-e '^\d\s+6\s+6' -re</log-match>
			<log-match>-e '^\d\s+7\s+7' -re</log-match>
		</step>

		<step no="1.6">
			<desc>
				show running to confirm
			</desc>
			<log-file>step1.6_show_running.log</log-file>
			<telnet target="sw1">
				-v 'show running-config'
			</telnet>
		</step>
        <step no="2.1">
			<desc>
				connect to ixia, configure ${sw1.port3} with queue 6 to ${sw1.port1} receive and ${sw1.port4} with queue 6 to ${sw1.port1} receive 
			</desc>
			<log-file>step2.1_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180" session-new="${job.user}-${job.sid}-1">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1},${tx_port2},${rx_port2}, -phyList ${tx_port1.phytype},${rx_port1.phytype},${tx_port2.phytype},${rx_port2.phytype}"
				-v ""
				<!-- configure stream 1 queue 4 and rate -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0011
				-mac_src 0000.0000.0022
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
				
				<!-- configure stream 2 queue 1 and rate is 1G -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0044
				-mac_src 0000.0000.0033
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 1
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
				
				<!-- configure stream 1 and stream 2 with 100% rate to generate stream -->
				<!--make two stream, disable stream id 1 ,for statistic  -->
				
					<!-- configure 2 stream make the tested stream is unicast -->
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0022
				-mac_src 0000.0000.0011
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
			    -v"stream_percent_rate_set -portList ${rx_port1}
				-streamId 1
				-percentRate ${streampercent}"
				-v ""
				
				-v "traffic_configure_eth2 -portListIn ${rx_port2}
				-mac_dst 0000.0000.0033
				-mac_src 0000.0000.0044
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
			-v "stream_percent_rate_set -portList ${rx_port2}
				  -streamId 1
				  -percentRate 100"
				 -v ""
						
				<!-- configure port 1 and 2 to multi -v "port_multi_stream_statistic_set -portList ${tx_port1},${rx_port1}" -v "" disable stream 1 and 2 firstly -v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp disable" -v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp disable" -v "" start send frames on port1 -v "stop_transmit -portList ${tx_port1}" -v "" -v "clear_statistic -portList ${tx_port1},${rx_port1}" -v "" -v "start_transmit -portList ${tx_port1}" -v "" -v "wait_time -second 10" enaable stream 2 -v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp enable" -v "" -v "wait_time -second 10" -v "" enaable stream 1 -v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp enable" -v "" -v "wait_time -second 10" -v "" -v "stop_transmit -portList ${tx_port1}" -v "" -v "get_stream_statistic -portList ${tx_port1},${rx_port1}" -->
			
				-v "port_multi_stream_statistic_set -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v "stop_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v "clear_statistic -portList ${tx_port1},${rx_port1},${tx_port2},${rx_port2}"
				-v "start_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"

				<!--get multi stream statistic -->
				-v "sleep 10"
				-v "get_stream_statistic -portList ${rx_port1},${rx_port2},${tx_port1},${tx_port2}"
			
			</ssh>
			<no-error-check />
		</step>
		
           <step no="2.2">
			<desc>
				show buffer to check the cascade is congestion
		</desc>
			<log-file>step2.2_step.log</log-file>
			<telnet target="sw1">
				-v '_show switch qos buffer-counter cscd-port'
			</telnet>
		</step>
		
		<step no="2.3">
			<desc>get buffer value to check whether stream is congest</desc>
			<setvar name="buffer">
			echo $(${bin.dir}/getbyrexp.py -f ${log.dir}/step2.2_step.log -p 'the current number of descriptors in queue\(6\)  for port\(27\)=(\d+)' -t str)
			</setvar>
		</step>
			
		<step no="2.4">
			<desc>check the buffer value  whether stream is congest</desc>
				<!--0 is success, 1 is fail -->
			<script>
			  echo ${buffer} 0 | awk '{
				if ( $1 == $2 )
				{exit(1);}
				else
				{exit(0);}
				}'
			</script>
			</step>
	
	
    </stage>
    <stage>
            <step no="3.1">
			<desc>
				connect to ixia, capture ${tx_port2} of BPDU packets
			</desc>
			<log-file>step3.1_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180" session-get="${job.user}-${job.sid}-1">
	            -v "start_capture -portList ${tx_port2}"
				-v ""
				-v "wait_time -second 10"
				-v ""
				<!-- stop port1 capture -->
				-v "stop_capture -portList ${tx_port2}"
				-v ""
				<!-- save port1 capture -->
				-v "save_capture -onePort ${tx_port2} -fileName ${job.id}_BPDU.enc"
		       
			</ssh>
			<no-error-check />
		</step>
		
		<step no="3.2">
			<desc>move the capture file to log dir</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
		        -v "tftp -4 ${mpc.mif.ip} -c put ${job.id}_BPDU.enc"
			    -v "rm -f ${job.id}_BPDU.enc"
			</ssh>
		</step>
			
		
		<step no="3.3">
			<desc>move the capture file to log dir</desc>
			<script>
				mv /tftpboot/${job.id}_BPDU.enc ${log.dir}
			</script>
		</step>
		
				<!-- [root@hzswtb3-mpc ~]# let "b=3<<1" [root@hzswtb3-mpc ~]# echo `printf %02x $b` 06 note:the operator "<" should be replace by "&lt;" in xml file -->
		
		<step no="3.4">
			<desc>check the packet of BPDU</desc>
			<script>
				if [ "`tshark -r ${log.dir}/${job.id}_BPDU.enc  -R '(stp.protocol == 0x0000 ) &amp;&amp;  (eth.dst == 01:80:c2:00:00:00)' 2>/dev/null | wc -l`" -eq "0" ]
				then
				exit 1
				fi
			</script>
			<file>${job.id}_BPDU.enc</file>
		</step>
		
		<step no="3.5">
		    <desc>
				close the IXIA
			</desc>
			<log-file>step3.4_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180" session-get="${job.user}-${job.sid}-1">
				-v ""
				-v "stop_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2} "
				 -v "stream_delete_all -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v ""
					</ssh>
		</step>
	</stage>
		
	
	<stage>
	<step no="4.1">
			<desc>
				generate stream again but change congest cascade-port.
				connect to ixia, configure ${sw1.port3} with queue 6 to ${sw1.port1} receive and ${sw1.port4} with queue 6 to ${sw1.port1} receive 
			</desc>
			<log-file>step2.1_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180" session-get="${job.user}-${job.sid}-1">
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1},${tx_port2},${rx_port2} -phyList ${tx_port1.phytype},${rx_port1.phytype},${tx_port2.phytype},${rx_port2.phytype}"
				-v ""
				<!-- configure stream 1 queue 4 and rate -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0011
				-mac_src 0000.0000.0023
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
				
				<!-- configure stream 2 queue 1 and rate is 1G -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0045
				-mac_src 0000.0000.0033
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
				
				<!-- configure stream 1 and stream 2 with 100% rate to generate stream -->
				<!--make two stream, disable stream id 1 ,for statistic  -->
				
					<!-- configure 2 stream make the tested stream is unicast -->
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0023
				-mac_src 0000.0000.0011
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
			    -v"stream_percent_rate_set -portList ${rx_port1}
				-streamId 1
				-percentRate ${streampercent}"
				-v ""
				
				-v "traffic_configure_eth2 -portListIn ${rx_port2}
				-mac_dst 0000.0000.0033
				-mac_src 0000.0000.0045
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
			-v "stream_percent_rate_set -portList ${rx_port2}
				  -streamId 1
				  -percentRate 100"
				 -v ""
						
				<!-- configure port 1 and 2 to multi -v "port_multi_stream_statistic_set -portList ${tx_port1},${rx_port1}" -v "" disable stream 1 and 2 firstly -v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp disable" -v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp disable" -v "" start send frames on port1 -v "stop_transmit -portList ${tx_port1}" -v "" -v "clear_statistic -portList ${tx_port1},${rx_port1}" -v "" -v "start_transmit -portList ${tx_port1}" -v "" -v "wait_time -second 10" enaable stream 2 -v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp enable" -v "" -v "wait_time -second 10" -v "" enaable stream 1 -v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp enable" -v "" -v "wait_time -second 10" -v "" -v "stop_transmit -portList ${tx_port1}" -v "" -v "get_stream_statistic -portList ${tx_port1},${rx_port1}" -->
			
				-v "port_multi_stream_statistic_set -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v "stop_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v "clear_statistic -portList ${tx_port1},${rx_port1},${tx_port2},${rx_port2}"
				-v "start_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"

				<!--get multi stream statistic -->
				-v "sleep 10"
				-v "get_stream_statistic -portList ${rx_port1},${rx_port2},${tx_port1},${tx_port2}"
			
			</ssh>
			<no-error-check />
		</step>
		
           <step no="4.2">
			<desc>
				show buffer to check the cascade is congestion
		</desc>
			<log-file>step4.2_step.log</log-file>
			<telnet target="sw1">
				-v '_show switch qos buffer-counter cscd-port'
			</telnet>
		</step>
		
		<step no="4.3">
			<desc>get buffer value to check whether stream is congest</desc>
			<setvar name="buffer">
			echo $(${bin.dir}/getbyrexp.py -f ${log.dir}/step4.2_step.log -p 'the current number of descriptors in queue\(6\)  for port\(26\)=(\d+)' -t str)
			</setvar>
		</step>
			
		<step no="4.4">
			<desc>check the buffer value  whether stream is congest</desc>
				<!--0 is success, 1 is fail -->
			<script>
			  echo ${buffer} 0 | awk '{
				if ( $1 == $2 )
				{exit(1);}
				else
				{exit(0);}
				}'
			</script>
			</step>	
    </stage>

		<stage>
		<step no="5.1">
			<desc>
				connect to ixia, capture ${tx_port2} of BPDU packets
			</desc>
			<log-file>step5.1_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180" session-get="${job.user}-${job.sid}-1">
	            -v "start_capture -portList ${tx_port2}"
				-v ""
				-v "wait_time -second 10"
				-v ""
				<!-- stop port1 capture -->
				-v "stop_capture -portList ${tx_port2}"
				-v ""
				<!-- save port1 capture -->
				-v "save_capture -onePort ${tx_port2} -fileName ${job.id}_BPDU2.enc"
		       
			</ssh>
			<no-error-check />
		</step>
		
		<step no="5.2">
			<desc>move the capture file to log dir</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
		        -v "tftp -4 ${mpc.mif.ip} -c put ${job.id}_BPDU2.enc"
			    -v "rm -f ${job.id}_BPDU2.enc"
			</ssh>
		</step>
			
		
		<step no="5.3">
			<desc>move the capture file to log dir</desc>
			<script>
				mv /tftpboot/${job.id}_BPDU2.enc ${log.dir}
			</script>
		</step>
		
				<!-- [root@hzswtb3-mpc ~]# let "b=3<<1" [root@hzswtb3-mpc ~]# echo `printf %02x $b` 06 note:the operator "<" should be replace by "&lt;" in xml file -->
		
		<step no="5.4">
			<desc>check the packet of BPDU</desc>
			<script>
				if [ "`tshark -r ${log.dir}/${job.id}_BPDU2.enc  -R '(stp.protocol == 0x0000 ) &amp;&amp;  (eth.dst == 01:80:c2:00:00:00)' 2>/dev/null | wc -l`" -eq "0" ]
				then
				exit 1
				fi
			</script>
			<file>${job.id}_BPDU2.enc</file>
		</step>		
	</stage>

	<post-process>
		<stage>
				<step no="5.5">
		    <desc>
				close the IXIA
			</desc>
			<log-file>step5.5_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180" session-close="${job.user}-${job.sid}-1">
				-v ""
				-v "stop_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2} "
			    -v "stream_delete_all -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v "ctrl-c"
					</ssh>
		</step>
		</stage>
		<include prefix="post" file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>