<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief> Two portals boot up, DA up/down check route converge (this case don't check the route converge time)</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
			-configure two Portals in the same subnet and same hive, full mesh.
			-boot portal1 first and then portal2
			-Create a SSID on wifi0 and two clients associate two APs, pass authentication
		Test Procedure:
			1. When AP boot up, show amrp interface eth0, show amrp neighbor in Portal 1 and portal 2.
			2. Two clients associate to two APs, and send unicast, broadcast pkt.
				Client ping each other.
				Client ping PC(debug FE)
				Client ping portal1 and Portal2
			3. Plug out cable of Portal 1's eth0, check route converge time, check route table. Check client 's traffic
			4. Plug in cable of Portal 1's eth0, check route converge time, check route table. Check client 's traffic
			5. Fast plug out/in cable of Portal 1's eth0, Fast plug out/in cable of Portal 2's eth0
	</description>
	
	<numofap>2</numofap>
	<numofsta>2</numofsta>
	<tbtype>winlin</tbtype>
	<stage>
		<step no="0">
			<desc>
				shutdown eth1
			</desc>
			<if> "${ap.eth1.existed}" == "true" </if>
			<telnet target="ap1">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="0.1">
			<desc>
				-when dut eth1,shutdown eth1
			</desc>
			<if> "${ap.eth1.existed}" == "true" </if>
			<telnet target="ap2">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="0.2">
			<desc>
				shutdown ap2 eth0 first to make sure ap1 can be DA
			</desc>
			<console target="ap2">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="pre_1">
			<desc>
				-Configure Portals in the same subnet and same hive in AP1
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap1">
				-v "hive ${hive.name}1"
				-v "hive ${hive.name}1 password ${hive.name}1"
				-v "interface mgt0 hive ${hive.name}1"
				-v "ssid ${ssid.name}1"
				-v "interface wifi1 radio channel 44"
				-v "interface wifi0 ssid ${ssid.name}1"
			</console>
		</step>
		
		<step no="pre_2">
			<desc>
				-Configure Portals in the same subnet and same hive in AP1
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap1">
				-v "hive ${hive.name}1"
				-v "hive ${hive.name}1 password ${hive.name}1"
				-v "interface mgt0 hive ${hive.name}1"
				-v "ssid ${ssid.name}1"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable" 
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
				-v "interface wifi0 ssid ${ssid.name}1"
			</console>
		</step>

		<step no="pre_3">
			<desc>
				-Configure Portals in the same subnet and same hive in AP2
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap2">
				-v "no interface eth0 shutdown"
				-v "hive ${hive.name}1"
				-v "hive ${hive.name}1 password ${hive.name}1"
				-v "interface mgt0 hive ${hive.name}1"
				-v "interface wifi1 radio channel 44"
				-v "ssid ${ssid.name}2"
				-v "interface wifi0 ssid ${ssid.name}2"
			</console>
		</step>
		
		<step no="pre_4">
			<desc>
				-Configure Portals in the same subnet and same hive in AP2
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap2">
				-v "no interface eth0 shutdown"
				-v "hive ${hive.name}1"
				-v "hive ${hive.name}1 password ${hive.name}1"
				-v "interface mgt0 hive ${hive.name}1"
				-v "ssid ${ssid.name}2"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable" 
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
				-v "interface wifi0 ssid ${ssid.name}2"
			</console>
		</step>

		<step no="pre_5">
			<desc>
				-show interface for AP1
			</desc>
			<log-file>show_interface_ap1_3.log</log-file>
			<console target="ap1">
				-v "show interface"
			</console>
		</step>

		<step no="pre_6">
			<desc>
				-Get AP1's mgt0 mac
			</desc>
			<setvar name="ap1_m0_mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1_3.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="pre_7">
			<desc>
				-Get AP1's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<setvar name="ap1_w1_mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1_3.log -k "Wifi1" -p 2
			</setvar>
		</step>
		
		<step no="pre_8">
			<desc>
				-Get AP1's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<setvar name="ap1_w1_mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1_3.log -k "Wifi0" -p 2
			</setvar>
		</step>

		<step no="pre_9">
			<desc>
				-show interface for AP2
			</desc>
			<log-file>show_interface_ap2_6.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="pre_10">
			<desc>
				-Get AP2's mgt0 mac
			</desc>
			<setvar name="ap2_m0_mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2_6.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="pre_11">
			<desc>
				-Get AP2's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<setvar name="ap2_w1_mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2_6.log -k "Wifi1" -p 2
			</setvar>
		</step>
		
		<step no="pre_12">
			<desc>
				-Get AP2's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<setvar name="ap2_w1_mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2_6.log -k "Wifi0" -p 2
			</setvar>
		</step>

		<step no="pre_13">
			<desc>
				-show interface of mgt0 on AP1
			</desc>
			<log-file>show_ap1_int_mgt0_18_1.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="pre_14">
			<desc>
				-get IP of mgt0 on AP1
			</desc>
			<setvar name="ap1_m0_ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_int_mgt0_18_1.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="pre_15.1">
			<desc>
				shutdown ap2 eth0, then up again
			</desc>
			<log-file>ap2_eth0.log</log-file>
			<console target="ap2">
				-v "interface eth0 shutdown"
				-v ""
				-v "no interface eth0 shutdown"
				-v ""
				-v "no interface mgt0 dhcp client"
				-v ""
				-v ""
				-v "interface mgt0 dhcp client"
				-v ""
			</console>
		</step>
		
		<step no="pre_15.2" delay="30">
			<desc>
				-show interface of mgt0 on AP2
			</desc>
			<log-file>show_ap2_int_mgt0_18_3.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="pre_16">
			<desc>
				-get IP of mgt0 on AP2
			</desc>
			<setvar name="ap2_m0_ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_int_mgt0_18_3.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="1.1" delay="60">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>show_amrp_neighbor.log</log-file>
			<console target="ap1">
				-v "show amrp neighbor"
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_w1_mac} ${ap2_m0_ip}\s+TWO-WAY" -f ${log.dir}/${log.file}</log-match>			
		</step>

		<step no="1.2" delay="60">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>show_amrp_neighbor.log</log-file>
			<console target="ap2">
				-v "show amrp neighbor"
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_w1_mac} ${ap1_m0_ip}\s+TWO-WAY" -f ${log.dir}/${log.file}</log-match>			
		</step>		
		
		<step no="1.3" delay="60">
			<desc>
				-show amrp interface eth0 in AP1
			</desc>
			<log-file>show_amrp_interface_eth0_ap1.log</log-file>
			<console target="ap1">
				-v "show amrp interface eth0"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "state\s+:\s+DA" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="1.4">
			<desc>
				-show amrp interface eth0 in AP2
			</desc>
			<log-file>show_amrp_interface_eth0_ap2.log</log-file>
			<console target="ap2">
				-v "show amrp interface eth0"
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "state\s+:\s+BDA" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		<!-- client1 connect to ap1 ssid -->
		<step no="2.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}1"
				echo "conn1.proto=open"
				echo "conn1.pif=wifi0"
			</multi-setvar>
		</step>
		
		<include prefix="2.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
		<step no="2.3" delay="10">
			<desc>ifconfig to show the ip adrr of sta1</desc>
			<log-file>step2.3_ifconfig.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match> -e "inet addr"</log-match>
		</step>
		
		<step no="2.4">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.3_ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="2.5.1">
			<desc>Get station's mac</desc>
			<setvar name="sta1.tif.mac.tmp">
				${bin.dir}/getbyrexp.py -p "HWaddr ([\da-fA-F:]+)" -f ${log.dir}/step2.3_ifconfig.log -t str
			</setvar>
		</step>	

        <step no="2.5.2">
            <desc>get mac of sta1</desc>
            <setvar name="sta1.tif.mac">
                 echo $(echo $(echo $(echo ${sta1.tif.mac.tmp} | cut -d : -f1)$(echo ${sta1.tif.mac.tmp} | cut -d : -f2,3)$(echo ${sta1.tif.mac.tmp} | cut -d : -f4,5)$(echo ${sta1.tif.mac.tmp} | cut -d : -f6)) | tr "A-F" "a-f")
            </setvar>
        </step>		
		
		<!-- client2 connect to ap2 ssid -->
		<step no="2.6">
			<multi-setvar>
				echo "conn2.ssid=${ssid.name}2"
				echo "conn2.proto=open"
				echo "conn2.pif=wifi0"
			</multi-setvar>
		</step>
		
		<include prefix="2.7" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta2, ap2" />

		<step no="2.8" delay="10">
			<desc>ifconfig to show the ip adrr of sta1</desc>
			<log-file>step2.8_ifconfig.log</log-file>
			<ssh target="sta2">
				-v "ifconfig ${sta2.tif.name}"
			</ssh>
			<log-match> -e "inet addr"</log-match>
		</step>
		
		<step no="2.9">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta2.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.8_ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>			

		<step no="2.10.1">
			<desc>Get station's mac</desc>
			<setvar name="sta2.tif.mac.tmp">
				${bin.dir}/getbyrexp.py -p "HWaddr ([\da-fA-F:]+)" -f ${log.dir}/step2.8_ifconfig.log -t str
			</setvar>
		</step>	
		
        <step no="2.10.2">
            <desc>get mac of sta1</desc>
            <setvar name="sta2.tif.mac">
                 echo $(echo $(echo $(echo ${sta2.tif.mac.tmp} | cut -d : -f1)$(echo ${sta2.tif.mac.tmp} | cut -d : -f2,3)$(echo ${sta2.tif.mac.tmp} | cut -d : -f4,5)$(echo ${sta2.tif.mac.tmp} | cut -d : -f6)) | tr "A-F" "a-f")
            </setvar>
        </step>	
		
		<step no="2.11" delay="60">
			<desc>
				show ssid station in AP1
			</desc>
			<log-file>show_ssid_sta1.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name}1 station"
			</console>
		</step>

		<step no="2.12">
			<desc>
				get sta1 ip in AP1
			</desc>
			<setvar name="ap1.sta1.ip">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ssid_sta1.log -k "${sta1.tif.mac}" -p 2
			</setvar>
		</step>

		<step no="2.13">
			<desc>
				compare sta1 show ip to AP1 show station ip
			</desc>
			<script>
				if [ ${ap1.sta1.ip} != ${sta1.tif.ip} ]; then exit 1;fi
			</script>
		</step>

		<step no="2.14">
			<desc>
				show ssid station in AP2
			</desc>
			<log-file>show_ssid_sta2.log</log-file>
			<console target="ap2">
				-v "show ssid ${ssid.name}2 station"
			</console>
		</step>

		<step no="2.15">
			<desc>
				get sta2 ip in AP2
			</desc>
			<setvar name="ap2.sta2.ip">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ssid_sta2.log -k "${sta2.tif.mac}" -p 2
			</setvar>
		</step>

		<step no="2.16">
			<desc>
				-Compare sta2 show ip to AP2 show station ip
			</desc>
			<script>
				if [ ${ap2.sta2.ip} != ${sta2.tif.ip} ]; then exit 1;fi
			</script>
		</step>

		<step no="2.17">
			<desc>
				-enable debug in AP1
			</desc>
			<console target="ap1">
				-v "_kdebug fe basic"
				-v "_ff id 1 src-mac ${sta1.tif.mac}"
				-v "clear log all"
			</console>
		</step>

		<step no="2.18">
			<desc>
				-client1 ping client2
			</desc>
			<log-file>step2.18_ping_sta2.log</log-file>
			<ssh target="sta1">
				-v "ping ${sta2.tif.ip} -c 2"
			</ssh>
			<log-match>-c -i "from ${sta2.tif.ip}: icmp_req" -i "ttl="</log-match>			
		</step>
		
		<step no="2.19">
			<desc>
				-client1 ping pc
			</desc>
			<log-file>step2.19_ping_pc.log</log-file>
			<ssh target="sta1">
				-v "ping ${tb.vlan1.gw} -c 2"
			</ssh>
			<log-match>-c -i "from ${tb.vlan1.gw}: icmp_req" -i "ttl="</log-match>	
		</step>		
		<step no="2.20">
			<desc>
				-client1 ping ap1
			</desc>
			<log-file>step2.20_ping_ap1.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap1_m0_ip} -c 2"
			</ssh>
			<log-match>-c -i "from ${ap1_m0_ip}: icmp_req" -i "ttl="</log-match>
		</step>		
		<step no="2.21">
			<desc>
				-client1 ping ap2
			</desc>
			<log-file>step2.21_ping_ap2.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap2_m0_ip} -c 2"
			</ssh>
			<log-match>-c -i "from ${ap2_m0_ip}: icmp_req" -i "ttl="</log-match>
		</step>
		
		<step no="2.22">
			<desc>
				-check the correct logic
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>show_log_buffer_2.22.log</log-file>
			<telnet target="ap1">
				-v "show log buffer"
			</telnet>
			<no-error-check />
			<log-match>-c -e "(i) wifi0.1 ${sta1.tif.ip}->${sta2.tif.ip}"</log-match>
			<log-match>-c -e "(o) eth0 ${sta1.tif.ip}->${sta2.tif.ip}"</log-match>
			<log-match>-c -e "(i) wifi0.1 ${sta1.tif.ip}->${tb.vlan1.gw}"</log-match>
			<log-match>-c -e "(o) eth0 ${sta1.tif.ip}->${tb.vlan1.gw}"</log-match>
			<log-match>-c -e "(i) wifi0.1 ${sta1.tif.ip}->${ap1_m0_ip}"</log-match>
			<log-match>-c -e "(u) mgt0 ${sta1.tif.ip}->${ap1_m0_ip}"</log-match>
			<log-match>-c -e "(i) wifi0.1 ${sta1.tif.ip}->${ap2_m0_ip}"</log-match>
			<log-match>-c -e "(o) eth0 ${sta1.tif.ip}->${ap2_m0_ip}"</log-match>
		</step>
	
		<step no="3.1">
			<desc>
				-Shutdown AP1's interface eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>
<!--
		<step no="3.2">
			<desc>
				-Use client ping AP2
			</desc>
			<ssh target="sta1">
				-v "touch ${log.dir}/step3.3_sta1_ping.log"
				-v "ping ${ap2_m0_ip} > ${log.dir}/step3.3_sta1_ping.log"
			</ssh>
		</step>

		<step no="3.3">
			<desc>
				-verify that ping is successfully
				-Fix me, how many lost should be successfully?
			</desc>
			<log-file>step3.3_sta1_ping.log</log-file>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "TTL=" -f ${log.dir}/${log.file}</log-match>
		</step>
-->
		<step no="3.4">
			<desc>
				-Show route, default route should be wifi1.1
			</desc>
			<log-file>step3.4_ap1_router.log</log-file>
			<console target="ap1">
				-v "show route"
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "0000:0000:0000\s+${ap2_w1_mac}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.5" delay="60">
			<desc>
				-show amrp interface eth0 in AP1
			</desc>
			<log-file>step3.5_ap1_amrp.log</log-file>
			<console target="ap1">
				-v "show amrp interface eth0"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "amrp can't find eth0" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="3.6" delay="60">
			<desc>
				-show amrp interface eth0 in AP2
			</desc>
			<log-file>step3.6_ap2_amrp.log</log-file>
			<console target="ap2">
				-v "show amrp interface eth0"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "state\s+:\s+DA" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.7.1">
			<desc>
				-show route AP2
			</desc>
			<log-file>step3.7.1_ap2_route.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_w1_mac}\s+${ap1_w1_mac}\s+wifi1.1" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_m0_mac}\s+${ap1_w1_mac}\s+wifi1.1" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		<step no="3.7.2">
			<desc>
				-show route AP2
			</desc>
			<log-file>step3.7.2_ap2_route.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_w1_mac}\s+${ap1_w1_mac}\s+wifi0.1" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_m0_mac}\s+${ap1_w1_mac}\s+wifi0.1" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.1">
			<desc>
				-Un-shutdown AP1's interface eth0
			</desc>
			<console target="ap1">
				-v "no interface eth0 shutdown"
			</console>
		</step>
<!--
		<step no="4.2">
			<desc>
				-Use client ping AP2
			</desc>
			<ssh target="sta1">
				-v "touch ${log.dir}/step4.3_sta1_ping.log"
				-v "ping ${ap2_m0_ip} > ${log.dir}/step4.3_sta1_ping.log"
			</ssh>
		</step>

		<step no="4.3">
			<desc>
				-verify that ping is successfully
				-Fix me, how many lost should be successfully?
			</desc>
			<log-file>step4.3_sta1_ping.log</log-file>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "TTL=" -f ${log.dir}/${log.file}</log-match>
		</step>
-->
		<step no="4.4">
			<desc>
				-Show route, default route should be eth0
			</desc>
			<log-file>step4.4_ap1_route.log</log-file>
			<console target="ap1">
				-v "show route"
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "0000:0000:0000\s+${ap1_m0_mac}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.5" delay="60">
			<desc>
				-show amrp interface eth0 in AP1
			</desc>
			<log-file>step4.5_ap1_amrp.log</log-file>
			<console target="ap1">
				-v "show amrp interface eth0"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "state\s+:\s+BDA" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.6">
			<desc>
				-show amrp interface eth0 in AP2
			</desc>
			<log-file>step4.6_ap2_amrp.log</log-file>
			<console target="ap2">
				-v "show amrp interface eth0"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "state\s+:\s+DA" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.7">
			<desc>
				-show route AP2
			</desc>
			<log-file>step4.7_ap2_route.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "0000:0000:0000\s+${ap2_m0_mac}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.1">
			<desc>
				-shutdown/unshutdown AP1's interface eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
				-v "no interface eth0 shutdown"
			</console>
		</step>

		<step no="5.2" delay="15">
			<desc>
				-Show route, default route should be eth0
			</desc>
			<log-file>step5.2_ap1_route.log</log-file>
			<console target="ap1">
				-v "show route"
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "0000:0000:0000\s+${ap1_m0_mac}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.3" delay="60">
			<desc>
				-show amrp interface eth0 in AP1
			</desc>
			<log-file>step5.3_ap1_amrp.log</log-file>
			<console target="ap1">
				-v "show amrp interface eth0"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "state\s+:\s+BDA" -f ${log.dir}/${log.file}</log-match>
		</step>

	</stage>
</testcase>
