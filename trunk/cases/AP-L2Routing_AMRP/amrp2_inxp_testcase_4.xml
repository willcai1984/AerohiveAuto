<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>INXP ,from MP to Portal</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		------------L3 Switch-----------
		| ---------------------|
		Portal 1 (AP2) Portal 2(AP1)
		MP(AP3)
		Client 1(sta1)


		Pre-Condition:

		-Configure two APs in the different subnet but same hive
		-Configure two APs in the same hive and same SSID,
		-Configure mobility-policy INXP gre-tunnel to Portal2 in MP
		-Configure mobility-policy INXP gre-tunnel from MP in Portal2
		-Client1 associate to portal1, pass authentication

		Test Procedure:

		1. When client associate to Portal1 ,check build tunnel state "_debug amrp xnxp
		detail"
		2. Check tunnel state "show amrp tunnel"
		3. "show ssid xxx station"check upid vlan-id
		4. "show amrp client" check upid and vlan-id
		5. Client send broadcast and unicast
		Client ping(MP AP1 AP2) mgt0 IP
		Client ping gateway
		Client ping locate client
	</description>
	<numofap>3</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<property name="ssid.pwd" value="aerohive" />
	<stage>
		<!-- 0. pre-process the ap -->
		<step no="0.1">
			<desc>
				-when ap1 is not ap120,shutdown eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="0.2">
			<desc>
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap2">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="0.3">
			<desc>
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap3">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="0.4">
			<desc>
				-when ap3 is not ap120,shutdown eth1
			</desc>
			<console target="ap3">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<!-- 1. Configure portal in the different subnet but same hive Configure MP and portal in the same hive and same SSID -->
		<step no="1.1">
			<desc>
				-Configure ap1 and ap2 in the different subnet but same hive
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "save config"
			</console>
		</step>
		
		<step no="1.1_0">
			<desc>
				-Configure ap1 and ap2 in the different subnet but same hive
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"				
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
				-v "save config"
			</console>
		</step>

		<step no="1.2">
			<desc>
				-Configure ap1 and ap2 in the different subnet but same hive
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "interface wifi1 radio channel 44"
				-v "save config"
			</console>
		</step>
		
		<step no="1.2_0">
			<desc>
				-Configure ap1 and ap2 in the different subnet but same hive
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
				-v "save config"
			</console>
		</step>

		<step no="1.3">
			<desc>
				-Configure ap3 as MP, configure them in the same hive and same ssid
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap3">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "interface wifi1 radio channel 44"
				-v "save config"
			</console>
		</step>
		
		<step no="1.3_0">
			<desc>
				-Configure ap3 as MP, configure them in the same hive and same ssid
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap3">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
				-v "save config"
			</console>
		</step>

		<!-- 2. get parameters of AP -->
		<step no="2.1.1">
			<desc>
				-show interface for AP1
			</desc>
			<log-file>show_interface_ap1.log</log-file>
			<console target="ap1">
				-v "show interface"
			</console>
		</step>

		<step no="2.1.2">
			<desc>
				-show interface of mgt0 on AP1
			</desc>
			<log-file>show_ap1_mgt0.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="2.1.3">
			<desc>
				-Get AP1's mgt0 mac
			</desc>
			<setvar name="ap1.mgt0.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="2.1.4">
			<desc>
				-Get AP1's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<setvar name="ap1.wifi1.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1.log -k "Wifi1" -p 2
			</setvar>
		</step>
		
		<step no="2.1.4_0">
			<desc>
				-Get AP1's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<setvar name="ap1.wifi1.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1.log -k "Wifi0" -p 2
			</setvar>
		</step>

		<step no="2.1.5">
			<desc>
				-get IP of mgt0 on AP1
			</desc>
			<setvar name="ap1.mgt0.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="2.2.1">
			<desc>
				-show interface for AP2
			</desc>
			<log-file>show_interface_ap2.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="2.2.2">
			<desc>
				-show interface of mgt0 on AP2
			</desc>
			<log-file>show_ap2_mgt0.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="2.2.3">
			<desc>
				-Get AP2's mgt0 mac
			</desc>
			<setvar name="ap2.mgt0.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="2.2.4">
			<desc>
				-Get AP2's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<setvar name="ap2.wifi1.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2.log -k "Wifi1" -p 2
			</setvar>
		</step>
		
		<step no="2.2.4_0">
			<desc>
				-Get AP2's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<setvar name="ap2.wifi1.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2.log -k "Wifi0" -p 2
			</setvar>
		</step>

		<step no="2.2.5">
			<desc>
				-get IP of mgt0 on AP2
			</desc>
			<setvar name="ap2.mgt0.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="2.3.1">
			<desc>
				-show interface for AP3
			</desc>
			<log-file>show_interface_ap3.log</log-file>
			<console target="ap3">
				-v "show interface"
			</console>
		</step>

		<step no="2.3.2">
			<desc>
				-show interface of mgt0 on AP3
			</desc>
			<log-file>show_ap3_mgt0.log</log-file>
			<console target="ap3">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="2.3.3">
			<desc>
				-Get AP3's mgt0 mac
			</desc>
			<setvar name="ap3.mgt0.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap3.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="2.3.4">
			<desc>
				-Get AP3's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<setvar name="ap3.wifi1.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap3.log -k "Wifi1" -p 2
			</setvar>
		</step>
		
		<step no="2.3.4_0">
			<desc>
				-Get AP3's wifi1 mac
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<setvar name="ap3.wifi1.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap3.log -k "Wifi0" -p 2
			</setvar>
		</step>

		<step no="2.3.5">
			<desc>
				-get IP of mgt0 on AP3
			</desc>
			<setvar name="ap3.mgt0.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap3_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="2.4.1">
			<desc>
				-show ip route for ap1
			</desc>
			<log-file>show_route_ap1.log</log-file>
			<console target="ap1">
				-v "show ip route"
			</console>
		</step>

		<step no="2.4.2">
			<desc>
				-get gateway of ap1
			</desc>
			<setvar name="ap1.mgt0.gw.ip">
				cat ${log.dir}/show_route_ap1.log | awk '$1=="0.0.0.0" {print $2;exit}'
			</setvar>
		</step>

		<!-- 3. Configure mobility-policy INXP gre-tunnel -->
		<step no="3.1">
			<desc>
				-Configure mobility-policy INXP gre-tunnel to Portal2 in MP
			</desc>
			<console target="ap3">
				-v "security-object fwtest"
				-v "security-object fwtest default-user-profile-attr 2"
				-v "security-object fwtest security protocol-suite wpa2-tkip-psk ascii-key ${ssid.pwd}"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object fwtest"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "mobility-policy ttt inxp gre-tunnel to ${ap1.mgt0.ip} password 123"
				-v "user-profile fw qos-policy def-user-qos vlan-id ${tb.vlan2} mobility-policy ttt attribute 2"
			</console>
		</step>

		<step no="3.2">
			<desc>
				-Configure mobility-policy INXP gre-tunnel from MP in Portal2
			</desc>
			<console target="ap1">
				-v "security-object fwtest"
				-v "security-object fwtest default-user-profile-attr 2"
				-v "security-object fwtest security protocol-suite wpa2-tkip-psk ascii-key ${ssid.pwd}"
				-v "ssid ${ssid.name}.1"
				-v "ssid ${ssid.name}.1 security-object fwtest"
				-v "interface wifi0 ssid ${ssid.name}.1"
				-v "mobility-policy ttt inxp gre-tunnel from ${ap3.mgt0.ip}/24 password 123"
				-v "user-profile fw qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy ttt attribute 2"
			</console>
		</step>
		<!-- 4. enable debug in portal1 and mp -->
		<step no="4.1">
			<desc>
				-enable xnxp detail debug in MP
			</desc>
			<console target="ap3">
				-v "clear log buffer"
				-v "_debug amrp xnxp detail"
			</console>
		</step>

		<step no="4.2">
			<desc>
				-enable xnxp detail debug in portal1
			</desc>
			<console target="ap1">
				-v "clear log buffer"
				-v "_debug amrp xnxp detail"
			</console>
		</step>


		<!-- 5. Client1 associate to portal1, pass authentication -->
		<include prefix="1" file="subs/wpa_supplicant_start.xml" args="sta1" />
		<step no="5.1">
			<desc>client associate to ssid on AP1</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto RSN"
				-v "set_network 0 psk \"${ssid.pwd}\""
				-v "set_network 0 pairwise TKIP"
				-v "set_network 0 group TKIP"
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="5.2" delay="15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check the connection of client</desc>
			<log-file>wpa_stat_${staid}_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "status"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="5.3">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1" slow="true">
				-v "killall dhclient -q"
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="5.4" delay="10">
			<desc>ifconfig to show the client ip</desc>
			<log-file>ifconfig.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="5.5">
			<desc>get client mac</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -width 2
			</setvar>
		</step>

		<step no="5.6">
			<desc>get client ip</desc>
			<setvar name="sta1.tif.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<!-- 6. When client associate to Portal1 ,check build tunnel state “_debug amrp xnxp detail” -->
		<step no="6.1">
			<desc>
				-check tunnel state in MP
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>show_logbuf_xnxp_ap3.log</log-file>
			<console target="ap3" timeout="600">
				-v "show logging buffer"
				-v "no _debug amrp xnxp"
			</console>
			<log-match>-c -i "mgt0" -i "TX ${ap3.mgt0.ip} -> ${ap1.mgt0.ip}" -i "INXP-OPEN-REQUEST"</log-match>
			<log-match>-c -i "${sta1.tif.mac} send INXP-OPEN-REQUEST to ${ap1.mgt0.ip}"</log-match>
			<log-match>-c -i "inxp client" -i "${sta1.tif.mac} attach to access tunnel ${ap1.mgt0.ip}"</log-match>
			<log-match>-c -i "inxp client ${sta1.tif.mac} associate at wifi0.1 profile-id 2 vlan ${tb.vlan2} to tunnel ${ap1.mgt0.ip}"</log-match>
			<log-match>-c -i "mgt0" -i "RX ${ap1.mgt0.ip} -> ${ap3.mgt0.ip}" -i "INXP-OPEN-REPLY"</log-match>
			<log-match>-c -i "${sta1.tif.mac} proc INXP-OPEN-REPLY code OK"</log-match>
			<log-match>-c -i "inxp access client ${sta1.tif.mac} state(OPEN -> ESTABLISHED):" -i "recv INXP-OPEN-REPLY from ${ap1.mgt0.ip}"</log-match>
			<log-match>-c -i "${sta1.tif.mac} proc INXP-ECHO-REPLY code ACK"</log-match>
			<no-error-check />
		</step>
		
		<step no="6.1_0">
			<desc>
				-check tunnel state in MP
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>show_logbuf_xnxp_ap3.log</log-file>
			<console target="ap3" timeout="600">
				-v "show logging buffer"
				-v "no _debug amrp xnxp"
			</console>
			<log-match>-c -i "mgt0" -i "TX ${ap3.mgt0.ip} -> ${ap1.mgt0.ip}" -i "INXP-OPEN-REQUEST"</log-match>
			<log-match>-c -i "${sta1.tif.mac} send INXP-OPEN-REQUEST to ${ap1.mgt0.ip}"</log-match>
			<log-match>-c -i "inxp client" -i "${sta1.tif.mac} attach to access tunnel ${ap1.mgt0.ip}"</log-match>
			<log-match>-c -i "inxp client ${sta1.tif.mac} associate at wifi0.2 profile-id 2 vlan ${tb.vlan2} to tunnel ${ap1.mgt0.ip}"</log-match>
			<log-match>-c -i "mgt0" -i "RX ${ap1.mgt0.ip} -> ${ap3.mgt0.ip}" -i "INXP-OPEN-REPLY"</log-match>
			<log-match>-c -i "${sta1.tif.mac} proc INXP-OPEN-REPLY code OK"</log-match>
			<log-match>-c -i "inxp access client ${sta1.tif.mac} state(OPEN -> ESTABLISHED):" -i "recv INXP-OPEN-REPLY from ${ap1.mgt0.ip}"</log-match>
			<log-match>-c -i "${sta1.tif.mac} proc INXP-ECHO-REPLY code ACK"</log-match>
			<no-error-check />
		</step>

		<step no="6.2">
			<desc>
				-check tunnel state in portal2
			</desc>
			<log-file>show_logbuf_xnxp_ap1.log</log-file>
			<console target="ap1" timeout="600">
				-v "show logging buffer"
				-v "no _debug amrp xnxp"
			</console>
			<log-match>-c -i "mgt0 RX ${ap3.mgt0.ip} -> ${ap1.mgt0.ip}" -i "INXP-OPEN-REQUEST"</log-match>
			<log-match>-c -i "mgt0 TX ${ap1.mgt0.ip} -> ${ap3.mgt0.ip}" -i "INXP-OPEN-REPLY"</log-match>
			<no-error-check />
		</step>

		<!-- 7. Check tuel state “show amrp tunnel” -->
		<step no="7.1">
			<desc>
				-check tunnel state in MP
			</desc>
			<log-file>show_amrp_tunnel_ap3.log</log-file>
			<console target="ap3">
				-v "show amrp tunnel"
			</console>
			<no-error-check />
			<log-match>-c -e "${ap1.mgt0.ip}" -i "IA" -p 2</log-match>
		</step>

		<step no="7.2">
			<desc>
				-check tunnel state in portal2
			</desc>
			<log-file>show_amrp_tunnel_ap1.log</log-file>
			<console target="ap1">
				-v "show amrp tunnel"
			</console>
			<no-error-check />
			<log-match>-c -e "${ap3.mgt0.ip}" -i "IB" -p 2</log-match>
		</step>

		<!-- 8. “show ssid xxx station”check upid vlan-id -->
		<step no="8.1">
			<desc>
				-check station in MP
			</desc>
			<log-file>show_ssid_ap3.log</log-file>
			<console target="ap3">
				-v "show ssid ${ssid.name} station"
			</console>
			<no-error-check />
			<log-match>-c -e "${tb.vlan2}" -i "${sta1.tif.mac}" -p 10</log-match>
			<log-match>-c -e "${tb.vlan2}" -i "${sta1.tif.ip}" -p 10</log-match>
			<log-match>-c -e "2" -i "${sta1.tif.mac}" -p 12</log-match>
			<log-match>-c -e "2" -i "${sta1.tif.ip}" -p 12</log-match>
		</step>

		<!-- 9. “show amrp client” check upid and vlan-id -->
		<step no="9.1">
			<desc>
				-check amrp client in MP
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>show_amrp_client_ap3.log</log-file>
			<console target="ap3">
				-v "show amrp client"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "wifi0.1" -i "${ap1.mgt0.ip}" -i "${tb.vlan2}" -i "2"</log-match>
		</step>
		
		<step no="9.1_0">
			<desc>
				-check amrp client in MP
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>show_amrp_client_ap3.log</log-file>
			<console target="ap3">
				-v "show amrp client"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "wifi0.2" -i "${ap1.mgt0.ip}" -i "${tb.vlan2}" -i "2"</log-match>
		</step>

		<step no="9.2">
			<desc>
				-check amrp client in portal
			</desc>
			<log-file>show_amrp_client_ap1.log</log-file>
			<console target="ap1">
				-v "show amrp client"
			</console>
			<no-error-check />
			<log-match>-c -i "${ap3.mgt0.ip}" -i "${tb.vlan2}" -i "2"</log-match>
		</step>

		<!-- 10. Client ping MP, check datapath -->
		<step no="10.1">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_ap3_12.log</log-file>
			<console target="ap3">
				-v "clear log buffered"
				-v "_ff id 1 src-mac ${sta1.tif.mac} protocol 1 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
		</step>

		<step no="10.2">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_ap1_12.log</log-file>
			<console target="ap1">
				-v "clear log buffered"
				-v "_ff id 1 src-mac ${sta1.tif.mac} protocol 1 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
		</step>

		<step no="10.3">
			<desc>
				-ping mp
			</desc>
			<log-file>ping_mp.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "ping ${ap3.mgt0.ip} -c 1"
			</ssh>
		</step>

		<step no="10.4">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>ping_mp_logbuf_ap3.log</log-file>
			<console target="ap3" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.1" -i "${sta1.tif.ip}->${ap3.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi1.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(r) mgt0" -i "${ap3.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap3.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>
		
		<step no="10.4_0">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>ping_mp_logbuf_ap3.log</log-file>
			<console target="ap3" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.2" -i "${sta1.tif.ip}->${ap3.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(r) mgt0" -i "${ap3.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(o) wifi0.2" -i "${ap3.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>

		<step no="10.5">
			<desc>
				-check logbuf in portal
			</desc>
			<log-file>ping_mp_logbuf_ap1.log</log-file>
			<console target="ap1" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(r) mgt0" -i "${sta1.tif.ip}->${ap3.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "QoS tunnel user profile(2)"</log-match>
			<log-match>-c -i "(o) eth0" -i "${sta1.tif.ip}->${ap3.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(i) eth0" -i "${ap3.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap1.mgt0.ip}->${ap3.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) eth0" -i "${ap1.mgt0.ip}->${ap3.mgt0.ip}" -i "proto(47)"</log-match>
			<no-error-check />
		</step>

		<!-- 11. Client ping AP1, check datapath -->
		<step no="11.1">
			<desc>
				-clear log buf
			</desc>
			<log-file>clear_logbuf_ap3_13.log</log-file>
			<console target="ap3">
				-v "clear log buffered"
			</console>
		</step>

		<step no="11.2">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_ap1_13.log</log-file>
			<console target="ap1">
				-v "clear log buffered"
			</console>
		</step>

		<step no="11.3">
			<desc>
				-ping portal2
			</desc>
			<log-file>ping_portal2.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "ping ${ap1.mgt0.ip} -c 1"
			</ssh>
		</step>

		<step no="11.4">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>ping_portal2_logbuf_ap3.log</log-file>
			<console target="ap3" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.1" -i "${sta1.tif.ip}->${ap1.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi1.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(r) mgt0" -i "${ap1.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap1.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>
		
		<step no="11.4_0">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>ping_portal2_logbuf_ap3.log</log-file>
			<console target="ap3" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.2" -i "${sta1.tif.ip}->${ap1.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(r) mgt0" -i "${ap1.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(o) wifi0.2" -i "${ap1.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>

		<step no="11.5">
			<desc>
				-check logbuf in portal
			</desc>
			<log-file>ping_portal2_logbuf_ap1.log</log-file>
			<console target="ap1" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(r) mgt0" -i "${sta1.tif.ip}->${ap1.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "QoS tunnel user profile(2)"</log-match>
			<log-match>-c -i "(u) mgt0" -i "${sta1.tif.ip}->${ap1.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap1.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=0 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap1.mgt0.ip}->${ap3.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) eth0" -i "${ap1.mgt0.ip}->${ap3.mgt0.ip}" -i "proto(47)"</log-match>
			<no-error-check />
		</step>

		<!-- 12. Client ping AP2, check datapath -->
		<step no="12.1">
			<desc>
				-clear log buf
			</desc>
			<log-file>clear_logbuf_ap3_14.log</log-file>
			<console target="ap3">
				-v "clear log buffered"
			</console>
		</step>

		<step no="12.2">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_ap1_14.log</log-file>
			<console target="ap1">
				-v "clear log buffered"
			</console>
		</step>

		<step no="12.3">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_ap2_14.log</log-file>
			<console target="ap2">
				-v "clear log buffered"
				-v "_ff id 1 src-ip ${sta1.tif.ip} bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
		</step>

		<step no="12.4">
			<desc>
				-ping ap2
			</desc>
			<log-file>ping_ap2.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "ping ${ap2.mgt0.ip} -c 1"
			</ssh>
		</step>

		<step no="12.5">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>ping_portal2_logbuf_mp.log</log-file>
			<console target="ap3" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.1" -i "${sta1.tif.ip}->${ap2.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi1.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(r) mgt0" -i "${ap2.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap2.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>
		
		<step no="12.5_0">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>ping_portal2_logbuf_mp.log</log-file>
			<console target="ap3" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.2" -i "${sta1.tif.ip}->${ap2.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(r) mgt0" -i "${ap2.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(o) wifi0.2" -i "${ap2.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>

		<step no="12.6">
			<desc>
				-check logbuf in portal
			</desc>
			<log-file>ping_portal2_logbuf_portal2.log</log-file>
			<console target="ap1" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(r) mgt0" -i "${sta1.tif.ip}->${ap2.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "QoS tunnel user profile(2)"</log-match>
			<log-match>-c -i "(o) eth0" -i "${sta1.tif.ip}->${ap2.mgt0.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(i) eth0" -i "${ap2.mgt0.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap1.mgt0.ip}->${ap3.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) eth0" -i "${ap1.mgt0.ip}->${ap3.mgt0.ip}" -i "proto(47)"</log-match>
			<no-error-check />
		</step>

		<!-- 13. client ping gateway of portal2, check datapath -->
		<step no="13.1">
			<desc>
				-clear log buf
			</desc>
			<log-file>clear_logbuf_mp_15.log</log-file>
			<console target="ap3">
				-v "clear log buffered"
			</console>
		</step>

		<step no="13.2">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_portal2_15.log</log-file>
			<console target="ap1">
				-v "clear log buffered"
			</console>
		</step>

		<step no="13.3">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_portal1_15.log</log-file>
			<console target="ap2">
				-v "clear log buffered"
			</console>
		</step>

		<step no="13.4">
			<desc>
				-ping gw
			</desc>
			<log-file>ping_gw.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "ping ${ap1.mgt0.gw.ip} -c 1"
			</ssh>
		</step>

		<step no="13.5">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>ping_gw_logbuf_mp.log</log-file>
			<console target="ap3" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.1" -i "${sta1.tif.ip}->${ap1.mgt0.gw.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi1.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(r) mgt0" -i "${ap1.mgt0.gw.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap1.mgt0.gw.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>
		
		<step no="13.5_0">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>ping_gw_logbuf_mp.log</log-file>
			<console target="ap3" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.2" -i "${sta1.tif.ip}->${ap1.mgt0.gw.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(r) mgt0" -i "${ap1.mgt0.gw.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "(o) wifi0.2" -i "${ap1.mgt0.gw.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>

		<step no="15.6">
			<desc>
				-check logbuf in portal
			</desc>
			<log-file>ping_gw_logbuf_portal2.log</log-file>
			<console target="ap1" timeout="120">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(r) mgt0" -i "${sta1.tif.ip}->${ap1.mgt0.gw.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "QoS tunnel user profile(2)"</log-match>
			<log-match>-c -i "(o) eth0" -i "${sta1.tif.ip}->${ap1.mgt0.gw.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-c -i "(i) eth0" -i "${ap1.mgt0.gw.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<log-match>-c -i "mgt_dev_xmit: skb_encap_pak upid=2 qos=2"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap1.mgt0.ip}->${ap3.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) eth0" -i "${ap1.mgt0.ip}->${ap3.mgt0.ip}" -i "proto(47)"</log-match>
			<no-error-check />
		</step>

		<!-- 14. Client send broadcast, check datapath -->
		<step no="14.1">
			<desc>
				-clear log buf
			</desc>
			<log-file>clear_logbuf_mp_16.log</log-file>
			<console target="ap3">
				-v "clear log buffered"
				-v "no _ff id 1"
				-v "_ff id 1 dst-port 67 bidirectional"
			</console>
		</step>

		<step no="14.2">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_portal2_16.log</log-file>
			<console target="ap1">
				-v "clear log buffered"
				-v "no _ff id 1"
				-v "_ff id 1 dst-port 67 bidirectional"
			</console>
		</step>

		<step no="14.3">
			<desc>
				-clear log buf and enable debug
			</desc>
			<log-file>clear_logbuf_portal1_16.log</log-file>
			<console target="ap2">
				-v "clear log buffered"
				-v "no _ff id 1"
				-v "_ff id 1 dst-port 67 bidirectional"
			</console>
		</step>
		<!-- <step no="14.4"> <desc> -send dhcp broadcast packet. -->
		<step no="14.4">
			<desc>
				-send dhcp broadcast packet.
			</desc>
			<log-file>send_dhcp_broadcast.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "killall dhclient"
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="14.5">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>ping_broadcast_logbuf_mp.log</log-file>
			<console target="ap3" timeout="600">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.1" -i "0.0.0.0->255.255.255.255" -i "UDP 68->67" -i "DHCP Request"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi1.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<no-error-check />
		</step>
		
		<step no="14.5_0">
			<desc>
				-check logbuf in mp
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>ping_broadcast_logbuf_mp.log</log-file>
			<console target="ap3" timeout="600">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) wifi0.2" -i "0.0.0.0->255.255.255.255" -i "UDP 68->67" -i "DHCP Request"</log-match>
			<log-match>-c -i "(i) mgt0" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<log-match>-c -i "(o) wifi0.1" -i "${ap3.mgt0.ip}->${ap1.mgt0.ip}" -i "proto(47)"</log-match>
			<no-error-check />
		</step>

		<step no="14.6">
			<desc>
				-check logbuf in portal1
			</desc>
			<log-file>ping_broadcast_logbuf_ap2.log</log-file>
			<console target="ap2" timeout="600">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(i) eth0" -i "0.0.0.0->255.255.255.255" -i "UDP 68->67" -i "DHCP Request"</log-match>
			<no-error-check />
		</step>

		<step no="14.7">
			<desc>
				-check logbuf in portal2
			</desc>
			<log-file>ping_broadcast_logbuf_ap1.log</log-file>
			<console target="ap1" timeout="600">
				-v "show logging buffer"
			</console>
			<log-match>-c -i "(r) mgt0" -i "0.0.0.0->255.255.255.255" -i "UDP 68->67" -i "DHCP Request"</log-match>
			<log-match>-c -i "(o) eth0" -i "0.0.0.0->255.255.255.255" -i "UDP 68->67" -i "DHCP Request"</log-match>
			<log-match>-c -i "(u) mgt0" -i "0.0.0.0->255.255.255.255" -i "UDP 68->67" -i "DHCP Request"</log-match>
			<no-error-check />
		</step>
	</stage>

</testcase>
