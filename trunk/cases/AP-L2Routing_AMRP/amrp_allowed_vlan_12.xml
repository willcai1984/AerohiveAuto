<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Bridge -access interface allowed Vlan, should not take effect</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>

		Pre-Condition:

		1. Configure switch1 port allow vlan 41,42,43,44
		Switchport mode trunk
		Switchport trunk encapsulation dot1q
		Switchport trunk allowed vlan 41,42,43,44
		2. Configure AP1 in the management vlan 41

		Test Procedure:

		1. AP1,AP2 Create different user-profile, every user-profile with different client vlan-
		id 41,42,43, AP1 "interface eth0 allowed all"
		2. AP2 interface eth0 bridge-access mode, bind client vlan-id 43,PC connected to
		interface eth0
		3. Push CLI, "interface eth0 allow 43" on AP2
		4. Create a ssid on AP2, with user-profile client vlan-id 42
		5. Client associated to AP2, client ping PC, Client send broadcast packets
		6. Push CLI, "interface eth0 allow 44" on AP2
		7. Create a ssid on AP2, with user-profile client vlan-id 42
		8. Client associated to AP2, client ping PC, Client send broadcast packets
	</description>
	<numofap>3</numofap>
	<numofsta>1</numofsta>
	<numofbpc>1</numofbpc>
	<tbtype>linux</tbtype>

	<stage>
		<property name="ap.log.file1" value="show_logging_debug_1.log" />
		<property name="ap.log.file2" value="show_logging_debug_2.log" />

		<if>"${tb.bridge_support}" == "true" &amp;&amp; "${ap1.eth1.existed}" =="true"</if>

		<step no="0">
			<desc>
				-Configure AP3, shutdown ap3's eth0 and eth1,to avoid effect on the test
			</desc>
			<console target="ap3" timeout="30">
				-v "interface eth0 shutdown"
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="0.1">
			<desc>
				ap1, create hive ${hive.name}
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>set_amrp_ap1_wifi1.log</log-file>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 radio channel 165"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
			</console>
		</step>
		
		<step no="0.1_0">
			<desc>
				ap1, create hive ${hive.name}
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>set_amrp_ap1_wifi1.log</log-file>
			<if>"${ap1.wifi1.existed}" =="true"</if>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
				-v "interface wifi0 hive ${hive.name} shutdown"
				-v "no interface wifi0 hive ${hive.name} shutdown"
			</console>
		</step>

		<step no="0.1.1">
			<desc>
				ap1 as portal, shutdown eth1
			</desc>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="0.2">
			<desc>
				ap2, create hive ${hive.name} and set eth1 to bridge-access mode
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>set_amrp_ap2.log</log-file>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 radio channel 165"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
				-v "user-profile ${tb.vlan1} vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "interface eth1 mode bridge-access user-profile-attribute ${tb.vlan1}"
				-v "interface eth1 mac-learning enable"
				-v "interface eth1 shutdown"
			</console>
		</step>
		
		<step no="0.2_0">
			<desc>
				ap2, create hive ${hive.name} and set eth1 to bridge-access mode
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>set_amrp_ap2.log</log-file>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
				-v "interface wifi0 hive ${hive.name} shutdown"
				-v "no interface wifi0 hive ${hive.name} shutdown"
				-v "user-profile ${tb.vlan1} vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "interface eth1 mode bridge-access user-profile-attribute ${tb.vlan1}"
				-v "interface eth1 mac-learning enable"
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="0.3">
			<desc>
				check ap1 obtained mgt0 ip
			</desc>
			<log-file>show_m0_ap1.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
			<log-match>-e "IP addr=192.168.${tb.vlan1}"</log-match>
		</step>

		<step no="0.4">
			<desc>
				check ap2 obtained mgt0 ip
			</desc>
			<log-file>show_m0_ap2.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
			<log-match>-e "IP addr=192.168.${tb.vlan1}"</log-match>
		</step>

		<step no="1.1">
			<desc>show interface of Portal ap1</desc>
			<log-file>show_portal_interface.log</log-file>
			<console target="ap1">
				-v "show interface"
			</console>
		</step>

		<step no="1.2">
			<desc>get the wifi1 mac address of portal ap1</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<setvar name="ap1.wifi1.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_portal_interface.log -k wifi1 -p 2
			</setvar>
		</step>
		
		<step no="1.2_0">
			<desc>get the wifi1 mac address of portal ap1</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<setvar name="ap1.wifi1.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_portal_interface.log -k wifi0 -p 2
			</setvar>
		</step>

		<step no="2.1">
			<desc>show interface of MP ap2</desc>
			<log-file>show_mp_interface.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="2.2">
			<desc>get the wifi1 mac address of MP ap2</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<setvar name="ap2.wifi1.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_mp_interface.log -k wifi1 -p 2
			</setvar>
		</step>
		
		<step no="2.2_0">
			<desc>get the wifi1 mac address of MP ap2</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<setvar name="ap2.wifi1.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_mp_interface.log -k wifi0 -p 2
			</setvar>
		</step>

		<step no="3.1" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show Portal to check amrp neighbor
			</desc>
			<log-file>show_portal_amrp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1" timeout="30">
				-v "show amrp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.w4mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show MP to check amrp neighbor
			</desc>
			<log-file>show_mp_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="30">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1.wifi1.w4mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.4">
			<desc>
				ap2 as MP, shutdown eth0 when amrp neighbor established
			</desc>
			<console target="ap2">
				-v "interface eth0 shutdown"
				-v "show amrp neighbor"
			</console>
		</step>

		<step no="3.5">
			<desc>
				ap2, no shutdown eth1 which connected to client bpc
			</desc>
			<console target="ap2">
				-v "no interface eth1 shutdown"
			</console>
		</step>

		<step no="4.1">
			<desc>Get Vpc's route table</desc>
			<log-file>bpc_dhclient.log</log-file>
			<ssh host="${bpc1.mif.ip}" prompt=">|.*#" timeout="60">
				-v "killall dhclient -q"
				-v "ifconfig ${bpc1.tif.name} down"
				-v "ifconfig ${bpc1.tif.name} up"
				-v "dhclient ${bpc1.tif.name}"
			</ssh>
		</step>

		<step no="4.2">
			<desc>Get Vpc's route table</desc>
			<log-file>show_bpc_ipconfig.log</log-file>
			<ssh host="${bpc1.mif.ip}" prompt=">|.*#">
				-v "ifconfig ${bpc1.tif.name}"
			</ssh>
		</step>

		<step no="4.3">
			<desc>Get Vpc's route table</desc>
			<setvar name="bpc1.tif.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_bpc_ipconfig.log -i ${bpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="5.1">
			<desc>
				create ssid on mp ap2
			</desc>
			<log-file>set_ssid_ap2.log</log-file>
			<console target="ap2">
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile up3 vlan-id ${tb.vlan3} attribute ${tb.vlan3}"
				-v "security-object sec3"
				-v "security-object sec3 default-user-profile-attr ${tb.vlan3}"
				-v "ssid ${ssid.name} security-object sec3"
			</console>
		</step>

		<property name="sta1.ssid" value="${ssid.name}" />
		<include prefix="6" file="subs/sta_connect_linux.xml" rargs="sta1" />

		<step no="7.1">
			<desc>
				show bridge-access interface eth1's allowed-vlan for default
			</desc>
			<log-file>show_eth1_allowed_7.log</log-file>
			<console target="ap2">
				-v "show interface eth1 allowed-vlan"
			</console>
			<log-match>-e "1-4094"</log-match>
		</step>

		<step no="7.2">
			<desc>
				station1 ping bpc client which connecting on mp(ap2)'s bridge-access interface
			</desc>
			<log-file>sta1_ping_bpc_8.log</log-file>
			<ssh target="sta1">
				-v "ping ${bpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-i "from ${bpc1.tif.ip}" -i "ttl=" -c</log-match>
		</step>

		<step no="8.0">
			<desc>
				set bridge-access interface eth1's allowed-vlan to tb.vlan1 (different with wifi station vlan)
			</desc>
			<console target="ap2">
				-v "interface eth1 allowed-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="8.0.1">
			<desc>
				show to check eth1's allowed-vlan
			</desc>
			<log-file>show_eth1_allowed_8.log</log-file>
			<console target="ap2">
				-v "show interface eth1 allowed-vlan"
			</console>
			<log-match>-e "${tb.vlan1}"</log-match>
		</step>

		<step no="8.1">
			<desc>
				set debug filter on mp ap2
			</desc>
			<console target="ap2">
				-v "clear log buffered"
				-v "_ff id 1 src-ip ${sta1.tif.ip} protocol 1 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
			<no-error-check />
		</step>

		<step no="8.2">
			<desc>
				station1 ping bpc client which connecting on mp(ap2)'s bridge-access interface
			</desc>
			<log-file>sta1_ping_bpc_8.log</log-file>
			<ssh target="sta1">
				-v "ping ${bpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-i "from ${bpc1.tif.ip}" -i "ttl=" -c</log-match>
		</step>

		<step no="8.3">
			<desc>
				show log buffer on mp ap2
			</desc>
			<console target="ap2">
				-v "show logging buffered > tftp://${mpc.tif.ip}:/${ap.log.file1}"
			</console>
			<no-error-check />
		</step>

		<step no="8.4">
			<desc>cp the file to current log dir</desc>
			<log-file>${ap.log.file1}</log-file>
			<script>
				cd /tftpboot/; mv ${ap.log.file1} ${log.dir}/
			</script>
			<log-match>-i "(o) eth1" -i "${sta1.tif.ip}->${bpc1.tif.ip}"</log-match>
			<log-match>-i "${sta1.tif.ip}->${bpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-i "${bpc1.tif.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>

		<step no="9.0">
			<desc>
				set bridge-access interface eth1's allowed-vlan to tb.vlan2 (different with wifi station vlan)
			</desc>
			<console target="ap2">
				-v "interface eth1 allowed-vlan ${tb.vlan2}"
			</console>
		</step>

		<step no="9.0.1">
			<desc>
				show to check eth1's allowed-vlan
			</desc>
			<log-file>show_eth1_allowed_9.log</log-file>
			<console target="ap2">
				-v "show interface eth1 allowed-vlan"
			</console>
			<log-match>-i "${tb.vlan1}" -i "${tb.vlan2}"</log-match>
		</step>

		<step no="10.1">
			<desc>
				set debug filter on mp ap2
			</desc>
			<console target="ap2">
				-v "clear log buffered"
			</console>
			<no-error-check />
		</step>

		<step no="10.2">
			<desc>
				station1 ping bpc client which connecting on mp(ap2)'s bridge-access interface
			</desc>
			<log-file>sta1_ping_bpc_10.log</log-file>
			<ssh target="sta1">
				-v "ping ${bpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-i "from ${bpc1.tif.ip}" -i "ttl=" -c</log-match>
		</step>

		<step no="10.3">
			<desc>
				show log buffer on mp ap2
			</desc>
			<console target="ap2">
				-v "show logging buffered > tftp://${mpc.tif.ip}:/${ap.log.file2}"
			</console>
			<no-error-check />
		</step>

		<step no="10.4">
			<desc>cp the file to current log dir</desc>
			<log-file>${ap.log.file2}</log-file>
			<script>
				cd /tftpboot/; mv ${ap.log.file2} ${log.dir}/
			</script>
			<log-match>-i "(o) eth1" -i "${sta1.tif.ip}->${bpc1.tif.ip}"</log-match>
			<log-match>-i "${sta1.tif.ip}->${bpc1.tif.ip}" -i "icmp-echo-req"</log-match>
			<log-match>-i "${bpc1.tif.ip}->${sta1.tif.ip}" -i "icmp-echo-reply"</log-match>
			<no-error-check />
		</step>
	</stage>

	<post-process>
		<include file="include/default_post_process.xml" />

		<stage>
			<step no="0">
				<desc>
					bpc client release ip
				</desc>
				<ssh target="${bpc1.mif.ip}">
					-v "dhclient -r ${bpc1.tif.name}"
				</ssh>
				<no-error-check />
			</step>
		</stage>
	</post-process>
</testcase>
