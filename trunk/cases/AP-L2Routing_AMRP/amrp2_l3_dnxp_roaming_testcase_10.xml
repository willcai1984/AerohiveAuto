<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>L3 DNXP unroam test (manual set value )</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>

		Pre-Condition:

		-Configure two APs in the different subnet but same hive
		-Configure two APs have same SSID, configure mobility-policy DNXP, --
		-Bind mobility-policy to user-profile
		-Bind this user-profile to SSID
		-In AP1,user-profile vlan-id same as AP1's mgt0 vlan
		-In AP2,user-profile vlan-id same as AP2's mgt0 vlan
		-Configure unroam-threshold timer on APs
		-Client associate to AP1, pass authentication

		Test Procedure:

		1. When client associate to AP1 check dnxp cache in portal.
		2. Set unroam-threshold value" mobility-policy inxp dnxp unroam-threshold 1000
		10"
		3. Check unroam-threshold value "show mobility-policy ***"
		4. Client roaming from AP1 to AP2, check cache table ,check route table
		5. traffic running between APs biger &gt;1000/10 packets/minute
		6. raffic running between APs less &lt;1000/10 packets/minute.

		Topo:
		------------L3 Switch-----------
		| ---------------------|
		Portal 1 (AP2) Portal 2(AP1)
		| ---------------------|
		sta2 -----------------sta1
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<property name="ssid.pwd" value="aerohive" />

	<stage>
		<!-- 0. pre-process the ap -->
		<step no="0.1">
			<desc>
				-when ap1 is not ap120,shutdown eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="0.2">
			<desc>
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap2">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<!-- 1. Configure two APs in the different subnet but same hive -->
		<step no="1.1">
			<desc>
				-Configure ap1 and ap2 in the different subnet but same hive
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "save config"
			</console>
		</step>
		
		<step no="1.1_0">
			<desc>
				-Configure ap1 and ap2 in the different subnet but same hive
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface wifi0 mode dual"
				-v "save config"
			</console>
		</step>

		<step no="1.2">
			<desc>
				-Configure ap1 and ap2 in the different subnet but same hive
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "save config"
			</console>
		</step>
		
		<step no="1.2_0">
			<desc>
				-Configure ap1 and ap2 in the different subnet but same hive
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface wifi0 mode dual"
				-v "save config"
			</console>
		</step>

		<!-- 2. Configure two APs have same SSID, configure mobility-policy DNXP, Bind mobility-policy to user-profile -->
		<step no="2.1">
			<desc>
				-configure mobility-policy DNXP, Bind mobility-policy to user-profile
			</desc>
			<console target="ap1">
				-v "security-object fwtest"
				-v "security-object fwtest default-user-profile-attr 2"
				-v "security-object fwtest security protocol-suite wpa2-tkip-psk ascii-key ${ssid.pwd}"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object fwtest"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 11"
				-v "mobility-policy ttt dnxp"
				-v "user-profile fw qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy ttt attribute 2"
				-v "save config"
			</console>
		</step>

		<step no="2.2">
			<desc>
				-configure mobility-policy DNXP, Bind mobility-policy to user-profile
			</desc>
			<console target="ap2">
				-v "security-object fwtest"
				-v "security-object fwtest default-user-profile-attr 2"
				-v "security-object fwtest security protocol-suite wpa2-tkip-psk ascii-key ${ssid.pwd}"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object fwtest"
				-v "mobility-policy ttt dnxp"
				-v "interface wifi0 radio channel 11"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile fw qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy ttt attribute 2"
				-v "save config"
			</console>
		</step>

		<step no="2.3" delay="60">
			<desc>
				-check dnxp neighbor in portal
			</desc>
			<log-file>show_dnxp_neighbor_ap1.log</log-file>
			<console target="ap1">
				-v "show amrp dnxp neighbor "
			</console>
		</step>

		<step no="2.4" delay="5">
			<desc>
				-check dnxp neighbor in portal
			</desc>
			<log-file>show_dnxp_neighbor_ap2.log</log-file>
			<console target="ap2">
				-v "show amrp dnxp neighbor"
			</console>
		</step>

		<step no="2.5">
			<desc></desc>
			<log-file>ap1_neighbor.log</log-file>
			<setvar name="ap1_reboot">
				cat ${log.dir}/show_dnxp_neighbor_ap1.log | awk '/Total/ {print $2}'
			</setvar>
		</step>

		<step no="2.6">
			<desc>judge weather need reboot ap1</desc>
			<log-file>compare.log</log-file>
			<if>"${ap1_reboot}" == "0"</if>
			<console target="ap1">
				-v "reboot"
			</console>
		</step>

		<step no="2.7">
			<desc></desc>
			<log-file>ap2_neighbor.log</log-file>
			<setvar name="ap2_reboot">
				cat ${log.dir}/show_dnxp_neighbor_ap2.log | awk '/Total/ {print $2}'
			</setvar>
		</step>

		<step no="2.8">
			<desc>judge weather need reboot ap2</desc>
			<log-file>compare.log</log-file>
			<if>"${ap2_reboot}" == "0"</if>
			<console target="ap2">
				-v "reboot"
			</console>
		</step>

		<step no="2.9" delay="300">
			<desc>
				-shutdown interface wifi0 ssid in ap2
			</desc>
			<log-file>shutdown_wifi0_ap2.log</log-file>
			<console target="ap2">
				-v "interface wifi0 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<!-- 3. client associate to AP1 -->
		<include prefix="1" file="subs/wpa_supplicant_start.xml" args="sta1" />
		<step no="3.1">
			<desc>client associate to ssid on AP1</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto RSN"
				-v "set_network 0 psk \"${ssid.pwd}\""
				-v "set_network 0 pairwise TKIP"
				-v "set_network 0 group TKIP"
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="3.2" delay="15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check the connection of client</desc>
			<log-file>wpa_stat_${staid}_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "status"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="3.3">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1" slow="true">
				-v "killall dhclient"
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="3.4" delay="10">
			<desc>ifconfig to show the client ip</desc>
			<log-file>ifconfig.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="3.5">
			<desc>get client mac</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -width 2
			</setvar>
		</step>

		<step no="3.6">
			<desc>get client ip</desc>
			<setvar name="sta1.tif.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<!-- 4. get parameters of AP -->
		<step no="4.1.1">
			<desc>
				-show interface for AP1
			</desc>
			<log-file>show_interface_ap1.log</log-file>
			<console target="ap1">
				-v "show interface"
			</console>
		</step>

		<step no="4.1.2">
			<desc>
				-show interface of mgt0 on AP1
			</desc>
			<log-file>show_ap1_mgt0.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="4.1.3">
			<desc>
				-Get AP1's mgt0 mac
			</desc>
			<setvar name="ap1.mgt0.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="4.1.4">
			<desc>
				-get IP of mgt0 on AP1
			</desc>
			<setvar name="ap1.mgt0.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="4.2.1">
			<desc>
				-show interface for AP2
			</desc>
			<log-file>show_interface_ap2.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="4.2.2">
			<desc>
				-show interface of mgt0 on AP2
			</desc>
			<log-file>show_ap2_mgt0.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="4.2.3">
			<desc>
				-Get AP2's mgt0 mac
			</desc>
			<setvar name="ap2.mgt0.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="4.2.4">
			<desc>
				-get IP of mgt0 on AP2
			</desc>
			<setvar name="ap2.mgt0.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<!-- 5. check dnxp cache and station -->
		<step no="5.1">
			<desc>
				-check station
			</desc>
			<log-file>show_station_ap1.log</log-file>
			<console target="ap1">
				-v "show station"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}" -i "tkip" -i "${tb.vlan1}" -i "2"</log-match>
		</step>

		<step no="5.2">
			<desc>
				-check station
			</desc>
			<log-file>show_station_ap2.log</log-file>
			<console target="ap2">
				-v "show station"
			</console>
			<no-error-check />
			<log-match>-c -n -i "${sta1.tif.mac}"</log-match>
			<log-match>-c -n -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="5.3" delay="30">
			<desc>
				-check dnxp cache in portal
			</desc>
			<log-file>show_dnxp_cache_ap1.log</log-file>
			<console target="ap1">
				-v "show amrp dnxp cache "
			</console>
		</step>

		<step no="5.4">
			<desc>
				-check dnxp cache in portal
			</desc>
			<log-file>show_dnxp_cache_ap2.log</log-file>
			<console target="ap2">
				-v "show amrp dnxp cache "
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "${ap1.mgt0.ip}" -i "${tb.vlan1}" -i "2"</log-match>
		</step>

		<!-- 6. Set unroam-threshold value” mobility-policy inxp dnxp unroam-threshold 1000 10” -->
		<step no="6.1">
			<desc>
				-Set unroam-threshold value for ap1
			</desc>
			<log-file>set_unroam_threshold_ap1.log</log-file>
			<console target="ap1">
				-v "mobility-policy ttt dnxp unroam-threshold 1000 10"
			</console>
		</step>

		<step no="6.2">
			<desc>
				-Set unroam-threshold value for ap2
			</desc>
			<log-file>set_unroam_threshold_ap2.log</log-file>
			<console target="ap2">
				-v "mobility-policy ttt dnxp unroam-threshold 1000 10"
			</console>
		</step>

		<step no="6.3">
			<desc>
				-Check unroam-threshold value for ap1
			</desc>
			<log-file>check_unroam_threshold_ap1.log</log-file>
			<console target="ap1">
				-v "show mobility-policy ttt"
			</console>
			<log-match>-e "DNXP" -i "Type:" -p 2</log-match>
			<log-match>-c -e "1000" -i "DURT number:" -p 3</log-match>
			<log-match>-c -e "10" -i "DURT interval:" -p 3</log-match>
		</step>

		<step no="6.4">
			<desc>
				-Check unroam-threshold value for ap2
			</desc>
			<log-file>check_unroam_threshold_ap2.log</log-file>
			<console target="ap2">
				-v "show mobility-policy ttt"
			</console>
			<log-match>-e "DNXP" -i "Type:" -p 2</log-match>
			<log-match>-c -e "1000" -i "DURT number:" -p 3</log-match>
			<log-match>-c -e "10" -i "DURT interval:" -p 3</log-match>
		</step>

		<!-- 7. Client roaming from AP1 to AP2, check cache table ,check route table -->
		<step no="7.1">
			<desc>
				-enable wifi in ap2
			</desc>
			<console target="ap2">
				-v "no interface wifi0 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<step no="7.2">
			<desc>
				-disable wifi in ap1
			</desc>
			<console target="ap1">
				-v "interface wifi0 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<!-- 8. check dnxp cache in ap -->
		<step no="8.1">
			<desc>
				-check dnxp cache in portal
			</desc>
			<log-file>show_roaming_dnxp_cache_ap1.log</log-file>
			<console target="ap1">
				-v "show amrp dnxp cache "
			</console>
		</step>

		<step no="8.2">
			<desc>
				-check dnxp cache in portal
			</desc>
			<log-file>show_roaming_dnxp_cache_ap2.log</log-file>
			<console target="ap2">
				-v "show amrp dnxp cache "
			</console>
		</step>

		<step no="8.3">
			<desc>
				-check station
			</desc>
			<log-file>show_roaming_station_ap1.log</log-file>
			<console target="ap1">
				-v "show station"
			</console>
			<no-error-check />
			<log-match>-c -n -i "${sta1.tif.mac}"</log-match>
			<log-match>-c -n -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="8.4">
			<desc>
				-check station
			</desc>
			<log-file>show_roaming_station_ap2.log</log-file>
			<console target="ap2">
				-v "show station"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}" -i "tkip" -i "${tb.vlan1}" -i "2"</log-match>
		</step>

		<!-- 9. check route table in ap -->
		<step no="9.1">
			<desc>
				-check route table in ap1
			</desc>
			<log-file>show_roaming_route_ap1.log</log-file>
			<console target="ap1">
				-v "show route"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "${ap1.mgt0.mac}" -i "mgt0" -i "LTO"</log-match>
		</step>

		<step no="9.2">
			<desc>
				-check route table in ap2
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>show_roaming_table_ap2.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "${ap2.mgt0.mac}" -i "wifi0.1" -i "LTO"</log-match>
		</step>
		
		<step no="9.2_0">
			<desc>
				-check route table in ap2
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>show_roaming_table_ap2.log</log-file>
			<console target="ap2">
				-v "show route"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "${ap2.mgt0.mac}" -i "wifi0.2" -i "LTO"</log-match>
		</step>

		<!-- 10. check tunnel in ap -->
		<step no="10.1">
			<desc>
				-check tunnel in ap1
			</desc>
			<log-file>show_roaming_tunnel_ap1.log</log-file>
			<console target="ap1">
				-v "show amrp tunnel"
			</console>
			<no-error-check />
			<log-match>-c -i "${ap2.mgt0.ip}" -i "DB"</log-match>
		</step>

		<step no="10.2">
			<desc>
				-check tunnel in ap2
			</desc>
			<log-file>show_roaming_tunnel_ap2.log</log-file>
			<console target="ap2">
				-v "show amrp tunnel"
			</console>
			<no-error-check />
			<log-match>-c -i "${ap1.mgt0.ip}" -i "DA"</log-match>
		</step>
	</stage>
</testcase>
