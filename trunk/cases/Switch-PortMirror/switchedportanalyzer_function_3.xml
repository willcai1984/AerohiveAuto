<testcase>
	<brief>(IxPort: CoF=4)Mirror from interface(link aggregation_ access)</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>

	<description>
		Mirror from interface, mode aggregation_access, direction ingress/egress/both. Pkts mode no_tag/vlan_tag(correct/incorrect)/bad_pkts
	</description>

	<comment>
		Test procedure
		1. Configure source is the port channel, direction is ingress, destination is interface 5
		2. IXIA port 1 or 2 send broadcast/multicast/unicast pkts(mix tagged and untagged pkts), capture pkts on IXIA port 5, result 1
		3. Configure source is the port channel, direction is egress, destination is interface 5
		4. IXIA port 3 send broadcast/multicast/unicast pkts(mix tagged and untagged pkts, mix destination IP), capture pkts on IXIA port 5, result 2
		5. Configure source is the port channel, direction is both, destination is interface 4
		6. IXIA port123 send broadcast/multicast/unicast pkts(mix tagged and untagged pkts), capture pkts on IXIA port 5, result 3
		7. Modify the interface 5 mode to trunk, repeat step 1-6, result 4
		8. Modify the interface 5 mode to wan, repeat step 1-6, result 4
		Expect result
		Result 1: Can capture the pkts sent from port 12
		Result 2: Can capture the untagged pkts sent from port 3
		Result 3: Can capture all the pkts sent from port1 2 and the untagged pkts
		sent from port 3
		Result 4: The same as above

	</comment>
	<property name="agg_id" value="1" />
	<property name="tx_port1" value="${sw1.port1.ixia_port}" />
	<property name="tx_port2" value="${sw1.port2.ixia_port}" />
	<property name="tx_port3" value="${sw1.port3.ixia_port}" />
	<property name="rx_port1" value="${sw1.port4.ixia_port}" />
	<property name="correct_vlan" value="101" />
	<property name="incorrect_vlan" value="102" />

	<stage>
		<step no="1.0.1">
			<desc>
				Show interface mgt0 to get ip address
			</desc>
			<log-file>step1.0.1_mgt0_ip_info.log</log-file>
			<console target="sw1">
				-v 'show interface mgt0'
			</console>
		</step>

		<step no="1.0.2">
			<desc>
				Get mgt0's ip address
			</desc>
			<setvar name="sw1.ip">
				python ${bin.dir}/getbyrexp.py -p "IP addr=(\d+\.\d+\.\d+\.\d+);" -f ${log.dir}/step1.0.1_mgt0_ip_info.log -t str
			</setvar>
		</step>

		<step no="1.1.1">
			<desc>
				source aggregation_access, direction ingress.
			</desc>
			<ssh target="${sw1.ip}" user="${sw1.user}" password="${sw1.passwd}">
				-v 'vlan ${correct_vlan}'
				-v 'vlan ${incorrect_vlan}'
				-v 'agg ${agg_id}'
				-v 'interface ${sw1.port1} switch mode access'
				-v 'interface ${sw1.port2} switch mode access'
				-v 'interface ${sw1.port1} agg ${agg_id}'
				-v 'interface ${sw1.port2} agg ${agg_id}'
				-v 'interface agg${agg_id} switchport mode access'
				-v 'interface agg${agg_id} switchport access vlan ${correct_vlan}'
				-v 'interface ${sw1.port3} switchport mode access'
				-v 'interface ${sw1.port3} switchport access vlan ${correct_vlan}'
				-v 'monitor session 1'
				-v 'monitor session 1 destination interface ${sw1.port4}'
				-v 'monitor session 1 source interface agg${agg_id} ingress'
				-v 'monitor session 1 enable'
				-v 'show running-config'
			</ssh>
		</step>

		<step no="1.1.2.1">
			<desc>
				Direction:ingress; Pkts:no_tag; Port1 send pkts
			</desc>
			<log-file>step1.1.2.1_ingress_no_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port1} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.1.2.2">
			<desc>
				Direction:ingress; Pkts:no_tag, Port1 send pkts; rx1=tx1(Port1 is in source ports list)
			</desc>
			<log-file>step1.1.2.1_ingress_no_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port1} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>



		<step no="1.1.3.1">
			<desc>
				Direction:ingress; Pkts:no_tag; Port2 send pkts
			</desc>
			<log-file>step1.1.3.1_ingress_no_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port2},${rx_port1} -phyList ${sw1.port2.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port2} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.1.3.2">
			<desc>
				Direction:ingress; Pkts:no_tag, Port2 send pkts; rx1=tx1(Port2 is in source ports list)
			</desc>
			<log-file>step1.1.3.1_ingress_no_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port2} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>


		<step no="1.1.4.1">
			<desc>
				Direction:ingress; Pkts:no_tag; Both Port1 and 2 send pkts
			</desc>
			<log-file>step1.1.4.1_ingress_no_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016"
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0017
				-rate_pps 20"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.1.4.2">
			<desc>
				Direction:ingress; Pkts:no_tag; Both Port1 and 2 send pkts; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.1.4.1_ingress_no_tag.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="1.1.4.3">
			<desc>
				Direction:ingress; Pkts:no_tag; Both Port1 and 2 send pkts; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.1.4.1_ingress_no_tag.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="1.1.4.4">
			<desc>
				Direction:ingress; Pkts:no_tag; Both Port1 and 2 send pkts; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.1.4.1_ingress_no_tag.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="1.1.4.5">
			<desc>
				Direction:ingress; Pkts:no_tag; Both Port1 and 2 send pkts; check if tx1+tx2=rx1(exist bug, both the two ports send the pkts at the same time may loss pkts)
			</desc>
			<log-file>step1.1.4.5_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>

		<step no="1.2.2.1">
			<desc>
				Direction:ingress; Pkts:correct_vlan; Port1 send pkts
			</desc>
			<log-file>step1.2.2.1_ingress_correct_vlan.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port1} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.2.2.2">
			<desc>
				Direction:ingress; Pkts:correct_vlan, Port1 send pkts; rx1=tx1(Port1 is in source ports list)
			</desc>
			<log-file>step1.2.2.1_ingress_correct_vlan.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port1} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>



		<step no="1.2.3.1">
			<desc>
				Direction:ingress; Pkts:correct_vlan; Port2 send pkts
			</desc>
			<log-file>step1.2.3.1_ingress_correct_vlan.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port2},${rx_port1} -phyList ${sw1.port2.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port2} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.2.3.2">
			<desc>
				Direction:ingress; Pkts:correct_vlan, Port2 send pkts; rx1=tx1(Port2 is in source ports list)
			</desc>
			<log-file>step1.2.3.1_ingress_correct_vlan.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port2} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>


		<step no="1.2.4.1">
			<desc>
				Direction:ingress; Pkts:correct_vlan; Both Port1 and 2 send pkts
			</desc>
			<log-file>step1.2.4.1_ingress_correct_vlan.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0017
				-vlan enable
				-vlan_id ${correct_vlan}
				-rate_pps 20"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.2.4.2">
			<desc>
				Direction:ingress; Pkts:correct_vlan; Both Port1 and 2 send pkts; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.2.4.1_ingress_correct_vlan.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="1.2.4.3">
			<desc>
				Direction:ingress; Pkts:correct_vlan; Both Port1 and 2 send pkts; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.2.4.1_ingress_correct_vlan.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="1.2.4.4">
			<desc>
				Direction:ingress; Pkts:correct_vlan; Both Port1 and 2 send pkts; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.2.4.1_ingress_correct_vlan.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="1.2.4.5">
			<desc>
				Direction:ingress; Pkts:correct_vlan; Both Port1 and 2 send pkts; check if tx1+tx2=rx1(exist bug, both the two ports send the pkts at the same time may loss the pkts)
			</desc>
			<log-file>step1.2.4.5_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>


		<step no="1.3.2.1">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan; Port1 send pkts
			</desc>
			<log-file>step1.3.2.1_ingress_incorrect_vlan.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port1} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.3.2.2">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan, Port1 send pkts; rx1=tx1(Port1 is in source ports list)
			</desc>
			<log-file>step1.3.2.1_ingress_incorrect_vlan.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port1} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>



		<step no="1.3.3.1">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan; Port2 send pkts
			</desc>
			<log-file>step1.3.3.1_ingress_incorrect_vlan.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port2},${rx_port1} -phyList ${sw1.port2.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port2} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.3.3.2">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan, Port2 send pkts; rx1=tx1(Port2 is in source ports list)
			</desc>
			<log-file>step1.3.3.1_ingress_incorrect_vlan.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port2} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>


		<step no="1.3.4.1">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan; Both Port1 and 2 send pkts
			</desc>
			<log-file>step1.3.4.1_ingress_incorrect_vlan.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0017
				-vlan enable
				-vlan_id ${incorrect_vlan}
				-rate_pps 20"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="1.3.4.2">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan; Both Port1 and 2 send pkts; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.3.4.1_ingress_incorrect_vlan.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="1.3.4.3">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan; Both Port1 and 2 send pkts; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.3.4.1_ingress_incorrect_vlan.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="1.3.4.4">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan; Both Port1 and 2 send pkts; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step1.3.4.1_ingress_incorrect_vlan.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="1.3.4.5">
			<desc>
				Direction:ingress; Pkts:incorrect_vlan; Both Port1 and 2 send pkts; check if tx1+tx2=rx1(exist bug, both the two ports send the pkts at the same time may loss the pkts)
			</desc>
			<log-file>step1.3.4.5_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>

		<step no="2.1.1">
			<desc>
				source aggregation_access, direction egress. configure port3's vlan is the same as port1
			</desc>
			<ssh target="${sw1.ip}" user="${sw1.user}" password="${sw1.passwd}">
				-v 'no monitor session 1 enable'
				-v 'no monitor session 1 source interface agg${agg_id}'
				-v 'monitor session 1 source interface agg${agg_id} egress'
				-v 'monitor session 1 enable'
				-v 'show running-config'
			</ssh>
		</step>

		<step no="2.1.2.1">
			<desc>
				Direction:egress; Pkts:no_tag, tx3(port3) to rx1
			</desc>
			<log-file>step2.1.2.1_egress_no_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port3},${rx_port1} -phyList ${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port3} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port3} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="2.1.2.2">
			<desc>
				Direction:egress; Pkts:no_tag; Expect:rx1=tx3(port3 and agg1 is access vlan 10, can mirror pkts successfully)
			</desc>
			<log-file>step2.1.2.1_egress_no_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port3} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>


		<step no="2.1.3.1">
			<desc>
				Direction:egress; Pkts:correct vlan tag
			</desc>
			<log-file>step2.1.3.1_correct_vlan_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port3},${rx_port1} -phyList ${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port3} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port3} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="2.1.3.2">
			<desc>
				Direction:egress; Pkts:correct_vlan_tag; Expect:rx=0(port3 is access drop the pkts with vlan tag)
			</desc>
			<log-file>step2.1.3.1_correct_vlan_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port3} ${rx_port1} framesSent userDefinedStat2 result is blocked"</log-match>
		</step>

		<step no="2.1.4.1">
			<desc>
				Direction:egress; Pkts:incorrect vlan tag
			</desc>
			<log-file>step2.1.4.1_incorrect_vlan_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port3},${rx_port1} -phyList ${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port3} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port3} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="2.1.4.2">
			<desc>
				Direction:egress; Pkts:incorrect_vlan_tag; Expect:rx=0(port3 is access mode drop the pkts with incorrect vlan tag)
			</desc>
			<log-file>step2.1.4.1_incorrect_vlan_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port3} ${rx_port1} framesSent userDefinedStat2 result is blocked"</log-match>
		</step>

		<step no="3.1.1">
			<desc>
				source aggregation_access, direction both.
			</desc>
			<ssh target="${sw1.ip}" user="${sw1.user}" password="${sw1.passwd}">
				-v 'no monitor session 1 enable'
				-v 'no monitor session 1 source interface agg${agg_id}'
				-v 'monitor session 1 source interface agg${agg_id} both'
				-v 'monitor session 1 enable'
			</ssh>
		</step>

		<step no="3.1.2.1">
			<desc>
				Direction:both; Pkts:no_tag; tx1 and tx2 to rx1(ingress)
			</desc>
			<log-file>step3.1.2.1_both_no_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port3.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0017
				-rate_pps 20"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="3.1.2.2">
			<desc>
				Direction:both; Pkts:no_tag; Both Port1 and 2 send pkts; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.1.2.1_both_no_tag.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="3.1.2.3">
			<desc>
				Direction:both; Pkts:no_tag; Both Port1 and 2 send pkts; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.1.2.1_both_no_tag.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="3.1.2.4">
			<desc>
				Direction:both; Pkts:no_tag; Both Port1 and 2 send pkts; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.1.2.1_both_no_tag.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="3.1.2.5">
			<desc>
				Direction:both; Pkts:no_tag; Both Port1 and 2 send pkts; check if tx1+tx2=rx1(port1and2 is in source list, can be mirrored successfully)(exist bug, both the two ports send the pkts at the same time may loss the pkts)
			</desc>
			<log-file>step3.1.2.5_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>


		<step no="3.1.3.1">
			<desc>
				Direction:both; Pkts:no_tag tx3 to rx1(egress)
			</desc>
			<log-file>step3.1.3.1_both_no_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port3},${rx_port1} -phyList ${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port3} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port3} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="3.1.3.2">
			<desc>
				Direction:both; Pkts:no_tag; Expect:rx1=tx3(port3 and agg1 is access vlan 10, can be mirrored successfully)
			</desc>
			<log-file>step3.1.3.1_both_no_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port3} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<step no="3.1.4.1">
			<desc>
				Direction:both; Pkts:no_tag; tx1 and 2 and 3 to rx1(ingress+egress). Set stream2 20pps stearm3 30 ppsdifference from stearm1 for check receive result
			</desc>
			<log-file>step3.1.4.1_both_no_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${tx_port3},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0015"
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0016
				-rate_pps 20"
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0017
				-rate_pps 30"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>


		<step no="3.1.4.2">
			<desc>
				Direction:both; Pkts:no_tag; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.1.4.1_both_no_tag.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="3.1.4.3">
			<desc>
				Direction:both; Pkts:no_tag; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.1.4.1_both_no_tag.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="3.1.4.4">
			<desc>
				Direction:both; Pkts:no_tag; Get tx3 send pkts
			</desc>
			<setvar name="tx3.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.1.4.1_both_no_tag.log -t ${tx_port3}
			</setvar>
		</step>

		<step no="3.1.4.5">
			<desc>
				Direction:both; Pkts:no_tag; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.1.4.1_both_no_tag.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="3.1.4.6">
			<desc>
				Direction:both; Pkts:no_tag; check if tx1+tx2=rx1(port3 and agg1 is access vlan 10, can be mirrored both successfully)(exist bug, both the two ports send the pkts at the same time may loss the pkts)
			</desc>
			<log-file>step3.1.4.6_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -s ${tx3.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>

		<step no="3.2.2.1">
			<desc>
				Direction:both; Pkts:correct_tag; tx1 and tx2 to rx1(ingress)
			</desc>
			<log-file>step3.2.2.1_both_correct_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port3.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0017
				-rate_pps 20"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="3.2.2.2">
			<desc>
				Direction:both; Pkts:correct_tag; Both Port1 and 2 send pkts; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.2.2.1_both_correct_tag.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="3.2.2.3">
			<desc>
				Direction:both; Pkts:correct_tag; Both Port1 and 2 send pkts; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.2.2.1_both_correct_tag.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="3.2.2.4">
			<desc>
				Direction:both; Pkts:correct_tag; Both Port1 and 2 send pkts; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.2.2.1_both_correct_tag.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="3.2.2.5">
			<desc>
				Direction:both; Pkts:correct_tag; Both Port1 and 2 send pkts; check if rx1=tx1+tx2(port1and2 is in source list, can be mirrored successfully)(exist bug, both the two ports send the pkts at the same time may loss the pkts)
			</desc>
			<log-file>step3.2.2.5_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>


		<step no="3.2.3.1">
			<desc>
				Direction:both; Pkts:correct_tag tx3 to rx1(egress)
			</desc>
			<log-file>step3.2.3.1_both_correct_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port3},${rx_port1} -phyList ${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port3} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port3} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>


		<step no="3.2.3.2">
			<desc>
				Direction:both; Pkts:correct_tag; Expect:rx1=0(port3 is access vlan 10, drop the pkts with vlan tag)
			</desc>
			<log-file>step3.2.3.1_both_correct_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port3} ${rx_port1} framesSent userDefinedStat2 result is blocked"</log-match>
		</step>

		<step no="3.2.4.1">
			<desc>
				Direction:both; Pkts:correct_tag; tx1 and 2 and 3 to rx1(ingress+egress). Set stream2 20pps stearm3 30 ppsdifference from stearm1 for check receive result
			</desc>
			<log-file>step3.2.4.1_both_correct_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${tx_port3},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0015
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0016
				-rate_pps 20
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0017
				-rate_pps 30
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>


		<step no="3.2.4.2">
			<desc>
				Direction:both; Pkts:correct_tag; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.2.4.1_both_correct_tag.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="3.2.4.3">
			<desc>
				Direction:both; Pkts:correct_tag; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.2.4.1_both_correct_tag.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="3.2.4.4">
			<desc>
				Direction:both; Pkts:correct_tag; Get tx3 send pkts
			</desc>
			<setvar name="tx3.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.2.4.1_both_correct_tag.log -t ${tx_port3}
			</setvar>
		</step>

		<step no="3.2.4.5">
			<desc>
				Direction:both; Pkts:correct_tag; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.2.4.1_both_correct_tag.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="3.2.4.6">
			<desc>
				Direction:both; Pkts:correct_tag; check if rx1=tx1+tx2(agg1 is access vlan 10, can be mirrored both successfully, port3 drop the pkts)(exist bug, both the two ports send the pkts at the same time may loss the pkts)
			</desc>
			<log-file>step3.2.4.6_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>




		<step no="3.3.2.1">
			<desc>
				Direction:both; Pkts:incorrect_tag; tx1 and tx2 to rx1(ingress)
			</desc>
			<log-file>step3.3.2.1_both_incorrect_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port3.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0017
				-rate_pps 20"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="3.3.2.2">
			<desc>
				Direction:both; Pkts:incorrect_tag; Both Port1 and 2 send pkts; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.3.2.1_both_incorrect_tag.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="3.3.2.3">
			<desc>
				Direction:both; Pkts:incorrect_tag; Both Port1 and 2 send pkts; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.3.2.1_both_incorrect_tag.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="3.3.2.4">
			<desc>
				Direction:both; Pkts:incorrect_tag; Both Port1 and 2 send pkts; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.3.2.1_both_incorrect_tag.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="3.3.2.5">
			<desc>
				Direction:both; Pkts:incorrect_tag; Both Port1 and 2 send pkts; check if rx1=tx1+tx2(port1and2 is in source list, can be mirrored successfully)(exist bug, both the two ports send the pkts at the same time may loss the pkts)
			</desc>
			<log-file>step3.3.2.5_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>


		<step no="3.3.3.1">
			<desc>
				Direction:both; Pkts:incorrect_tag tx3 to rx1(egress)
			</desc>
			<log-file>step3.3.3.1_both_incorrect_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port3},${rx_port1} -phyList ${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port3} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port3} -oneRxPort ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>

		<step no="3.3.3.2">
			<desc>
				Direction:both; Pkts:incorrect_tag; Expect:rx1=0(port3 is access vlan 10, drop the pkts with incorrect vlan tag)
			</desc>
			<log-file>step3.3.3.1_both_incorrect_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port3} ${rx_port1} framesSent userDefinedStat2 result is blocked"</log-match>
		</step>

		<step no="3.3.4.1">
			<desc>
				Direction:both; Pkts:incorrect_tag; tx1 and 2 and 3 to rx1(ingress+egress). Set stream2 20pps stearm3 30 ppsdifference from stearm1 for check receive result
			</desc>
			<log-file>step3.3.4.1_both_incorrect_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${tx_port2},${tx_port3},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype},${sw1.port3.ixia_port.phytype},${sw1.port4.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0015
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v "traffic_configure_eth2 -portListIn ${tx_port2},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0016
				-rate_pps 20
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v "traffic_configure_eth2 -portListIn ${tx_port3},${rx_port1}
				-mac_dst 0000.0000.0018
				-mac_src 0000.0000.0017
				-rate_pps 30
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1},${tx_port2},${tx_port2} -rxPortList ${rx_port1}"
				-v ""
				-v "ctrl-c"
			</ssh>
		</step>


		<step no="3.3.4.2">
			<desc>
				Direction:both; Pkts:incorrect_tag; Get tx1 send pkts
			</desc>
			<setvar name="tx1.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.3.4.1_both_incorrect_tag.log -t ${tx_port1}
			</setvar>
		</step>

		<step no="3.3.4.3">
			<desc>
				Direction:both; Pkts:incorrect_tag; Get tx2 send pkts
			</desc>
			<setvar name="tx2.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.3.4.1_both_incorrect_tag.log -t ${tx_port2}
			</setvar>
		</step>

		<step no="3.3.4.4">
			<desc>
				Direction:both; Pkts:incorrect_tag; Get tx3 send pkts
			</desc>
			<setvar name="tx3.send">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.3.4.1_both_incorrect_tag.log -t ${tx_port3}
			</setvar>
		</step>

		<step no="3.3.4.5">
			<desc>
				Direction:both; Pkts:incorrect_tag; Get rx1 receive pkts
			</desc>
			<setvar name="rx1.receive">
				python ${bin.dir}/get_ixia_pkt.py -f ${log.dir}/step3.3.4.1_both_incorrect_tag.log -r ${rx_port1}
			</setvar>
		</step>

		<step no="3.3.4.6">
			<desc>
				Direction:both; Pkts:incorrect_tag; check if rx1=tx1+tx2(agg1 is access vlan 10, can be mirrored both successfully, port3 drop the pkts)(exist bug, both the two ports send the pkts at the same time may loss the pkts)
			</desc>
			<log-file>step3.3.4.6_check.log</log-file>
			<script>
				python ${bin.dir}/check_sum.py -s ${tx1.send} -s ${tx2.send} -c ${rx1.receive} > ${log.dir}/${log.file}
			</script>
		</step>

	</stage>
</testcase>

