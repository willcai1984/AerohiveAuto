<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Disable Roaming cache update to romaing neighbour</brief>
	<priority>high</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-AP1 and AP2 are roaming neighbors
		-AP1 and AP2 are not amrp neighbors
		-check the precondition is right, ‘sh roam nei’, ‘sh amrp nei’ to make
		sure
		Test Procedure:
		-disable roaming cache-broadcast to roaming neighbors
		‘roaming cache-broadcast neighbor-type access’
		-STA1 connects to ssid, passed auth
		-check roaming cache table on AP1 and AP2, result 1,2,3
		-enable roaming cache-broadcast to roaming neighbor
		-check roaming cache on AP2, result 3
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="SetUpAP1.1-1-1">
			<desc>Set up AP1</desc>
			<log-file>setup_ap1.log</log-file>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.nvlan}"
			</console>
		</step>
		<include prefix="SetUpAP1.1-2" file="subs/ap_renew_ip.xml" obj-args="ap1" />
		<step no="SetUpAP1.1-1-2">
			<desc>Set up AP1</desc>
			<log-file>setup_ap1.log</log-file>
			<ssh target="ap1">
				-v "user-profile datapath qos-policy def-user-qos vlan-id ${tb.nvlan} attribute 1"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite wpa-auto-psk ascii aerohive"
				-v "security-object autoap default-user-profile-attr 1"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${ap.def.passwd}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.nvlan}"
			</ssh>
		</step>
		
		<step no="SetUpAP1.1-3">
			<desc>Set up AP1</desc>
			<log-file>setup_ap1.log</log-file>
			<ssh target="ap1">
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 11"
				-v "_de auth info"
				-v "_de auth basic"
				-v "_de nbr all"
				-v "_kde fe basic"
				-v "_kde fe detail"
				-v "_ff id 1 dst-port 3000 bi"
				-v "save config"
			</ssh>
		</step>

		<step no="SetUpAP2.1-1-1">
			<desc>Set up AP2</desc>
			<log-file>setup_ap2.log</log-file>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.nvlan}"
			</console>
		</step>
		<include prefix="SetUpAP1.1-2" file="subs/ap_renew_ip.xml" obj-args="ap2" />
		<step no="SetUpAP2.1-1-2">
			<desc>Set up AP2</desc>
			<log-file>setup_ap2.log</log-file>
			<ssh target="ap2">
				-v "user-profile datapath qos-policy def-user-qos vlan-id ${tb.vlan2} attribute 1"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite wpa-auto-psk ascii aerohive"
				-v "security-object autoap default-user-profile-attr 1"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${ap.def.passwd}"
				-v "interface mgt0 hive ${hive.name}"
			</ssh>
		</step>
		
		<step no="SetUpAP2.1-2">
			<desc>Set up AP2</desc>
			<log-file>setup_ap2.log</log-file>
			<ssh target="ap2">
				-v "ssid ${ap2.name}"
				-v "ssid ${ap2.name} security-object autoap"
				-v "interface wifi0 ssid ${ap2.name}"
				-v "interface wifi0 radio channel 11"
				-v "_de auth info"
				-v "_de auth basic"
				-v "_de nbr all"
				-v "save config"
			</ssh>
		</step>

		<step no="GetAP2.IP.1" delay="15">
			<desc>show mgt0's ip of mp</desc>
			<log-file>mp_mgt_info.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>
		<step no="GetAP2.IP.2">
			<desc>Get mp's ip</desc>
			<setvar name="ap2.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/mp_mgt_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>
		<step no="GetAP1.MAC.1" delay="15">
			<desc>show interface of ap1</desc>
			<log-file>show_portal_interface.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
		</step>

		<step no="GetAP1.MAC.2">
			<desc>get the eth0 mac address of ap1</desc>
			<setvar name="ap1.eth0.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_portal_interface.log -k eth0 -p 2
			</setvar>
		</step>

		<step no="GetAP1.MAC.3">
			<desc>get the wifi1 mac address of ap1</desc>
			<setvar name="ap1.wifi1.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_portal_interface.log -k wifi1 -p 2
			</setvar>
		</step>

		<step no="GetAP2.MAC.1">
			<desc>show interface of AP2</desc>
			<log-file>show_ap2_interface.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="GetAP2.MAC.2">
			<desc>get the eth0 mac address of AP2</desc>
			<setvar name="ap2.eth0.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ap2_interface.log -k eth0 -p 2
			</setvar>
		</step>

		<step no="GetAP2.MAC.3">
			<desc>get the wifi1 mac address of AP2</desc>
			<setvar name="ap2.wifi1.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ap2_interface.log -k wifi1 -p 2
			</setvar>
		</step>

		<step no="CheckAP1DefaultRoute">
			<desc>show route of ap1</desc>
			<log-file>show_portal_route.log</log-file>
			<telnet target="ap1">
				-v "show route"
			</telnet>
			<log-match>-i "0000:0000:0000\ \ ${ap1.eth0.w4mac}" -i "eth0"</log-match>
		</step>
		<step no="CheckAP1RoamingNeighbor1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming neighbor 1 of ap1</desc>
			<log-file>show_roaming_neighbor1_ap1_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show roaming neighbor"
			</telnet>
			<log-match>-i "${ap2.mgt0.ip}" -i "${ap2.eth0.w4mac}" -p 4 -i "D" -c</log-match>
		</step>
		<step no="CheckAP2RoamingNeighbor1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming neighbor 1 of ap2</desc>
			<log-file>show_roaming_neighbor1_ap2_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show roaming neighbor"
			</telnet>
			<log-match>-i "${ap1.mgt0.ip}" -i "${ap1.eth0.w4mac}" -p 4 -i "D" -c</log-match>
		</step>
		<step no="CheckAmrpNeighbour.1" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show ap1 amrp neighbor
			</desc>
			<log-file>show_ap1_amrp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "show amrp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.w4mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>
		<step no="CheckAmrpNeighbour.2" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show ap2 amrp neighbor
			</desc>
			<log-file>show_ap2_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1.wifi1.w4mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>
		<step no="DisableRoamingCacheBroadcastAccess.1">
			<desc>
				disable roaming cache broadcast access
			</desc>
			<log-file>disable_roaming_cache_broadcast_access_ap1.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "no roaming cache-broadcast neighbor-type access enable"
			</telnet>
		</step>

		<property name="conn1.ssid" value="${ssid.name}" />
		<property name="conn1.proto" value="wpa-tkip-psk" />
		<property name="conn1.psk" value="aerohive" />
		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn1, sta1, ap1" />

		<step no="CheckAP1RoamingCache1.1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming cache 1 of ap1</desc>
			<log-file>show_roaming_cache1_ap1_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show roaming cache"
			</telnet>
			<log-match>-i "${sta1.tif.mac}" -c -p 11 -i "0" -p 12 -i "YNNN"</log-match>
			<log-match>-i "Broadcast way" -i "access" -n</log-match>
		</step>

		<step no="CheckAP2RoamingCache1.1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming cache 1 of ap2</desc>
			<log-file>show_roaming_cache1_ap2_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show roaming cache"
			</telnet>
			<log-match>-i "${sta1.tif.mac}" -c -p 11 -i "1" -p 12 -i "YNNN" -n</log-match>
			<log-match>-i "Broadcast way" -i "access"</log-match>
		</step>

		<step no="EnableRoamingCacheBroadcastAccess.1">
			<desc>
				enable roaming cache broadcast access
			</desc>
			<log-file>enable_roaming_cache_broadcast_access_ap1.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "roaming cache-broadcast neighbor-type access enable"
			</telnet>
		</step>

		<step no="CheckAP2RoamingCache2.1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming cache 2 of ap2</desc>
			<log-file>show_roaming_cache2_ap2_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show roaming cache"
			</telnet>
			<log-match>-i "${sta1.tif.mac}" -c -p 11 -i "1" -p 12 -i "YNNN"</log-match>
			<log-match>-i "Broadcast way" -i "access"</log-match>
		</step>
		<step no="CheckAP1LogBuffer">
			<desc>show log buffer of ap1</desc>
			<log-file>show_log_buffer_ap1.log</log-file>
			<telnet target="ap1">
				-v "show log buffer"
			</telnet>
			<no-error-check />
			<log-match>-i "sent auth rm cache update pkt" -i "type=cache info update" -i "SPA=${sta1.tif.mac}" -c</log-match>
			<log-match>-i "${ap1.mgt0.ip}->${ap2.mgt0.ip}" -i "3001->3000" </log-match>
		</step>
	</stage>
</testcase>


