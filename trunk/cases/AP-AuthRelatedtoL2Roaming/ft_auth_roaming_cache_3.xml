<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Roaming cache is sent to amrp neighbours</brief>
	<priority>high</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		-two APs,they are amrp neighbours, result 1
		-the two APs are not roaming neighbours, may exclude the peer AP, result 2
		-setup a ssid on AP1
		-STA connects to AP1, result 2
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<stage>
		<step no="SetUpAP1.1">
			<desc>Set up AP1</desc>
			<log-file>setup_ap1.log</log-file>
			<telnet target="ap1">
				-v "user-profile datapath qos-policy def-user-qos vlan-id ${tb.nvlan} attribute 1"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite wpa-auto-psk ascii aerohive"
				-v "security-object autoap default-user-profile-attr 1"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${ap.def.passwd}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.nvlan}"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 11"
				-v "_de auth info"
				-v "_de auth basic"
				-v "_kde fe basic"
				-v "_kde fe detail"
				-v "_ff id 1 dst-port 3000 bi"
				-v "save config"
			</telnet>
		</step>
		<step no="pre1.1">
   	<desc>
    -show interface mgt0 in ap1
   	</desc>
   	<log-file>step_pre1.1c_show_interface_mgt0_ap1.log</log-file>
   	<console target="ap1">
    -v "show interface mgt0"
   	</console>
  	</step>

  	<step no="pre1.2">
   	<desc>
    Get mgt0 ap in ap1
   	</desc>
   	<setvar name="ap1.mgt0.ip">
    ${bin.dir}/getbyrexp.py -p "IP addr=(\S+);" -f ${log.dir}/step_pre1.1c_show_interface_mgt0_ap1.log -t str
   	</setvar>
  	</step>

		<step no="SetUpAP2.1">
			<desc>Set up AP2</desc>
			<log-file>setup_ap2.log</log-file>
			<ssh target="ap2">
				-v "user-profile datapath qos-policy def-user-qos vlan-id ${tb.nvlan} attribute 1"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite wpa-auto-psk ascii aerohive"
				-v "security-object autoap default-user-profile-attr 1"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${ap.def.passwd}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.nvlan}"
				-v "ssid ${ap2.name}"
				-v "ssid ${ap2.name} security-object autoap"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 ssid ${ap2.name}"
				-v "interface wifi0 radio channel 11"
				-v "_de auth info"
				-v "_de auth basic"
				-v "save config"
			</ssh>
		</step>
		<step no="pre2.1">
   	<desc>
    -show interface mgt0 in ap2
   	</desc>
   	<log-file>step_pre2.1c_show_interface_mgt0_ap2.log</log-file>
   	<console target="ap2">
    -v "show interface mgt0"
  	</console>
  	</step>

  	<step no="pre2.2">
   	<desc>
    Get mgt0 ap in ap2
   	</desc>
   	<setvar name="ap2.mgt0.ip">
    ${bin.dir}/getbyrexp.py -p "IP addr=(\S+);" -f ${log.dir}/step_pre2.1c_show_interface_mgt0_ap2.log -t str
   	</setvar>
  	</step>

		<step no="SetUpAP1.2">
			<if>"${ap1.eth1.existed}"=="true"</if>
			<desc>Set up AP1</desc>
			<log-file>setup_eth1.2_ap1.log</log-file>
			<console target="ap1">
				-v "hive ${hive.name} manage Telnet"
				-v "interface eth1 shutdown"
				-v "save config"
			</console>
		</step>
		<step no="GetAP1.MAC.1" delay="30">
			<desc>show interface of ap1</desc>
			<log-file>show_portal_interface.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
		</step>

		<step no="GetAP1.MAC.2">
			<desc>get the eth0 mac address of ap1</desc>
			<setvar name="ap1.eth0.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_portal_interface.log -k eth0 -p 2
			</setvar>
		</step>

		<step no="GetAP2.MAC.1">
			<desc>show interface of AP2</desc>
			<log-file>show_ap2_interface.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="GetAP2.MAC.2">
			<desc>get the eth0 mac address of AP2</desc>
			<setvar name="ap2.eth0.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ap2_interface.log -k eth0 -p 2
			</setvar>
		</step>

		<step no="CheckAP1DefaultRoute">
			<desc>show route of ap1</desc>
			<log-file>show_portal_route.log</log-file>
			<telnet target="ap1">
				-v "show route"
			</telnet>
			<log-match>-i "0000:0000:0000\ \ ${ap1.eth0.w4mac}" -i "eth0"</log-match>
		</step>
		<step no="CheckAmrpNeighbour.1" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show ap1 amrp neighbor
			</desc>
			<log-file>show_ap1_amrp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "show amrp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.eth0.w4mac}\s+${ap2.mgt0.ip}\s" -f ${log.dir}/${log.file}</log-match>
		</step>
		<step no="CheckAmrpNeighbour.2" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show ap2 amrp neighbor
			</desc>
			<log-file>show_ap2_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1.eth0.w4mac}\s+${ap1.mgt0.ip}\s" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="CheckAP1RoamingNeighbor1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming neighbor 1 of ap1</desc>
			<log-file>show_roaming_neighbor1_ap1_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show roaming neighbor"
			</telnet>
			<log-match>-i "${ap2.mgt0.ip}" -i "${ap2.eth0.w4mac}" -p 4 -i "D" -c</log-match>
		</step>
		<step no="CheckAP2RoamingNeighbor1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming neighbor 1 of ap2</desc>
			<log-file>show_roaming_neighbor1_ap2_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show roaming neighbor"
			</telnet>
			<log-match>-i "${ap1.mgt0.ip}" -i "${ap1.eth0.w4mac}" -p 4 -i "D" -c</log-match>
		</step>
		<step no="ExcludeRoamingNeighbour.1">
			<desc>
				exclude roaming neighbor
			</desc>
			<log-file>exclude_roaming_neighbor_ap1.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "roaming neighbor exclude ip ${ap2.mgt0.ip}"
				-v "save config"
			</telnet>
		</step>
		<step no="ExcludeRoamingNeighbour.2">
			<desc>
				exclude roaming neighbor
			</desc>
			<log-file>exclude_roaming_neighbor_ap2.log</log-file>
			<telnet target="ap2" timeout="180">
				-v "roaming neighbor exclude ip ${ap1.mgt0.ip}"
			</telnet>
		</step>
		<step no="CheckAP1RoamingNeighbor2" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming neighbor 2 of ap1</desc>
			<log-file>show_roaming_neighbor2_ap1_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show roaming neighbor"
			</telnet>
			<log-match>-i "${ap2.mgt0.ip}" -i "${ap2.eth0.w4mac}" -p 4 -i "E" -c</log-match>
		</step>
		<step no="CheckAP2RoamingNeighbor2" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming neighbor 2 of ap2</desc>
			<log-file>show_roaming_neighbor2_ap2_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show roaming neighbor"
			</telnet>
			<log-match>-i "${ap1.mgt0.ip}" -i "${ap1.eth0.w4mac}" -p 4 -i "E" -c</log-match>
		</step>
		
		<!--<step no="SetUpAP1.3">
			<desc>Set up AP1</desc>
			<log-file>setup_eth0_1_ap1.log</log-file>
			<console target="ap1">
				-v "interface eth0 shutdown"
				-v "save config"
			</console>
		</step>-->
		
		<step no="GetAP1.wifi0.2">
			<desc>show interface wifi0.2 of AP1</desc>
			<log-file>show_ap1_interface.log</log-file>
			<console target="ap1">
				-v "show interface wifi0.2"
			</console>
		</step>
		<step no="GetAP1.wifi0">
			<desc>show interface wifi0 of AP1</desc>
			<log-file>show_ap1_interface1.log</log-file>
			<console target="ap1">
				-v "show interface wifi0"
			</console>
		</step>
		
		<include prefix="2.1" file="subs/wpa_supplicant_start.xml" args="sta1" />
		<step no="2.2" delay="30">
			<desc>
				config the laptop to apply the ssid profile,then start to associate
			</desc>
			<ssh target="sta1" prompt=">|.*#" timeout="30">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto WPA"
				-v "set_network 0 pairwise TKIP"
				-v "set_network 0 group TKIP"
				-v "set_network 0 psk \"aerohive\""
				-v "set_network 0 priority 5"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>
		<include prefix="2.3" file="subs/chk_conn_in_sta.xml" args="sta1" />
		<step no="2.4" delay="10">
			<desc>ifconfig to show the ip add</desc>
			<log-file>ifconfig.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
		</step>
		<step no="2.5">
			<desc>Get sta1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>
		<step no="2.6">
			<desc>Get sta1's mac</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${sta1.tif.name} -m -width
			</setvar>
		</step>

		<step no="CheckAP2RoamingCache1.1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming cache 1 of ap2</desc>
			<log-file>show_roaming_cache1_ap2_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show roaming cache"
			</telnet>
			<log-match>-i "${sta1.tif.mac}" -c -p 11 -i "1" -p 12 -i "YNNN"</log-match>
			<log-match>-i "Broadcast way" -i "access"</log-match>
		</step>
		<step no="CheckAP1LogBuffer">
			<desc>show log buffer of ap1</desc>
			<log-file>show_log_buffer_ap1.log</log-file>
			<telnet target="ap1">
				-v "show log buffer"
			</telnet>
			<no-error-check />
			<log-match>-i "sent auth rm cache update pkt" -i "type=cache info update" -i "SPA=${sta1.tif.mac}" -c</log-match>
			<log-match>-i "${ap1.mgt0.ip}->${ap2.mgt0.ip}" -i "3001->3000" -n</log-match>
			<log-match>-i "SPA=${sta1.tif.mac}" -i "is sent to AMRP" -c</log-match>
		</step>
	</stage>
</testcase>

