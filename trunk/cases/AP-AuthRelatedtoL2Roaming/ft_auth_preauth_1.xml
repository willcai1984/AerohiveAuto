<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Pre-auth from portal to portal</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<description>
		Topology to use
		AP1-----AP2
		Description
		STA (re)associate with a valid pmkid
		Pre-condition
		-two Aps,they are roming neighbours
		-config the same ssid with WPA2 802.1x auth method
		-STA connect to one AP,with correct credence
		-make sure the STA supports PMK caching
		Test procedure
		-STA roaming to other AP,check the pmk regenerated
		-then roaming back to the previous AP
		-the AP has a local cache related to the STA
		Expect result
		1.When STA roaming back to the previous AP,
		it will contain a pmkid in (re)associate request,
		then both sides start 4 way hankshake using the cached PMK,
		omit the process of full eap auth
		2.Sh auth,sh roa ca,sh ssid xxx st to make sure
	</description>
	<stage>
		<step no="1">
			<desc>Set SSID for DUT1 ${ap1.mgt0.ip} via telnet</desc>
			<ssh target="ap1" timeout="10">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "ssid ${ssid.name}"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite wpa-auto-8021x"
				-v "security-object autoap security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "save config"
			</ssh>
		</step>
		<!-- <step no="2"> -->
		<!-- <desc>show running config on AP1</desc> -->
		<!-- <log-file>show_run_ap1.log</log-file> -->
		<!-- <ssh target="ap1" timeout="10"> -->
		<!-- -v "show run" -->
		<!-- </ssh> -->
		<!-- </step> -->

		<step no="3">
			<desc>show protocol suite on AP1</desc>
			<log-file>show_proto_ap1.log</log-file>
			<ssh target="ap1" timeout="10">
				-v "show security- autoap security protocol-suite"
			</ssh>
			<log-match>-e "Method=wpa-auto-8021x"</log-match>
		</step>
		<step no="4">
			<desc>show ssid on AP1</desc>
			<log-file>show_ssid_ap1.log</log-file>
			<ssh target="ap1" timeout="10">
				-v "show ssid ${ssid.name}"
			</ssh>
			<log-match>-e "autoap"</log-match>
		</step>
		<step no="5">
			<desc>Set SSID on AP2 enable preauth</desc>
			<ssh target="ap2" timeout="10">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "ssid ${ssid.name}"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite wpa-auto-8021x"
				-v "security-object autoap security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security preauth"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name} shutdown"
				-v "save config"
			</ssh>
		</step>
		<!-- <step no="6"> -->
		<!-- <desc>show running config on AP2</desc> -->
		<!-- <log-file>show_run_ap2.log</log-file> -->
		<!-- <ssh target="ap2" timeout="10"> -->
		<!-- -v "show run" -->
		<!-- </ssh> -->
		<!-- </step> -->

		<step no="7.1">
			<desc>show protocol suite on AP2</desc>
			<log-file>show_proto_ap2.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show security-o autoap security protocol-suite"
			</ssh>
			<log-match>-e "Method=wpa-auto-8021x"</log-match>
			<log-match>-e "Preauth=yes"</log-match>
		</step>
		<step no="7.2">
			<desc>show ssid on AP2</desc>
			<log-file>show_ssid_ap2.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show ssid ${ssid.name}"
			</ssh>
			<log-match>-e "autoap"</log-match>
		</step>

		<!-- <property name="conn1.proto" value="wpa2-aes-8021x" /> -->

		<!-- <step no="pre9.1"> -->
		<!-- <desc>set username</desc> -->
		<!-- <setvar name="conn1.username"> -->
		<!-- echo "${pub.radius1.username}" -->
		<!-- </setvar> -->
		<!-- </step> -->
		<!-- <step no="pre9.2"> -->
		<!-- <desc>set password</desc> -->
		<!-- <setvar name="conn1.passwd"> -->
		<!-- echo "${pub.radius1.passwd}" -->
		<!-- </setvar> -->
		<!-- </step> -->


		<step no="8.1">
			<desc>Set SSID on AP2 enable preauth</desc>
			<log-file>show_roaming_neighbor_ap1.log</log-file>
			<ssh target="ap1" timeout="10">
				-v "show roaming neighbor"
			</ssh>
		</step>

		<step no="8.2">
			<desc>Set SSID on AP2 enable preauth</desc>
			<log-file>show_roaming_neighbor_ap2.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show roaming neighbor"
			</ssh>
		</step>

		<step no="9.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=wpa2-aes-8021x"
				echo "conn1.pif=wifi0"
				echo "conn1.username=${pub.radius1.username}"
				echo "conn1.passwd=${pub.radius1.passwd}"
			</multi-setvar>
		</step>

		<include prefix="9.2" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn1, sta1, ap1" />

		<step no="10">
			<desc>show auth on AP1</desc>
			<log-file>show_auth_ap1.log</log-file>
			<ssh target="ap1" timeout="10">
				-v "show auth"
			</ssh>
			<log-match>-p 7 -i "done" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 9 -i "WPA2/CCMP" -i "${sta1.tif.mac}"</log-match>
		</step>
		<step no="11">
			<desc>show station on AP1</desc>
			<log-file>show_station_ap1.log</log-file>
			<ssh target="ap1" timeout="10">
				-v "show ssid ${ssid.name} station"
			</ssh>
			<log-match>-p 12 -i "Yes" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 7 -i "wpa2-8021x" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 8 -i "aes" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 2 -i "${sta1.tif.ip}" -i "${sta1.tif.mac}"</log-match>
		</step>
		<step no="12">
			<desc>show roaming cache on AP1</desc>
			<log-file>show_roaming_cache_ap1.log</log-file>
			<ssh target="ap1" timeout="10">
				-v "show roaming cache"
			</ssh>
			<log-match>-p 12 -i "YNNN" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 11 -i "0" -i "${sta1.tif.mac}"</log-match>
		</step>
		<step no="13">
			<desc>Ping from sta1 to master Server</desc>
			<log-file>sta1_2_master_1.log</log-file>
			<ssh target="sta1" timeout="20">
				-v "ping ${mpc.tif.ip} -c 4"
			</ssh>
			<log-match>-i "from ${mpc.tif.ip}" -i "ttl="</log-match>
		</step>
		<step no="14">
			<desc>get bssid on AP1</desc>
			<setvar name="ap1.bssid">
				${bin.dir}/getstring.pl -f ${log.dir}/show_auth_ap1.log -k SSID=${tb.name}-ROAMING -k1 AA= -k2 \;|sed 's/://g;s/../&amp;:/g;s/.$//'
			</setvar>
		</step>
		<step no="15">
			<desc>enable ssid ${ssid.name}on AP2</desc>
			<ssh target="ap2" timeout="10">
				-v "no interface wifi0 ssid ${ssid.name} shutdown"
			</ssh>
		</step>
		<step no="16" delay="10">
			<desc>show auth on AP2</desc>
			<log-file>show_auth_ap2.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show auth"
			</ssh>
		</step>
		<step no="17">
			<desc>get bssid on AP2</desc>
			<setvar name="ap2.bssid">
				${bin.dir}/getstring.pl -f ${log.dir}/show_auth_ap2.log -k SSID= -k1 AA= -k2 \;|sed 's/://g; s/../&amp;:/g;s/.$//'
			</setvar>
		</step>
		<step no="18">
			<desc>enable debug on AP2</desc>
			<ssh target="ap2" timeout="10">
				-v "_debug auth info"
				-v "_debug auth basic"
				-v "_debug auth error"
				-v "_ff id 1 src-mac ${sta1.tif.mac} etype 88c7 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</ssh>
		</step>
		<step no="19">
			<desc>client does preauth against AP2</desc>
			<ssh target="sta1" timeout="10" prompt=">|.*#">
				-v "wpa_cli"
				-v "preauthenticate ${ap2.bssid}"
				-v "quit"
			</ssh>
		</step>

		<step no="20.1" delay="20">
			<desc>Just fo delay</desc>
		</step>

		<step no="20.2" type="loop-check" loop-max-times="10" loop-interval="15">
			<desc>check pre-auth success</desc>
			<log-file>preauth_check_${loop_check.idx}.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
			<log-match>-e "pre-authentication for station ${sta1.tif.mac} succeeded"</log-match>
		</step>

		<step no="21" delay="10">
			<desc>show auth on AP2</desc>
			<log-file>show_auth_ap2_2.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show auth"
			</ssh>
		</step>

		<step no="22">
			<desc>enable auth debug on AP2</desc>
			<ssh target="ap2" timeout="10">
				-v "no _kde fe basic"
				-v "_debug auth all"
				-v "clear log buffered"
			</ssh>
		</step>
		<step no="23">
			<desc>client roams to AP2</desc>
			<ssh target="sta1" timeout="10" prompt=">|.*#">
				-v "wpa_cli"
				-v "set_network 0 bssid ${ap2.bssid}"
				-v "reass"
				-v "quit"
			</ssh>
		</step>

		<step no="24.1" delay="20">
			<desc>Just fo delay</desc>
		</step>

		<step no="24.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="24.3">
			<desc>check if sta1 gets ip success</desc>
			<log-file>step24.3_ifconfig_sta1_neg.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr" -e "inet"</log-match>
		</step>


		<step no="24.4">
			<desc>get wireless IP from sta</desc>
			<setvar name="sta1.tif.ip">
				${bin.dir}/getinfo_ip.py -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -v 'ip'
			</setvar>
		</step>


		<step no="25">
			<desc>check roaming process to AP2</desc>
			<log-file>auth_debug_ap2_2.log</log-file>
			<ssh target="ap2" timeout="100">
				-v "show logging buffered"
			</ssh>
			<log-match>-e "Number of PMKIDs provided by station ${sta1.tif.mac} = 1"</log-match>
			<log-match>-e "Auth info is got from local PMKSA cache: SPA=${sta1.tif.mac}"</log-match>
			<log-match>-e "PMK from PMKSA cache - skip IEEE 802.1X/EAP"</log-match>
			<no-error-check />
		</step>

		<step no="26" delay="10">
			<desc>show auth on AP2</desc>
			<log-file>show_auth_ap2_3.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show auth"
			</ssh>
		</step>
		<step no="27">
			<desc>show roaming cache on AP2</desc>
			<log-file>show_roaming_cache_ap2.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show roaming cache"
			</ssh>
			<log-match>-p 12 -i "YNNN" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 11 -i "0" -i "${sta1.tif.mac}"</log-match>
		</step>
		<step no="28">
			<desc>Ping from client to master Server </desc>
			<log-file>pingmaster_${sta1.tif.ip}_2.log</log-file>
			<ssh target="sta1" timeout="10">
				-v "ping ${mpc.tif.ip} -c 4"
			</ssh>
			<log-match>-i "from ${mpc.tif.ip}" -i "ttl="</log-match>
		</step>
	</stage>
</testcase>
