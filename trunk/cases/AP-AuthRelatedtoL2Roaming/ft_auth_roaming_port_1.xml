<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>The default roaming port</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		-AP1 and AP2 are acsp neighbors, result 1
		-the two APs have the same HIVE name and passwd, result 2
		-they can ping each other
		-use the default roaming port,they should be udp 3000, result 3,4
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<stage>
		<step no="SetUpAP.1">
			<desc>Set up Portal AP</desc>
			<log-file>setup_ap1.log</log-file>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.nvlan}"
			</console>
		</step>

		<step no="SetUpAP.2">
			<desc>Set up AP2</desc>
			<log-file>setup_ap2.log</log-file>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.nvlan}"
			</console>
		</step>

		<include prefix="renewap1" file="subs/ap_renew_ip.xml" obj-args="ap1" />
		<include prefix="renewap2" file="subs/ap_renew_ip.xml" obj-args="ap2" />

		<step no="SetUpAP.1.1">
			<desc>Set up Portal AP</desc>
			<log-file>setup_ap11.log</log-file>
			<ssh target="ap1">
				-v "user-profile datapath qos-policy def-user-qos vlan-id ${tb.vlan1} attribute 1"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite open"
				-v "security-object autoap default-user-profile-attr 1"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${ap.def.passwd}"
				-v "interface mgt0 hive ${hive.name}"
				-v "ssid ${ssid.name}-1"
				-v "ssid ${ssid.name}-1 security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}-1"
				-v "interface wifi1 ssid ${ssid.name}-1"
				-v "save config"
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
			</ssh>
		</step>

		<step no="SetUpAP.2.1">
			<desc>Set up AP2</desc>
			<log-file>setup_ap21.log</log-file>
			<ssh target="ap2">
				-v "user-profile datapath qos-policy def-user-qos vlan-id ${tb.vlan2} attribute 1"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite open"
				-v "security-object autoap default-user-profile-attr 1"
				-v "hive ${hive.name}"
				-v "hive ${hive.name} password ${ap.def.passwd}"
				-v "interface mgt0 hive ${hive.name}"
				-v "ssid ${ssid.name}-2"
				-v "ssid ${ssid.name}-2 security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}-2"
				-v "interface wifi1 ssid ${ssid.name}-2"
				-v "save config"
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
			</ssh>
		</step>

		<step no="GetAP1.MAC.1" delay="15">
			<desc>show interface of ap1</desc>
			<log-file>show_ap1_interface.log</log-file>
			<ssh target="ap1">
				-v "show interface"
			</ssh>
		</step>

		<step no="GetAP1.MAC.2">
			<desc>get the eth0 mac address of portal</desc>
			<setvar name="ap1.eth0.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ap1_interface.log -k eth0 -p 2
			</setvar>
		</step>

		<step no="GetAP1.MAC.3">
			<desc>get the wifi1 mac address of portal</desc>
			<setvar name="ap1.wifi1.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ap1_interface.log -k wifi1 -p 2
			</setvar>
		</step>

		<step no="GetAP2.MAC.1">
			<desc>show interface of AP2</desc>
			<log-file>show_ap2_interface.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="GetAP2.MAC.2">
			<desc>get the eth0 mac address of AP2</desc>
			<setvar name="ap2.eth0.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ap2_interface.log -k eth0 -p 2
			</setvar>
		</step>

		<step no="GetAP2.MAC.3">
			<desc>get the wifi1 mac address of AP2</desc>
			<setvar name="ap2.wifi1.w4mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_ap2_interface.log -k wifi1 -p 2
			</setvar>
		</step>

		<step no="1.1">
			<desc>show interface on AP1</desc>
			<log-file>show_interface_ap1.log</log-file>
			<ssh target="ap1" timeout="10">
				-v "show interface"
			</ssh>
		</step>
		<step no="1.2">
			<desc>get ssid interface on AP1</desc>
			<setvar name="ap1.access.mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1.log -k "access" -k "radio" -k "." -p 2
			</setvar>
		</step>
		<step no="2.1">
			<desc>show interface on AP2</desc>
			<log-file>show_interface_ap2.log</log-file>
			<ssh target="ap2" timeout="10">
				-v "show interface"
			</ssh>
		</step>
		<step no="2.2">
			<desc>get ssid interface on AP2</desc>
			<setvar name="ap2.access.mac">
				perl ${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2.log -k "access" -k "radio" -k "." -p 2
			</setvar>
		</step>

		<!-- <step no="CheckAP1HiveNeighbor1" type="loop-check" loop-max-times="50" loop-interval="5"> -->
		<!-- <desc>show hive neighbor 1 of ap1</desc> -->
		<!-- <log-file>show_hive_neighbor1_ap1_${loop_check.idx}.log</log-file> -->
		<!-- <ssh target="ap1"> -->
		<!-- -v "show hive ${hive.name} neighbor" -->
		<!-- </ssh> -->
		<!-- <log-match>-i "${ap2.wifi1.w4mac}" -i "${hive.name}" -c </log-match> -->
		<!-- </step> -->
		<!-- <step no="CheckAP2HiveNeighbor1" type="loop-check" loop-max-times="50" loop-interval="5"> -->
		<!-- <desc>show hive neighbor 1 of ap2</desc> -->
		<!-- <log-file>show_hive_neighbor1_ap2_${loop_check.idx}.log</log-file> -->
		<!-- <ssh target="ap2"> -->
		<!-- -v "show hive ${hive.name} neighbor" -->
		<!-- </ssh> -->
		<!-- <log-match>-i "${ap1.wifi1.w4mac}" -i "${hive.name}" -c </log-match> -->
		<!-- </step> -->

		<step no="CheckAP1RoamingNeighbor1" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>show roaming neighbor 1 of ap1</desc>
			<log-file>show_roaming_neighbor1_ap1_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show roaming neighbor"
			</ssh>
			<log-match>-i "${ap2.mgt0.ip}" -i "${ap2.eth0.w4mac}" -p 4 -i "D" -c </log-match>
		</step>

		<step no="CheckAP2RoamingNeighbor1" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>show roaming neighbor 1 of ap2</desc>
			<log-file>show_roaming_neighbor1_ap2_${loop_check.idx}.log</log-file>
			<ssh target="ap2">
				-v "show roaming neighbor"
			</ssh>
			<log-match>-i "${ap1.mgt0.ip}" -i "${ap1.eth0.w4mac}" -p 4 -i "D" -c </log-match>
		</step>

		<step no="ConfigRoamingPort3000AP.1">
			<desc>Set up AP1 fe filter</desc>
			<log-file>setup_fe_filter_ap1.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
				-v "_kde fe basic"
				-v "_kde fe detail"
				-v "_ff id 1 dst-port 3000 bi"
				-v "clear log buffer"
				-v "save config"
			</ssh>
			<no-error-check />
		</step>

		<step no="ConfigRoamingPort3000AP.2">
			<desc>Set up AP2 fe filter</desc>
			<log-file>setup_fe_filter_ap2.log</log-file>
			<ssh target="ap2">
				-v "show log buffer"
				-v "_kde fe basic"
				-v "_kde fe detail"
				-v "_ff id 1 dst-port 3000 bi"
				-v "clear log buffer"
				-v "save config"
			</ssh>
			<no-error-check />
		</step>

		<step no="CheckAP1LogBufferPort3000" delay="10">
			<desc>show log buffer of ap1</desc>
			<log-file>show_log_buffer_ap1_port3000.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<no-error-check />
			<log-match>-i "${ap1.mgt0.ip}->${ap2.mgt0.ip}" -i "->3000" </log-match>
		</step>

		<!-- <include prefix="3" file="subs/wpa_supplicant_start.xml" args="sta1" /> -->
		<!-- <step no="3.1" delay="30"> -->
		<!-- <desc> -->
		<!-- config the laptop to apply the ssid profile,then start to associate -->
		<!-- </desc> -->
		<!-- <ssh target="sta1" prompt=">|.*#" timeout="30"> -->
		<!-- -v "wpa_cli" -->
		<!-- -v "reconfig" -->
		<!-- -v "add_network" -->
		<!-- -v "set_network 0 ssid \"${ssid.name}\"" -->
		<!-- -v "set_network 0 key_mgmt WPA-PSK" -->
		<!-- -v "set_network 0 proto WPA" -->
		<!-- -v "set_network 0 pairwise TKIP" -->
		<!-- -v "set_network 0 group TKIP" -->
		<!-- -v "set_network 0 psk \"aerohive\"" -->
		<!-- -v "set_network 0 priority 5" -->
		<!-- -v "select_network 0" -->
		<!-- -v "reas" -->
		<!-- -v "quit" -->
		<!-- </ssh> -->
		<!-- </step> -->

		<!-- <include prefix="3.3" file="subs/chk_conn_in_sta.xml" args="sta1" /> -->

		<!-- <step no="3.4" delay="10"> -->
		<!-- <desc>ifconfig to show the ip add</desc> -->
		<!-- <log-file>ifconfig.log</log-file> -->
		<!-- <ssh target="sta1" timeout="80"> -->
		<!-- -v "ifconfig ${sta1.tif.name}" -->
		<!-- </ssh> -->
		<!-- </step> -->
		<!-- <step no="3.5"> -->
		<!-- <desc>Get sta1's ip</desc> -->
		<!-- <setvar name="sta1.tif.ip"> -->
		<!-- perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${sta1.tif.name} -nomask -->
		<!-- </setvar> -->
		<!-- </step> -->
		<!-- <step no="3.6"> -->
		<!-- <desc>Get sta1's mac</desc> -->
		<!-- <setvar name="sta1.tif.mac"> -->
		<!-- perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${sta1.tif.name} -m -width -->
		<!-- </setvar> -->
		<!-- </step> -->

		<step no="3.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}-1"
				echo "conn1.proto=open"
				echo "conn1.pif=${ssid_bind_interface}"
			</multi-setvar>
		</step>
		<include prefix="3.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="CheckAP2RoamingCache1.1" type="loop-check" loop-max-times="50" loop-interval="10">
			<desc>show roaming cache 1 of ap2</desc>
			<log-file>show_roaming_cache1_ap2_${loop_check.idx}.log</log-file>
			<ssh target="ap2">
				-v "show roaming cache"
			</ssh>
			<log-match>-i "${sta1.tif.mac}" -c -p 11 -i "1" -p 12 -i "YNNN"</log-match>
		</step>

		<step no="CheckLogBufferPort3001">
			<desc>show log buffer1 of ap1</desc>
			<log-file>show_log_buffer1_port_3001_ap1.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<no-error-check />
			<log-match>-i "${ap1.mgt0.ip}->${ap2.mgt0.ip}" -i "3001->3000" </log-match>
		</step>

	</stage>

</testcase>
