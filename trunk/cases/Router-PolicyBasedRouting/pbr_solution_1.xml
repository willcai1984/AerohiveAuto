<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Forwarding and Routing traffic based on policies, only one tunnel on PBR Platform Dependence BR100,BR200,BR200-WP,BRAP330,BRAP350,BRAP121,BRAP141</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		1. Pos and non-pos store subnet 1.1.1.0/24
		Guest subnet 2.2.2.0/24
		2. pos and non-pos store traffic via usb0 if usb up
		pos and non-pos store traffic via tunnel on eth0 if usb down
		3. guest traffic via eth0 if eth0 up
		guest traffic are dropped if eth0 down
		
		
		Test Procedure:
		1. create one l3 vpn tunnel between eth0 interface on BR and CVG eth0
		2. set pos /non-pos store and guest match map
		routing match-map pos from1.1.1.0/24
		routing match-map guest from 2.2.2.0/24
		3. set pos /non-pos store traffic via usbnet0 primary
		4. set pos /non-pos store traffic via tunnel on eth0 secondary
		5. set guest traffic via eth0
		6. bind route-map
		7. create routing policy and bind match-map
		8. usb and eth0 up ,tunnel up on eth0
		9. laptop get ip address from subnet 1.1.1.0/24,send traffic on laptop to vpn
		network,it is pos traffic,check result1
		10. laptop get ip address from subnet 1.1.1.0/24,send traffic on laptop to
		internet,it is non-pos store traffic,check result2
		11. laptop get ip address from
		subnet 2.2.2.0/24,it is guest ,send traffic on
		laptop to vpn network,check result3
		12. laptop get ip address from subnet 2.2.2.0/24,it is guest ,send traffic on
		laptop to internet,check result4
	</description>
	<numofbr>1</numofbr>
	<numofcvg>1</numofcvg>
	<cvg-opt-arm>two</cvg-opt-arm>
	<cvg-opt-fw>yes</cvg-opt-fw>
	<br-opt-modem>1</br-opt-modem>
	<tbtype>winlin</tbtype>

	<property name="apn.name" value="3gnet" />
	<property name="gw.addr" value="192.168.10.254" />
	<property name="gw.addr.1" value="8.8.8.8" />
	<property name="conn1.ssid" value="${job.sid}-1" />

	<stage>
		<include prefix="0" file="subs/vpn_setup_one.xml" obj-args="cvg1, br1" />
			<!--step1 is set wifi0 as wan  -->
		
		<!--<step no="1.1">
			<desc>
				config ssid1 on  br2
			</desc>
			<telnet target="${br2.br.wan.ip}">
				-v "interface mgt0.1 vlan ${br2.vlan1}"
				-v "interface mgt0.1 ip ${br2.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface mgt0.1 dhcp-server ip-pool ${br2.br.mgt0.1.ip_pool_start} ${br2.br.mgt0.1.ip_pool_end}"
				-v "interface mgt0.1 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.1 dhcp-server options default-gateway ${br2.br.mgt0.1.ip}"
				-v "interface mgt0.1 dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface mgt0.1 dhcp-server enable"
				-v "security-object sta1"
				-v "security-object sta1 default-user-profile-attr 1"
				-v "ssid ${conn1.ssid}"
				-v "ssid ${conn1.ssid} security-object sta1"
				-v "interface wifi0 ssid ${conn1.ssid}"
				-v "user-profile sta1 qos-policy def-user-qos vlan-id ${br2.vlan1} attribute 1"
			</telnet>
		</step>
		<step no="1.2">
			<desc>
				config wifi0 as wan-client on br1
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface wifi0  mode wan-client"
				-v "client-mode ssid ${conn1.ssid}"
				-v "client-mode connect ssid ${conn1.ssid}"
			</telnet>
		</step>
		
		<step no="1.3" delay="60" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				show l3 interface ,check the wifi0.2 get ip address
			</desc>
			<log-file>step1.3_Get_wifi0.2_wan.ip.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show l3 interface"
			</telnet>
			<log-match>-n -i "wifi0.2.*0.0.0.0"</log-match>
		</step>
		
		<step no="1.4">
			<desc>get wifi0.2 ip address on BR side</desc>
			<setvar name="br1.wifi0.2.wan.ip">
				cat  ${log.dir}/step1.3_Get_wifi0.2_wan.ip.log|grep wifi0.2|awk '{print $2}'
			</setvar>
		</step>-->

		<step no="2.2">
			<desc>
				config mgt0.1 and mgt0.2 with dhcp service enable,dns service enable
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface mgt0.1 vlan ${br1.vlan1}"
				-v "interface mgt0.1 ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface mgt0.1 dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface mgt0.1 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.1 dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface mgt0.1 dhcp-server options dns1 ${br1.br.mgt0.1.ip}"
				-v "interface mgt0.1 dhcp-server enable"
				-v "interface mgt0.2 vlan ${br1.vlan2}"
				-v "interface mgt0.2 ip ${br1.br.mgt0.2.ip}/${br.lan.netmask}"
				-v "interface mgt0.2 dhcp-server ip-pool ${br1.br.mgt0.2.ip_pool_start} ${br1.br.mgt0.2.ip_pool_end}"
				-v "interface mgt0.2 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.2 dhcp-server options default-gateway ${br1.br.mgt0.2.ip}"
				-v "interface mgt0.2 dhcp-server options dns1 ${br1.br.mgt0.2.ip}"
				-v "interface mgt0.2 dhcp-server enable"
			</telnet>
		</step>

		<step no="2.3">
			<desc>
				Create user-profile bind eth1
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface eth1 mode bridge-access user-profile-attribute 1"
				-v "interface eth1 mac-learning enable"
				-v "security-object lan1"
				-v "security-object lan1 default-user-profile-attr 1"
				-v "interface eth1 security-object lan1"
				-v "user-profile fw qos-policy def-user-qos vlan-id ${br1.vlan1} attribute 1"
				-v "interface eth4 mode bridge-access user-profile-attribute 2"
				-v "interface eth4 mac-learning enable"
				-v "security-object lan2"
				-v "security-object lan2 default-user-profile-attr 2"
				-v "interface eth4 security-object lan2"
				-v "user-profile fw1 qos-policy def-user-qos vlan-id ${br1.vlan2} attribute 2"
				
			</telnet>
		</step>	

		<step no="5">
			<desc>
				show usbmodem info
			</desc>
			<log-file>step5_show_usbmodem_info.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show usbmodem info"
			</telnet>
		</step>

		<step no="5.1">
			<desc>
				get dns server tshark process
			</desc>
			<setvar name="modem.name_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_show_usbmodem_info.log -p "Manufacturer:\s+(\w+)" -t str
			</setvar>
		</step>

		<step no="5.2">
			<desc>
				get dns server tshark process
			</desc>
			<setvar name="modem.name_2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_show_usbmodem_info.log -p "Model:\s+(\S+)" -t str
			</setvar>
		</step>

		<step no="5.3">
			<desc>
				get dns server tshark process
			</desc>
			<setvar name="modem.name">
				echo "${modem.name_1}_${modem.name_2}" | tr "A-Z" "a-z"
			</setvar>
		</step>

		<step no="5.4">
			<desc>
				Config parameters for usbmodem (mode, apn)
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "no track-wan use-for-wan-usbnet0 ip ${gw.addr.1}"
				-v "no track-wan use-for-wan-eth0 ip ${gw.addr}"
				-v "no track-wan use-for-wan-usbnet0 ip ${gw.addr}"
				-v "track-wan use-for-wan-eth0 default-gateway"
				-v "track-wan use-for-wan-usbnet0 default-gateway"
				-v "usbmodem reset-device"
				-v "usbmodem mode always-connected"
				-v "usbmodem modem-id ${modem.name} apn ${apn.name}"
				-v "usbmodem enable"
			</telnet>
		</step>

		<step no="5.5" delay="10">
			<desc>
				Check the usbmodem status while WAN is eth0 by default
			</desc>
			<log-file>step5.5_check_default_usbmodem.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show usbmodem modem-id ${modem.name}"
			</telnet>
			<log-match>-c -i "Mode: always-connected"</log-match>
			<log-match>-c -i "APN: *3gnet"</log-match>
		</step>
		<step no="5.6" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				Check the usbmodem status
			</desc>
			<log-file>step5.6_check_usbmodem_status_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="300">
				-v "show usbmodem status"
			</telnet>
			<log-match bin="${bin.dir}/searchblocks.py">-b "(?i)PPP Interface Status:" -ps p "(?i)State: up" -e "(?i)Connection closed" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				br.vpc1 get ip address
			</desc>
			<log-file>step6_ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ifconfig ${br1.vpc1.tif.name} down"
				-v "ifconfig ${br1.vpc1.tif.name} up"
				-v "dhclient ${br1.vpc1.tif.name} -r"
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
			<failed>next</failed>
		</step>

		<step no="6.1">
			<desc>get raw mac of br.vpc1</desc>
			<setvar name="br1.vpc1.tif.mac1">
				echo $(${bin.dir}/getbyrexp.py -p "HWaddr ([\da-fA-F:]+)" -f ${log.dir}/step6_ifconfig_vpc1_.log -t str | tr "A-F" "a-f")
			</setvar>
			<failed>next</failed>
		</step>

		<step no="6.2">
			<desc>get mac of br1.vpc1</desc>
			<setvar name="br1.vpc1.tif.mac">
				echo $(echo $(echo ${br1.vpc1.tif.mac1} | cut -d : -f1)$(echo ${br1.vpc1.tif.mac1} | cut -d : -f2,3)$(echo ${br1.vpc1.tif.mac1} | cut -d : -f4,5)$(echo ${br1.vpc1.tif.mac1} | cut -d : -f6))
			</setvar>
			<failed>next</failed>
		</step>

		<step no="6.3">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
			<failed>next</failed>
		</step>

		<step no="7" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				br1.vpc4 get ip address
			</desc>
			<log-file>step7_ifconfig_vpc2_.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ifconfig ${br1.vpc4.tif.name} down"
				-v "ifconfig ${br1.vpc4.tif.name} up"
				-v "dhclient ${br1.vpc4.tif.name} -r"
				-v "dhclient ${br1.vpc4.tif.name}"
				-v "ifconfig ${br1.vpc4.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="7.1">
			<desc>get raw mac of br.vpc2</desc>
			<setvar name="br1.vpc4.tif.mac1">
				echo $(${bin.dir}/getbyrexp.py -p "HWaddr ([\da-fA-F:]+)" -f ${log.dir}/step7_ifconfig_vpc2_.log -t str | tr "A-F" "a-f")
			</setvar>
		</step>

		<step no="7.2">
			<desc>get mac of br1.vpc4</desc>
			<setvar name="br1.vpc4.tif.mac">
				echo $(echo $(echo ${br1.vpc4.tif.mac1} | cut -d : -f1)$(echo ${br1.vpc4.tif.mac1} | cut -d : -f2,3)$(echo ${br1.vpc4.tif.mac1} | cut -d : -f4,5)$(echo ${br1.vpc4.tif.mac1} | cut -d : -f6))
			</setvar>
		</step>

		<step no="7.3">
			<desc>set br1.vpc4.tif.ip var for vpc2 on BR side</desc>
			<setvar name="br1.vpc4.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc4.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc4.passwd} -i ${br1.vpc4.tif.name} -nomask
			</setvar>
		</step>

		<step no="7.4">
			<multi-setvar>
				echo "br1.mgt0.1.ip=$(echo ${br1.br.mgt0.1.ip} | cut -d. -f1,2,3).0"
				echo "br1.mgt0.2.ip=$(echo ${br1.br.mgt0.2.ip} | cut -d. -f1,2,3).0"
			</multi-setvar>
		</step>

		<step no="8">
			<desc>
				set pos /non-pos store and guest match map
				set pos /non-pos store traffic via usbnet0 primary
				set pos /non-pos store traffic via tunnel on eth0 secondary
				set guest traffic via eth0
				bind route-map
				create routing policy and bind match-map
			</desc>
			<log-file>step8_show_gre_tunnel_br.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "routing match-map pos from network ${br1.mgt0.1.ip}/24 to any"
				-v "routing match-map guest1 from network ${br1.mgt0.2.ip}/24 to private"
				-v "routing match-map guest from network ${br1.mgt0.2.ip}/24 to any"
				-v "routing route-map pos via usb0"
				-v "routing route-map pos via encrypted"
				-v "routing route-map guest1 via blackhole"
				-v "routing route-map guest via eth0"
				-v "routing policy pos id 1 match-map pos route-map pos"
				-v "routing policy guest id 2 match-map guest1 route-map guest1"
				-v "routing policy guest1 id 3 match-map guest route-map guest"
				-v "show l3 interface"
				-v "show ip rule"
				-v "_ff id 1 src-ip ${br1.vpc1.tif.ip} protocol 1 b"
				-v "_ff id 2 src-ip ${br1.vpc4.tif.ip} protocol 1 b"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log buffer"
			</telnet>
		</step>
	
		<step no="9" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc1) send traffic to vpn network,ping is failed
			</desc>
			<log-file>step9_ping_cvg1.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${cvg1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -n -i "from ${cvg1.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>

		<step no="9.1" delay="20">
			<desc>
				show logging buffered on br,the ping traffic is forwarded usb0,match routing policy pos
			</desc>
			<log-file>step9.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match>-c -i "iptables FORWARD pkt ${br1.vpc1.tif.ip}(mgt0.1)->${cvg1.vpc1.tif.ip}(ppp0)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth1 ${br1.vpc1.tif.ip}->${cvg1.vpc1.tif.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="10" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc1) send traffic to internet,ping is successful
			</desc>
			<log-file>step10_ping_ftp_server.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping 220.181.111.85 -c 5"
			</ssh>
			<log-match>-c -i "from 220.181.111.85" -i "ttl="</log-match>
		</step>

		<step no="10.1" delay="20">
			<desc>
				show logging buffered on br,ping traffic is forwarded usb0,match routing policy pos
			</desc>
			<log-file>step10.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match> -c -i "iptables FORWARD pkt ${br1.vpc1.tif.ip}(mgt0.1)->220.181.111.85(ppp0)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth1 ${br1.vpc1.tif.ip}->220.181.111.85.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
		
		<step no="11" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc4) send traffic to vpn network,ping traffic is dropped
			</desc>
			<log-file>step11_ping_cvg1.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${cvg1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -n -i "from ${cvg1.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>

		<step no="11.1" delay="20">
			<desc>
				show logging buffered on br,the ping traffic is dropped,match routing policy guest1
			</desc>
			<log-file>step11.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)routing done, ${br1.vpc4.tif.ip} -> ${cvg1.vpc1.tif.ip} ttl\(\d+\) proto\(\d+\) mark\s*\(\d+\).* \d+ bytes, no available route" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth4 ${br1.vpc4.tif.ip}->${cvg1.vpc1.tif.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
		<step no="12" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc4) send traffic to internet,ping is successful
			</desc>
			<log-file>step12_ping_ftp_server.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${pub.ftp1.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${pub.ftp1.ip}" -i "ttl="</log-match>
		</step>

		<step no="12.1" delay="20">
			<desc>
				show logging buffered on br,ping traffic is forwarded eth0,match routing policy guest
			</desc>
			<log-file>step12.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 ${br1.br.wan.ip}->${pub.ftp1.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth4 ${br1.vpc4.tif.ip}->${pub.ftp1.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
		<step no="13">
			<desc>no enable usb </desc>
			<log-file>step11_noenable.log</log-file>
			<console target="br1.br">
				-v "no usbmodem enable"
			</console>
		</step>
		
		<step no="14" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc1) send traffic to vpn network,ping is successful
			</desc>
			<log-file>step14_ping_cvg1.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${cvg1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c  -i "from ${cvg1.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>

		<step no="14.1" delay="20">
			<desc>
				show logging buffered on br,the ping traffic is forwarded tunnel after usb0 down,match routing policy pos
			</desc>
			<log-file>step14.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) tunnel0 ${br1.vpc1.tif.ip}->${cvg1.vpc1.tif.ip}\(\d+\) ttl\(\d+\) mtu\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth1 ${br1.vpc1.tif.ip}->${cvg1.vpc1.tif.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc1) send traffic to internet,ping is successful
			</desc>
			<log-file>step15_ping_ftp_server.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${pub.ftp1.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${pub.ftp1.ip}" -i "ttl="</log-match>
		</step>

		<step no="15.1" delay="20">
			<desc>
				show logging buffered on br,ping traffic is forwarded tunnel after usb0 down,match routing policy pos
			</desc>
			<log-file>step15.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) tunnel0 ${br1.vpc1.tif.ip}->${pub.ftp1.ip}\(\d+\) ttl\(\d+\) mtu\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth1 ${br1.vpc1.tif.ip}->${pub.ftp1.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
		<step no="16">
			<desc>
				enable usb 
			</desc>
			<log-file>step16_enable.log</log-file>
			<console target="br1.br">
				-v "usbmodem enable"
			</console>
		</step>
		
		<step no="16.1" type="loop-check" loop-max-times="30" loop-interval="10">

			<desc>
				Check the usbmodem status while WAN is eth0 by default
			</desc>
			<log-file>step16.1_check_default_usbmodem.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show usbmodem modem-id ${modem.name}"
			</telnet>
			<log-match>-c -i "Mode: always-connected"</log-match>
			<log-match>-c -i "APN: *3gnet"</log-match>
		</step>

		<step no="16.2" type="loop-check" loop-max-times="30" loop-interval="10">
			<desc>
				Check the usbmodem status
			</desc>
			<log-file>step16.2_check_usbmodem_status_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="300">
				-v "show usbmodem status"
			</telnet>
			<log-match bin="${bin.dir}/searchblocks.py">-b "(?i)PPP Interface Status:" -ps p "(?i)State: up" -e "(?i)Connection closed" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		<step no="17" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc1) send traffic to vpn network,ping is failed
			</desc>
			<log-file>step17_ping_cvg1.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${cvg1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -n -i "from ${cvg1.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>

		<step no="17.1" delay="20">
			<desc>
				show logging buffered on br,the ping traffic is forwarded usb0,match routing policy pos
			</desc>
			<log-file>step17.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match>-c -i "iptables FORWARD pkt ${br1.vpc1.tif.ip}(mgt0.1)->${cvg1.vpc1.tif.ip}(ppp0)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth1 ${br1.vpc1.tif.ip}->${cvg1.vpc1.tif.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="18" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc1) send traffic to internet,ping is successful
			</desc>
			<log-file>step18_ping_ftp_server.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping 220.181.111.85 -c 5"
			</ssh>
			<log-match>-c -i "from 220.181.111.85" -i "ttl="</log-match>
		</step>

		<step no="18.1" delay="20">
			<desc>
				show logging buffered on br,ping traffic is forwarded usb0,match routing policy pos
			</desc>
			<log-file>step18.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match> -c -i "iptables FORWARD pkt ${br1.vpc1.tif.ip}(mgt0.1)->220.181.111.85(ppp0)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth1 ${br1.vpc1.tif.ip}->220.181.111.85.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
		
		<step no="19" delay="20">
			<desc>
				eth0 down and the tunnel over eth0 down
			</desc>
			<log-file>step19_show_logging_buffered.log</log-file>
			<console target="br1.br">
				-v "interface eth0 shutdown"
			</console>
			<no-error-check />
		</step>
		
		<step no="20" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc4) send traffic to vpn network,ping traffic is dropped
			</desc>
			<log-file>step20_ping_cvg1.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${cvg1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -n -i "from ${cvg1.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>

		<step no="20.1" delay="20">
			<desc>
				show logging buffered on br,the ping traffic is dropped,match routing policy guest1
			</desc>
			<log-file>step20.1_show_logging_buffered.log</log-file>
			<console target="br1.br">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)routing done, ${br1.vpc4.tif.ip} -> ${cvg1.vpc1.tif.ip}.*no available route" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth4 ${br1.vpc4.tif.ip}->${cvg1.vpc1.tif.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
		<step no="21" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc4) send traffic to internet,ping is failed
			</desc>
			<log-file>step21_ping_ftp_server.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${pub.ftp1.ip} -c 5"
			</ssh>
			<log-match>-n -c -i "from ${pub.ftp1.ip}" -i "ttl="</log-match>
		</step>

		<step no="21.1" delay="20">
			<desc>
				show logging buffered on br,ping traffic is dropped,match routing policy guest
			</desc>
			<log-file>step21.1_show_logging_buffered.log</log-file>
			<console target="br1.br">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)routing done, ${br1.vpc4.tif.ip} -> ${pub.ftp1.ip}.*no available route" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth4 ${br1.vpc4.tif.ip}->${pub.ftp1.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
		<step no="22">
			<desc>
				eth0 up and the tunnel over eth0 down
			</desc>
			<log-file>step22_show_logging_buffered.log</log-file>
			<console target="br1.br">
				-v "no interface eth0 shutdown"
			</console>
			<no-error-check />
		</step>
		
		<step no="23" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc4) send traffic to vpn network,ping traffic is dropped
			</desc>
			<log-file>step23_ping_cvg1.vpc1_${loop_check.idx}.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${cvg1.vpc1.tif.ip} -c 5"
			</ssh>
			<log-match>-c -n -i "from ${cvg1.vpc1.tif.ip}" -i "ttl="</log-match>
		</step>

		<step no="23.1" delay="20">
			<desc>
				show logging buffered on br,the ping traffic is dropped,match routing policy guest1
			</desc>
			<log-file>step11.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)routing done, ${br1.vpc4.tif.ip} -> ${cvg1.vpc1.tif.ip} ttl\(\d+\) proto\(\d+\) mark\s*\(\d+\).* \d+ bytes, no available route" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth4 ${br1.vpc4.tif.ip}->${cvg1.vpc1.tif.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
		<step no="24" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				Laptop(br1.vpc4) send traffic to internet,ping is successful
			</desc>
			<log-file>step24_ping_ftp_server.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${pub.ftp1.ip} -c 5"
			</ssh>
			<log-match>-c -i "from ${pub.ftp1.ip}" -i "ttl="</log-match>
		</step>

		<step no="24.1" delay="20">
			<desc>
				show logging buffered on br,ping traffic is forwarded eth0,match routing policy guest
			</desc>
			<log-file>step24.1_show_logging_buffered.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="600">
				-v "show logging buffered"
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 ${br1.br.wan.ip}->${pub.ftp1.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth4 ${br1.vpc4.tif.ip}->${pub.ftp1.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>
