<?xml version="1.0" encoding="UTF-8"?>
<testcase>
    <brief>The vpn process/daemon brings up by process monitor after abnormal  killed</brief>
    <priority>Middle</priority>
    <automated>yes</automated>
    <description>
        
		Pre-Condition:

			Vpn tunnel created between BR and CVG

		Test Procedure:

			-kill vpn process under shell on BR side, check pm action
			-kill vpn process under shell on CVG side, check the pm action
    </description>
	
	<numofcvg>1</numofcvg>
	<numofbr>1</numofbr>
	<tbtype>winlin</tbtype>

	<property name="br.route.netmask" value="255.255.255.0" />

	<stage>
		<step no="pre.0.1">
			<desc>enable vpn debug</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "_debug vpn debug"
				-v "clear log buf"
			</telnet>
		</step>

		<include prefix="1" file="subs/vpn_setup_one_sw.xml" obj-args="cvg1, br1" />

		<step no="2.1">
			<desc>config mgt0.1 with dhcp service enable</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface vlan${br1.vpc1.vlan} dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options netmask 255.255.255.0"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server enable"
				
			</telnet>
		</step>

		<step no="2.3">
			<desc>config mgt0.2 with dhcp service enable</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface vlan${br1.vpc2.vlan} dhcp-server ip-pool ${br1.br.mgt0.2.ip_pool_start} ${br1.br.mgt0.2.ip_pool_end}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options netmask 255.255.255.0"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options default-gateway ${br1.br.mgt0.2.ip}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server enable"
				
			</telnet>
		</step>

		<step no="set_lan_info">
			<multi-setvar>
				echo "br1.br.mgt0.1.route=$(echo ${br1.br.mgt0.1.ip} | cut -d. -f1,2,3).0"
				echo "br1.br.mgt0.2.route=$(echo ${br1.br.mgt0.2.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.dns1.route=$(echo ${cvg1.dns1.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.dns2.route=$(echo ${cvg1.dns2.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.vpc1.route=$(echo ${cvg1.vpc1.tif.ip} | cut -d. -f1,2,3).0"
				
			</multi-setvar>
		</step>

		<step no="3">
			<desc>Check route distribution is correct</desc>
		</step>

		<step no="3.1" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>On GW, will add the tunnel routes according to BR's modification </desc>
			<log-file>3.1.show_route_cvg_.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="10">
				-v "show ip route"
			</telnet>
			<log-match>-p 1 -i "${br1.br.mgt0.1.route}" -p 8 -i "${cvg1.tunnel.id}"</log-match>
			<log-match>-p 1 -i "${br1.br.mgt0.2.route}" -p 8 -i "${cvg1.tunnel.id}"</log-match>
		</step>

		<step no="3.2" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>-check the ip route tablelist</desc>
			<log-file>3.2_show_l3_ip_route.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show ip route"
			</telnet>
			<log-match>-p 1 -i "${cvg1.dns1.route}" -p 3 -i "${br.route.netmask}" -p 8 -i "${br1.tunnel.id}"</log-match>
			<log-match>-p 1 -i "${cvg1.dns2.route}" -p 3 -i "${br.route.netmask}" -p 8 -i "${br1.tunnel.id}"</log-match>
			<log-match>-p 1 -i "${cvg1.vpc1.route}" -p 3 -i "${br.route.netmask}" -p 8 -i "${br1.tunnel.id}"</log-match>
		</step>

		<step no="3.3">
			<desc>show vpn debug info</desc>
			<log-file>3.3.show_log_buf.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show log buf"
				-v ""
				-v ""
				-v "clear log buf"
				-v ""
				-v "no _debug vpn info"
				-v ""
			</telnet>
			<no-error-check />
		</step>

		<step no="4">
			<desc>
				setup all eth1 interface as access mode				
			</desc>
		</step>

		<step no="4.1a">
			<desc>configure vpc1</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">				
				-v "user-profile sta qos-policy def-user-qos vlan-id ${br1.vpc1.vlan} attribute 1"
				-v "interface ${br1.br.lan.int1} switchport access vlan ${br1.vpc1.vlan}"
			</telnet>
		</step>
		
		<step no="4.1b">
			<desc>
				Laptop1 connect to lan port eth2
			</desc>
			<log-file>ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="4.1c">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>	

		<step no="5">
			<desc>enable debug on BR _ff id 1 protocol 47, _ff id 2 protocol 47, _ff id 1 protocol 1</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "clear log buffered"
				-v "_ff id 1 protocol 1"
				-v "_ff id 2 protocol 47 bidirectional"
				-v "_ff id 3 protocol 50 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</telnet>
		</step>

		<step no="6">
			<desc>
				-ping from vpc1 to a dst behind CVG,ping is successful
			</desc>
			<log-file>log_br_vpc1_to_cvg1.vpc1.log</log-file>
			<ssh target="br1.vpc1">
				-v "ping ${cvg1.vpc1.tif.ip} -c 4"
			</ssh>
			<log-match>-c -i "from ${cvg1.vpc1.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="6.1">
			<desc>show log buf</desc>
			<log-file>step6.1_show_log_buf.log</log-file>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "show log buffered"
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchblocks.py">-b "\(i\) tunnel0 ${cvg1.vpc1.tif.ip}-&gt;${br1.vpc1.tif.ip}.*icmp-echo-reply" -ps p "GRE-decap packet done =&gt; ${cvg1.vpc1.tif.ip}-&gt;${br1.vpc1.tif.ip}" p "GRE-encap packet: ${br1.vpc1.tif.ip}-&gt;${cvg1.vpc1.tif.ip}" p "iptables FORWARD pkt ${br1.vpc1.tif.ip}\(vlan${br1.vpc1.vlan}\)\-\>${cvg1.vpc1.tif.ip}\(tunnel0\)" -e "\(i\) ${br1.br.lan.kport1} ${br1.vpc1.tif.ip}-&gt;${cvg1.vpc1.tif.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
	
               
               	<step no="7">
			<desc>
				kill the ah_vpn process on shell
			</desc>
			<telnet target="${br1.br.wan.ip}" prompt="\$|AH.*#">
				-b -sp "${br1.br.shellpwd}"
				-v "_shell"
				-v "killall -9 ah_vpn"
				-v "exit"
			</telnet>
               </step>
               
               <step no="8" dealay="10" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				check the ah_vpn process is restarted
			</desc>
			<log-file>step8_ps.log</log-file>
			<telnet target="${br1.br.wan.ip}" prompt="\$|AH.*#">
				-b -sp "${br1.br.shellpwd}"
				-v "_shell"
				-v "ps"
				-v ""
				-v ""
				-v "exit"
			</telnet>
			<log-match>-i "/opt/ah/bin/ah_vpn" </log-match>
               </step>
               
               <step no="9" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>
				-ping from vpc1 to a dst behind CVG after the ah_vpn process recovery,ping is successful
			</desc>
			<log-file>log_br_vpc1_to_cvg1.vpc1.log</log-file>
			<ssh target="br1.vpc1">
				-v "ping ${cvg1.vpc1.tif.ip} -c 4"
			</ssh>
			<log-match>-c -i "from ${cvg1.vpc1.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="9.1">
			<desc>show log buf</desc>
			<log-file>step9.1_show_log_buf.log</log-file>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "show log buffered"
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchblocks.py">-b "\(i\) tunnel0 ${cvg1.vpc1.tif.ip}-&gt;${br1.vpc1.tif.ip}.*icmp-echo-reply" -ps p "GRE-decap packet done =&gt; ${cvg1.vpc1.tif.ip}-&gt;${br1.vpc1.tif.ip}" p "GRE-encap packet: ${br1.vpc1.tif.ip}-&gt;${cvg1.vpc1.tif.ip}" p "iptables FORWARD pkt ${br1.vpc1.tif.ip}\(vlan${br1.vpc1.vlan}\)\-\>${cvg1.vpc1.tif.ip}\(tunnel0\)" -e "\(i\) ${br1.br.lan.kport1} ${br1.vpc1.tif.ip}-&gt;${cvg1.vpc1.tif.ip}.*icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
	</stage>

</testcase>
