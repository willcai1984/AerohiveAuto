<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>when the primary server ldap-bind fails,it fails over to backup server</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-a local radius server must be configed first
		-AP's clock should be sync to the AD server via a ntp server
		-config a primary AD server,binddn or basedn is wrong,exec net-join
		-config a backup AD server,admin user configed on AP
		-the primary server and backup server are in the same domain
		-setup a ssid using wpa2-tkip-802.1x,radius server is local

		Test Procedure:
		-_de radi ex to check the fail-over
		-client connect to ssid
	</description>
	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>

	<property name="conn1.username" value="${pub.ad1.username}" />
	<property name="conn1.passwd" value="${pub.ad1.passwd}" />

	<stage>
		<step no="1.1">
			<desc>set local radius parameters</desc>
			<telnet target="sw1">
				-v "clear log buffered"
				-v "security-object autoap"
				-v "security-object autoap security aaa radius primary ${sw1.admin.ip}"
				-v "security-object autoap security protocol-suite 802.1x"
				-v "security-object autoap default-user-profile-attr ${tb.vlan1}"
				-v "user-profile vlan${tb.vlan1} vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/cacert.pem"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/server_cert.pem"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/server_key.pem"
				-v "aaa radius-server local sta-auth ca-cert cacert.pem server-cert server_cert.pem private-key server_key.pem"
				-v "aaa radius-server local db-type active-directory primary server 1.1.1.1"
				-v "aaa radius-server local db-type active-directory primary domain ${pub.ad1.name} fullname ${pub.ad1.realm} default"
				-v "aaa radius-server local db-type active-directory primary domain ${pub.ad1.name} binddn ${pub.ad1.binddn}123 password ${pub.ad1.bindpwd}123"
				-v "aaa radius-server local db-type active-directory primary login admin-user ${pub.ad1.admin} password ${pub.ad1.adminpwd}"
				-v "aaa radius-server local db-type active-directory backup1 server ${pub.ad1.ip}"
				-v "aaa radius-server local db-type active-directory backup1 domain ${pub.ad1.name} fullname ${pub.ad1.realm} default"
				-v "aaa radius-server local db-type active-directory backup1 domain ${pub.ad1.name} binddn ${pub.ad1.binddn} password ${pub.ad1.bindpwd}"
			</telnet>
		</step>

		<step no="1.2">
			<desc>config ssid and bind it to interface</desc>
			<telnet target="sw1">
				-v "aaa radius-server local db-type active-directory backup1 login admin-user ${pub.ad1.admin} password ${pub.ad1.adminpwd}"
				-v "aaa radius-server local retry-interval 90"
				-v "aaa radius-server local enable"
				-v "_debug radiusd excessive"
				-v "user-profile ttt vlan-id 1 attribute 1"
				<!---v "exec aaa net-join domain ${pub.ad1.name} fullname ${pub.ad1.realm} server ${pub.ad1.name} username ${pub.ad1.admin} password ${pub.ad1.adminpwd}"-->
			</telnet>
			<no-error-check/>
		</step>
		<step no="2">
			<desc>show status of radius server on AP1</desc>
			<log-file>show_rad_srv.log</log-file>
			<telnet target="sw1">
				-v "show aaa radius-server"
			</telnet>
			<log-match>-p 3 -i "Enabled" -i "Local RADIUS"</log-match>
			<log-match>-i "Remote Retry Period: *30 secs"</log-match>
			<log-match>-i "primary active-directory (active)"</log-match>
			<log-match>-i "backup1 active-directory:"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">
				-b "primary active-directory \(active\)" 
				-ps p1 "Full Domain Name:\s*${pub.ad1.realm}" 
				p1 "Domain Name\s*${pub.ad1.name}" 
				p1 "Server:\s*1.1.1.1" p1 "BindDN:\s*${pub.ad1.binddn}123" 
				-e "backup1 active-directory:" 
				-f "${log.dir}/${log.file}"
			</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">
				-b "backup1 active-directory:" 
				-ps p1 "Full Domain Name:\s*${pub.ad1.realm}" 
				p1 "Domain Name\s*${pub.ad1.name}" 
				p1 "Server:\s*${pub.ad1.ip}" 
				p1 "BindDN:\s*${pub.ad1.binddn}" 
				-f "${log.dir}/${log.file}"
			</log-match>
		</step>
		<step no="3">
			<multi-setvar>
				echo sw1.port1.ixia_port.if1.mac_1=$(echo "${sw1.port1.ixia_port.if1.mac}" | sed 's/\./:/g')
				echo tb.sub_netmask=$(ipcalc -4 -m ${tb.vlan1.ip}/${tb.subnet_prefix}|cut -d= -f2)
				echo tb.vlan1.ip_end=$(echo `echo ${tb.vlan1.ip_start} |cut -d\. -f1,2,3`\.$(expr `echo ${tb.vlan1.ip_start} | cut -d\. -f4` + 5))
			</multi-setvar>
		</step>
		<step no="4">
			<desc>
				enable 802.1x auth and dhcp server on switch
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "interface vlan ${tb.vlan1}"
				-v "interface vlan${tb.vlan1} ip ${tb.vlan1.ip}/${tb.subnet_prefix}"
				-v "user-profile vlan${tb.vlan1} vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "interface ${sw1.port1} security-object autoap"
				-v "interface vlan${tb.vlan1} dhcp-server ip-pool ${tb.vlan1.ip_start} ${tb.vlan1.ip_end}"
				-v "interface vlan${tb.vlan1} dhcp-server options default-gateway ${tb.vlan1.ip}"
				-v "interface vlan${tb.vlan1} dhcp-server options netmask ${tb.sub_netmask}"
				-v "interface vlan${tb.vlan1} dhcp-server enable"
			</telnet>
		</step>
		<step no="5.1a">
			<desc>
				config eap protocol and start
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-new="${job.user}-${job.sid}-1">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixn_connect -def enable -chassisIP ${pub.chassis1.ip} -ixn_tcl_server ${sw1.ixn_tcl_server} -userName ${job.user} -portList ${sw1.port1.ixia_port} -phyList ${sw1.port1.phytype}"
				-v ""

				-v "ixn_emulation_8021x_config -portList ${sw1.port1.ixia_port} \
				-mac_address ${sw1.port1.ixia_port.if1.mac} \
				-mac_addr_increment 0.0.0.0.0.1 \
				-mac_addr_count 1 \
				-protocol PEAPv0 \
				-username ${pub.ad1.username} \
				-password ${pub.ad1.passwd} \
				-ca_path ${ixn.cert_dir} \
				-key_path ${ixn.cert_dir}"
				-v "ixn_allprotocols_control -action start"
			</ssh>
			<no-error-check />
		</step>
		<step no="5.1b" type="loop-check" loop-max-times="5" loop-interval="6">
			<desc>
				check ${sw1.port1.ixia_port.if1.mac} passes eap auth 
			</desc>
			<log-file>eap_check${loop_check.idx}.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1" >
				-v "ixn_emulation_8021x_stats -protocol peap"
				-v ""
			</ssh>
			<log-match>-re -e "{PEAP Success} 1"</log-match>
		</step>
		<step no="5.2" type="loop-check" loop-max-times="5" loop-interval="3">
			<desc>
				config eap protocol and start
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "sleep 3"
				-v "ixn_emulation_8021x_stats -protocol peap"
			</ssh>
			<log-match>-re -e "{PEAP Success} 1"</log-match>
			<no-error-check />
		</step>
		<step no="6.1">
			<desc>
				create protocol interface, get dhcp and ping
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_create -portList ${sw1.port1.ixia_port} -mac_src ${sw1.port1.ixia_port.if1.mac}"
				-v "ixn_interface_dhcp_config -portList ${sw1.port1.ixia_port} -enable true"
			</ssh>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="6.2" type="loop-check" loop-max-times="5" loop-interval="3">
			<desc>
				check ${sw1.port1.ixia_port.if1.mac} gets ip addr
			</desc>
			<log-file>dhcp_check${loop_check.idx}.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1" >
				-v "ixn_interface_dhcp_info -portList ${sw1.port1.ixia_port}"
				-v ""
			</ssh>
			<log-match>-re -i "${sw1.port1.ixia_port}\.${sw1.port1.ixia_port.if1.mac}.ip=([0-9]{1,3}+\.)[0-9]{1,3}"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="6.3">
			<desc>
				check ping to gateway
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_ping_control -intf_handleList [keylget allIntfH port.${sw1.port1.ixia_port}.interface_handle.${sw1.port1.ixia_port.if1.mac}] -destination_ip ${tb.vlan1.ip} -count 4"
				-v ""
			</ssh>
			<log-match>-re -i "Response received from ${tb.vlan1.ip}\. Sequence Number [0-9]+"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="7">
			<desc>show log buf</desc>
			<log-file>check_auth1.log</log-file>
			<telnet target="sw1">
				-v "show log buffered"
				-v "clear log buffered"
			</telnet>
			<log-match>-c -i "${pub.ad1.binddn}123 bind to 1.1.1.1:" -i "Can't contact LDAP server"</log-match>
			<log-match>-c -i "keep attemptting to this LDAP server within"</log-match>
			<log-match>-c -i "switch to backup1 active directory"</log-match>
			<log-match>-i "will keep on the LDAP server (${pub.ad1.ip}) within"</log-match>
			<log-match>-i "Bind was successful"</log-match>
			<failed>next</failed>
			<no-error-check />
		</step>	
		<!--
		<step no="6.1">
			<desc>open debug all and clear log all</desc>
			<telnet target="sw1">
				-v "_debug radiusd excessive"
				-v "clear log all"
			</telnet>
		</step>

		<include prefix="7" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, sw1" />

		<include prefix="8" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step8_show_logging_buffered.log" />

		<step no="8.1">
			<desc>check if sending primary active directory after success failover</desc>
			<log-file>step8_show_logging_buffered.log</log-file>
			<log-match>-c -i "retry primary LDAP server"</log-match>
			<log-match>-c -i "switch to primary active directory"</log-match>
		</step>

		<step no="9">
			<desc>Get the first times of sending message to primary active directory</desc>
			<setvar name="first.primary.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*connect to 1.1.1.1:\d+, authentication 0" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="9.1">
			<desc>Get the first times of sending messages to backup directory</desc>
			<setvar name="first.backup1.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*switch to backup1 active directory" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="9.2">
			<desc>
				check if the interval is between 30 to 50.
			</desc>
			<log-file>step9.2_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${first.backup1.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${first.primary.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple())) &gt;= 30.0 and (mktime(datetime.strptime('${first.backup1.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${first.primary.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple())) &lt;= 50.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="10">
			<desc>Get the second times of sending message to primary active directory</desc>
			<setvar name="retry.primary.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step8_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*switch to primary active directory" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="10.1">
			<desc>Get the second times of sending messages to backup directory</desc>
			<setvar name="retry.backup.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step8_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*switch to backup1 active directory" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="10.2">
			<desc>
				check if the interval is between 70 to 110.
			</desc>
			<log-file>step10.2_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${retry.backup.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${retry.primary.times}', '%Y-%m-%d %H:%M:%S').timetuple())) &gt;= 70.0 and (mktime(datetime.strptime('${retry.backup.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${retry.primary.times}', '%Y-%m-%d %H:%M:%S').timetuple())) &lt;= 110.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="11">
			<desc>show status of radius server on AP1</desc>
			<log-file>step11_show_rad_srv1.log</log-file>
			<telnet target="ap1">
				-v "show aaa radius-server"
			</telnet>
			<log-match>-i "backup1 active-directory (active):"</log-match>
			<log-match>-i "primary active-directory:"</log-match>
		</step>

		<include prefix="12" file="subs/chk_sta_conn_in_ap.xml" args="ap1, sta1, wpa-aes-8021x, WPA/CCMP, wpa-8021x, aes" /> -->
	</stage>
	<post-process>
		<stage>
			<step no="post1">
				<ssh timeout="180" host="${pub.tclclient1.ip}" prompt="%.*|root@.*#" session-close="${job.user}-${job.sid}-1">
					-v ""
					-v "ixn_allprotocols_control -action stop"
				</ssh>
			</step>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
