<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>check the cache should be saved after a successful radius auth</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-a local radius server must be configed first
		-AP's clock should be sync to the AD server via a ntp server
		-setup a ssid using wpa2-tkip-802.1x,radius server is local
		-enable the radius cache

		Test Procedure:
		-config a minimal AD
		-we should try the format :user,domain\user,user@fullname
		-client do machine auth and user auth fail,check the cache
		-client do machine auth and user auth success,check the cache
		-remote server is unreachable,client do auth
	</description>
	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="1.1">
			<desc>config radius server with db-type ad</desc>
			<telnet target="sw1">
				-v "ntp server ${pub.ntp}"
				-v "security-object autoap"
				-v "security-object autoap security aaa radius primary ${sw1.admin.ip}"
				-v "security-object autoap security protocol-suite 802.1x"
				-v "security-object autoap default-user-profile-attr ${tb.vlan1}"
				-v "user-profile vlan${tb.vlan1} vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/cacert.pem"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/server_cert.pem"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/server_key.pem"
				-v "aaa radius-server local sta-auth ca-cert cacert.pem server-cert server_cert.pem private-key server_key.pem"
				-v "aaa radius-server local db-type active-directory primary server ${pub.ad2.ip}"
				-v "aaa radius-server local db-type active-directory primary domain ${pub.ad2.name} fullname ${pub.ad2.realm} default"
				-v "aaa radius-server local db-type active-directory primary domain ${pub.ad2.name} binddn ${pub.ad2.binddn} password ${pub.ad2.bindpwd}"
				-v "aaa radius-server local db-type active-directory primary login admin-user ${pub.ad2.admin} password ${pub.ad2.adminpwd}"
				-v "aaa radius-server local cache"
				-v "aaa radius-server local enable"
				-v "user-profile aaa vlan-id 1 attribute 1"
			</telnet>
		</step>
		<step no="1.2">
			<desc>show status of radius server on AP1</desc>
			<telnet target="sw1">
				-v "show aaa radius-server"
				-v "_debug radiusd excessive"
			</telnet>
			<log-match>-i "Enabled" -i "Local RADIUS" -p 3</log-match>
			<log-match>-i "primary active-directory (active)"</log-match>
			<log-match>-c -i "Cache Lifetime: *86400"</log-match>
		</step>
		<step no="2.1">
			<multi-setvar>
				echo sw1.port1.ixia_port.if2.mac=$(echo `echo ${sw1.port1.ixia_port.if1.mac}|cut -d\. -f1,2`\.$(printf %04d $(expr `echo ${sw1.port1.ixia_port.if1.mac}|cut -d\. -f3` + 1)))
				echo sw1.port1.ixia_port.if3.mac=$(echo `echo ${sw1.port1.ixia_port.if1.mac}|cut -d\. -f1,2`\.$(printf %04d $(expr `echo ${sw1.port1.ixia_port.if1.mac}|cut -d\. -f3` + 2)))
				echo sw1.port1.ixia_port.if1.mac_1=$(echo "${sw1.port1.ixia_port.if1.mac}" | sed 's/\./:/g')
				echo sw1.port1.ixia_port.if1.mac_2=$(echo "${sw1.port1.ixia_port. if2.mac}" | sed 's/\./:/g')
				echo sw1.port1.ixia_port.if1.mac_3=$(echo "${sw1.port1.ixia_port. if3.mac}" | sed 's/\./:/g')
				echo tb.sub_netmask=$(ipcalc -4 -m ${tb.vlan1.ip}/${tb.subnet_prefix}|cut -d= -f2)
				echo tb.vlan1.ip_end=$(echo `echo ${tb.vlan1.ip_start} |cut -d\. -f1,2,3`\.$(expr `echo ${tb.vlan1.ip_start} | cut -d\. -f4` + 5))
			</multi-setvar>
		</step>
		<step no="2.2">
			<multi-setvar>
				echo sw1.port1.ixia_port.if1.mac_2=$(echo "${sw1.port1.ixia_port. if2.mac}" | sed 's/\./:/g')
				echo sw1.port1.ixia_port.if1.mac_3=$(echo "${sw1.port1.ixia_port. if3.mac}" | sed 's/\./:/g')
			</multi-setvar>
		</step>
		<step no="2.3">
			<desc>
				enable 802.1x auth and dhcp server on switch
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "interface vlan ${tb.vlan1}"
				-v "interface vlan${tb.vlan1} ip ${tb.vlan1.ip}/${tb.subnet_prefix}"
				-v "user-profile vlan${tb.vlan1} vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "interface ${sw1.port1} security-object autoap"
				-v "interface vlan${tb.vlan1} dhcp-server ip-pool ${tb.vlan1.ip_start} ${tb.vlan1.ip_end}"
				-v "interface vlan${tb.vlan1} dhcp-server options default-gateway ${tb.vlan1.ip}"
				-v "interface vlan${tb.vlan1} dhcp-server options netmask ${tb.sub_netmask}"
				-v "interface vlan${tb.vlan1} dhcp-server enable"
			</telnet>
		</step>
		<step no="3.1a">
			<desc>
				config eap protocol and start, username ${pub.ad2.name}\\${pub.ad2.username}
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-new="${job.user}-${job.sid}-1">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixn_connect -def enable -chassisIP ${pub.chassis1.ip} -ixn_tcl_server ${sw1.ixn_tcl_server} -userName ${job.user} -portList ${sw1.port1.ixia_port} -phyList ${sw1.port1.phytype}"
				-v ""
				-v "ixn_emulation_8021x_config -portList ${sw1.port1.ixia_port} \
				-mac_address ${sw1.port1.ixia_port.if1.mac} \
				-mac_addr_increment 0.0.0.0.0.1 \
				-mac_addr_count 1 \
				-protocol PEAPv0 \
				-username ${pub.ad2.name}\\\\\\\\${pub.ad2.username} \
				-password ${pub.ad2.passwd} \
				-ca_path ${ixn.cert_dir} \
				-key_path ${ixn.cert_dir}"
				-v "ixn_allprotocols_control -action start"
			</ssh>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="3.1b" type="loop-check" loop-max-times="5" loop-interval="6">
			<desc>
				check ${sw1.port1.ixia_port.if1.mac} passes eap auth 
			</desc>
			<log-file>eap_check${loop_check.idx}.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1" >
				-v "ixn_emulation_8021x_stats -protocol peap"
				-v ""
			</ssh>
			<log-match>-re -e "{PEAP Success} 1"</log-match>
		</step>
		<step no="4.1">
			<desc>
				create protocol interface, get dhcp and ping
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_create -portList ${sw1.port1.ixia_port} -mac_src ${sw1.port1.ixia_port.if1.mac}"
				-v "ixn_interface_dhcp_config -portList ${sw1.port1.ixia_port} -enable true"
			</ssh>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="4.2" type="loop-check" loop-max-times="5" loop-interval="3">
			<desc>
				check ${sw1.port1.ixia_port.if1.mac} gets ip addr
			</desc>
			<log-file>dhcp_check${loop_check.idx}.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1" >
				-v "ixn_interface_dhcp_info -portList ${sw1.port1.ixia_port}"
				-v ""
			</ssh>
			<log-match>-re -i "${sw1.port1.ixia_port}\.${sw1.port1.ixia_port.if1.mac}.ip=([0-9]{1,3}+\.)[0-9]{1,3}"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="4.3">
			<desc>
				check ping to gateway
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_ping_control -intf_handleList [keylget allIntfH port.${sw1.port1.ixia_port}.interface_handle.${sw1.port1.ixia_port.if1.mac}] -destination_ip ${tb.vlan1.ip} -count 4"
				-v ""
			</ssh>
			<log-match>-re -i "Response received from ${tb.vlan1.ip}\. Sequence Number [0-9]+"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="5">
			<telnet target="sw1" timeout="200">
				-v "show logging buffered"
				-v "clear log buffered"
			</telnet>
			<log-match>-c -i "update RADIUS cache for user ${pub.ad2.name}\\\\\${pub.radius1.username}"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="6">
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_allprotocols_control -action stop"
				-v "ixn_emulation_8021x_config -portList ${sw1.port1.ixia_port} \
				-range_handle  [keylget rangeHandleL range_handle.${sw1.port1.ixia_port.if1.mac}] \
				-mode modify \
				-mac_address ${sw1.port1.ixia_port.if2.mac} \
				-protocol TTLS \
				-username ${pub.ad2.username}@${pub.ad2.realm} \
				-password ${pub.ad2.passwd}"
				-v "ixn_allprotocols_control -action start"
				-v "sleep 3"
				-v "ixn_emulation_8021x_stats -protocol ttls"
			</ssh>
			<log-match>-re -e "{TTLS Success} 1"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="7.1">
			<desc>
				create protocol interface, get dhcp and ping
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_dhcp_config -portList ${sw1.port1.ixia_port} -enable false"
				-v "sleep 3"
				-v "ixn_interface_dhcp_config -portList ${sw1.port1.ixia_port} -enable true"
			</ssh>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="7.2" type="loop-check" loop-max-times="5" loop-interval="3">
			<desc>
				check ${sw1.port1.ixia_port.if2.mac} gets ip addr
			</desc>
			<log-file>dhcp_check2_${loop_check.idx}.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1" >
				-v "ixn_interface_dhcp_info -portList ${sw1.port1.ixia_port}"
				-v ""
			</ssh>
			<log-match>-re -i "${sw1.port1.ixia_port}\.${sw1.port1.ixia_port.if2.mac}.ip=([0-9]{1,3}+\.)[0-9]{1,3}"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="7.3">
			<desc>
				check ping to gateway
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_ping_control -intf_handleList [keylget allIntfH port.${sw1.port1.ixia_port}.interface_handle.${sw1.port1.ixia_port.if2.mac}] -destination_ip ${tb.vlan1.ip} -count 4"
				-v ""
			</ssh>
			<log-match>-re -i "Response received from ${tb.vlan1.ip}\. Sequence Number [0-9]+"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>	

		<step no="8">
			<desc>
				config eap protocol and start, username ${pub.ad2.name}\\${pub.ad2.username}
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-new="${job.user}-${job.sid}-1">
				-v "ixn_allprotocols_control -action stop"
				-v "ixn_emulation_8021x_config -portList ${sw1.port1.ixia_port} \
				-range_handle  [keylget rangeHandleL range_handle.${sw1.port1.ixia_port.if1.mac}] \
				-mode modify \
				-mac_address ${sw1.port1.ixia_port.if3.mac} \
				-mac_addr_increment 0.0.0.0.0.1 \
				-mac_addr_count 1 \
				-protocol TLS \
				-username ${pub.ad2.username} \
				-ca_path ${ixn.cert_dir} \
				-key_path ${ixn.cert_dir}"
				-v "ixn_allprotocols_control -action start"
				-v "sleep 3"
				-v "ixn_emulation_8021x_stats -protocol tls"
			</ssh>
			<log-match>-re -e "{TLS Success} 1"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="9.1">
			<desc>
				create protocol interface, get dhcp and ping
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_dhcp_config -portList ${sw1.port1.ixia_port} -enable false"
				-v "sleep 3"
				-v "ixn_interface_dhcp_config -portList ${sw1.port1.ixia_port} -enable true"
			</ssh>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="9.2" type="loop-check" loop-max-times="5" loop-interval="3">
			<desc>
				check ${sw1.port1.ixia_port.if2.mac} gets ip addr
			</desc>
			<log-file>dhcp_check2_${loop_check.idx}.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1" >
				-v "ixn_interface_dhcp_info -portList ${sw1.port1.ixia_port}"
				-v ""
			</ssh>
			<log-match>-re -i "${sw1.port1.ixia_port}\.${sw1.port1.ixia_port.if3.mac}.ip=([0-9]{1,3}+\.)[0-9]{1,3}"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="9.3">
			<desc>
				check ping to gateway
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_ping_control -intf_handleList [keylget allIntfH port.${sw1.port1.ixia_port}.interface_handle.${sw1.port1.ixia_port.if3.mac}] -destination_ip ${tb.vlan1.ip} -count 4"
				-v ""
			</ssh>
			<log-match>-re -i "Response received from ${tb.vlan1.ip}\. Sequence Number [0-9]+"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>	
		<step no="10.1">
			<desc>show cache of radius server on SW1</desc>
			<telnet target="sw1">
				-v "show aaa radius-server cache"
			</telnet>
			<log-match>-n -c -i "${pub.ad2.name}\\${pub.ad2.username}"</log-match>
			<failed>next</failed>
		</step>
		<step no="10.2">
			<desc>show radius server cache</desc>
			<telnet target="sw1">
				-v "show aaa radius-server cache"
			</telnet>
			<log-match>-c -i "${pub.ad2.name}\\\\\${pub.radius1.username}"</log-match>
		</step>
	</stage>
	<post-process>
		<stage>
			<step no="post1">
				<ssh timeout="180" host="${pub.tclclient1.ip}" prompt="%.*|root@.*#" session-close="${job.user}-${job.sid}-1">
					-v ""
					-v "ixn_allprotocols_control -action stop"
				</ssh>
			</step>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
