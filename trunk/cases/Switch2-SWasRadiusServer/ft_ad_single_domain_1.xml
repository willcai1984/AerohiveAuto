<testcase>
	<brief>(IxPort: CoF=1)a minimal config for AD works,basic function check</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>
	<description>
		Topology to use
		Topology 1
		Description
		a minimal config for
		AD works,basic function check
		Pre-condition
		-a local radius server must
		be configed first
		-APs clock should be sync to the AD server via a ntp
		server
		-setup a ssid using wpa-auto-802.1x,radius server is local
		Test
		procedure
		-config a fullname of the domain,we should mark it as
		default,there there
		must be a default domain,otherwise it could not
		work
		-config a server,using url or ip
		-config a binddn,it should like
		domain\user or user@fullname,make sure the
		binddn has the privilege to
		read the users
		-config a login user,it must be domain admin user
		-enable the radius server
		-client connect to AP use the account in
		AD,use
		Expect result
		1.check the state of the radius server, sh aaa
		radius-server to make sure
		2.check the net join to the domain is
		successful,check sh log | in
		sam
		3.client auth should be successful,
		sh auth,sh ssid xxx st,sh roa ca to make
		sure
		4.ping gateway to make
		sure the connect is setup correctly
	</description>
	<stage>
		<step no="1.1">
			<desc>configre switch as radius server</desc>
			<telnet target="sw1">
				-v "clear log buffered"
				-v "security-object autoap"
				-v "security-object autoap security aaa radius primary ${sw1.admin.ip}"
				-v "security-object autoap security protocol-suite 802.1x"
				-v "security-object autoap default-user-profile-attr ${tb.vlan1}"
				-v "user-profile vlan${tb.vlan1} vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/cacert.pem"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/server_cert.pem"
				-v "save radius-server-key radius-server tftp://${pub.tftp1.tip}:sw_certs/server_key.pem"
				-v "aaa radius-server local sta-auth ca-cert cacert.pem server-cert server_cert.pem private-key server_key.pem"
				-v "aaa radius-server local db-type active-directory primary server ${pub.ad1.ip}"
				-v "aaa radius-server local db-type active-directory primary domain ${pub.ad1.name} fullname ${pub.ad1.realm} default"
				-v "aaa radius-server local db-type active-directory primary domain ${pub.ad1.name} binddn ${pub.ad1.binddn} password ${pub.ad1.bindpwd}"
				-v "aaa radius-server local db-type active-directory primary login admin-user ${pub.ad1.admin} password ${pub.ad1.adminpwd}"
				-v "aaa radius-server local enable"
			</telnet>
		</step>
		<step no="1.2">
			<multi-setvar>
				echo sw1.port1.ixia_port.if1.mac_1=$(echo "${sw1.port1.ixia_port.if1.mac}" | sed 's/\./:/g')
				echo tb.sub_netmask=$(ipcalc -4 -m ${tb.vlan1.ip}/${tb.subnet_prefix}|cut -d= -f2)
				echo tb.vlan1.ip_end=$(echo `echo ${tb.vlan1.ip_start} |cut -d\. -f1,2,3`\.$(expr `echo ${tb.vlan1.ip_start} | cut -d\. -f4` + 5))
			</multi-setvar>
		</step>
		<step no="1.3">
			<desc>configre switch as dhcp server</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "interface vlan ${tb.vlan1}"
				-v "interface vlan${tb.vlan1} ip ${tb.vlan1.ip}/${tb.subnet_prefix}"
				-v "interface ${sw1.port1} security-object autoap"
				-v "interface vlan${tb.vlan1} dhcp-server ip-pool ${tb.vlan1.ip_start} ${tb.vlan1.ip_end}"
				-v "interface vlan${tb.vlan1} dhcp-server options default-gateway ${tb.vlan1.ip}"
				-v "interface vlan${tb.vlan1} dhcp-server options netmask ${tb.sub_netmask}"
				-v "interface vlan${tb.vlan1} dhcp-server enable"
			</telnet>
		</step>

		<step no="2">
			<desc>show status of radius server on sw1</desc>
			<log-file>show_rad_srv.log</log-file>
			<telnet target="sw1">
				-v "show aaa radius-server"
				-v "_debug radiusd excessive"
			</telnet>
			<log-match>-e "Enabled" -i "Local RADIUS" -p 3</log-match>
			<log-match>-e "primary active-directory (active)"</log-match>
		</step>

		<step no="3.1a">
			<desc>
				config eap protocol and start
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-new="${job.user}-${job.sid}-1">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixn_connect -def enable -chassisIP ${pub.chassis1.ip} -ixn_tcl_server ${sw1.ixn_tcl_server} -userName ${job.user} -portList ${sw1.port1.ixia_port} -phyList ${sw1.port1.phytype}"
				-v ""

				-v "ixn_emulation_8021x_config -portList ${sw1.port1.ixia_port} \
				-mac_address ${sw1.port1.ixia_port.if1.mac} \
				-mac_addr_increment 0.0.0.0.0.1 \
				-mac_addr_count 1 \
				-protocol PEAPv0 \
				-username ${pub.ad1.username} \
				-password ${pub.ad1.passwd} \
				-ca_path ${ixn.cert_dir} \
				-key_path ${ixn.cert_dir}"
				-v "ixn_allprotocols_control -action start"
			</ssh>
			<no-error-check />
		</step>
		<step no="3.1b" type="loop-check" loop-max-times="5" loop-interval="6">
			<desc>
				check ${sw1.port1.ixia_port.if1.mac} passes eap auth 
			</desc>
			<log-file>eap_check${loop_check.idx}.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1" >
				-v "ixn_emulation_8021x_stats -protocol peap"
				-v ""
			</ssh>
			<log-match>-re -e "{PEAP Success} 1"</log-match>
		</step>
		<step no="3.2">
			<desc>
				create protocol interface, get dhcp and ping
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_create -portList ${sw1.port1.ixia_port} -mac_src ${sw1.port1.ixia_port.if1.mac}"
				-v "ixn_interface_dhcp_config -portList ${sw1.port1.ixia_port} -enable true"
			</ssh>
			<no-error-check />
		</step>
		<step no="3.3" type="loop-check" loop-max-times="5" loop-interval="3">
			<desc>
				check ${sw1.port1.ixia_port.if1.mac} gets ip addr
			</desc>
			<log-file>dhcp_check${loop_check.idx}.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1" >
				-v "ixn_interface_dhcp_info -portList ${sw1.port1.ixia_port}"
				-v ""
			</ssh>
			<log-match>-re -i "${sw1.port1.ixia_port}\.${sw1.port1.ixia_port.if1.mac}.ip=([0-9]{1,3}+\.)[0-9]{1,3}"</log-match>
			<no-error-check />
		</step>
		<step no="3.4">
			<desc>
				check ping to gateway
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_ping_control -intf_handleList [keylget allIntfH port.${sw1.port1.ixia_port}.interface_handle.${sw1.port1.ixia_port.if1.mac}] -destination_ip ${tb.vlan1.ip} -count 4"
				-v ""
			</ssh>
			<log-match>-re -i "Response received from ${tb.vlan1.ip}\. Sequence Number [0-9]+"</log-match>
			<no-error-check />
		</step>
		<step no="3.5">
			<desc>show log buf</desc>
			<log-file>check_auth1.log</log-file>
			<telnet target="sw1">
				-v "show log buffered"
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "RADIUS: The RADIUS server accepted user \'${pub.ad1.username}\' through the NAS at ${sw1.forward.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "bind as ${pub.ad1.binddn} to ${pub.ad1.ip}:(389|0)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Bind was successful" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		<step no="4">
			<desc>check auth entries</desc>
			<telnet target="sw1">
				-v "show auth interface ${sw1.port1}"
			</telnet>
			<log-match>-re -i "${sw1.port1.ixia_port.if1.mac_1}[ \t]+${tb.vlan1}[ \t]+-1[ \t]+done[ \t]+data[ \t]+${pub.ad1.username}[ \t]+000b"</log-match>
		</step>
		<step no="5">
			<desc>check FDB,make sure the mac entries aren't changed</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
			<log-match>-re -i "${tb.vlan1}[ \t]+${sw1.port1.ixia_port.if1.mac_1}[ \t]+${sw1.port1}"</log-match>
		</step>
		<step no="6.1">
			<desc>check roaming cache</desc>
			<telnet target="sw1">
				-v "show roaming cache"
			</telnet>
		</step>
		<step no="6.2">
			<desc>check roaming cache one by one</desc>
			<telnet target="sw1">
				-v "show roaming cache mac ${sw1.port1.ixia_port.if1.mac_1}"
			</telnet>
		</step>

	</stage>
	<post-process>
		<stage>
			<step no="post1">
				<ssh timeout="180" host="${pub.tclclient1.ip}" prompt="%.*|root@.*#" session-close="${job.user}-${job.sid}-1">
					-v ""
					-v "ixn_allprotocols_control -action stop"
				</ssh>
			</step>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
