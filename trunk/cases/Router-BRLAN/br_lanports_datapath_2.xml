<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check unknown unicast packet forwarding path</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>

		Pre-Condition:

		PC1 connect to switch
		Laptop1 connect to lan port eth1
		Laptop2 connect to lan port eth4
		Laptop1 and laptop2 with same vlan
		Station1 connect to wifi
		BR lan port works with port based/trunk mode

		Test Procedure:

		1. On pc1, laptop1/laptop2 create a static arp entry, such as 10.155.30.222 -&gt; 00-11-22-33-44-
		55
		2. Unknown unicast from eth0 interface
		Pc1 ping the created static ip address. Result1
		3. Unknown unicast from lan ports eth1 interface
		Laptop1 ping the created static ip address. Result2
	</description>
	<numofcvg>0</numofcvg>
	<numofbr>1</numofbr>
	<tbtype>linux</tbtype>	
	<property name="br1.br.tmp.mac" value="00:11:22:33:44:55" />
	<property name="br.route.netmask" value="255.255.255.0" />

	<stage>

		<step no="set_tmp_IP">
			<multi-setvar>
				echo "br1.br.tmp.ip=$(echo ${br1.br.mgt0.1.ip_pool_end} | cut -d. -f1,2,3).$(expr $(echo ${br1.br.mgt0.1.ip_pool_end} | cut -d. -f4) + 1)"
			</multi-setvar>
		</step>

		<include prefix="pre.1_1" file="subs/br_close_fw.xml" obj-args="br1" />
	
		<step no="pre.1_2">
			<desc>eth0 dhcp</desc>
			<console target="br1.br" slow="yes">
				-v "no interface eth0 dhcp client"
				-v ""
				-v "interface eth0 dhcp client"
				-v "no interface eth0 mode wan nat"
				-v ""
			</console>
		</step>

		<step no="pre.1_3" delay="5" type="loop-check" loop-max-times="5" loop-interval="10">
			<desc>check traffic through wan on BR</desc>
			<console target="br1.br">
				-v "ping ${pub.dns1.ip}"
			</console>
			<log-match>-c -i "from ${pub.dns1.ip}: " -i "ttl="</log-match>
		</step>

		<step no="pre.1_4">
			<desc>show interface eth0 on BR</desc>
			<log-file>show_br1.br_eth0_2.log</log-file>
			<console target="br1.br">
				-v "show interface eth0"
			</console>
		</step>

		<step no="pre.1_5">
			<desc>get eth0 ip of br</desc>
			<setvar name="br1.br.wan.ip">
				${bin.dir}/getbyrexp.py -p "IP addr=(\d+\.\d+\.\d+\.\d+);" -f ${log.dir}/show_br1.br_eth0_2.log -t str
			</setvar>
		</step>

		<step no="pre_2.1">
			<desc>
				Config mgt0.1 for br1.vlan1
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface mgt0.1 vlan ${br1.vlan2}"
				-v "interface mgt0.1 ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface mgt0.1 dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface mgt0.1 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.1 dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface mgt0.1 dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface mgt0.1 dhcp-server enable"								
			</telnet>		
                </step>
                
		<step no="pre_2.2">
			<desc>
				br eth1, eth2 work in bridge-802.1q mode
			</desc>
			<telnet target="${br1.br.wan.ip}">
			        -v "user-profile lan1 qos-policy def-user-qos vlan-id ${br1.vlan2} attribute 1"
				-v "interface eth1 mode bridge-access user-profile-attribute 1"
				-v "interface eth2 mode bridge-802.1q"
				-v "interface eth2 native-vlan ${br1.vlan2}"
			</telnet>
		</step>
		
		<include prefix="pre_1" file="subs/br_eth2_l2swcfg.xml" obj-args="br1" args="${br1.vpc2.vlan},${br1.vpc2.vlan},access" />

		<step no="1">
			<desc>
				PC1 connect to switch
				Laptop1 connect to lan port eth1
				Laptop2 connect to lan port eth4
				Laptop1 and laptop2 with same vlan
				Station1 connect to wifi
				BR lan port works with port based/trunk mode
			</desc>
		</step>

		<step no="1.1a" delay="30">
			<desc>
				Laptop1 connect to lan port eth1 get ip addr from dhcp server of mgt0.1
			</desc>
			<log-file>ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="1.1b">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="1.2a">
			<desc>
				Laptop2 connect to lan port eth2 get ip addr from dhcp server of mgt0.1
			</desc>
			<log-file>ifconfig_vpc2_.log</log-file>
			<ssh target="br1.vpc2" timeout="120">
				-v "dhclient ${br1.vpc2.tif.name}"
				-v "ifconfig ${br1.vpc2.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="1.2b">
			<desc>set br1.vpc2.tif.ip var for vpc2 on BR side</desc>
			<setvar name="br1.vpc2.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc2.mif.ip} -u ${br1.vpc2.user} -p ${br1.vpc2.passwd} -i ${br1.vpc2.tif.name} -nomask
			</setvar>
		</step>
		

		<step no="get_prefix">
			<multi-setvar>
				echo "br1.mgt0.1.prefix=$(echo ${br1.br.mgt0.1.ip_pool_start} | cut -d. -f1,2,3)"
				echo "br1.vpc1.prefix=$(echo ${br1.vpc1.tif.ip} | cut -d. -f1,2,3)"
				echo "br1.vpc2.prefix=$(echo ${br1.vpc2.tif.ip} | cut -d. -f1,2,3)"
			</multi-setvar>
		</step>

		<step no="1.3">
			<desc>
				1. Laptop1, laptop2 in same vlan
			</desc>
			<script>
				if [ "${br1.vpc1.prefix}" == "${br1.vpc2.prefix}" ]; then exit 0; else exit 1; fi
			</script>
		</step>

		<step no="2">
			<desc>
				add route for mpc to br inside networks
				1. On pc1, create a static arp entry, such as 10.155.30.222 -&gt; 00-11-22-33-44-
				55
			</desc>
			<script>
				route add -net ${br1.mgt0.1.prefix}.0 netmask ${br.route.netmask} gw ${br1.br.wan.ip} dev ${mpc.tif.name}
				arp -s ${br1.br.tmp.ip} ${br1.br.tmp.mac} -i ${mpc.tif.name}
			</script>
		</step>

		<step no="2.1">
			<desc>
				on Laptop1 set static arp entry
			</desc>
			<ssh target="br1.vpc1" timeout="120">
				-v "arp -s ${br1.br.tmp.ip} ${br1.br.tmp.mac} -i ${br1.vpc1.tif.name}"
			</ssh>
		</step>

		<step no="2.2">
			<desc>
				on Laptop2 set static arp entry
			</desc>
			<ssh target="br1.vpc2" timeout="120">
				-v "arp -s ${br1.br.tmp.ip} ${br1.br.tmp.mac} -i ${br1.vpc2.tif.name}"
			</ssh>
		</step>

		<step no="debug_open">
			<desc>
				open FF debug on BR
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "clear forwarding-engine mac-sessions"
				-v "_ff id 1 protocol 1 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log buf"
			</telnet>
		</step>

		<step no="3.1a">
			<desc>
				packet capture on br1.vpc1
			</desc>
			<log-file>step3.1a_vpc1_packet_capture.log</log-file>
			<ssh target="br1.vpc1">
				-v "nohup tshark -l -i ${br1.vpc1.tif.name} ip proto 1 &gt; ${job.id}vpc1_icmp_1.log &amp;"
			</ssh>
		</step>

		<step no="3.1b">
			<desc>
				get vpc1 tshark process
			</desc>
			<setvar name="vpc1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3.1a_vpc1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="3.2a">
			<desc>
				packet capture on br1.vpc2
			</desc>
			<log-file>step3.2a_vpc2_packet_capture.log</log-file>
			<ssh target="br1.vpc2">
				-v "nohup tshark -l -i ${br1.vpc2.tif.name} ip proto 1 &gt; ${job.id}vpc2_icmp_1.log &amp;"
			</ssh>
		</step>

		<step no="3.2b">
			<desc>
				get vpc2 tshark process
			</desc>
			<setvar name="vpc2.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3.2a_vpc2_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="3.3">
			<desc>
				2. Unknown unicast from eth0 interface
				Pc1 ping the created static ip address. Result1
			</desc>
			<script>
				nohup ping ${br1.br.tmp.ip} -c 4 &amp; </script>
		</step>

		<step no="3.4" delay="10">
			<desc>
				Result1: the packet from pc1 will be dropped
			</desc>
			<log-file>step3.4_vpc1_check_ping_packet_int.log</log-file>
			<ssh target="br1.vpc1">
				-v "kill -9 ${vpc1.tshark.id_1}"
				-v "cat ${job.id}vpc1_icmp_1.log"
				-v "rm -f ${job.id}vpc1_icmp_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${mpc.tif.ip} -&gt; ${br1.br.tmp.ip}[\t ]+ICMP Echo.+request" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.4b" delay="10">
			<desc>
				Result1: the packet from pc1 will be dropped
			</desc>
			<log-file>step3.4b_vpc2_check_ping_packet_int.log</log-file>
			<ssh target="br1.vpc2">
				-v "kill -9 ${vpc2.tshark.id_1}"
				-v "cat ${job.id}vpc2_icmp_1.log"
				-v "rm -f ${job.id}vpc2_icmp_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${mpc.tif.ip} -&gt; ${br1.br.tmp.ip}[\t ]+ICMP Echo.+request" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="3.5">
			<desc>
				show log buf on BR
			</desc>
			<log-file>step3.5_show_log_buf.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show log buf"
				-v ""
				-v ""
				-v "clear log buf"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\)[\t ]+eth0[\t ]+${mpc.tif.ip}[\t\-&gt; ]+${br1.br.tmp.ip}.+icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\[fe\]: bypass fe ingress procesing and deliver packet to stack on eth0" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.1a">
			<desc>
				packet capture on br1.vpc2
			</desc>
			<log-file>step4.1a_vpc2_packet_capture.log</log-file>
			<ssh target="br1.vpc2">
				-v "nohup tshark -l -i ${br1.vpc2.tif.name} ip proto 1 &gt; ${job.id}vpc2_icmp_1.log &amp;"
			</ssh>
		</step>

		<step no="4.1b">
			<desc>
				get vpc2 tshark process
			</desc>
			<setvar name="vpc2.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4.1a_vpc2_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4.2">
			<desc>
				3. Unknown unicast from lan ports eth1 interface
				Laptop1 ping the created static ip address. Result2
			</desc>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${br1.br.tmp.ip} -c 4"
			</ssh>
			<log-match>-n -c -i "from ${br1.br.tmp.ip}: " -i "ttl="</log-match>
		</step>

		<step no="4.3" delay="10">
			<desc>
				laptop2 will not receive the packet since lap switch dropped
			</desc>
			<log-file>step4.2_vpc2_check_ping_packet_int_02.log</log-file>
			<ssh target="br1.vpc2">
				-v "kill -9 ${vpc2.tshark.id_1}"
				-v "cat ${job.id}vpc2_icmp_1.log"
				-v "rm -f ${job.id}vpc2_icmp_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${mpc.tif.ip} -&gt; ${br1.br.tmp.ip}[\t ]+ICMP Echo.+request" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.4">
			<desc>
				show log buf on BR
			</desc>
			<log-file>step4.5_show_log_buf.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show log buf"
				-v ""
				-v ""
				-v "clear log buf"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\)[\t ]+eth1[\t ]+${br1.vpc1.tif.ip}[\t\-&gt; ]+${br1.br.tmp.ip}.+icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\)[\t ]+eth2[\t ]+${br1.vpc1.tif.ip}[\t\-&gt; ]+${br1.br.tmp.ip}.+icmp-echo-req" -c 0 -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\)[\t ]+eth0[\t ]+${br1.vpc1.tif.ip}[\t\-&gt; ]+${br1.br.tmp.ip}.+icmp-echo-req" -c 0 -f ${log.dir}/${log.file}</log-match>			
			<no-error-check />
		</step>

		<step no="5.1">
			<desc>
				on pc1 del static arp entry
			</desc>
			<script>
				arp -d ${br1.br.tmp.ip} -i ${mpc.tif.name}
				route del -net ${br1.mgt0.1.prefix}.0 netmask ${br.route.netmask}
			</script>
		</step>

		<include prefix="5.2" file="subs/br_open_fw.xml" obj-args="br1" />		

	</stage>
	
	<post-process>
		<stage>
			<include prefix="post_br1_eth2_l2swcfg" file="subs/br_eth2_l2swcfg.xml" obj-args="br1" args="999, ${br1.vlan2}\,${br1.vlan3}" />
	   </stage>

		<include file="include/br_default_post_process.xml" />
	</post-process>

	<failed-process>
		<stage>
			<step no="0.1">
				<desc>
					on pc1 del static arp entry
				</desc>
				<script>
					arp -d ${br1.br.tmp.ip} -i ${mpc.tif.name}
					route del -net ${br1.mgt0.1.prefix}.0 netmask ${br.route.netmask}
				</script>
			</step>
			<step no="0.2">
				<desc>
					kill tshark process on br1.vpc1
				</desc>
				<ssh target="br1.vpc1">
					-v "kill -9 ${vpc1.tshark.id_1}"
					-v "rm -f ${job.id}vpc1_icmp_1.log"
				</ssh>
				<no-error-check />
			</step>

			<step no="0.3">
				<desc>
					kill tshark process on br1.vpc2
				</desc>
				<ssh target="br1.vpc2">
					-v "kill -9 ${vpc2.tshark.id_1}"
					-v "rm -f ${job.id}vpc2_icmp_1.log"
				</ssh>
				<no-error-check />
			</step>			
                <include prefix="0.4" file="subs/br_open_fw.xml" obj-args="br1" />
                
		</stage>

		<include file="include/br_default_failed_process.xml" />

	</failed-process>

</testcase>
