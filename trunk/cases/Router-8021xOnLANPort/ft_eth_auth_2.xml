<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>EAP-Request is send from designed port and designed mac</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1. Set one security-object with radius-server
		2. Set one user-profile and define the attribute x
		3. Set eth2 mode as access and bind the attribute to it
		4. Bind the security-object to the eth2
		5. Connect one laptop to the eth2, result 1
	</description>
	<numofcvg>0</numofcvg>
	<numofbr>1</numofbr>
	<tbtype>linux</tbtype>

	<property name="br.route.netmask" value="255.255.255.0" />

	<stage>

		<step no="pre_step">
			<desc>configure mgt0.1 with dhcp service enable</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface mgt0.1 vlan ${br1.vpc1.vlan}"
				-v "interface mgt0.1 ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface mgt0.1 dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface mgt0.1 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.1 dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface mgt0.1 dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface mgt0.1 dhcp-server enable"
			</telnet>
		</step>

		<step no="1">
			<desc>
				1. Set one security-object with radius-server
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "security-object lan1"
				-v "security-object lan1 security protocol-suite 802.1x"
				-v "security-object lan1 security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object lan1 security aaa radius-server accounting primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
			</telnet>
		</step>

		<step no="2">
			<desc>
				2. Set one user-profile and define the attribute x,
				3. Set the eth1 mode as bridge-access and bind the attribute to it
				4. Bind the security-object to the eth1.
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "user-profile lan1 qos-policy def-user-qos vlan-id ${br1.vpc1.vlan} attribute 1"
				-v "interface eth1 mode bridge-access user-profile-attribute 1"
				-v "int eth1 mac-learning enable"
			</telnet>
		</step>

		<step no="3.1a">
			<desc>
				5. Connect one laptop to the eth1 port
			</desc>
			<log-file>step3_ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>
		
		<step no="3.11a">
			<desc>
				make user vpc2 eth port is up
			</desc>
			<ssh target="br1.vpc2" timeout="60">
				-v "ifconfig ${br1.vpc2.tif.name} up"
			</ssh>
		</step>

		<step no="3.1b">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="3.1c">
			<desc>get raw mac of vpc1</desc>
			<setvar name="br1.vpc1.tif.mac1">
				echo $(${bin.dir}/getbyrexp.py -p "HWaddr ([\da-fA-F:]+)" -f ${log.dir}/step3_ifconfig_vpc1_.log -t str | tr "A-F" "a-f")
			</setvar>
		</step>

		<step no="3.1d">
			<desc>get mac of br1.vpc1</desc>
			<setvar name="br1.vpc1.tif.mac">
				echo $(echo $(echo ${br1.vpc1.tif.mac1} | cut -d : -f1)$(echo ${br1.vpc1.tif.mac1} | cut -d : -f2,3)$(echo ${br1.vpc1.tif.mac1} | cut -d : -f4,5)$(echo ${br1.vpc1.tif.mac1} | cut -d : -f6))
			</setvar>
		</step>

		<step no="3.2">
			<desc>
				show interface
			</desc>
			<log-file>step3.2_show_interface.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show interface eth1"
			</telnet>
		</step>

		<step no="3.2b">
			<desc>get br1 eth1 raw mac</desc>
			<setvar name="br1.eth1.mac">
				echo $(${bin.dir}/getbyrexp.py -p "MAC addr=([\da-fA-F:]+)" -f ${log.dir}/step3.2_show_interface.log -t str | tr "A-F" "a-f")
			</setvar>
		</step>

		<step no="3.2c">
			<desc>get mac1 of br1.eth1</desc>
			<setvar name="br1.eth1.mac1">
				echo $(echo ${br1.eth1.mac} | sed -e 's/:../&amp;:/g' -e 's/^../&amp;:/')
			</setvar>
		</step>

		<step no="3.2d">
			<desc>get tmp.mac of br1.eth1</desc>
			<setvar name="br1.eth1.tmp.mac">
				echo $(echo ${br1.eth1.mac1} | tr : - )
			</setvar>
		</step>

		<step no="3.3" type="loop-check" loop-max-times="5" loop-interval="10">
			<desc>
				vpc1 ping mgt0.1
			</desc>
			<log-file>step3.3_ping_log.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ifconfig ${br1.vpc1.tif.name} up"
				-v "ifconfig ${br1.vpc1.tif.name} ${br1.vpc1.tif.ip} netmask ${br.route.netmask}"
				-v "arp -s ${br1.br.mgt0.1.ip} ${br1.eth1.mac1} dev ${br1.vpc1.tif.name}"
				-v "arp -a"
				-v "ping ${br1.br.mgt0.1.ip} -c 4"
			</ssh>
			<log-match>-c -i "from ${br1.br.mgt0.1.ip}: " -i "ttl="</log-match>
		</step>

		<step no="4.4">
			<desc>
				enable debug
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "_ff id 1 src-mac ${br1.eth1.mac} bi"
				-v "_ff id 2 src-mac ${br1.vpc1.tif.mac} bi"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_kdebug auth info"
				-v "_kdebug auth basic"
				-v "clear log buf"
			</telnet>
		</step>

		<step no="4.11a">
			<desc>
				packet capture on br1.vpc1
			</desc>
			<log-file>step4.11a_vpc1_packet_capture.log</log-file>
			<ssh target="br1.vpc1">
				-v "nohup tshark -l -n -i ${br1.vpc1.tif.name} &gt; ${job.id}vpc1_capture_1.log &amp;"
			</ssh>
		</step>

		<step no="4.11b">
			<desc>
				get vpc1 tshark process
			</desc>
			<setvar name="vpc1.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4.11a_vpc1_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4.12a">
			<desc>
				packet capture on br1.vpc2
			</desc>
			<log-file>step4.12a_vpc2_packet_capture.log</log-file>
			<ssh target="br1.vpc2">
				-v "nohup tshark -l -n -i ${br1.vpc2.tif.name} &gt; ${job.id}vpc2_capture_1.log &amp;"
			</ssh>
		</step>

		<step no="4.12b">
			<desc>
				get vpc2 tshark process
			</desc>
			<setvar name="vpc2.tshark.id_1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4.12a_vpc2_packet_capture.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4.2">
			<desc>
				4. Bind the security-object to the eth1.
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface eth1 security-object lan1"
			</telnet>
		</step>

		<step no="4.3">
			<desc>
				6. Laptop send any other pkt, result 1.
			</desc>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${br1.br.mgt0.1.ip} -c 4"
			</ssh>
			<log-match>-n -c -i "from ${br1.br.mgt0.1.ip}: " -i "ttl="</log-match>
		</step>

		<step no="4.4" delay="150">
			<desc>
				1. Device send EAP-Request/Identity to trigger the EAPOL-Start on eth1 only
			</desc>
			<log-file>step4.4_vpc1.log</log-file>
			<ssh target="br1.vpc1">
				-v "kill -9 ${vpc1.tshark.id_1}"
				-v "cat ${job.id}vpc1_capture_1.log"
				-v "rm -f ${job.id}vpc1_capture_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.eth1.mac1} -&gt; ${br1.vpc1.tif.mac1} EAP Request, Identity" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.5" delay="150">
			<desc>
				eth2 should not receive any EAP-Request packet
			</desc>
			<log-file>step4.5_vpc2.log</log-file>
			<ssh target="br1.vpc2">
				-v "kill -9 ${vpc2.tshark.id_1}"
				-v "cat ${job.id}vpc2_capture_1.log"
				-v "rm -f ${job.id}vpc2_capture_1.log"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "EAP Request, Identity" -c 0 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5">
			<desc>
				show log buf
			</desc>
			<log-file>step5_show_log_buf.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show log buf"
			</telnet>
			<no-error-check />
		</step>

	</stage>

	<failed-process>
		<stage>
			<step no="0.1">
				<desc>
					kill tshark process on br1.vpc1
				</desc>
				<ssh target="br1.vpc1">
					-v "kill -9 ${vpc1.tshark.id_1}"
					-v "rm -f ${job.id}vpc1_capture_1.log"
				</ssh>
				<no-error-check />
			</step>
			<step no="0.2">
				<desc>
					kill tshark process on br1.vpc2
				</desc>
				<ssh target="br1.vpc2">
					-v "kill -9 ${vpc2.tshark.id_1}"
					-v "rm -f ${job.id}vpc2_capture_1.log"
				</ssh>
				<no-error-check />
			</step>
		</stage>

		<include file="include/br_default_failed_process.xml" />

	</failed-process>

</testcase>
