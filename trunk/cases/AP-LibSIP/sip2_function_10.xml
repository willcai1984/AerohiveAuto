<testcase>
	<brief>Check the equal the field id of rule</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<description>
		Check the equal the field id of rule
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="securityObject" value="autoap" />
	<property name="psk" value="12qwaszx" />
	<property name="sipPolicy1" value="sip1" />
	<property name="sipPolicy2" value="sip2" />
	<property name="user1_1" value="11111" />
	<property name="user1_1Password" value="12qwaszx" />
	<property name="user1_2" value="2" />
	<property name="user1_2Password" value="12qwaszx" />
	<property name="user2_1" value="3" />
	<property name="user2_1Password" value="siptest3" />
	<property name="user2_2" value="4" />
	<property name="user2_2Password" value="siptest4" />
	<property name="userGroup1" value="sip1" />
	<property name="userGroup2" value="sip2" />

	<stage>

		<step no="SetRadiusServer.1">
			<desc>Setup radius server</desc>
			<telnet target="ap1">
				-v "security-object ${securityObject}"
				-v "security-object ${securityObject} security aaa radius-server primary ${ap1.mgt0.ip}"
				-v "security-object ${securityObject} security protocol-suite wpa-auto-psk ascii-key ${psk}"
				-v "security-object ${securityObject} security private-psk"
				-v "security-object ${securityObject} security private-psk default-psk-disabled"
				-v "security-object ${securityObject} security private-psk radius-auth"
				-v "user-group ${userGroup1}"
				-v "user-group ${userGroup2}"
				-v "user-group ${userGroup1} user-attribute 1"
				-v "user-group ${userGroup2} user-attribute 2"
				-v "save config users"
			</telnet>
		</step>
		<step no="SetRadiusServer.2">
			<desc>Setup radius server</desc>
			<telnet target="ap1">
				-v "user ${user1_1}"
				-v "user ${user1_1} password ${user1_1Password}"
				-v "user ${user1_1} group ${userGroup1}"
				-v "user ${user1_2}"
				-v "user ${user1_2} password ${user1_2Password}"
				-v "user ${user1_2} group ${userGroup1}"
				-v "user ${user2_1}"
				-v "user ${user2_1} password ${user2_1Password}"
				-v "user ${user2_1} group ${userGroup2}"
				-v "user ${user2_2}"
				-v "user ${user2_2} password ${user2_2Password}"
				-v "user ${user2_2} group ${userGroup2}"
				-v "save config users"
			</telnet>
		</step>
		<step no="SetRadiusServer.3">
			<desc>Setup radius server</desc>
			<telnet target="ap1">
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${securityObject}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 11"
				-v "library-sip-policy ${sipPolicy1} default user-group ${userGroup1}"
				-v "library-sip-policy ${sipPolicy1} id 1 field AA equal 3 user-group ${userGroup2}"
				-v "library-sip-policy ${sipPolicy1} id 2 field AA equal 4 user-group ${userGroup2}"
				-v "aaa radius-server local library-sip-policy ${sipPolicy1}"
				-v "aaa radius-server local db-type library-sip-server primary server ${pub.libsip1.ip}"
				-v "aaa radius-server local db-type library-sip-server primary login-user ${pub.libsip1.username} password ${pub.libsip1.passwd}"
				-v "aaa radius-server local db-type library-sip-server primary institution-id ${pub.libsip1.institutionID}"
				-v "aaa radius-server local db-type library-sip-server primary login-enable"
				-v "aaa radius-server local enable"
				-v "ssid ${ssid.name} user-group ${userGroup1}"
				-v "ssid ${ssid.name} user-group
				${userGroup2}"
				-v "aaa radius-server local user-group ${userGroup1}"
				-v "aaa radius-server local user-group ${userGroup2}"
				-v "user-profile ${userGroup1} qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "user-profile ${userGroup2} qos-policy def-user-qos vlan-id 1 attribute 2"
				-v "save config"
			</telnet>
		</step>
		<step no="SetRadiusServer.4" delay="5">
			<desc>Setup radius server</desc>
			<telnet target="ap1">
				-v "_debug radiusd verbose"
				-v "_debug radiusd sip-lib"
				-v "save config"
			</telnet>
		</step>

		<step no="SetClient.1" delay="30">
			<desc>
				create a wpa_supplicant configuration file
				kill the wpa_supplicant on client side
			</desc>
			<ssh target="sta1">
				-v "echo \"ctrl_interface=/var/run/wpa_supplicant\" > /tmp/wpa_supplicant.cfg"
				-v "ifconfig ${sta1.tif.name} down"
				-v "ifconfig ${sta1.tif.name} up"
				-v "killall wpa_supplicant"
				-v "wpa_supplicant -i ${sta1.tif.name} ${sta1.wpa_flag} -c /tmp/wpa_supplicant.cfg -B"
			</ssh>
		</step>

		<step no="ClientAssociate.1">
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt WPA-PSK"
				-v "set_network 0 proto RSN"
				-v "set_network 0 pairwise TKIP"
				-v "set_network 0 group TKIP"
				-v "set_network 0 psk \"${user2_2Password}\""
				-v "set_network 0 priority 5"
				-v "enable_network 0"
				-v "select_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="CheckClientAssociate.1" delay="15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>CheckClientAssociate.1.${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="ClientGetIP.1">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1" slow="true">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="CheckClientGetIP.1" delay="30">
			<desc>check client gets IP by dhclient</desc>
			<log-file>CheckClientGetIP.1.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr"</log-match>
		</step>

		<step no="GetStaIP.1" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>ifconfig.log</log-file>
			<ssh target="sta1" timeout="10">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr"</log-match>
		</step>
		<step no="GetStaIP.2">
			<desc>Get sta1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>
		<step no="GetStaIP.3">
			<desc>get mac from client</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -width 2
			</setvar>
		</step>

		<step no="CheckLibSipLog.1">
			<desc>Check LibSip log</desc>
			<log-file>CheckLibSipLog.1.log</log-file>
			<telnet target="ap1" timeout="120">
				-v "show log buffer"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "LIBSIP:extract AA: 4" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Found Auth-Type = PAP" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Sending Access-Accept of id [0-9]+ to ${ap1.mgt0.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "login attempt with password \"s\*\*\*\"" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "User-Password = s\*\*\*" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "RADIUS: user ${user2_2} successfully queried the library SIP server" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "LIBSIP:mapping user group \"${userGroup2}\", action:\"permit\"" -f ${log.dir}/${log.file}</log-match>
		</step>
		<step no="35">
			<desc>show auth on AP1</desc>
			<log-file>show_auth.log</log-file>
			<telnet target="ap1" timeout="10">
				-v "show auth"
			</telnet>
			<log-match> -i "done" -i "${sta1.tif.mac}" -i "WPA2/TKIP" -i "${user2_2}" -p 7 -c</log-match>
			<log-match> -i "${user2_2}" -i "${sta1.tif.mac}" -i "WPA2/TKIP" -p 10 -c</log-match>
		</step>
		<step no="36">
			<desc>show station on AP1</desc>
			<log-file>show_station.log</log-file>
			<telnet target="ap1" timeout="10">
				-v "show ssid ${ssid.name} station"
			</telnet>
			<log-match>-i "1" -i "${sta1.tif.mac}" -p 10 -c</log-match>
			<log-match>-i "Yes" -i "wpa2-psk" -i "tkip" -i "${sta1.tif.mac}" -p 11 -c</log-match>
			<log-match>-i "2" -i "${sta1.tif.mac}" -p 12 -c</log-match>
		</step>
		<step no="37">
			<desc>show roaming cache on AP1</desc>
			<log-file>show_roaming_cache.log</log-file>
			<telnet target="ap1" timeout="10">
				-v "show roaming cache"
			</telnet>
			<log-match>-i "YNNN" -i "${sta1.tif.mac}" -p 12 -c</log-match>
		</step>
		<step no="38">
			<desc>Ping from remote host ${sta1.tif.ip} to gateway</desc>
			<log-file>ping_gateway_${sta1.tif.ip}.log</log-file>
			<ssh target="sta1" timeout="10">
				-v "ping ${ap1.mgt0.gw} -c 4"
			</ssh>
			<log-match>-n -e "(100\% loss)"</log-match>
		</step>
	</stage>
</testcase>
