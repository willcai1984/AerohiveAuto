<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify Max SSID can be binded in radio. If the radio mode is access, 16 ssid can be binded and if radio mode is dual, 15 ssid can be binded(backhaul counts one ssid)</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1. AP wifi0 radio mode is access, create 16 ssid and bind to wifi0, CLI:
		ssid s1
		security-object s1
		ssid s1 security-object s1
		ssid s2
		security-object s2
		ssid s2 security-object s2
		ssid s3
		security-object s3
		ssid s3 security-object s3
		ssid s4
		security-object s4
		ssid s4 security-object s4
		ssid s5
		security-object s5
		ssid s5 security-object s5
		ssid s6
		security-object s6
		ssid s6 security-object s6
		ssid s7
		security-object s7
		ssid s7 security-object s7
		ssid s8
		security-object s8
		ssid s8 security-object s8
		ssid s9
		security-object s9
		ssid s9 security-object s9
		ssid s10
		security-object s10
		ssid s10 security-object s10
		ssid s11
		security-object s11
		ssid s11 security-object s11
		ssid s12
		security-object s12
		ssid s12 security-object s12
		ssid s13
		security-object s13
		ssid s13 security-object s13
		ssid s14
		security-object s14
		ssid s14 security-object s14
		ssid s15
		security-object s15
		ssid s15 security-object s15
		ssid s16
		security-object s16
		ssid s16 security-object s16
		security-object s1 security
		protocol-suite wpa-auto-psk ascii-key testtest
		security-object s2 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s3 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s4 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s5 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s6 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s7 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s8 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s9 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s10 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s11 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s12 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s13 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s14 security protocol-suite wpa-auto-psk
		ascii-key testtest
		security-object s15 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object s16 security protocol-suite wpa-auto-psk ascii-key testtest
		interface wifi0 ssid s1
		interface wifi0 ssid s2
		interface wifi0 ssid s3
		interface wifi0 ssid s4
		interface wifi0 ssid s5
		interface wifi0 ssid s6
		interface wifi0 ssid s7
		interface wifi0 ssid s8
		interface wifi0 ssid s9
		interface wifi0 ssid s10
		interface wifi0 ssid s11
		interface wifi0 ssid s12
		interface wifi0 ssid s13
		interface wifi0 ssid s14
		interface wifi0 ssid s15
		interface wifi0 ssid s16
		2. Connect some stations to some ssids
		3. Change wifi0 radio mode to dual, CLI:
		no interface wifi0 ssid s1
		no interface wifi0 ssid s2
		no interface wifi0 ssid s3
		no interface wifi0 ssid s4
		no interface wifi0 ssid s5
		no interface wifi0 ssid s6
		no interface wifi0 ssid s7
		no interface wifi0 ssid s8
		no interface wifi0 ssid s9
		no interface wifi0 ssid s10
		no interface wifi0 ssid s11
		no interface wifi0 ssid s12
		no interface wifi0 ssid s13
		no interface wifi0 ssid s14
		no
		interface wifi0 ssid s15
		no interface wifi0 ssid s16
		interface wifi0 mode dual
		interface wifi0 ssid s1
		interface wifi0 ssid s2
		interface wifi0 ssid s3
		interface wifi0 ssid s4
		interface wifi0 ssid s5
		interface wifi0 ssid s6
		interface wifi0 ssid s7
		interface wifi0 ssid s8
		interface wifi0 ssid s9
		interface wifi0 ssid s10
		interface wifi0 ssid s11
		interface wifi0 ssid s12
		interface wifi0 ssid s13
		interface wifi0 ssid s14
		interface wifi0 ssid s15
		4. Connect some stations to some ssids
		5. AP wifi1 radio mode is access, create 16 ssid and bind to wifi1, CLI:
		interface wifi1 mode access
		ssid ss1
		security-object ss1
		ssid ss1 security-object ss1
		ssid ss2
		security-object ss2
		ssid ss2 security-object ss2
		ssid ss3
		security-object ss3
		ssid ss3 security-object ss3
		ssid ss4
		security-object ss4
		ssid ss4 security-object ss4
		ssid ss5
		security-object ss5
		ssid ss5 security-object ss5
		ssid ss6
		security-object ss6
		ssid ss6 security-object ss6
		ssid ss7
		security-object ss7
		ssid ss7 security-object ss7
		ssid ss8
		security-object ss8
		ssid ss8
		security-object ss8
		ssid ss9
		security-object ss9
		ssid ss9 security-object ss9
		ssid ss10
		security-object ss10
		ssid ss10 security-object ss10
		ssid ss11
		security-object ss11
		ssid ss11 security-object ss11
		ssid ss12
		security-object ss12
		ssid ss12 security-object ss12
		ssid ss13
		security-object ss13
		ssid ss13 security-object ss13
		ssid ss14
		security-object ss14
		ssid ss14 security-object ss14
		ssid ss15
		security-object ss15
		ssid ss15 security-object ss15
		ssid ss16
		security-object ss16
		ssid ss16 security-object ss16
		security-object ss1 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss2 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss3 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss4 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss5 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss6 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss7 security protocol-suite wpa-auto-psk
		ascii-key testtest
		security-object ss8 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss9 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss10 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss11 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss12 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss13 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss14 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss15 security protocol-suite wpa-auto-psk ascii-key testtest
		security-object ss16 security protocol-suite wpa-auto-psk ascii-key testtest
		interface wifi1 ssid ss1
		interface wifi1 ssid ss2
		interface wifi1 ssid ss3
		interface wifi1 ssid ss4
		interface wifi1 ssid ss5
		interface wifi1 ssid ss6
		interface wifi1 ssid ss7
		interface wifi1 ssid ss8
		interface wifi1 ssid ss9
		interface wifi1 ssid ss10
		interface wifi1 ssid ss11
		interface wifi1 ssid ss12
		interface wifi1 ssid ss13
		interface wifi1 ssid ss14
		interface wifi1 ssid ss15
		interface wifi1 ssid ss16
		6. Connect some stations to some ssids
		7. Change wifi1 radio mode to dual, CLI:
		no interface wifi1 ssid ss1
		no interface wifi1 ssid ss2
		no interface wifi1 ssid ss3
		no interface wifi1 ssid ss4
		no interface wifi1 ssid ss5
		no interface wifi1 ssid ss6
		no interface wifi1 ssid ss7
		no interface wifi1 ssid ss8
		no interface wifi1 ssid ss9
		no interface wifi1 ssid ss10
		no interface wifi1 ssid ss11
		no interface wifi1 ssid ss12
		no interface wifi1 ssid ss13
		no interface wifi1 ssid ss14
		no interface wifi1 ssid ss15
		no interface wifi1 ssid ss16
		interface wifi1 mode dual
		interface wifi1 ssid ss1
		interface wifi1 ssid ss2
		interface wifi1 ssid ss3
		interface wifi1 ssid ss4
		interface wifi1 ssid ss5
		interface wifi1 ssid ss6
		interface wifi1 ssid ss7
		interface wifi1 ssid ss8
		interface wifi1 ssid ss9
		interface wifi1 ssid ss10
		interface wifi1 ssid ss11
		interface wifi1 ssid ss12
		interface wifi1 ssid ss13
		interface wifi1 ssid ss14
		interface
		wifi1 ssid ss15
		8. Connect some stations to some ssids
	</description>
	<numofap>1</numofap>
	<numofsta>3</numofsta>
	<tbtype>windows</tbtype>

	<stage>
		<step no="w0a.1">
			<desc>
				interface wifi0 mode access
			</desc>
			<setvar name="8ssid">
				if [ `echo ${img.prodtype} | grep BR100` ]; then
						echo true
				else
					echo false				
				fi
			</setvar>
		</step>

		<step no="w0a.1">
			<desc>
				interface wifi0 mode access
			</desc>
			<telnet target="ap1">
				-v "interface wifi0 mode access"
			</telnet>
		</step>
	</stage>

	<stage loop-values="1,2,3,4,5,6,7,8" var-name="ssid_no">
		<step no="w0a.2">
			<desc>
				AP wifi0 radio mode is dual, create 16 ssid and bind to wifi0
			</desc>
			<telnet target="ap1">
				-v "ssid mx-0-${loop.v}"
				-v "security-object mx-0-${loop.v}"
				-v "ssid mx-0-${loop.v} security-object mx-0-${loop.v}"
				-v "security-object mx-0-${loop.v} security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi0 ssid mx-0-${loop.v}"
			</telnet>
		</step>
	</stage>
	<stage loop-values="9,10,11,12,13,14,15,16" var-name="ssid_no">
		<if>"${8ssid}" != "true"</if>
		<step no="w0a.2">
			<desc>
				AP wifi0 radio mode is dual, create 16 ssid and bind to wifi0
			</desc>
			<telnet target="ap1">
				-v "ssid mx-0-${loop.v}"
				-v "security-object mx-0-${loop.v}"
				-v "ssid mx-0-${loop.v} security-object mx-0-${loop.v}"
				-v "security-object mx-0-${loop.v} security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi0 ssid mx-0-${loop.v}"
			</telnet>
		</step>
	</stage>

	<stage>
		<step no="w0a.2.1">
			<desc>
				show interface
			</desc>
			<log-file>w0a.step2.1_show_interface.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match loop-values="1,2,3,4,5,6,7,8">-e "Wifi0.${loop.v}" -i "mx-0-${loop.v} "</log-match>
		</step>
	</stage>
	<stage>
		<if>"${8ssid}" != "true"</if>
		<step no="w0a.2.1">
			<desc>
				show interface
			</desc>
			<log-file>w0a.step2.1_show_interface.log</log-file>
			<log-match loop-values="9,10,11,12,13,14,15,16">-e "Wifi0.${loop.v}" -i "mx-0-${loop.v} "</log-match>
		</step>
	</stage>

	<stage>
		<step no="w0a.3">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-0-2
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w0a.step3_wifi_prof.xml -s "mx-0-2" -l ${log.dir}
			</script>
		</step>

		<step no="w0a.3.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w0a.step3_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w0a.3.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w0a.step3.2_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-0-2"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-0-2&lt;/name&gt;"</log-match>
		</step>

		<step no="w0a.3.3">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid mx-0-2 to host ${sta1.mif.ip}
				Check profile for ssid mx-0-2 on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step3.3_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-0-2"
			</ssh>
			<log-match>-e "SSID name" -i "mx-0-2"</log-match>
		</step>

		<step no="w0a.3.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step3.4_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "mx-0-2"</log-match>
		</step>

		<step no="w0a.3.5">
			<desc>
				connect to ssid mx-0-2 on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step3.5_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=mx-0-2 name=mx-0-2 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w0a.3.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-0-2 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step3.6_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0a.3.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step3.7_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0a.3.8">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step3.8_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0a.3.9">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step3.8_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w0a.3.10">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step3.8_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w0a.3.11">
			<desc>
				ap ping sta
			</desc>
			<log-file>w0a.step3.11_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta1.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta1.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w0a.3.12">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w0a.step3.12_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w0a.3.13">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step3.12_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w0a.3.14">
			<desc>
				sta ping ap
			</desc>
			<log-file>w0a.step3.14_sta_ping_ap.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage>
		<step no="w0a.4">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-0-8
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w0a.step4_wifi_prof.xml -s "mx-0-8" -l ${log.dir}
			</script>
		</step>

		<step no="w0a.4.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w0a.step4_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w0a.4.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w0a.step4.2_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-0-8"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-0-8&lt;/name&gt;"</log-match>
		</step>

		<step no="w0a.4.3">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid mx-0-8 to host ${sta2.mif.ip}
				Check profile for ssid mx-0-8 on host ${sta2.mif.ip}
			</desc>
			<log-file>w0a.step4.3_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-0-8"
			</ssh>
			<log-match>-e "SSID name" -i "mx-0-8"</log-match>
		</step>

		<step no="w0a.4.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>w0a.step4.4_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "mx-0-8"</log-match>
		</step>

		<step no="w0a.4.5">
			<desc>
				connect to ssid mx-0-8 on host ${sta2.mif.ip}
			</desc>
			<log-file>w0a.step4.5_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=mx-0-8 name=mx-0-8 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w0a.4.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-0-8 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>w0a.step4.6_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0a.4.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>w0a.step4.7_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0a.4.8">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>w0a.step4.8_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0a.4.9">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step4.8_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w0a.4.10">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta2.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step4.8_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w0a.4.11">
			<desc>
				ap ping sta
			</desc>
			<log-file>w0a.step4.11_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta2.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta2.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w0a.4.12">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w0a.step4.12_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w0a.4.13">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step4.12_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w0a.4.14">
			<desc>
				sta ping ap
			</desc>
			<log-file>w0a.step4.14_sta_ping_ap.log</log-file>
			<ssh target="sta2">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage>
		<if>"${8ssid}" != "true"</if>
		<step no="w0a.5">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-0-16
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w0a.step5_wifi_prof.xml -s "mx-0-16" -l ${log.dir}
			</script>
		</step>

		<step no="w0a.5.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w0a.step5_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta3.mif.ip}
			</script>
		</step>

		<step no="w0a.5.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w0a.step5.2_cat_profile_sta.log</log-file>
			<ssh target="sta3">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-0-16"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-0-16&lt;/name&gt;"</log-match>
		</step>

		<step no="w0a.5.3">
			<desc>
				Delete all current Wireless profile of host ${sta3.mif.ip}
				Bring down the client Wireless ${sta3.mif.ip}
				Bring up the client Wireless on host ${sta3.mif.ip}
				Add new profile for ssid mx-0-16 to host ${sta3.mif.ip}
				Check profile for ssid mx-0-16 on host ${sta3.mif.ip}
			</desc>
			<log-file>w0a.step5.3_wlan_conf_sta.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-0-16"
			</ssh>
			<log-match>-e "SSID name" -i "mx-0-16"</log-match>
		</step>

		<step no="w0a.5.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta3.mif.ip}
			</desc>
			<log-file>w0a.step5.4_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "mx-0-16"</log-match>
		</step>

		<step no="w0a.5.5">
			<desc>
				connect to ssid mx-0-16 on host ${sta3.mif.ip}
			</desc>
			<log-file>w0a.step5.5_wlan_conn_sta.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan connect ssid=mx-0-16 name=mx-0-16 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w0a.5.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-0-16 connected on host ${sta3.mif.ip}
			</desc>
			<log-file>w0a.step5.6_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0a.5.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta3.mif.ip}
			</desc>
			<log-file>w0a.step5.7_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0a.5.8">
			<desc>
				Dump all interfaces data from remote host ${sta3.mif.ip}
			</desc>
			<log-file>w0a.step5.8_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0a.5.9">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta3.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step5.8_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w0a.5.10">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta3.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step5.8_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w0a.5.11">
			<desc>
				ap ping sta
			</desc>
			<log-file>w0a.step5.11_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta3.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta3.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w0a.5.12">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w0a.step5.12_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w0a.5.13">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step5.12_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w0a.5.14">
			<desc>
				sta ping ap
			</desc>
			<log-file>w0a.step5.14_sta_ping_ap.log</log-file>
			<ssh target="sta3">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage loop-values="1,2,3,4,5,6,7,8" var-name="ssid_no">
		<step no="w0a.6">
			<desc>
				no interface wifi0 ssid
			</desc>
			<log-file>step4_no_interface_wifi0_ssid_${loop.v}.log</log-file>
			<telnet target="ap1">
				-v "no interface wifi0 ssid mx-0-${loop.v}"
				-v "no ssid mx-0-${loop.v} security-object mx-0-${loop.v}"
				-v "no security-object mx-0-${loop.v}"
				-v "no ssid mx-0-${loop.v}"
			</telnet>
		</step>
	</stage>

	<stage loop-values="9,10,11,12,13,14,15,16" var-name="ssid_no">
		<if>"${8ssid}" != "true"</if>
		<step no="w0a.6">
			<desc>
				no interface wifi0 ssid
			</desc>
			<log-file>step4_no_interface_wifi0_ssid_${loop.v}.log</log-file>
			<telnet target="ap1">
				-v "no interface wifi0 ssid mx-0-${loop.v}"
				-v "no ssid mx-0-${loop.v} security-object mx-0-${loop.v}"
				-v "no security-object mx-0-${loop.v}"
				-v "no ssid mx-0-${loop.v}"
			</telnet>
		</step>
	</stage>
	<stage>
		<step no="w0d.1">
			<desc>
				interface wifi0 mode dual
			</desc>
			<telnet target="ap1">
				-v "interface wifi0 mode dual"
			</telnet>
		</step>
	</stage>

	<stage loop-values="2,3,4,5,6,7,8,9,10,11,12,13,14,15,16" var-name="ssid_no">
	  <if>"${8ssid}" != "true"</if>
		<step no="w0d.2">
			<desc>
				AP wifi0 radio mode is dual, create 16 ssid and bind to wifi0
			</desc>
			<log-file>ssid_${loop.v}.log</log-file>
			<telnet target="ap1">
				-v "ssid mx-0-${loop.v}"
				-v "security-object mx-0-${loop.v}"
				-v "ssid mx-0-${loop.v} security-object mx-0-${loop.v}"
				-v "security-object mx-0-${loop.v} security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi0 ssid mx-0-${loop.v}"
			</telnet>
		</step>
	</stage>
	<stage loop-values="2,3,4,5,6,7,8" var-name="ssid_no">
		<if>"${8ssid}" == "true"</if>
		<step no="w0d.2">
			<desc>
				AP wifi0 radio mode is dual, create 16 ssid and bind to wifi0
			</desc>
			<log-file>ssid_${loop.v}.log</log-file>
			<telnet target="ap1">
				-v "ssid mx-0-${loop.v}"
				-v "security-object mx-0-${loop.v}"
				-v "ssid mx-0-${loop.v} security-object mx-0-${loop.v}"
				-v "security-object mx-0-${loop.v} security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi0 ssid mx-0-${loop.v}"
			</telnet>
		</step>
	</stage>
	<stage>
		<step no="w0d.2.1.1">
		  <if>"${8ssid}" != "true"</if>
			<desc>
				show interface
			</desc>
			<log-file>w0d.step2.1_show_interface.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match loop-values="2,3,4,5,6,7,8,9,10,11,12,13,14,15,16">-e "Wifi0.${loop.v}" -i "mx-0-${loop.v} "</log-match>
		</step>
		<step no="w0d.2.1.2">
			<if>"${8ssid}" == "true"</if>
			<desc>
				show interface
			</desc>
			<log-file>w0d.step2.1_show_interface.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match loop-values="2,3,4,5,6,7,8">-e "Wifi0.${loop.v}" -i "mx-0-${loop.v} "</log-match>
		</step>
	</stage>

	<stage>
		<step no="w0d.3">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-0-2
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w0d.step3_wifi_prof.xml -s "mx-0-2" -l ${log.dir}
			</script>
		</step>

		<step no="w0d.3.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w0d.step3_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w0d.3.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w0d.step3.2_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-0-2"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-0-2&lt;/name&gt;"</log-match>
		</step>

		<step no="w0d.3.3">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid mx-0-2 to host ${sta1.mif.ip}
				Check profile for ssid mx-0-2 on host ${sta1.mif.ip}
			</desc>
			<log-file>w0d.step3.3_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-0-2"
			</ssh>
			<log-match>-e "SSID name" -i "mx-0-2"</log-match>
		</step>

		<step no="w0d.3.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w0d.step3.4_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "mx-0-2"</log-match>
		</step>

		<step no="w0d.3.5">
			<desc>
				connect to ssid mx-0-2 on host ${sta1.mif.ip}
			</desc>
			<log-file>w0d.step3.5_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=mx-0-2 name=mx-0-2 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w0d.3.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-0-2 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>w0d.step3.6_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0d.3.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>w0d.step3.7_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0d.3.8">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>w0d.step3.8_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0d.3.9">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step3.8_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w0d.3.10">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step3.8_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w0d.3.11">
			<desc>
				ap ping sta
			</desc>
			<log-file>w0d.step3.11_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta1.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta1.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w0d.3.12">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w0d.step3.12_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w0d.3.13">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step3.12_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w0d.3.14">
			<desc>
				sta ping ap
			</desc>
			<log-file>w0d.step3.14_sta_ping_ap.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage>
		<step no="w0d.4">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-0-8
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w0d.step4_wifi_prof.xml -s "mx-0-8" -l ${log.dir}
			</script>
		</step>

		<step no="w0d.4.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w0d.step4_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w0d.4.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w0d.step4.2_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-0-8"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-0-8&lt;/name&gt;"</log-match>
		</step>

		<step no="w0d.4.3">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid mx-0-8 to host ${sta2.mif.ip}
				Check profile for ssid mx-0-8 on host ${sta2.mif.ip}
			</desc>
			<log-file>w0d.step4.3_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-0-8"
			</ssh>
			<log-match>-e "SSID name" -i "mx-0-8"</log-match>
		</step>

		<step no="w0d.4.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>w0d.step4.4_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "mx-0-8"</log-match>
		</step>

		<step no="w0d.4.5">
			<desc>
				connect to ssid mx-0-8 on host ${sta2.mif.ip}
			</desc>
			<log-file>w0d.step4.5_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=mx-0-8 name=mx-0-8 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w0d.4.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-0-8 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>w0d.step4.6_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0d.4.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>w0d.step4.7_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0d.4.8">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>w0d.step4.8_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0d.4.9">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step4.8_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w0d.4.10">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta2.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step4.8_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w0d.4.11">
			<desc>
				ap ping sta
			</desc>
			<log-file>w0d.step4.11_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta2.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta2.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w0d.4.12">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w0d.step4.12_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w0d.4.13">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step4.12_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w0d.4.14">
			<desc>
				sta ping ap
			</desc>
			<log-file>w0d.step4.14_sta_ping_ap.log</log-file>
			<ssh target="sta2">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage>
		<if>"${8ssid}" != "true"</if>
		<step no="w0d.5">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-0-16
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w0d.step5_wifi_prof.xml -s "mx-0-16" -l ${log.dir}
			</script>
		</step>

		<step no="w0d.5.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w0d.step5_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta3.mif.ip}
			</script>
		</step>

		<step no="w0d.5.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w0d.step5.2_cat_profile_sta.log</log-file>
			<ssh target="sta3">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-0-16"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-0-16&lt;/name&gt;"</log-match>
		</step>

		<step no="w0d.5.3">
			<desc>
				Delete all current Wireless profile of host ${sta3.mif.ip}
				Bring down the client Wireless ${sta3.mif.ip}
				Bring up the client Wireless on host ${sta3.mif.ip}
				Add new profile for ssid mx-0-16 to host ${sta3.mif.ip}
				Check profile for ssid mx-0-16 on host ${sta3.mif.ip}
			</desc>
			<log-file>w0d.step5.3_wlan_conf_sta.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-0-16"
			</ssh>
			<log-match>-e "SSID name" -i "mx-0-16"</log-match>
		</step>

		<step no="w0d.5.4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta3.mif.ip}
			</desc>
			<log-file>w0d.step5.4_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "mx-0-16"</log-match>
		</step>

		<step no="w0d.5.5">
			<desc>
				connect to ssid mx-0-16 on host ${sta3.mif.ip}
			</desc>
			<log-file>w0d.step5.5_wlan_conn_sta.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan connect ssid=mx-0-16 name=mx-0-16 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w0d.5.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-0-16 connected on host ${sta3.mif.ip}
			</desc>
			<log-file>w0d.step5.6_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0d.5.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta3.mif.ip}
			</desc>
			<log-file>w0d.step5.7_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0d.5.8">
			<desc>
				Dump all interfaces data from remote host ${sta3.mif.ip}
			</desc>
			<log-file>w0d.step5.8_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0d.5.9">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta3.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step5.8_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w0d.5.10">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta3.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step5.8_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w0d.5.11">
			<desc>
				ap ping sta
			</desc>
			<log-file>w0d.step5.11_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta3.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta3.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w0d.5.12">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w0d.step5.12_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w0d.5.13">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0d.step5.12_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w0d.5.14">
			<desc>
				sta ping ap
			</desc>
			<log-file>w0d.step5.14_sta_ping_ap.log</log-file>
			<ssh target="sta3">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage loop-values="2,3,4,5,6,7,8" var-name="ssid_no">
		<step no="w0d.6.1">
			<desc>
				no interface wifi0 ssid
			</desc>
			<log-file>w0d.step6_no_interface_wifi0_ssid_${loop.v}.log</log-file>
			<telnet target="ap1">
				-v "no interface wifi0 ssid mx-0-${loop.v}"
				-v "no ssid mx-0-${loop.v} security-object mx-0-${loop.v}"
				-v "no security-object mx-0-${loop.v}"
				-v "no ssid mx-0-${loop.v}"
			</telnet>
		</step>
	</stage>
	<stage loop-values="9,10,11,12,13,14,15,16" var-name="ssid_no">
		<if>"${8ssid}" != "true"</if>
		<step no="w0d.6.2">
			<desc>
				no interface wifi0 ssid
			</desc>
			<log-file>w0d.step6_no_interface_wifi0_ssid_${loop.v}.log</log-file>
			<telnet target="ap1">
				-v "no interface wifi0 ssid mx-0-${loop.v}"
				-v "no ssid mx-0-${loop.v} security-object mx-0-${loop.v}"
				-v "no security-object mx-0-${loop.v}"
				-v "no ssid mx-0-${loop.v}"
			</telnet>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.1">
			<desc>
				interface wifi1 mode access
			</desc>
			<telnet target="ap1">
				-v "interface wifi1 mode access"
			</telnet>
		</step>
	</stage>

	<stage loop-values="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16" var-name="ssid_no">
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.2">
			<desc>
				AP wifi1 radio mode is dual, create 16 ssid and bind to wifi1
			</desc>
			<telnet target="ap1">
				-v "ssid mx-1-${loop.v}"
				-v "security-object mx-1-${loop.v}"
				-v "ssid mx-1-${loop.v} security-object mx-1-${loop.v}"
				-v "security-object mx-1-${loop.v} security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi1 ssid mx-1-${loop.v}"
			</telnet>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.2.1">
			<desc>
				interface wifi1 radio channel 40
			</desc>
			<telnet target="ap1">
				-v "interface wifi1 radio channel 40"
			</telnet>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.2.2">
			<desc>
				show interface
			</desc>
			<log-file>w1a.step2.2_show_interface.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match loop-values="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16">-e "Wifi1.${loop.v}" -i "mx-1-${loop.v} "</log-match>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.3">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-1-1
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w1a.step3_wifi_prof.xml -s "mx-1-1" -l ${log.dir}
			</script>
		</step>

		<step no="w1a.3.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w1a.step3_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w1a.3.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w1a.step3.2_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-1-1"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-1-1&lt;/name&gt;"</log-match>
		</step>

		<step no="w1a.3.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid mx-1-1 to host ${sta1.mif.ip}
				Check profile for ssid mx-1-1 on host ${sta1.mif.ip}
				Check wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.3_wlan_conf_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-1-1"
				-v "sleep 30"
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID.*name.*mx-1-1" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\s*\d+\s*:\s*mx-1-1" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="w1a.3.4">
			<desc>
				connect to ssid mx-1-1 on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.4_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=mx-1-1 name=mx-1-1 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w1a.3.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-1-1 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.5_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1a.3.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.6_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1a.3.7">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.7_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1a.3.8">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step3.7_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1a.3.9">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step3.7_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w1a.3.10">
			<desc>
				ap ping sta
			</desc>
			<log-file>w1a.step3.10_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta1.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta1.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w1a.3.11">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w1a.step3.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w1a.3.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step3.11_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w1a.3.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>w1a.step3.13_sta_ping_ap.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.4">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-1-8
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w1a.step4_wifi_prof.xml -s "mx-1-8" -l ${log.dir}
			</script>
		</step>

		<step no="w1a.4.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w1a.step4_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w1a.4.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w1a.step4.2_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-1-8"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-1-8&lt;/name&gt;"</log-match>
		</step>

		<step no="w1a.4.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid mx-1-8 to host ${sta1.mif.ip}
				Check profile for ssid mx-1-8 on host ${sta1.mif.ip}
				Check wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step4.3_wlan_conf_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-1-8"
				-v "sleep 30"
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID.*name.*mx-1-8" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\s*\d+\s*:\s*mx-1-8" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="w1a.4.4">
			<desc>
				connect to ssid mx-1-8 on host ${sta2.mif.ip}
			</desc>
			<log-file>w1a.step4.4_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=mx-1-8 name=mx-1-8 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w1a.4.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-1-8 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>w1a.step4.5_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1a.4.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>w1a.step4.6_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1a.4.7">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>w1a.step4.7_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1a.4.8">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step4.7_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1a.4.9">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta2.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step4.7_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w1a.4.10">
			<desc>
				ap ping sta
			</desc>
			<log-file>w1a.step4.10_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta2.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta2.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w1a.4.11">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w1a.step4.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w1a.4.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step4.11_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w1a.4.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>w1a.step4.13_sta_ping_ap.log</log-file>
			<ssh target="sta2">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.5">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-1-16
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w1a.step5_wifi_prof.xml -s "mx-1-16" -l ${log.dir}
			</script>
		</step>

		<step no="w1a.5.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w1a.step5_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta3.mif.ip}
			</script>
		</step>

		<step no="w1a.5.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w1a.step5.2_cat_profile_sta.log</log-file>
			<ssh target="sta3">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-1-16"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-1-16&lt;/name&gt;"</log-match>
		</step>

		<step no="w1a.5.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid mx-1-16 to host ${sta1.mif.ip}
				Check profile for ssid mx-1-16 on host ${sta1.mif.ip}
				Check wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step5.3_wlan_conf_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-1-16"
				-v "sleep 30"
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID.*name.*mx-1-16" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\s*\d+\s*:\s*mx-1-16" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="w1a.5.4">
			<desc>
				connect to ssid mx-1-16 on host ${sta3.mif.ip}
			</desc>
			<log-file>w1a.step5.4_wlan_conn_sta.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan connect ssid=mx-1-16 name=mx-1-16 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w1a.5.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-1-16 connected on host ${sta3.mif.ip}
			</desc>
			<log-file>w1a.step5.5_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1a.5.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta3.mif.ip}
			</desc>
			<log-file>w1a.step5.6_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1a.5.7">
			<desc>
				Dump all interfaces data from remote host ${sta3.mif.ip}
			</desc>
			<log-file>w1a.step5.7_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1a.5.8">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta3.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step5.7_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1a.5.9">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta3.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step5.7_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w1a.5.10">
			<desc>
				ap ping sta
			</desc>
			<log-file>w1a.step5.10_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta3.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta3.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w1a.5.11">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w1a.step5.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w1a.5.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step5.11_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w1a.5.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>w1a.step5.13_sta_ping_ap.log</log-file>
			<ssh target="sta3">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage loop-values="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16" var-name="ssid_no">
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.6">
			<desc>
				no interface wifi1 ssid
			</desc>
			<log-file>step4_no_interface_wifi1_ssid_${loop.v}.log</log-file>
			<telnet target="ap1">
				-v "no interface wifi1 ssid mx-1-${loop.v}"
				-v "no ssid mx-1-${loop.v} security-object mx-1-${loop.v}"
				-v "no security-object mx-1-${loop.v}"
				-v "no ssid mx-1-${loop.v}"
			</telnet>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1d.1">
			<desc>
				interface wifi1 mode dual
			</desc>
			<telnet target="ap1">
				-v "interface wifi1 mode dual"
			</telnet>
		</step>
	</stage>

	<stage loop-values="2,3,4,5,6,7,8,9,10,11,12,13,14,15,16" var-name="ssid_no">
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1d.2">
			<desc>
				AP wifi1 radio mode is dual, create 16 ssid and bind to wifi1
			</desc>
			<telnet target="ap1">
				-v "ssid mx-1-${loop.v}"
				-v "security-object mx-1-${loop.v}"
				-v "ssid mx-1-${loop.v} security-object mx-1-${loop.v}"
				-v "security-object mx-1-${loop.v} security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi1 ssid mx-1-${loop.v}"
			</telnet>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1d.2.1">
			<desc>
				show interface
			</desc>
			<log-file>w1d.step2.1_show_interface.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
			<log-match loop-values="2,3,4,5,6,7,8,9,10,11,12,13,14,15,16">-e "Wifi1.${loop.v}" -i "mx-1-${loop.v} "</log-match>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1d.3">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-1-2
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w1d.step3_wifi_prof.xml -s "mx-1-2" -l ${log.dir}
			</script>
		</step>

		<step no="w1d.3.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w1d.step3_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w1d.3.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w1d.step3.2_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-1-2"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-1-2&lt;/name&gt;"</log-match>
		</step>

		<step no="w1d.3.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid mx-1-2 to host ${sta1.mif.ip}
				Check profile for ssid mx-1-2 on host ${sta1.mif.ip}
				Check wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w1d.step3.3_wlan_conf_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-1-2"
				-v "sleep 30"
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID.*name.*mx-1-2" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\s*\d+\s*:\s*mx-1-2" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="w1d.3.4">
			<desc>
				connect to ssid mx-1-2 on host ${sta1.mif.ip}
			</desc>
			<log-file>w1d.step3.4_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=mx-1-2 name=mx-1-2 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w1d.3.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-1-2 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>w1d.step3.5_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1d.3.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>w1d.step3.6_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1d.3.7">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>w1d.step3.7_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1d.3.8">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step3.7_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1d.3.9">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step3.7_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w1d.3.10">
			<desc>
				ap ping sta
			</desc>
			<log-file>w1d.step3.10_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta1.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta1.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w1d.3.11">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w1d.step3.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w1d.3.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step3.11_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w1d.3.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>w1d.step3.13_sta_ping_ap.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1d.4">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-1-8
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w1d.step4_wifi_prof.xml -s "mx-1-8" -l ${log.dir}
			</script>
		</step>

		<step no="w1d.4.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w1d.step4_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w1d.4.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w1d.step4.2_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-1-8"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-1-8&lt;/name&gt;"</log-match>
		</step>

		<step no="w1d.4.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid mx-1-8 to host ${sta1.mif.ip}
				Check profile for ssid mx-1-8 on host ${sta1.mif.ip}
				Check wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w1d.step4.3_wlan_conf_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-1-8"
				-v "sleep 30"
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID.*name.*mx-1-8" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\s*\d+\s*:\s*mx-1-8" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="w1d.4.4">
			<desc>
				connect to ssid mx-1-8 on host ${sta2.mif.ip}
			</desc>
			<log-file>w1d.step4.4_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=mx-1-8 name=mx-1-8 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w1d.4.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-1-8 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>w1d.step4.5_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1d.4.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>w1d.step4.6_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1d.4.7">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>w1d.step4.7_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1d.4.8">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step4.7_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1d.4.9">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta2.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step4.7_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w1d.4.10">
			<desc>
				ap ping sta
			</desc>
			<log-file>w1d.step4.10_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta2.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta2.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w1d.4.11">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w1d.step4.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w1d.4.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step4.11_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w1d.4.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>w1d.step4.13_sta_ping_ap.log</log-file>
			<ssh target="sta2">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1d.5">
			<desc>
				Generate wifi_aerohive_test profile for ssid mx-1-16
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w1d.step5_wifi_prof.xml -s "mx-1-16" -l ${log.dir}
			</script>
		</step>

		<step no="w1d.5.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w1d.step5_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta3.mif.ip}
			</script>
		</step>

		<step no="w1d.5.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w1d.step5.2_cat_profile_sta.log</log-file>
			<ssh target="sta3">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep mx-1-16"
			</ssh>
			<log-match>-e "&lt;name&gt;mx-1-16&lt;/name&gt;"</log-match>
		</step>

		<step no="w1d.5.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid mx-1-16 to host ${sta1.mif.ip}
				Check profile for ssid mx-1-16 on host ${sta1.mif.ip}
				Check wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w1d.step5.3_wlan_conf_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles mx-1-16"
				-v "sleep 30"
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID.*name.*mx-1-16" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\s*\d+\s*:\s*mx-1-16" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="w1d.5.4">
			<desc>
				connect to ssid mx-1-16 on host ${sta3.mif.ip}
			</desc>
			<log-file>w1d.step5.4_wlan_conn_sta.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan connect ssid=mx-1-16 name=mx-1-16 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w1d.5.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid mx-1-16 connected on host ${sta3.mif.ip}
			</desc>
			<log-file>w1d.step5.5_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1d.5.6" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta3.mif.ip}
			</desc>
			<log-file>w1d.step5.6_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1d.5.7">
			<desc>
				Dump all interfaces data from remote host ${sta3.mif.ip}
			</desc>
			<log-file>w1d.step5.7_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1d.5.8">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta3.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step5.7_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1d.5.9">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta3.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step5.7_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w1d.5.10">
			<desc>
				ap ping sta
			</desc>
			<log-file>w1d.step5.10_ap_ping_sta.log</log-file>
			<telnet target="ap1">
				-v "ping ${sta3.tif.ip}"
			</telnet>
			<log-match>-e "from ${sta3.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w1d.5.11">
			<desc>
				show mgt0's ip of ap1
			</desc>
			<log-file>w1d.step5.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w1d.5.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1d.step5.11_show_interface_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="w1d.5.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>w1d.step5.13_sta_ping_ap.log</log-file>
			<ssh target="sta3">
				-v "ping ${ap1.mgt0.ip} -c 5"
			</ssh>
			<log-match>-e "from ${ap1.mgt0.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
	</stage>

	<stage loop-values="2,3,4,5,6,7,8,9,10,11,12,13,14,15,16" var-name="ssid_no">
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1d.6">
			<desc>
				no interface wifi1 ssid
			</desc>
			<log-file>step4_no_interface_wifi1_ssid_${loop.v}.log</log-file>
			<telnet target="ap1">
				-v "no interface wifi1 ssid mx-1-${loop.v}"
				-v "no ssid mx-1-${loop.v} security-object mx-1-${loop.v}"
				-v "no security-object mx-1-${loop.v}"
				-v "no ssid mx-1-${loop.v}"
			</telnet>
		</step>
	</stage>
</testcase>