<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Upload encrypted current config or bootstrap config to server</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Exist encrypted current config and bootstrap config

		Test Procedure:
		1. Login AP
		2. Check current config and bootstrap config by cli
		3. Enter shell, check if corresponding config file be
		encrypted
		4. Exit shell, upload current config or bootstrap config
		to server
		5. Check config file in server
		Expectant result
		Can see decrypted config in server
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<property name="bootstrap_config" value="test" />

	<stage>
		<step no="0">
			<desc>
				remove document
			</desc>
			<ssh host="${mpc.mif.ip}" prompt=".*#">
				-v "rm -f /tftpboot/${bootstrap_config}"
			</ssh>
		</step>

		<step no="1">
			<desc>
				reset AP
			</desc>
			<console target="ap1">
				-v "reset config bootstrap"
				-v "reset config"
			</console>
		</step>

		<step no="2" delay="60">
			<desc>
				Create Config and save config
			</desc>
			<console target="ap1">
				-v "ssid ${ssid.name}"
				-v "save config"
			</console>
		</step>

		<step no="3" delay="60">
			<desc>
				show config current
			</desc>
			<log-file>step3_show_config.log</log-file>
			<console target="ap1">
				-v "show config current"
			</console>
			<log-match>-i "ssid ${ssid.name}"</log-match>
		</step>

		<step no="4">
			<desc>
				show config bootstrap
			</desc>
			<log-file>step4_show_config_bootstrap.log</log-file>
			<console target="ap1" slow="yes">
				-v "save config running bootstrap"
				-v "show config bootstrap"
			</console>
			<log-match>-i "ssid ${ssid.name}"</log-match>
		</step>

		<step no="5">
			<desc>
				Enter shell, check if corresponding config file be encrypted
			</desc>
			<log-file>step5_enter_shell.log</log-file>
			<console target="ap1" prompt="AH.*$|#" timeout="600">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v "ls /f/etc/"
				-v "exit 0"
				-v ""
			</console>
			<log-match>-i "bootstrap"</log-match>
			<log-match>-i "configure1"</log-match>
		</step>

		<step no="5.1">
			<desc>
				Check which config file be encrypted
				AH-000180:/f/etc# cat bootstrap
			</desc>
			<log-file>step5.1_cat_bootstrap.log</log-file>
			<console target="ap1" prompt="AH.*$|#" timeout="600">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v "cat /f/etc/bootstrap"
				-v "exit"
				-v ""
			</console>
			<log-match>-n -i "ssid ${ssid.name}"</log-match>
			<no-error-check />
		</step>

		<step no="5.2">
			<desc>
				AH-000180:/f/etc# cat configure1
			</desc>
			<log-file>step5.2_cat_configure1.log</log-file>
			<console target="ap1" prompt="AH.*$|#" timeout="600">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v "cat /f/etc/configure1"
				-v "exit"
				-v ""
			</console>
			<log-match>-n -i "ssid ${ssid.name}"</log-match>
			<no-error-check />
		</step>

		<step no="6">
			<desc>
				upload bootstrap config to server
			</desc>
			<log-file>step6_upload_config.log</log-file>
			<console target="ap1" timeout="180">
				-v "save config bootstrap tftp://${mpc.tif.ip}:${bootstrap_config}"
				-v "save config current tftp://${mpc.tif.ip}:${bootstrap_config}"
			</console>
		</step>

		<step no="6.1">
			<desc>
				cat bootstrap document
			</desc>
			<log-file>step_6.1_check_file.log</log-file>
			<ssh host="${mpc.mif.ip}" prompt=".*#">
				-v "ls /tftpboot/"
			</ssh>
			<log-match>-i "${bootstrap_config}"</log-match>
		</step>

		<step no="6.2">
			<desc>
				Check config file in server
			</desc>
			<log-file>step_6.2_check_config.log</log-file>
			<ssh host="${mpc.mif.ip}" prompt=".*#">
				-v "cat /tftpboot/${bootstrap_config}"
			</ssh>
			<log-match>-i "ssid ${ssid.name}"</log-match>
		</step>

		<step no="7">
			<desc>
				remove document
			</desc>
			<ssh host="${mpc.mif.ip}" prompt=".*#">
				-v "rm -f /tftpboot/${bootstrap_config}"
			</ssh>
		</step>

		<step no="7.1">
			<desc>
				reset config bootstrap
			</desc>
			<console target="ap1">
				-v "reset config bootstrap"
			</console>
		</step>
	</stage>

	<failed-process>
		<stage>
			<step no="0">
				<desc>
					remove document
				</desc>
				<ssh host="${mpc.mif.ip}" prompt=".*#">
					-v "rm -f /tftpboot/${bootstrap_config}"
				</ssh>
			</step>

			<step no="0.1">
				<desc>
					reset config bootstrap
				</desc>
				<console target="ap1">
					-v "reset config bootstrap"
				</console>
			</step>
		</stage>

		<include file="include/default_failed_process.xml" />
	</failed-process>
</testcase>