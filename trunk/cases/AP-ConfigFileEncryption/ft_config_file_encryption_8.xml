<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check if encrypted config file can be shown on the console</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Exist current config, backup config and bootstrap config,
		which encrypted in shell

		Test Procedure:

		1. Login AP
		2. Check if current config, backup config, bootstrap config
		be encrypted in shell
		3. Exit shell, check if these config files can be shown on
		the console
		Expectant result
		These config can be shown on the console, which not be
		encrypted on the console
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<property name="testfile" value="ft_config_file_encryption" />

	<stage>
		<step no="1">
			<desc>
				AP connect a server, exist valid config file in server
			</desc>
			<script>
				rm -f /tftpboot/${testfile}
				echo "ssid ${ssid.name}" &gt; /tftpboot/${testfile}
			</script>
		</step>

		<step no="2">
			<desc>
				2. Create some configurations and save config
			</desc>
			<telnet target="ap1">
				-v "hive ${hive.name}"
				-v "save config"
				-v "save config running bootstrap"
			</telnet>
		</step>

		<step no="3">
			<desc>
				3. Save config from tftp server to current and reboot
				immediately
			</desc>
			<console target="ap1">
				-v "save config tftp://${mpc.tif.ip}:${testfile} current"
				-v "reboot"
			</console>
		</step>

		<step no="4">
			<desc>
				6. Check which config file is backup config file by
				_show configuration control
			</desc>
			<log-file>_show_configuration_control.log</log-file>
			<console target="ap1">
				-v "_show configuration control"
			</console>
			<no-error-check />
		</step>

		<step no="5.1">
			<desc>Get file num</desc>
			<setvar name="filenum">
				${bin.dir}/getbyrexp.py -f ${log.dir}/_show_configuration_control.log -p "backup configuration: (\d+)" -t int
			</setvar>
		</step>

		<step no="5.2">
			<desc>Get file num</desc>
			<setvar name="filename">
				${bin.dir}/getbyrexp.py -f ${log.dir}/_show_configuration_control.log -p "num: ${filenum}, valid: \d+, name: (.*)" -t str
			</setvar>
		</step>

		<step no="5.3">
			<desc>Get file num</desc>
			<setvar name="filenum2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/_show_configuration_control.log -p "config after reboot: (\d+)" -t int
			</setvar>
		</step>

		<step no="5.4">
			<desc>Get file num</desc>
			<setvar name="filename2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/_show_configuration_control.log -p "num: ${filenum2}, valid: \d+, name: (.*)" -t str
			</setvar>
		</step>

		<step no="5.5">
			<desc>Get file num</desc>
			<setvar name="filenum3">
				${bin.dir}/getbyrexp.py -f ${log.dir}/_show_configuration_control.log -p "system startup configuration: (\d+)" -t int
			</setvar>
		</step>

		<step no="5.6">
			<desc>Get file num</desc>
			<setvar name="filename3">
				${bin.dir}/getbyrexp.py -f ${log.dir}/_show_configuration_control.log -p "num: ${filenum3}, valid: \d+, name: (.*)" -t str
			</setvar>
		</step>

		<step no="6">
			<desc>
				7. Enter shell, in directory /f/etc, check if corresponding
				config file be encrypted
				Expectant result
				Backup config file be encrypted
			</desc>
			<log-file>check_config_file.log</log-file>
			<console target="ap1" prompt="AH.*(#|$)">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v "cat ${filename}"
				-v "exit"
			</console>
			<log-match>-n -c -i "ssid ${ssid.name}"</log-match>
			<no-error-check />
		</step>

		<step no="6.1">
			<desc>
				check if config file be encrypted
			</desc>
			<log-file>check_config_file2.log</log-file>
			<console target="ap1" prompt="AH.*(#|$)">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v "cat ${filename2}"
				-v "exit"
			</console>
			<log-match>-n -c -i "hive ${hive.name}"</log-match>
			<no-error-check />
		</step>

		<step no="6.2">
			<desc>
				check if config file be encrypted
			</desc>
			<log-file>check_config_file3.log</log-file>
			<console target="ap1" prompt="AH.*(#|$)">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v "cat ${filename3}"
				-v "exit"
			</console>
			<log-match>-n -c -i "ssid ${ssid.name}"</log-match>
			<no-error-check />
		</step>

		<step no="7">
			<desc>
				3. Exit shell, check if these config files can be shown on
				the console
				Expectant result
				These config can be shown on the console, which not be
				encrypted on the console
			</desc>
			<log-file>show_config_backup.log</log-file>
			<console target="ap1">
				-v "show config backup"
			</console>
			<log-match>-c -i "hive ${hive.name}"</log-match>
		</step>

		<step no="7.1">
			<desc>
				show running config
			</desc>
			<log-file>show_config_run.log</log-file>
			<console target="ap1">
				-v "show running-config"
			</console>
			<log-match>-c -i "ssid ${ssid.name}"</log-match>
		</step>

		<step no="7.2">
			<desc>
				show running current
			</desc>
			<log-file>show_config_current.log</log-file>
			<console target="ap1">
				-v "show config current"
			</console>
			<log-match>-c -i "ssid ${ssid.name}"</log-match>
		</step>

		<step no="7.3">
			<desc>
				show running current
			</desc>
			<log-file>show_config_bootstrap.log</log-file>
			<console target="ap1">
				-v "show config bootstrap"
			</console>
			<log-match>-c -i "hive ${hive.name}"</log-match>
		</step>
	</stage>

	<failed-process>
		<stage>
			<step no="0">
				<desc>
					remove document
				</desc>
				<ssh host="${mpc.mif.ip}" prompt=".*#">
					-v "rm -f /tftpboot/${testfile}"
				</ssh>
			</step>

			<step no="0.1">
				<desc>
					reset config bootstrap
				</desc>
				<console target="ap1">
					-v "reset config bootstrap"
				</console>
			</step>
		</stage>

		<include file="include/default_failed_process.xml" />
	</failed-process>
</testcase>