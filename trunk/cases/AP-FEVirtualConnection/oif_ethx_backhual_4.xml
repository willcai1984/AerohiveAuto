<testcase>
	<brief>The pkt is permitted when oif is eth0/eth1(backhual) in-if is wifi1</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<numofap>3</numofap>
	<numofsta>0</numofsta>
	<tbtype>linux</tbtype>
	<description>
		TOPO:
		Traffic-----S w i t c h
		| |
		AP1~~~~~~~AP2
		Description:
		packet can be forwarded eth0-AP1-Wifi1~~~~~Wifi1-AP2-eth0
		Pre-condition:
		Test procedure:
		1. Set the action as permit.
		2. Set the in-if as wifi1.1.
		3. Set the eth0 backhual as oif.
		4. When the pkt match the in-if and src-mac and dst-mac then result 1
		5. Set the eth1 as oif, repeated the upper steps
		6. Bind the eth0 and eth1 to red0, repeated the upper steps
		7. Bind the eth0 and eth1 to agg0 , repeated the upper steps

		Expect result:
		1. The Pkt is forward
	</description>
	<property name="ssid.pwd" value="aerohive" />
	<stage>
		<if>"${ap.eth1.existed}" == "true"</if>
		<step no="pre_1.0">
			<desc>set mgt0 vlan ${tb.vlan1} for ap1</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<include prefix="pre_1.1" file="subs/ap_renew_ip.xml" obj-args="ap1" />

		<step no="pre_1.1">
			<desc>set mgt0 vlan ${tb.vlan1} for ap1</desc>
			<ssh target="ap1">
				-v "interface wifi1 mode backhaul"
			</ssh>
		</step>

		<step no="pre_1.4">
			<desc>show interface for AP1</desc>
			<log-file>show_interface_ap1.log</log-file>
			<ssh target="ap1">
				-v "show interface"
			</ssh>
		</step>

		<step no="pre_1.5">
			<desc>get mgt0 mac for ap2</desc>
			<setvar name="ap1.mgt0.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="pre_1.6">
			<desc>get wifi1 mac for ap</desc>
			<setvar name="ap1.wifi1.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap1.log -k "wifi1" -p 2
			</setvar>
		</step>

		<step no="pre_1.7">
			<desc>set AP1 hive to make sure it can form neighbor with AP2</desc>
			<log-file>enable_neighbor_AP1.log</log-file>
			<ssh target="ap1">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 radio channel 36"
			</ssh>
		</step>

		<step no="pre_2.0">
			<desc>set mgt0 vlan ${tb.vlan1} for ap2</desc>
			<console target="ap2" timeout="80">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<include prefix="pre_2.1" file="subs/ap_renew_ip.xml" obj-args="ap2" />

		<step no="pre_2.2">
			<desc>set mgt0 vlan ${tb.vlan1} for ap2</desc>
			<ssh target="ap2" timeout="80">
				-v "interface wifi1 mode backhaul"
			</ssh>
		</step>

		<step no="pre_2.4">
			<desc>show interface for AP2</desc>
			<log-file>show_interface_ap2.log</log-file>
			<ssh target="ap2">
				-v "show interface"
			</ssh>
		</step>

		<step no="pre_2.5">
			<desc>get mgt0 mac for ap2</desc>
			<setvar name="ap2.mgt0.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2.log -k "Mgt0" -p 2
			</setvar>
		</step>

		<step no="pre_2.6">
			<desc>get wifi1 mac for ap2</desc>
			<setvar name="ap2.wifi1.mac">
				${bin.dir}/getstring.pl -f ${log.dir}/show_interface_ap2.log -k "wifi1" -p 2
			</setvar>
		</step>

		<step no="pre_2.7">
			<desc>set AP2 hive to make sure it can form neighbor with AP1</desc>
			<log-file>enable_neighbor_AP2.log</log-file>
			<ssh target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface wifi1 radio channel 36"
			</ssh>
		</step>

		<!-- configure ap3, then it can generate traffic -->
		<step no="pre_3.0">
			<desc>set mgt0 vlan ${tb.vlan1} for ap3</desc>
			<console target="ap3" timeout="80">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<include prefix="pre_3.1" file="subs/ap_renew_ip.xml" obj-args="ap3" />


		<step no="0.1">
			<desc>renew acsp</desc>
			<ssh target="ap1">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
			</ssh>
		</step>

		<step no="0.2">
			<desc>renew acsp</desc>
			<ssh target="ap2">
				-v "interface wifi1 hive ${hive.name} shutdown"
				-v "no interface wifi1 hive ${hive.name} shutdown"
			</ssh>
		</step>
	
		<include prefix="0.3" file="subs/ap_amrp_neighbor_check.xml" obj-args="ap1,ap2" />
		<include prefix="0.4" file="subs/ap_amrp_neighbor_check.xml" obj-args="ap2,ap1" />

		<step no="1">
			<desc>set virtual connection in AP1 for in-if is eth1 and o-if is wifi1</desc>
			<log-file>set_virtual_ap1.log</log-file>
			<ssh target="ap1">
				-v "forwarding-engine static-rule aa action pass in-if eth1 dst-mac 0100:5e01:0101 out-if wifi1.1 rx-mac ${ap2.wifi1.mac}"
				-v "_ff id 1 incoming-interface eth1 protocol 1 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "console page 0"
				-v "clear log buffer"
			</ssh>
		</step>

		<step no="2">
			<desc>set virtual connection in AP2 for in-if is wifi1 and o-if is eth0</desc>
			<log-file>set_virtual_ap2.log</log-file>
			<ssh target="ap2">
				-v "forwarding-engine static-rule xx action pass in-if wifi1.1 dst-mac 0100:5e01:0101 tx-mac ${ap1.wifi1.mac} out-if eth0"
				-v "_ff id 1 incoming-interface wifi1.1 protocol 1 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "console page 0"
				-v "clear log buffer"
			</ssh>
		</step>

		<step no="3">
			<desc>generate dst-mac: 0100:5e01:0101 in AP3, then pkt will flood to AP1 eth1 and forward to AP2 via wifi1</desc>
			<log-file>ping_1.log</log-file>
			<ssh target="ap3">
				-v "interface eth1 shutdown"
				-v "ping 224.1.1.1 count 1" ;exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="4.1">
			<desc>get log buffer from AP1</desc>
			<log-file>ap1_pass_1.log</log-file>
			<ssh target="ap1">
				-v "show log buffer tail 100"
			</ssh>
			<log-match> -c -e "(i) eth1 ${ap3.mgt0.ip}->224.1.1.1"</log-match>
			<log-match> -c -i "forward vconnection data to interface wifi1.1 by rule" -i "aa"</log-match>
			<no-error-check />
		</step>

		<step no="4.2">
			<desc>get log buffer from AP2</desc>
			<log-file>ap2_pass_1.log</log-file>
			<ssh target="ap2">
				-v "show log buffer tail 100"
			</ssh>
			<log-match> -c -e "(i) wifi1.1 ${ap3.mgt0.ip}->224.1.1.1"</log-match>
			<log-match> -c -i "forward vconnection data to interface eth0 by rule" -i "xx"</log-match>
			<no-error-check />
		</step>

		<step no="5.1">
			<desc>set virtual connection in AP2 for in-if is wifi1 and o-if is eth1</desc>
			<log-file>set_virtual_ap2.log</log-file>
			<ssh target="ap2">
				-v "no forwarding-engine static-rule xx"
				-v "forwarding-engine static-rule xx action pass in-if wifi1.1 dst-mac 0100:5e01:0102 tx-mac ${ap1.wifi1.mac} out-if eth1"
				-v "clear log buffer"
			</ssh>
		</step>

		<step no="5.2">
			<desc>generate dst-mac: 0100:5e01:0102 in AP3, then pkt will flood to AP1 eth1, and forward to AP2 via wifi1</desc>
			<log-file>ping_1.log</log-file>
			<ssh target="ap3">
				-v "interface eth1 shutdown"
				-v "ping 224.1.1.2 count 1" ;exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="5.3">
			<desc>get log buffer from AP2</desc>
			<log-file>ap2_pass_1.log</log-file>
			<ssh target="ap2">
				-v "show log buffer tail 100"
			</ssh>
			<log-match> -c -e "(i) wifi1.1 ${ap3.mgt0.ip}->224.1.1.2"</log-match>
			<log-match> -c -i "forward vconnection data to interface eth1 by rule" -i "xx"</log-match>
			<no-error-check />
		</step>

		<step no="6.0">
			<desc>bind eth0/eth1 as red0</desc>
			<log-file>set_red0_interface.log</log-file>
			<console target="ap2">
				-v "show interface"
				-v ""
				-v "no interface eth0 manage snmp"
				-v "no interface eth0 manage telnet"
				-v "interface eth0 bind red0"
				-v "interface eth1 bind red0"
				-v ""
				-v "show interface"
				-v "interface red0 manage snmp"
				-v "interface red0 manage telnet"
			</console>
		</step>

		<step no="6.1">
			<desc>set virtual connection in AP2 for in-if is wifi1 and o-if is red0</desc>
			<log-file>set_virtual_ap2.log</log-file>
			<ssh target="ap2">
				-v "no forwarding-engine static-rule xx"
				-v "forwarding-engine static-rule xx action pass in-if wifi1.1 dst-mac 0100:5e01:0103 tx-mac ${ap1.wifi1.mac} out-if red0"
				-v "clear log buffer"
			</ssh>
		</step>

		<step no="6.2">
			<desc>generate dst-mac: 0100:5e01:0103 in AP3, then pkt will flood to AP1 eth1 and forword to AP2 via wifi1</desc>
			<log-file>ping_1.log</log-file>
			<ssh target="ap3">
				-v "interface eth1 shutdown"
				-v "ping 224.1.1.3 countsshxit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="6.3">
			<desc>get log buffer from AP2</desc>
			<log-file>ap2_pass_1.log</log-file>
			<ssh target="ap2">
				-v "show log buffer tail 100"
			</ssh>
			<log-match> -c -e "(i) wifi1.1 ${ap3.mgt0.ip}->224.1.1.3"</log-match>
			<log-match> -c -i "forward vconnection data to interface red0 by rule" -i "xx"</log-match>
			<no-error-check />
		</step>

		<step no="7.0">
			<desc>bind eth0/eth1 as agg0</desc>
			<log-file>set_agg0_interface.log</log-file>
			<console target="ap2">
				-v "no interface eth0 bind"
				-v "no interface eth1 bind"
				-v ""
				-v "show interface"
				-v "interface eth0 bind agg0"
				-v "interface eth1 bind agg0"
				-v ""
				-v "show interface"
				-v "interface agg0 manage snmp"
				-v "interface agg0 manage telnet"
			</console>
		</step>

		<step no="7.1">
			<desc>set virtual connection in AP2 for in-if is wifi1 and o-if is agg0</desc>
			<log-file>set_virtual_ap2.log</log-file>
			<ssh target="ap2">
				-v "no forwarding-engine static-rule xx"
				-v "forwarding-engine static-rule xx action pass in-if wifi1.1 dst-mac 0100:5e01:0104 tx-mac ${ap1.wifi1.mac} out-if agg0"
				-v "clear log buffer"
			</ssh>
		</step>

		<step no="6.2">
			<desc>generate dst-mac: 0100:5e01:0104 in AP3, then pkt will flood to AP1 eth1 and forword to AP2 via wifi1</desc>
			<log-file>ping_1.log</log-file>
			<ssh target="ap3">
				-v "interface eth1 shutdown"
				-v "ping 224.1.1.4 count 1" ;exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="6.3">
			<desc>get log buffer from AP2</desc>
			<log-file>ap2_pass_1.log</log-file>
			<ssh target="ap2">
				-v "show log buffer tail 100"
			</ssh>
			<log-match> -c -e "(i) wifi1.1 ${ap3.mgt0.ip}->224.1.1.4"</log-match>
			<log-match> -c -i "forward vconnection data to interface agg0 by rule" -i "xx"</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>