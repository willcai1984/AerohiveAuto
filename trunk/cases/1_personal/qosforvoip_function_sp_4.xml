<testcase>
	<brief>QOSFORVOIP_Function_sp_4</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<numofap>0</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<numofap>0</numofap>
	<numofsta>0</numofsta>
	<description>
		queue is 7 6 5 . Test sp scheduler.
	</description>
	<comment>
		sw1.port1=eth1/21;
		sw1.port1.phytype=copper;
		sw1.port5=eth1/25;
		sw1.port1.ixia_port=1/2/1;
		sw1.port1.ixia_port.phytype=copper;
		sw1.terminal.port=2016;
		tb.conserver.ip=localhost
		ap1.cons_name=tb1-SR2024-2
		pub.chassis1.ip=10.155.33.216;
		pub.tclserver1.ip=10.155.30.164;
		pub.tclclient1.ip=10.155.40.10;
		sw1.tclclient.ip=10.155.32.228;
		sw1.mgmtport=eth1/1;
		sw1.mgmtvlan=121;
		tb.conserver.ip=10.155.32.228;
		tb.conserver.user=root;
		tb.conserver.passwd=aerohive;
		sw1.cons_name=tb1-SR2024-2;
		sw1.user=admin;
		sw1.passwd=aerohive;
		sw1.prompt="AH-[a-z0-9A-Z_]*#";
	</comment>
	<property name="correct_vlan" value="101" />
	<property name="tx_port1" value="${sw1.port1.ixia_port}" />
	<property name="tx_port1.phytype" value="${sw1.port1.ixia_port.phytype}" />
	<property name="rx_port1" value="${sw1.port2.ixia_port}" />
	<property name="rx_port1.phytype" value="${sw1.port2.ixia_port.phytype}" />
	<property name="qos_name" value="qos" />
	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include file="include/sw_default_pre_process.xml" />
	</pre-process>

	<stage>
		<step no="1.1">
			<desc>
				Set qos class profile to port1, qos marker profile to port2, enable qos
			</desc>
			<telnet target="sw1">
				-v 'vlan ${correct_vlan}'
				-v 'no interface ${sw1.port1} shutdown'
				-v 'interface ${sw1.port1} switchport mode trunk'
				-v 'interface ${sw1.port1} switchport trunk allow vlan ${correct_vlan}'
				-v 'no interface ${sw1.port2} shutdown'
				-v 'interface ${sw1.port2} switchport mode trunk'
				-v 'interface ${sw1.port2} switchport trunk allow vlan ${correct_vlan}'
				-v 'qos classifier-profile ${qos_name} 8021p'
				-v 'qos marker-profile ${qos_name} 8021p'
				-v 'interface ${sw1.port1} qos-classifier ${qos_name}'
				-v 'interface ${sw1.port2} qos-marker ${qos_name}'
				-v 'qos enable'
			</telnet>
			<no-error-check />
		</step>

		<step no="1.2">
			<desc>
				Set qos classifier map normal ordered(dot1p)
			</desc>
			<telnet target="sw1">
				-v 'qos classifier-map 8021p 0 0'
				-v 'qos classifier-map 8021p 1 1'
				-v 'qos classifier-map 8021p 2 2'
				-v 'qos classifier-map 8021p 3 3'
				-v 'qos classifier-map 8021p 4 4'
				-v 'qos classifier-map 8021p 5 5'
				-v 'qos classifier-map 8021p 6 6'
				-v 'qos classifier-map 8021p 7 7'
			</telnet>
			<no-error-check />
		</step>

		<step no="1.3">
			<desc>
				show classifier map table to check(dot1p)
			</desc>
			<log-file>step1.3_show_classifier_map.log</log-file>
			<telnet target="sw1">
				-v 'show qos classifier-map 8021p'
			</telnet>
			<log-match>-e '^\d\s+0\s+0' -re</log-match>
			<log-match>-e '^\d\s+1\s+1' -re</log-match>
			<log-match>-e '^\d\s+2\s+2' -re</log-match>
			<log-match>-e '^\d\s+3\s+3' -re</log-match>
			<log-match>-e '^\d\s+4\s+4' -re</log-match>
			<log-match>-e '^\d\s+5\s+5' -re</log-match>
			<log-match>-e '^\d\s+6\s+6' -re</log-match>
			<log-match>-e '^\d\s+7\s+7' -re</log-match>
			<no-error-check />
		</step>

		<step no="1.4">
			<desc>
				Set qos marker map normal ordered(dot1p)
			</desc>
			<telnet target="sw1">
				-v 'qos marker-map 8021p 0 0'
				-v 'qos marker-map 8021p 1 1'
				-v 'qos marker-map 8021p 2 2'
				-v 'qos marker-map 8021p 3 3'
				-v 'qos marker-map 8021p 4 4'
				-v 'qos marker-map 8021p 5 5'
				-v 'qos marker-map 8021p 6 6'
				-v 'qos marker-map 8021p 7 7'
			</telnet>
			<no-error-check />
		</step>

		<step no="1.5">
			<desc>
				show marker map table to check(dot1p)
			</desc>
			<log-file>step1.5_show_marker_map.log</log-file>
			<telnet target="sw1">
				-v 'show qos marker-map 8021p'
			</telnet>
			<log-match>-e '^\d\s+0\s+0' -re</log-match>
			<log-match>-e '^\d\s+1\s+1' -re</log-match>
			<log-match>-e '^\d\s+2\s+2' -re</log-match>
			<log-match>-e '^\d\s+3\s+3' -re</log-match>
			<log-match>-e '^\d\s+4\s+4' -re</log-match>
			<log-match>-e '^\d\s+5\s+5' -re</log-match>
			<log-match>-e '^\d\s+6\s+6' -re</log-match>
			<log-match>-e '^\d\s+7\s+7' -re</log-match>
			<no-error-check />
		</step>

		<step no="1.6">
			<desc>
				show running to confirm
			</desc>
			<log-file>step1.6_show_running.log</log-file>
			<telnet target="sw1">
				-v 'show running-config'
			</telnet>
			<no-error-check />
		</step>

		<step no="2.1">
			<desc>
				connect to ixia, configure stream 1/2/3 priority is 5/6/7. port1 send traffic; expect stream 1: equal; stream 2: equal; stream 3: equal(375*1000*8=30000)
			</desc>
			<log-file>step2.1_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${tx_port1.phytype},${rx_port1.phytype}"
				-v ""
				<!-- configure port 1 to 1000M -->
				<!-- configure port 2 to 100M -->
				-v "ah_port_config -onePort ${rx_port1}
				-1000fullIn false
				"
				<!-- configure stream 1 priority 5 and rate is 30Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 5
				-rate_pps 3750
				-frame_length 1000"
				-v ""
				<!-- configure stream 2 priority 6 and rate is 30Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 6
				-rate_pps 3750
				-frame_length 1000"
				-v ""
				<!-- configure stream 3 priority 7 and rate is 30Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 3750
				-frame_length 1000"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0016
				-mac_src 0000.0000.0015"
				-v ""
				<!-- configure port 1 and 2 to multi -->
				-v "port_multi_stream_statistic_set -portList ${tx_port1},${rx_port1}"
				-v ""
				<!-- disable stream 1 and 2 firstly -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp disable"
				-v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp disable"
				-v ""
				<!-- start send frames on port1 -->
				-v "stop_transmit -portList ${tx_port1}"
				-v ""
				-v "clear_statistic -portList ${tx_port1},${rx_port1}"
				-v ""
				-v "start_transmit -portList ${tx_port1} -firstTryFlag false"
				-v ""
				-v "wait_time -second 10"
				<!-- enable stream 2 -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp enable"
				-v ""
				-v "wait_time -second 10"
				-v ""
				<!-- enable stream 1 -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp enable"
				-v ""
				-v "wait_time -second 10"
				-v ""
				-v "stop_transmit -portList ${tx_port1}"
				-v ""
				-v "get_stream_statistic -portList ${tx_port1},${rx_port1}"
				-v ""
				-v "exit"
			</ssh>
			<no-error-check />
		</step>

		<step no="3.1">
			<desc>
				port1 send traffic; expect stream 1: block; stream 2: not equal; stream 3: equal(625*1000*8=50000)
			</desc>
			<log-file>step3.1_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${tx_port1.phytype},${rx_port1.phytype}"
				-v ""
				<!-- configure port 1 to 1000M -->
				<!-- configure port 2 to 100M -->
				-v "ah_port_config -onePort ${rx_port1}
				-1000fullIn false
				"
				<!-- configure stream 1 priority 5 and rate is 50Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 5
				-rate_pps 6250
				-frame_length 1000"
				-v ""
				<!-- configure stream 2 priority 6 and rate is 50Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 6
				-rate_pps 6250
				-frame_length 1000"
				-v ""
				<!-- configure stream 3 priority 7 and rate is 50Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 6250
				-frame_length 1000"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0016
				-mac_src 0000.0000.0015"
				-v ""
				<!-- configure port 1 and 2 to multi -->
				-v "port_multi_stream_statistic_set -portList ${tx_port1},${rx_port1}"
				-v ""
				<!-- disable stream 1 and 2 firstly -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp disable"
				-v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp disable"
				-v ""
				<!-- start send frames on port1 -->
				-v "stop_transmit -portList ${tx_port1}"
				-v ""
				-v "clear_statistic -portList ${tx_port1},${rx_port1}"
				-v ""
				-v "start_transmit -portList ${tx_port1} -firstTryFlag false"
				-v ""
				-v "wait_time -second 10"
				<!-- enable stream 2 -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp enable"
				-v ""
				-v "wait_time -second 10"
				-v ""
				<!-- enable stream 1 -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp enable"
				-v ""
				-v "wait_time -second 10"
				-v ""
				-v "stop_transmit -portList ${tx_port1}"
				-v ""
				-v "get_stream_statistic -portList ${tx_port1},${rx_port1}"
				-v ""
				-v "exit"
			</ssh>
			<no-error-check />
		</step>

		<step no="4.1">
			<desc>
				port1 send traffic; expect stream 1: block; stream 2: not equal; stream 3: equal(1250*1000*8=100000)
			</desc>
			<log-file>step4.1_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${tx_port1.phytype},${rx_port1.phytype}"
				-v ""
				<!-- configure port 1 to 1000M -->
				<!-- configure port 2 to 100M -->
				-v "ah_port_config -onePort ${rx_port1}
				-1000fullIn false
				"
				<!-- configure stream 1 priority 5 and rate is 100Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 5
				-rate_pps 12500
				-frame_length 1000"
				-v ""
				<!-- configure stream 2 priority 6 and rate is 100Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 6
				-rate_pps 12500
				-frame_length 1000"
				-v ""
				<!-- configure stream 3 priority 7 and rate is 100Mbps -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 7
				-rate_pps 12500
				-frame_length 1000"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0016
				-mac_src 0000.0000.0015"
				-v ""
				<!-- configure port 1 and 2 to multi -->
				-v "port_multi_stream_statistic_set -portList ${tx_port1},${rx_port1}"
				-v ""
				<!-- disable stream 1 and 2 firstly -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp disable"
				-v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp disable"
				-v ""
				<!-- start send frames on port1 -->
				-v "stop_transmit -portList ${tx_port1}"
				-v ""
				-v "clear_statistic -portList ${tx_port1},${rx_port1}"
				-v ""
				-v "start_transmit -portList ${tx_port1} -firstTryFlag false"
				-v ""
				-v "wait_time -second 10"
				<!-- enable stream 2 -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp enable"
				-v ""
				-v "wait_time -second 10"
				-v ""
				<!-- enable stream 1 -->
				-v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp enable"
				-v ""
				-v "wait_time -second 10"
				-v ""
				-v "stop_transmit -portList ${tx_port1}"
				-v ""
				-v "get_stream_statistic -portList ${tx_port1},${rx_port1}"
				-v ""
				-v "exit"
			</ssh>
			<no-error-check />
		</step>

	</stage>

	<post-process>
		<stage>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>