<testcase>
	<brief>(IxPort: CoF=4)Mirror from interface(wan)</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>

	<description>
		Mirror from interface, mode wan, direction ingress/egress/both. Pkts mode no_tag/vlan_tag(correct/incorrect)/bad_pkts
	</description>

	<comment>
		Test procedure
		1. Configure source is interface 1, direction is ingress, destination is interface 4
		2. IXIA port1 send broadcast/multicast/unicast pkts(mix tagged and untagged pkts), capture pkts on IXIA port 4, result 1
		3. Configure source is interface 1, direction is egress, destination is interface 4
		4. IXIA port2 send broadcast/multicast/unicast pkts(mix tagged and untagged pkts, mix destination IP), capture pkts on IXIA port 4, result 2
		5. Configure source is interface 1, direction is both, destination is interface 4
		6. IXIA port12 send broadcast/multicast/unicast pkts(mix tagged and untagged pkts), capture pkts on IXIA port 4, result 3
		7. Modify the interface 4 mode to trunk, repeat step 1-6, result 4
		8. Modify the interface 4 mode to wan, repeat step 1-6, result 4
		Expect result
		Result 1: Can capture the pkts sent from port1
		Result 2: Can capture only the destination IP is not the same subnet as the local subnets’ pkts sent from port2
		Result 3: Can capture all the pkts sent from
		port1 and the destination IP is not the sams subnet with the chesapeake’s pkts sent from port2
		Result 4: The same as above

	</comment>
	<property name="tx_port1" value="${sw1.port1.ixia_port}" />
	<property name="rx_port1" value="${sw1.port2.ixia_port}" />
	<property name="tx_port2" value="${sw1.port3.ixia_port}" />
	<property name="rx_port2" value="${sw1.port4.ixia_port}" />
	<property name="correct_vlan" value="101" />
	<property name="incorrect_vlan" value="102" />
	<stage>
		<script>
				echo "Begin platform analyze for 2148P"
		</script>		
		<if>${sw1.platform} == "SR2148P"</if>
		<step no="1.0.1">
			<desc>
				This case is not supported by current release
			</desc>
			<script>
				echo "This case is not supported by current release"
			</script>
		</step>
	</stage>

	<stage>
		<script>
				echo "Begin platform analyze for other Switch"
		</script>
		<if>${sw1.platform} != "SR2148P"</if>
		<step no="1.0.1">
			<desc>
				Show interface mgt0 to get ip address
			</desc>
			<log-file>step1.0.1_mgt0_ip_info.log</log-file>
			<console target="sw1">
				-v 'show interface mgt0'
			</console>
		</step>

		<step no="1.0.2">
			<desc>
				Get mgt0's ip address
			</desc>
			<setvar name="sw1.ip">
				python ${bin.dir}/getbyrexp.py -p "IP addr=(\d+\.\d+\.\d+\.\d+);" -f ${log.dir}/step1.0.1_mgt0_ip_info.log -t str
			</setvar>
		</step>
		<step no="1.1">
			<desc>
				source wan, direction ingress.
			</desc>
			<ssh target="${sw1.ip}" user="${sw1.user}" password="${sw1.passwd}">
				-v 'vlan ${correct_vlan}'
				-v 'vlan ${incorrect_vlan}'
				-v 'interface ${sw1.port1} mode wan'
				-v 'monitor session 1'
				-v 'monitor session 1 destination interface ${sw1.port2}'
				-v 'monitor session 1 source interface ${sw1.port1} ingress'
				-v 'monitor session 1 enable'
			</ssh>
		</step>

		<step no="1.2">
			<desc>
				Direction:ingress; Pkts:no_tag
			</desc>
			<log-file>step1.2_ingress_no_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0002
				-mac_src 0000.0000.0001"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0001
				-mac_src 0000.0000.0002"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port1} -oneRxPort ${rx_port1}"
				-v ""
				-v "exit"
			</ssh>
		</step>

		<step no="1.2.1">
			<desc>
				Direction:ingress; Pkts:no_tag, rx1=tx1
			</desc>
			<log-file>step1.2_ingress_no_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port1} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<step no="1.3">
			<desc>
				Direction:ingress; Pkts:correct vlan tag
			</desc>
			<log-file>step1.3_correct_vlan_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0002
				-mac_src 0000.0000.0001
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0001
				-mac_src 0000.0000.0002
				-vlan enable
				-vlan_id ${correct_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port1} -oneRxPort ${rx_port1}"
				-v ""
				-v "exit"
			</ssh>
		</step>

		<step no="1.3.1">
			<desc>
				Direction:ingress; Pkts:correct_vlan_tag; Expect:rx1=tx1
			</desc>
			<log-file>step1.3_correct_vlan_tag.log</log-file>
			<log-match>-e "checkEqualTxWithRX ${tx_port1} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
		</step>

		<step no="1.4">
			<desc>
				Direction:ingress; Pkts:incorrect vlan tag
			</desc>
			<log-file>step1.4_incorrect_vlan_tag.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1} -phyList ${sw1.port1.ixia_port.phytype},${sw1.port2.ixia_port.phytype} -tclServerIP ${pub.tclserver1.ip}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0002
				-mac_src 0000.0000.0001
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v ""
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0001
				-mac_src 0000.0000.0002
				-vlan enable
				-vlan_id ${incorrect_vlan}"
				-v ""
				-v "start_trans_getstats -txPortList ${tx_port1} -rxPortList ${rx_port1}"
				-v ""
				-v "check_equal_tx_with_rx -oneTxPort ${tx_port1} -oneRxPort ${rx_port1}"
				-v ""
				-v "exit"
			</ssh>
		</step>
	</stage>
	<step no="1.4.1">
		<desc>
			Direction:ingress; Pkts:incorrect_vlan_tag; Expect:rx1=tx1
		</desc>
		<log-file>step1.4_incorrect_vlan_tag.log</log-file>
		<log-match>-e "checkEqualTxWithRX ${tx_port1} ${rx_port1} framesSent userDefinedStat2 result is equal"</log-match>
	</step>
</testcase>