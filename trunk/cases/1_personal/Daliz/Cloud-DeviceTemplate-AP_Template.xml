<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>AP template test</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		1. xxxxxxxxx
	</description>
	<numofap>1</numofap>
 	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<pre-process>
		<stage>
			<step no="0">
				<desc>Initialize the DUT db</desc>
				<call step="init.cloud.server" />
			</step>
		</stage>
	</pre-process>
	
	<post-process>
		<stage>
			<step no="0">
				<desc>Clean up the DUT db</desc>
				<call step="cleanup.cloud.server" />
			</step>
		</stage>
	</post-process>
	
	<desc>
		tbd
	</desc>
	
	<property name="test1" value="ServiceType" />
	<property name="ap.mac" value="197711112125" />
	<property name="owner.id" value="103" />
	<property name="owner.name" value="APtemplate_test" />
	<property name="vlan.id" value="103" />
	<property name="userprofile.id" value="103" />
	
	<declaration>
		<step name="create.devicetemplate.profile" description="">
			<restapi name="createDeviceTemplateProfile">
				{
    			"ownerId":${owner.id},
				"predefined": false,
				"jsonType": "device-template-profile",
				"name":"${owner.name}",
				"description": "for AP 330",
				"defaultDeviceTemplate": {
				  "jsonType": "device-template",
				  "ownerId":${owner.id},
				  "predefined": false,
				  "name":"${owner.name}",
				  "description": "default AP template",
				  "productType": "AP_330",
				  "deviceFunction": "Ap",
				  "loadBalanceMode": "AUTO",
				  "ethPortEntries": [
				    {
				      "ownerId":${owner.id},
				      "predefined": false,
				      "portAggregationSettings": {
				        "ownerId":${owner.id},
				        "predefined": false,
				        "portChannel": 20
				      },
				      "portMirrorSettings": [
				        {
				          "ownerId":${owner.id},
				          "predefined": false,
				          "destPort": 3,
				          "sourceVlan": 100,
				          "ingressPorts": [
				            10
				          ],
				          "egressPorts": [
				            15
				          ],
				          "egressAndIngressPorts": [
				            11
				          ],
				          "enablePortMonitor": false
				        }
				      ],
				      "portType": {
				        "jsonType": "access-port",
				        "ownerId":${owner.id},
				        "predefined": false,
				        "name": "access port type profile 1",
				        
				        "enabled": "ture"
				      }
				    },
				    {
				      "ownerId":${owner.id},
				      "predefined": false,
				      "portAggregationSettings": {
				        "ownerId":${owner.id},
				        "predefined": false,
				        "portChannel": 23
				      },
				      "portMirrorSettings": [
				        {
				          "ownerId":${owner.id},
				          "predefined": false,
				          "destPort": 3,
				          "sourceVlan": 100,
				          "ingressPorts": [
				            10
				          ],
				          "egressPorts": [
				            15
				          ],
				          "egressAndIngressPorts": [
				            11
				          ],
				          "enablePortMonitor": false
				        }
				      ],
				      "portType": {
				        "jsonType": "access-port",
				        "ownerId":${owner.id},
				        "predefined": false,
				        "name": "access port type profile 1",
				        
				        "enabled": "ture"
				      }
				    }
				  ],
				  "sfpPortEntries": [],
				  "usbPortType": {},
				  "wifi0RadioProfile": {},
				  "wifi1RadioProfile": {}
				},
				"entries": [],
				"enabled": true,
				"productType": "AP_330",
				"deviceFunction": "Ap"
  				}
            </restapi>
		</step>
		
        <step name="create.user.profile.1">
			<restapi name = "createUserProfile">
				{
				"jsonType" : "user-profile",
				"ownerId" : ${owner.id},
				"name" : "UserProfile10",
				"predefined" : false,
				"vlan" : {
				"jsonType" : "vlan",
				"ownerId" : ${owner.id},
				"name" : "Aerohive_VlanProfile",
				"description" : "Vlan Profile for Demo",
				"predefined" : false,
				"entries" : [ {
				"ownerId" : ${owner.id},
				"tags" : [ ],
				"vlanNumber" : ${vlan.id}
				} ]
				},
				"enableFirewall" : false,	
				"enableSchedule" : false,
				"schedules" : [ ],
				"enableTrafficTunneling" : true,
				"trafficTunnelingId" : refIdInTestStep = "create.tunnel.policy.dnxp", 
				"enableClientSla" : false,
				"enableQos" : false,
				"restriction" : "DENY_CAR",
	             "radiusAttributeNumber": 105
				}
			</restapi>
		</step>
		
       <step name="create.ssid.profile.1">
        	<desc>
        		this is an example with reference to other test step
        	</desc>
            <restapi name="createSsidProfile">
                {
                    "jsonType" : "ssid-profile",
                    "ownerId" : ${owner.id},
                    "name" : "SSID-8021X",
                    "ssid" : "SSID-8021X",
                    "description" : "a ssid profile for integration test",
                    "radioBand" : "DUAL",
                    "industry" : "CUSTOM",
                    "wirelessNetworkUsage" : "CUSTOM",
                    "accessSecurity": {
                    "jsonType": "802DOT1X",
                    "ownerId": ${owner.id},
                    "keyManagement": "WPA2_8021X",
                    "encryptionMethod": "CCMP",
                    "keyType": "HEX",
                    "keyValue": "0qbQyejlrjA790ABDSUzwzANyjzx5B4nSR4WUroUbZNK61l6oWJllevYtfuArRgJ"
                    },
                    "defaultUserProfile" : refObjectInTestStep = "create.user.profile.1",
                    "advancedSettings": refObjectInTestStep = "create.ssid.profile.advanced.settings",
                    "rateSettings":refObjectInTestStep="create.ssid.profile.rate.settings",
                    "trafficFilter": refObjectInTestStep = "create.traffic.filter",
            		"externalRadiusProfile": refObjectInTestStep = "create.external.radius.profile1",
                    "ipBasedDos":refObjectInTestStep="create.ip.dos.prevention",
                    "ssidBasedMacDos":refObjectInTestStep="create.mac.dos.prevention.1",
                    "stationBasedMacDos":refObjectInTestStep="create.mac.dos.prevention.2",
                    "advancedAccessSecurity": 
                        {
                            "ownerId":${owner.id},
					        "predefined":false,
					        "gtkRekeyPeriod":4124,
					        "gtkTimeout":679,
					        "gtkRetries":10,
					        "ptkRekeyPeriod":49523,
					        "ptkTimeout":811,
					        "ptkRetries":3,
							"gmkRekeyPeriod":1603482,
							"replayWindow":10,
							"nonStrict":true,
							"reauthInterval":57688,
							"enablePreauthentication":false,
							"enableProactivePmkIdResponse":true,
							"localTkipCountermeasure":false,
							"remoteTkipCountermeasure":false,
							"enable802Dot11w":true,
							"useOf802Dot11w":"MANDATORY",
							"enableBroadcastOrMulticastIntegrityProtocol":false,
							"enableGmkRekeyPeriod":true,
							"enableGtkRekeyPeriod":true,
							"enablePtkRekeyPeriod":false,
							"enableReauthInterval":false
						}
                }
            </restapi>
        </step>   		
        <step name="create.device.1.ap330.v6102.as.ap">
            <restapi name="createDevice">
                {
                    "ownerId":${owner.id},
                    "ipAddress": "10.155.21.33",
                    "macAddress":${ap.mac},
                    "hostname":"virtual device for test 1",
                    "serialNumber":"1111222233334444",
                    "productType":"AP_330",
                    "softwareVersion": "6.1.0.2",
                    "role":19050,
                    "function":"Ap",
                    "adminState":"UNMANAGED",
                    "isConnected":true
                }
            </restapi>
        </step>
        
		<step name="create.network.policy.1">
            <restapi name="createNetworkPolicy">
                {
                "ownerId" : ${owner.id},
                "name" : "Cloud_automation",
                "type" : "NetworkAccessAndSwitching"
                }
            </restapi>
        </step>
        
        <step name="add.ssid.profile.1.into.network.policy.1">
            <restapi name="assignfeature">
                {
                    "jsonType" : "network_policy",
                    "networkPolicyId" : refIdInTestStep = "create.network.policy.1",
                    "featureId" : refIdInTestStep = "create.ssid.profile.1"
                }
            </restapi>
        </step>
        
        <step name="assign.network.policy.1.to.device.1">
            <restapi name="assignnetworkpolicy">
                {
                    "device" : refObjectInTestStep = "create.device.1.ap330.v6102.as.ap",
                    "networkPolicy" : refObjectInTestStep = "create.network.policy.1"
                }
            </restapi>
        </step>
        
        <step name="download.cli.to.device.1">
            <restapi name="downloadcli">
                {
                    "networkPolicyId" : refIdInTestStep = "create.network.policy.1",
                    "deviceIds" : [ refIdInTestStep = "create.device.1.ap330.v6102.as.ap"],
                    "configDownloadTypes" : [ "deviceFull"]
                }
            </restapi>
        </step>
	</declaration>
	
	<stage>
		
		<step no="0.1">
			<call step="create.devicetemplate.profile" />
			<failed>next</failed>
		</step>	
		
		<step no="1">
			<call step="create.user.profile.1" />
			<failed>next</failed>
		</step>	
		
		<step no="2">
			<call step="create.ssid.profile.1" />
			<failed>next</failed>
		</step>
		
		<step no="3">
			<call step="create.network.policy.1" />
			<failed>next</failed>
		</step>
		
		<step no="4">
			<call step="create.device.1.ap330.v6102.as.ap" />
			<failed>next</failed>
		</step>

		<step no="5">
			<call step="add.ssid.profile.1.into.network.policy.1" />
            <failed>next</failed>
		</step>
		
		<step no="6">
			<call step="assign.network.policy.1.to.device.1" />
            <failed>next</failed>		
		</step>
		
		<step no="7">
			<call step="download.cli.to.device.1" />
            <failed>next</failed>		
		</step>
		
		<step no="8">
			
			
			<ssh target="${tb.fileserver}" user="root">
				-v "cat /var/data/fileserver/configuration/${owner.id}/${ap.mac}-deviceFull.config"
			</ssh>
			<log-file>config_file.log</log-file>
			<desc> Verify the radius client profile can be correctly create, and it can be bind to ssid.</desc>
			<log-match>-i "TBD"</log-match>		
				
		</step>
	</stage>
	<failed-process />
	<post-process />
</testcase>
	
	
