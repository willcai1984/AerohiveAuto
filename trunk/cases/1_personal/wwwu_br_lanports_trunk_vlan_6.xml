<?xml version="1.0" encoding="UTF-8"?>
<testcase>

	<brief>Lan ports work with trunk mode, check the egress packet vlan tag</brief>
	<priority>Accept</priority>
	<automated>yes</automated>>
	<description>
Pre-condition:
	Pc1 connect to switch
	Laptop1 connect to lan port eth4
	AP connect to lan port eth1
	an ports work with trunk mode
Test procedure
	1.	Configure eth1/eth4 as trunk mode
	2.	Configure its allowed-vlan list and native-vlan:  
		native-vlan is 10, allowed-vlan as 20
		CLI:
		interface mgt0 native-vlan 10
		interface eth1 allowed-vlan 10
		interface eth1 allowed-vlan 20
		interface eth4 allowed-vlan 20
	3.	Configure mgt0.1 for vlan 10, mgt0.2 for vlan 20
	4.	Check AP and laptop1 ip address.  [network card of laptop1 support capture vlan-tag]    Result1
	5.	Laptop1 send a packet to AP, the egress packet vlan id is match native-vlan, check packet vlan tag received by AP. 
     (laptop1 send icmp packet to AP using tool)          Result2
	6.	Laptop1 send a packet to AP, the egress packet vlan id is match allowed-vlan list. Check packet vlan tag received by AP.
    (laptop1 send icmp packet to AP using tool)           Result3
Expect result	
	Result1:  AP and laptop1 can get ip address from mgt0.1 dhcp server successfully.
		-----BR100: Failed. Bug15388: AP/Laptop1 can’t get ip address, since the egress packet will be with native-vlan tag
		-----BR200:    pass
	Result2:  capture packet on AP, the packet doesn’t have vlan tag.
		(the vlan tag is stripped when transmitted through eth4)
		Failed. Bug15388: AP/Laptop1 can’t get ip address, since the egress packet will be with native-vlan tag
	Result3:  capture packet on AP, the packet has vlan tag.

	</description>
	
	<numofcvg>0</numofcvg>
	<numofbr>1</numofbr>
	<tbtype>linux</tbtype>

	<stage>
		<step no="pre_1">
			<desc>get prefix of br mgt0.1/mgt0.2 ip address</desc>
			<multi-setvar>
				echo "br1.mgt0.1.prefix=$(echo ${br1.br.mgt0.1.ip} | cut -d. -f1,2,3)"
				echo "br1.mgt0.2.prefix=$(echo ${br1.br.mgt0.2.ip} | cut -d. -f1,2,3)"				
			</multi-setvar>
		</step>
		
		<step no="pre_2">
			<desc>
				set tmp ip address for different mgt0.x dhcp server on BR
			</desc>
			<multi-setvar>
				echo "br1.br.tmp1.ip=$(echo ${br1.br.mgt0.1.ip_pool_end} | cut -d. -f1,2,3).$(expr $(echo ${br1.br.mgt0.1.ip_pool_end} | cut -d. -f4) + 4)"
				echo "br1.br.tmp2.ip=$(echo ${br1.br.mgt0.2.ip_pool_end} | cut -d. -f1,2,3).$(expr $(echo ${br1.br.mgt0.2.ip_pool_end} | cut -d. -f4) + 4)"
			</multi-setvar>
		</step>
		
		<step no="1">
			<desc>1.2.configure eth3/eth4 as trunk mode, and configure native-vlan,allow-vlan</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface eth4 mode	bridge-802.1q"
				-v "interface eth3 mode bridge-802.1q"
				-v "interface mgt0 native-vlan ${br1.vlan1}"
				-v "interface eth4 allowed-vlan ${br1.vlan1}"
				-v "interface eth3 allowed-vlan ${br1.vlan1}"
				-v "interface eth4 allowed-vlan ${br1.vlan2}"
				-v "interface eth3 allowed-vlan ${br1.vlan2}"
			</telnet>
		</step>
		<step no="2">
			<desc>configure mgt0.1 for vlan10, mgt0.2 for vlan 20</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface mgt0.1 vlan ${br1.vlan1}"
				-v "interface mgt0.1 ip ${br1.br.mgt0.1.ip}/${br.lan.netmask}"
				-v "interface mgt0.1 dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface mgt0.1 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.1 dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface mgt0.1 dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface mgt0.1 dhcp-server enable"
				-v ""
				-v ""
				-v ""
				-v "interface mgt0.2 vlan ${br1.vlan2}"
				-v "interface mgt0.2 ip ${br1.br.mgt0.2.ip}/${br.lan.netmask}"
				-v "interface mgt0.2 dhcp-server ip-pool ${br1.br.mgt0.2.ip_pool_start} ${br1.br.mgt0.2.ip_pool_end}"
				-v "interface mgt0.2 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.2 dhcp-server options default-gateway ${br1.br.mgt0.2.ip}"
				-v "interface mgt0.2 dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface mgt0.2 dhcp-server enable"
				-v ""
				-v ""
			</telnet>
		</step>
		
		<step no="3">
			<desc>show lan port config table</desc>
			<log-file>step3_lanport_config.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show lan port-config"
			</telnet>
			<log-match>-p 1 -i "eth1" -p 4 -i "port-based" -p 5 -i "1"</log-match>
			<log-match>-p 1 -i "eth3" -p 4 -i "trunk" -p 5 -i "${br1.vlan1}"</log-match>
			<log-match>-p 1 -i "eth4" -p 4 -i "trunk" -p 5 -i "${br1.vlan1}"</log-match>
			<log-match>-p 1 -i "eth2" -p 4 -i "port-based" -p 5 -i "1"</log-match>			
		</step>
		
		<step no="4">
			<desc>show lan vlan table</desc>
			<log-file>step4_vlan_table.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show interface eth3 mac-learning all"
				-v "show interface eth4 mac-learning all"
				-v "show lan vlan-table"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth1[\t ]+eth2[\t ]+1" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth3[\t ]+eth4[\t ]+${br1.vlan1}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth3[\t ]+eth4[\t ]+${br1.vlan2}" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		<step no="5.1">
			<desc>
				show interface mgt0
			</desc>
			<log-file>show_ap_mgt0_ip.log</log-file>
			<console target="br1.ap1" slow="yes">
				-v " no interface mgt0 dhcp client"
				-v ""
				-v ""
				-v "interface mgt0 dhcp client"
				-v ""
				-v ""
				-v ""
				-v "show interface mgt0"
			</console>
		</step>
		
		<step no="5.2">
			<desc>
				get ip address of interface mgt0
			</desc>
			<setvar name="ap1.mgt0.ip">
				${bin.dir}/getbyrexp.py -p "IP addr=([\d.]+)" -f ${log.dir}/show_ap_mgt0_ip.log -t str
			</setvar>
		</step>
		
		<step no="5.3">
			<desc>get prefix of ap mgt0 ip address</desc>
			<multi-setvar>
				echo "ap1.mgt0.ip.prefix=$(echo ${ap1.mgt0.ip} | cut -d. -f1,2,3)"
			</multi-setvar>
		</step>
		
		<step no="5.4">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>check if ap get ip address from BR mgt0.1 ${br1.vlan1} successfully on BR200</desc>
			<script>
				if [ "${ap1.mgt0.ip.prefix}" == "${br1.mgt0.1.prefix}" ]; then exit 0; else exit 1; fi
			</script>
		</step>
		
		<step no="5.5">
			<if>"${br.platform}" == "br100"</if>
			<desc>
			Bug15388:  ap get ip address from BR mgt0.1 ${br1.vlan1} fail on BR100, becuase trunk port don't stip vlan tag.
			For this case next steps no need to be executed for BR100 platform!	
			</desc>
			<script>
				if [ "${ap1.mgt0.ip.prefix}" != "${br1.mgt0.1.prefix}" ]; then exit 0; else exit 1; fi
			</script>
		</step>
		
		<step no="6.1">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>get ip address of br1.vpc4</desc>
			<log-file>step6.1_vpc4_ip.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name} -r" 
				-v "dhclient ${br1.vpc1.tif.name}"
				-v ""
				-v ""
				-v ""
				-v "ifconfig ${br1.vpc1.tif.name}" 
			</ssh>
		</step>

		 <step no="6.2">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>get raw mac of br1.vpc4</desc>
			<setvar name="br1.vpc4.tif.mac1">
				${bin.dir}/getbyrexp.py -p "HWaddr ([\da-fA-F:]+)" -f ${log.dir}/step6.1_vpc4_ip.log -t str
			</setvar>			
		 </step>		 		
		<step no="6.2">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>get mac of br1.vpc4</desc>
			<setvar name="br1.vpc4.tif.mac">
				echo $(echo $(echo $(echo ${br1.vpc4.tif.mac1} | cut -d : -f1)$(echo ${br1.vpc4.tif.mac1} | cut -d : -f2,3)$(echo ${br1.vpc4.tif.mac1} | cut -d : -f4,5)$(echo ${br1.vpc4.tif.mac1} | cut -d : -f6)) | tr "A-F" "a-f")
			</setvar>			
		</step>			
		
		
		
		<step no="6.4">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>get ip address of br1.vpc4</desc>
			<setvar name="br1.vpc4.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc4.mif.ip} -u ${br1.vpc4.user} -p ${br1.vpc4.passwd} -i ${br1.vpc4.tif.name} -nomask
			</setvar>
		</step>
		
		<step no="6.5">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>get prefix of br1.vpc4 ip address</desc>
			<multi-setvar>
				echo "br1.vpc4.ip.prefix=$(echo ${br1.vpc4.tif.ip} | cut -d. -f1,2,3)"
			</multi-setvar>
		</step>
		
		<step no="6.6">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>check br1.vpc4 get ip address from BR mgt0.1 dhcp server successfully</desc>
			<script>
				if [ "${br1.vpc4.ip.prefix}" == "${br1.mgt0.1.prefix}" ]; then exit 0; else exit 1; fi
			</script>
		</step>

		<step no="7.1">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>config FE debug on AP</desc>
			<log-file>step7.1_fe_debug.log</log-file>
			<console target="br1.ap1" slow="yes">
				-v "_ff id 1 src-mac ${br1.vpc4.tif.mac} etype 0806 bidirectional"
				-v "_ff id 2 dhcp-client ${br1.vpc4.tif.mac}"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_kdebug fe vlan"
				-v "_kdebug eth vlan"
				-v ""
				-v "clear log buffered"
			</console>
		</step>

		<step no="7.2">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>
				5.	Laptop1 send a packet to AP, the egress packet vlan id is match native-vlan, check packet vlan tag received by AP. 
				[we can use method to verifiy this point: laptop1 ping an unexist ip address,ap capture untagged arp pkts] 
			</desc>
			<log-file>step7.2_ping.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${br1.br.tmp1.ip} -c 4"
			</ssh>
		</step>
		
		<step no="7.3">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>show log buffered to check if ap1 can receive the arp request sent by br1.vpc4</desc>
			<log-file>step7.3_log_buff.log</log-file>
			<console target="br1.ap1" slow="yes">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) eth0.+->ffff:ffff:ffff[\t ]+arp[\t ]+${br1.vpc4.tif.ip}.+>[\t ]*${br1.br.tmp1.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="8.1">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>clear log buff</desc>
			<console target="br1.ap1" slow="yes">
				-v "clear log buffered"
			</console>
		</step>
		
		<step no="8.2">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>change eth4 port native-vlan</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface eth4 native-vlan ${br1.vlan2}"
			</telnet>
		</step>
		
		<step no="8.3">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>get ip address of br1.vpc4</desc>
			<log-file>step8.3_vpc4_ip.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name} -r" 
				-v "dhclient ${br1.vpc1.tif.name}"
				-v ""
				-v ""
				-v ""
				-v "ifconfig ${br1.vpc1.tif.name}" 
			</ssh>
		</step>
		
		<step no="8.4">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>get ip address of br1.vpc4</desc>
			<setvar name="br1.vpc4.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc4.mif.ip} -u ${br1.vpc4.user} -p ${br1.vpc4.passwd} -i ${br1.vpc4.tif.name} -nomask
			</setvar>
		</step>
		
		<step no="8.5">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>
				6.	Laptop1 send a packet to AP, the egress packet vlan id is match allowed-vlan list. Check packet vlan tag received by AP.  
				[we can use method to verifiy this point: laptop1 ping an unexist ip address,ap can capture vlan tagged arp pkts] 
			</desc>
			<log-file>step8.5_ping.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${br1.br.tmp2.ip} -c 4"
			</ssh>
		</step>
		
		<step no="8.6">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>show log buffered to check if ap1 can receive the arp request sent by br1.vpc4</desc>
			<log-file>step8.6_log_buff.log</log-file>
			<console target="br1.ap1" slow="yes">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) eth0.+->ffff:ffff:ffff[\t ]+arp[\t ]+${br1.vpc4.tif.ip}.+>[\t ]*${br1.br.tmp2.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="9.1">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>disable BR eth3 allow vlan ${br1.vlan2}</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "no interface eth3 allowed-vlan ${br1.vlan2}"
			</telnet>
		</step>
		
		<step no="9.2">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>clear log buff</desc>
			<console target="br1.ap1" slow="yes">
				-v "clear log buffered"
			</console>
		</step>
		
		<step no="9.3">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>
				vpc4 send arp request pkts
			</desc>
			<log-file>step9.3_ping.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${br1.br.tmp2.ip} -c 4"
			</ssh>
		</step>
		
		<step no="9.4">
			<if>"${br.platform}" == "br200wp"</if>
			<desc>show log buffered to check ap can't receive the arp request sent by br1.vpc4 in vlan ${br1.vlan2}, because ${br1.vlan2} is not allowed</desc>
			<log-file>step9.4_log_buff.log</log-file>
			<console target="br1.ap1" slow="yes">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-n -re -i "\(i\) eth0.+->ffff:ffff:ffff[\t ]+arp[\t ]+${br1.vpc4.tif.ip}.+>[\t ]*${br1.br.tmp2.ip}"</log-match>
		</step>
		
	</stage>
	
</testcase>
	
	
