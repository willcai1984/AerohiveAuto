<testcase>
	<brief>After bind the max number SSIDs to interface wifi0, after losses backhaul connection, verify if access console SSID will be bound to interface wifi1 which with access mode</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-condition:
		Login AP1 via console
		AP1 can obtain ip address from DHCP server
		Create 7(a/b/g box) or 16 (11n box) SSIDs and bind them to interface wifi0
		Change interface wifi1 with access mode
		Set track action enable-access-console and track default-gateway

		Test procedure:
		1. Shutdown interface eth0(11n box, only eth0 connect to switch), or shutdown port which connect to eth0(a/b/g box)
		2. Check track result by show track xxx
		3. Check access console state
		4. Check if access console SSID be bound to interface wifi1by show interface
		5. Use a laptop to connect to access console SSID
		6. Login AP via SSH or telnet from laptop

		Expect result:
		1. Show interface can see eth0 with state “D”
		2. Track result: targets unreachable
		3. Access console with running state
		4. Access console
		SSID be bound to interface wifi1
		5. Laptop can connect to access console SSID and obtain a ip address
		6. Can login AP from laptop
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.proto" value="wpa-aes-psk" />
	<property name="conn1.psk" value="aerohive" />

	<stage>
		

		<step no="1">
			<desc>Set track config for AP1 via console</desc>
			<console target="ap1" timeout="60">
				-v "track ${tb.name} enable "
				-v "track ${tb.name} action enable-access-console"
				-v "track ${tb.name} default-gateway"
				-v "save config"
			</console>
		</step>

		<step no="2" delay="30">
			<desc>Check track result on AP1 via console</desc>
			<console target="ap1" timeout="60">
				-v "show track"
			</console>
			<log-match>-c -i "${tb.name} *Reachable"</log-match>
		</step>

		<step no="3">
			<desc>Create 16 SSID</desc>
			<console target="ap1" timeout="80">
				-v "ssid ${ssid.name}1"
				-v "ssid ${ssid.name}2"
				-v "ssid ${ssid.name}3"
				-v "ssid ${ssid.name}4"
				-v "ssid ${ssid.name}5"
				-v "ssid ${ssid.name}6"
				-v "ssid ${ssid.name}7"
				-v "ssid ${ssid.name}8"
				-v "ssid ${ssid.name}9"
				-v "ssid ${ssid.name}10"
				-v "ssid ${ssid.name}11"
				-v "ssid ${ssid.name}12"
				-v "ssid ${ssid.name}13"
				-v "ssid ${ssid.name}14"
				-v "ssid ${ssid.name}15"
				-v "ssid ${ssid.name}16"
			</console>
		</step>

		<step no="3.1">
			<desc>bind them to interface wifi0</desc>
			<console target="ap1" timeout="80">
				-v "interface wifi0 ssid ${ssid.name}1"
				-v "interface wifi0 ssid ${ssid.name}2"
				-v "interface wifi0 ssid ${ssid.name}3"
				-v "interface wifi0 ssid ${ssid.name}4"
				-v "interface wifi0 ssid ${ssid.name}5"
				-v "interface wifi0 ssid ${ssid.name}6"
				-v "interface wifi0 ssid ${ssid.name}7"
				-v "interface wifi0 ssid ${ssid.name}8"
				-v "interface wifi0 ssid ${ssid.name}9"
				-v "interface wifi0 ssid ${ssid.name}10"
				-v "interface wifi0 ssid ${ssid.name}11"
				-v "interface wifi0 ssid ${ssid.name}12"
				-v "interface wifi0 ssid ${ssid.name}13"
				-v "interface wifi0 ssid ${ssid.name}14"
				-v "interface wifi0 ssid ${ssid.name}15"
				-v "interface wifi0 ssid ${ssid.name}16"
			</console>
		</step>

		<step no="4">
			<desc>Set interface wifi1 to access mode by CLI on AP1 via console</desc>
			<console target="ap1" timeout="80">
				-v "interface wifi1 mode access"
				-v "interface wifi1 radio channel 44"
			</console>
		</step>

		<step no="5">
			<desc>Shutdown interface eth0 and eth1 by CLI on AP1 via console</desc>
			<console target="ap1" timeout="80">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="5.2">
			<desc>Shutdown interface eth1</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1" timeout="60">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="6" delay="60">
			<desc>Check track result by CLI via console on AP1</desc>
			<console target="ap1" timeout="60">
				-v "show track "
			</console>
			<log-match>-c -i "${tb.name} *Unreachable"</log-match>
		</step>

		<step no="7" delay="30">
			<desc>Check access console state of AP1</desc>
			<log-file>step7_show_acc_console.log</log-file>
			<console target="ap1" timeout="60">
				-v "show access-console _"
			</console>
			<log-match>-c -i "Current state: *running"</log-match>
		</step>

		<step no="8">
			<desc>Get access console SSID</desc>
			<setvar name="conn1.ssid">
				cat ${log.dir}/step7_show_acc_console.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<step no="9" delay="5">
			<desc>Show interface wifi1.1 of AP1</desc>
			<log-file>show_interface_wifi1.1.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface"
				-v "show interface wifi1.1"
			</console>
			<log-match>-c -i "SSID=\\\&quot;${conn1.ssid}\\\&quot;"</log-match>
		</step>

		<include prefix="10" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="11">
			<desc>Telnet to AP1 from the laptop1</desc>
			<log-file>sta_telnet_ap.log</log-file>
			<ssh target="sta1" prompt=".*#" timeout="150">
				-v "rm -f /tmp/${job.id}.log"
				-v "rm -rf /root/.ssh/known_hosts"
				-v 'echo "nohup clicfg.pl -i 23 -o 600 -d ${ap1.mgt0.ip} -u ${ap.def.user} -p ${ap.def.passwd} -m \"${ap.def.prompt}\" -n -z ${job.id}.log -l /tmp/ -v \"show admin active\" &gt; null &amp;" > /tmp/tmp.sh'
				-v "sh /tmp/tmp.sh"
				-v ""
				-v ""
				-v ""
				-v "sleep 60"
				-v "tail /tmp/${job.id}.log"
				-v "rm -f /tmp/${job.id}.log"
			</ssh>
			<log-match>-c -i "${ap.def.user} *pts/0"</log-match>
			<no-error-check />
		</step>
	</stage>

	<post-process>
		<stage>

			<step no="0">
				<desc>delete local files</desc>
				<ssh target="sta1" prompt=".*#" timeout="150">
					-v "rm -f /tmp/${job.id}.log"
				</ssh>
			</step>

		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>