<testcase>
	<brief>The sixth test case of Access Console</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<description>

		Description: Reset config to bootstrap config, and AP can not obtain ip address from DHCP server, verify if access console be enabled
		Pre-condition
		Login AP via console
		Exist bootstrap config on AP(no static ip address be configured)
		DHCP server is disabled
		Test procedure
		1.Reset config to bootstrap config, check if can obtain ip address
		2.Check if access console be enabled by show access-console _ and show interface
		3.Use a laptop to connect to access console SSID, verify if can obtain ip address
		4.If can obtain ip address, login AP via telnet or SSH
		Expect result
		1.Could not obtain ip address
		2.Access console be enabled and with running state, access console SSID be bound to interface wifi0
		3.Can obtain ip address
		4.Can login AP successful
		TOPO:
		AP1------SW------DHCP server
		|
		AP2

	</description>
	
	<stage>
		<if>"${ap1.eth1.existed}" == "true"</if>

		<include prefix="modify.eth1.vlan" file="subs/l2swcfg_port_vlan.xml" args="${ap1.eth1.swport}, ${tb.vlan7}, ${tb.vlan7}" />

	</stage>
	
	<stage>

	 	<include prefix="modify.eth0.vlan" file="subs/l2swcfg_port_vlan.xml" args="${ap1.eth0.swport}, ${tb.vlan7}, ${tb.vlan7}" />

		<step no="1">
			<desc>Set config and save to bootstrap on AP1</desc>
			<console target="ap1">
				-v "ssid ${ssid.name}"
				-v "save config running bootstrap"
			</console>
		</step>
		<step no="1.1">
			<if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>Set config and save to bootstrap on AP1</desc>
			<console target="ap1">
				-v "interface wifi1 mode access"
				-v "save config running bootstrap"
			</console>
		</step>
		<step no="2">
			<desc>Reset config to bootstrap of AP1</desc>
			<console target="ap1">
				-v "reset config"
			</console>
		</step>

		<step no="3">
			<desc>Check running config on AP1</desc>
			<log-file>running_config.log</log-file>
			<console target="ap1">
				-v "show running-config"
			</console>
			<log-match>-e "ssid ${ssid.name}" -c</log-match>
		</step>
		<step no="3.1">
			<if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>Check running config on AP1</desc>
			<console target="ap1">
				-v "show running-config"
			</console>
			<log-file>running_config_1.log</log-file>
			<log-match>-e "interface wifi1 mode access" -c</log-match>
		</step>

		<step no="4">
			<desc>Show interface mgt0 dhcp client to check AP1 could not obtain ip address</desc>
			<log-file>ap1_dhcp_client.log</log-file>
			<console target="ap1" timeout="60">
				-v "interface mgt0 dhcp client"
				-v "show interface mgt0 dhcp client"
			</console>
			<log-match>-i "Get IP address 0.0.0.0" -i "server 0.0.0.0" -c</log-match>
		</step>

		<step no="5">
			<desc>Check access console should be in running state on AP1</desc>
			<log-file>ac_state.log</log-file>
			<console target="ap1">
				-v "show access-console _"
			</console>
			<log-match>-i "Current state" -i "running" -c</log-match>
		</step>

		<step no="6">
			<desc>Get access console SSID of AP1</desc>
			<setvar name="ap1.ac.ssid">
				cat ${log.dir}/ac_state.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<step no="7">
			<desc>Show interface wifi0.1 to check access console SSID be bound to interface wifi0.1</desc>
			<log-file>ap1_wifi0.1.log</log-file>
			<console target="ap1">
				-v "show interface wifi0.1"
			</console>
			<log-match>-i "SSID=" -i "${ap1.ac.ssid}" -c</log-match>
		</step>
		
 	  <step no="7.1">
			<desc>Get SSID</desc>
			<setvar name="conn1.ssid">
				echo "${ap1.ac.ssid}"
			</setvar>
		</step>
		
		<property name="conn1.proto" value="wpa-aes-psk" />
		<property name="conn1.psk" value="aerohive" />
    <include prefix="8" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap1" />
    
		<step no="9.1">
			<desc>show interface mgt0 info</desc>
			<log-file>step9.1_show_int_m0.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>
		<step no="9.2">
			<desc>Get ap1's mgt0 ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step9.1_show_int_m0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<include prefix="10" file="subs/sta_ping.xml" args="sta1, ${ap1.mgt0.ip}, 4" />

		<step no="11">
			<desc>SSH to AP1 from laptop1</desc>
			<ssh target="sta1" timeout="300" prompt="root@.*~.*#" slow="true">
				-v 'rm -rf /root/.ssh/known_hosts'
				-v 'echo "clicfg.pl -i 22 -o 60 -d ${ap1.mgt0.ip} -u ${ap.def.user} -p ${ap.def.passwd} -m \"AH.*#\" -n -z step11_ssh_ap1.log -l /tmp/ -v \"show admin active\"" > /tmp/tmp.sh'
				-v 'sh /tmp/tmp.sh'
				-v 'sleep 20'
				-v ''
			</ssh>
			<no-error-check />
		</step>

		<step no="12">
			<desc>check station has login AP</desc>
			<ssh target="sta1" timeout="10">
				-v "cat /tmp/step11_ssh_ap1.log"
			</ssh>
			<log-match>-i "admin" -i "pts" -i "${sta1.tif.ip}" -c</log-match>
		</step>
	</stage>

	<post-process>
	  <stage>
		  <if>"${ap1.eth1.existed}" == "true"</if>
	  	<include prefix="recover.eth1.vlan" file="subs/l2swcfg_port_vlan.xml" args="${ap1.eth1.swport}, ${tb.nvlan}, ${tb.vlans}" />
	  </stage>	
	  
	  <stage>
	  	<include prefix="recover.eth0.vlan" file="subs/l2swcfg_port_vlan.xml" args="${ap1.eth0.swport}, ${tb.nvlan}, ${tb.vlans}" />
	  </stage>	
	  
		<stage>
			<step no="a">
				<desc>Reset config bootstrap of AP1</desc>
				<console target="ap1" timeout="120">
					-v "reset config bootstrap"
				  -v "reset config"
				</console>
			</step>

			<step no="b">
				<desc>Remove file in station</desc>
				<ssh target="sta1" timeout="10">
					-v "rm -f /tmp/step11_ssh_ap1.log"
					-v "rm -f /tmp/step11_ssh_ap1.log.bak"
					-v "rm -f /tmp/tmp.sh"
				</ssh>
			</step>

		</stage>
		<include prefix="def_post" file="include/default_post_process.xml" />
	</post-process>
</testcase>
