<testcase>
	<brief>Disable telnet on access console SSID, check if can telnet AP via access console after AP losses connections to backhaul network (default super user)</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-condition:
		Login AP1 via console
		AP1 can obtain ip address from DHCP server

		Test procedure:
		1. Set access console with auto mode in AP1(default access console is auto mode)
		2. Disable telnet on access console SSID in AP1
		3. Set track action enable-access-console and set track default-gateway in AP1
		4. Set wifi1 to access mode and shutdown interface eth0 and eth1 in AP1
		5. Check track result by show track xxx
		6. Check access console state by show access console _
		7. Use a laptop to connect to access console SSID
		8. Login AP via telnet from laptop

		Expect result:
		1. Show access console display mode: auto
		2. Show access console display telnet disabled
		3. Show running-config can see these two commands:
		tack xxx action enable-access-console
		tack xxx default-gateway
		4. Show interface can see wifi1
		with state “D” or with access mode
		5. Track result: targets unreachable
		6. Access console with running state
		7. Laptop can connect to access console SSID, and obtain a internal ip address
		8. Can not
		login AP via telnet
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.pif" value="wifi0" />
	<property name="conn1.proto" value="wpa-aes-psk" />
	<property name="conn1.psk" value="aerohive" />

	<stage>
		<step no="1">
			<desc>Set access console with auto mode in AP1</desc>
			<ssh target="ap1">
				-v "access-console mode auto"
			</ssh>
		</step>

		<step no="1.1">
			<desc>Show access console display mode</desc>
			<log-file>step1.1_show_access_console.log</log-file>
			<telnet target="ap1">
				-v "show access-console"
			</telnet>
			<log-match>-i "Mode" -i "auto" -c</log-match>
		</step>

		<step no="2">
			<desc>Disable telnet of access console</desc>
			<telnet target="ap1" timeout="60">
				-v "no access-console telnet"
			</telnet>
		</step>

		<step no="2.1" delay="10">
			<desc>Check telnet state of access console</desc>
			<log-file>step2.1_show_access_console.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show access-console"
			</telnet>
			<log-match>-c -i "Telnet: *Disabled"</log-match>
		</step>

		<step no="3">
			<desc>Set track config for AP1 via console</desc>
			<telnet target="ap1" timeout="60">
				-v "track ${tb.name} enable "
				-v "track ${tb.name} action enable-access-console"
				-v "track ${tb.name} default-gateway"
			</telnet>
		</step>

		<step no="3.1" delay="30">
			<desc>Check track result on AP1 via console</desc>
			<log-file>step3.1_show_track.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show track"
			</telnet>
			<log-match>-c -i "${tb.name} *Reachable"</log-match>
		</step>

		<step no="3.2">
			<desc>Show running-config</desc>
			<log-file>step3.2_show_running_config.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show running"
			</telnet>
			<log-match>-c -i "track ${tb.name} default-gateway"</log-match>
			<log-match>-c -i "track ${tb.name} action enable-access-console"</log-match>
		</step>

		<step no="4">
			<desc>Set interface wifi1 to access mode by CLI on AP1 via console</desc>
			<if>"${ap1.wifi1.existed}" =="true"</if>
			<telnet target="ap1" timeout="80">
				-v "interface wifi1 mode access"
			</telnet>
		</step>

		<step no="4.1">
			<desc>Show interface</desc>
			<if>"${ap1.wifi1.existed}" =="true"</if>
			<log-file>step4.1_show_interface.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show interface"
			</telnet>
			<log-match>-c -i "wifi1" -i "access"</log-match>
		</step>

		<step no="4.2">
			<desc>Shutdown interface eth0 and eth1 by CLI on AP1 via console</desc>
			<console target="ap1" timeout="80">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="4.3">
			<desc>Shutdown interface eth1</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1" timeout="60">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="5" delay="30">
			<desc>Check track result by CLI via console on AP1</desc>
			<log-file>step5_show_track.log</log-file>
			<console target="ap1" timeout="60">
				-v "show track"
			</console>
			<log-match>-c -i "${tb.name} *Unreachable"</log-match>
		</step>

		<step no="6" delay="30">
			<desc>Check access console state of AP1</desc>
			<log-file>step6_show_acc_console.log</log-file>
			<console target="ap1" timeout="60">
				-v "show access-console _"
			</console>
			<log-match>-c -i "Current state: *running"</log-match>
		</step>

		<step no="7">
			<desc>Get access console SSID</desc>
			<setvar name="conn1.ssid">
				cat ${log.dir}/step6_show_acc_console.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<step no="8" delay="5">
			<desc>Show interface wifi0.1 of AP1</desc>
			<log-file>step8_show_interface_wifi0.1.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface wifi0.1"
			</console>
			<log-match>-c -i "SSID=\\\&quot;${conn1.ssid}\\\&quot;"</log-match>
		</step>

		<step no="9" delay="5">
			<desc>Show interface wifi1.1 of AP1</desc>
			<if>"${ap1.wifi1.existed}" =="true"</if>
			<log-file>step9_show_interface_wifi1.1.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface wifi1.1"
			</console>
			<log-match>-c -i "SSID=\\\&quot;${conn1.ssid}\\\&quot;"</log-match>
		</step>

		<include prefix="10" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="11">
			<desc>Set filter and open debug on AP1</desc>
			<console target="ap1" timeout="60">
				-v "_ff id 1 dst-port 23 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log all"
			</console>
		</step>

		<step no="12">
			<desc>ssh to AP1 from the laptop1</desc>
			<log-file>step12_sta_telnet_ap.log</log-file>
			<ssh target="sta1" prompt=".*\]#" timeout="500">
				-v "rm -rf /root/.ssh/known_hosts"
				-v 'echo "nohup clicfg.pl -i 23 -o 600 -d ${ap1.mgt0.ip} -u ${ap.def.user} -p ${ap.def.passwd} -m \"${ap.def.prompt}\" -n -z ${job.id}.log -l /tmp/ -v \"show admin active\" &gt; null &amp;" > /tmp/tmp.sh'
				-v "sh /tmp/tmp.sh"
				-v ""
				-v ""
				-v ""
				-v "sleep 60"
				-v "tail /tmp/${job.id}.log"
				-v "rm -f /tmp/${job.id}.log"
			</ssh>
			<log-match>-n -c -i "${ap.def.user} *pts/0"</log-match>
			<no-error-check />
		</step>

		<step no="13">
			<desc>Show logging buffered on AP1</desc>
			<log-file>step13_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="120">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchblocks.py">-b "telnet not enabled on wifi\d.1, drop pkt" -ps p "set pkt to self" -e "\(i\) wifi\d.1 ${sta1.tif.ip}-&gt;${ap1.mgt0.ip}\(\d+\) ttl\(\d+\) TCP \d+-&gt;23" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>