<testcase>
	<brief>Check if log all access console enable/disable events and clients connect/ disconnect events</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>

		TOPO:
		AP1------SW------DHCP server

		Description:
		Check if log all access console enable/disable events and clients connect/ disconnect events
		Pre-condition:
		Login AP1 via console
		AP1 can obtain ip address from DHCP server

		Test procedure:
		1. Set access console with auto mode in AP1
		2. Set track action enable-access-console and set track default-gateway in AP1
		3. Set interface wifi1 to access mode and shutdown interface eth0 and eth1
		4. Check track result by show track xxx
		5. Check access console state by show access console _
		6. Use laptop to connect to access console SSID
		7. Disconnect to access console SSID
		8. Check log buffered



		Expect result:
		1. Show access console display mode: auto
		2. Show running-config can see these two commands:
		track xxx action enable-access-console
		track xxx default-gateway
		3. Show interface can see wifi1 with access mode
		4. Track result: targets unreachable
		5. Access console with running state
		6. Laptop connect to access console SSID and obtain a ip address
		7. Laptop
		disconnect to access console SSID
		8. Log buffered log access console start/stop event and client connect/disconnect event
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>winlin</tbtype>

	<property name="conn1.proto" value="wpa-aes-psk" />
	<property name="conn1.psk" value="aerohive" />

	<stage>
		

		<step no="0">
			<desc>Set filter and open debug on AP1</desc>
			<console target="ap1" timeout="60">
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log all"
			</console>
		</step>

		<step no="1">
			<desc>Set access console with auto mode in AP1</desc>
			<telnet target="ap1">
				-v "access-console mode auto"
			</telnet>
		</step>

		<step no="1.1">
			<desc>Show access console display mode</desc>
			<log-file>step1.1_show_access_console.log</log-file>
			<telnet target="ap1">
				-v "show access-console"
			</telnet>
			<log-match>-i "Mode" -i "auto" -c</log-match>
		</step>

		<step no="2">
			<desc>Set track config for AP1 via console</desc>
			<telnet target="ap1" timeout="60">
				-v "track ${tb.name} enable "
				-v "track ${tb.name} action enable-access-console"
				-v "track ${tb.name} default-gateway"
			</telnet>
		</step>

		<step no="3" delay="10">
			<desc>Check track result on AP1 via console</desc>
			<log-file>step3.1_show_track.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show track"
			</telnet>
			<log-match>-c -i "${tb.name} *Reachable"</log-match>
		</step>

		<step no="3.2">
			<desc>Show running-config</desc>
			<log-file>step3.2_show_running_config.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show running"
			</telnet>
			<log-match>-c -i "track ${tb.name} default-gateway"</log-match>
			<log-match>-c -i "track ${tb.name} action enable-access-console"</log-match>
		</step>

		<step no="4">
		  <if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>Set interface wifi1 to access mode by CLI on AP1 via console</desc>
			<telnet target="ap1" timeout="80">
				-v "interface wifi1 mode access"
			</telnet>
		</step>

		<step no="4.1">
		  <if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>Show interface</desc>
			<log-file>step4.1_show_interface.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show interface"
			</telnet>
			<log-match>-c -i "wifi1" -i "access"</log-match>
		</step>

		<step no="4.2">
			<desc>Shutdown interface eth0 and eth1 by CLI on AP1 via console</desc>
			<console target="ap1" timeout="80">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="4.3">
			<desc>Shutdown interface eth1</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1" timeout="60">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="5" delay="30">
			<desc>Check track result by CLI via console on AP1</desc>
			<log-file>step5_show_track.log</log-file>
			<console target="ap1" timeout="60">
				-v "show track"
			</console>
			<log-match>-c -i "${tb.name} *Unreachable"</log-match>
		</step>

		<step no="6" delay="30">
			<desc>Check access console state of AP1</desc>
			<log-file>step6_show_acc_console.log</log-file>
			<console target="ap1" timeout="60">
				-v "show access-console _"
			</console>
			<log-match>-c -i "Current state: *running"</log-match>
		</step>

		<step no="7">
			<desc>Get access console SSID</desc>
			<setvar name="conn1.ssid">
				cat ${log.dir}/step6_show_acc_console.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<step no="8" delay="5">
			<desc>Show interface wifi0.1 of AP1</desc>
			<log-file>show_interface_wifi0.1.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface wifi0.1"
			</console>
			<log-match>-c -i "SSID=\\\&quot;${conn1.ssid}\\\&quot;"</log-match>
		</step>

    <step no="9" delay="5">
      <if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>Show interface wifi1.1 of AP1</desc>
			<log-file>show_interface_wifi1.1.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface wifi1.1"
			</console>
			<log-match>-c -i "SSID=\\\&quot;${conn1.ssid}\\\&quot;"</log-match>
		</step>


		
		<property name="conn1.proto" value="wpa-aes-psk" />
		<property name="conn1.psk" value="aerohive" />
		<include prefix="10" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap1" />
		
	

		<include prefix="11" file="subs/release_station_wifi.xml" obj-args="sta1" />
		

		<step no="12" delay="800">
			<desc>Show logging buffered on AP1</desc>
			<log-file>show_logging_buffered.log</log-file>
			<console target="ap1" timeout="1000">
				-v "show logging buffered"
			</console>
			<log-match>-c -i "get track-ip trigger access console request: start"</log-match>
			<log-match>-c -i "sta ${sta1.tif.mac} is disassociated from" -i "in driver"</log-match>
			<log-match>-c -i "fe station \[${sta1.tif.mac}\] disconnected (roamed away) from self"</log-match>
			<log-match>-c -i "Station ${sta1.tif.mac} is authenticated to" -i "thru SSID ${conn1.ssid}"</log-match>
			<log-match>-c -i "receive event &lt;STA join&gt;: ${sta1.tif.mac}" -i "associate wifi" -i "upid 0 vlan 1 flag"</log-match>
			<log-match>-c -i "receive event STA leave: ${sta1.tif.mac} de-associate wifi" -i "upid 0 vlan 1 flag"</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>