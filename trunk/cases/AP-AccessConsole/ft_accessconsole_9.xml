<testcase>
	<brief>Check if can telnet AP via access console by default after AP losses connections to backhaul network(default super user)</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<description>

		TOPO:
		AP1------SW------DHCP server

		Description:
		Check if can telnet AP via access console by default after AP losses connections to backhaul network(default super user)
		Pre-condition:
		Login AP1 via console
		AP1 can obtain ip address from DHCP server

		Test procedure:
		1. Set access console with auto mode in AP1(default access console is auto mode)
		2. Set track action enable-access-console and set track default-gateway in AP1
		3. Set wifi1 to access mode and shutdown interface eth0 and eth1 in AP1
		4. Check track result by show track xxx
		5. Check access console state by show access console _
		6. Use a laptop to connect to access console SSID
		7. Login AP via SSH from laptop
		8. telnet AP from laptop

		Expect result:
		1. show access console display mode: auto
		2. show running-config can see these two commands:
		track xxx action enable-access-console
		track xxx default-gateway
		3. Show interface can see wifi1 state “D” or with access mode
		4. Track result: targets unreachable
		5. Access console with running state
		6. Laptop can connect to access console SSID, and obtain a internal ip address
		7. Can login AP via SSH
		8. Could login AP via telnet


	</description>

	<stage>

		<step no="1">
			<desc>Set track config to AP1</desc>
			<ssh target="ap1" timeout="60">
				-v "track ${tb.name} enable "
				-v "track ${tb.name} action enable-access-console"
				-v "track ${tb.name} default-gateway"
				-v "save config"
			</ssh>
		</step>

		<step no="2" delay="30">
			<desc>Check track result should be reachable in AP1 </desc>
			<log-file>step2_ap1_track.log</log-file>
			<ssh target="ap1" timeout="60">
				-v "show track "
			</ssh>
			<log-match>-n -e "Unreachable" -c</log-match>
		</step>

		<step no="3">
	  	<if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>Set interface wifi1 to access mode by CLI in AP1 </desc>
			<ssh target="ap1" timeout="80">
				-v "interface wifi1 mode access"
				-v "save config"
			</ssh>
		</step>

		<step no="4.1">
			<desc>Shutdown interface eth0 by CLI on AP1 via console</desc>
			<console target="ap1" timeout="80">
				-v "interface eth0 shutdown"
				-v "save config"
			</console>
		</step>

		<step no="4.2">
			<desc>Shutdown interface eth1 of AP1</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
				-v "save config"
			</console>
		</step>

		<step no="5" delay="60">
			<desc>Check track result should be unreachable or invalid via console on AP1</desc>
			<log-file>step5_ap1_track.log</log-file>
			<console target="ap1" timeout="60">
				-v "show track "
			</console>
			<log-match>-e "Unreachable" -e "Invalid" -c</log-match>
		</step>

		<step no="6" delay="30">
			<desc>Check access console should be in running status of AP1</desc>
			<log-file>step6_ap1_ac_state.log</log-file>
			<console target="ap1" timeout="60">
				-v "show access-console _"
			</console>
			<log-match>-i "Current state" -i "running" -c</log-match>
		</step>

		<step no="7">
			<desc>Get access console SSID</desc>
			<setvar name="ap1.ac.ssid">
				cat ${log.dir}/step6_ap1_ac_state.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<step no="8">
			<desc>Show interface wifi0.1 of AP1</desc>
			<log-file>step8_ap1_wifi0.1_state.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface wifi0.1"
			</console>
			<log-match>-e "${ap1.ac.ssid}" -c</log-match>
		</step>

		<step no="9">
		  <if>"${ap1.wifi1.existed}" =="true"</if>
			<desc>Show interface wifi1.1 of AP1</desc>
			<log-file>step9_ap1_wifi1.1._state.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface wifi1.1"
			</console>
			<log-match>-e "${ap1.ac.ssid}" -c</log-match>
		</step>

		<step no="10">
			<desc>Get access console SSID</desc>
			<setvar name="sta1.ssid">
				cat ${log.dir}/step6_ap1_ac_state.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<property name="sta1.proto" value="wpa-aes-psk" />
		<property name="sta1.psk" value="aerohive" />
		<include prefix="10.1" file="subs/sta_connect_${tb.os}.xml" obj-args="sta1" />

		<step no="10.2">
			<desc>Show laptop1's dhcp info</desc>
			<log-file>sta1.dhcp.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "cat /var/lib/dhclient/dhclient.leases"
			</ssh>
		</step>

		<step no="10.3">
			<desc>Get access interface's IP</desc>
			<setvar name="vap1.ip">
				awk '/option dhcp-server-identifier/ {print $3}' ${log.dir}/sta1.dhcp.log | tail -n1 | sed 's/;//'
			</setvar>
		</step>

		<step no="11">
			<desc>Check traffic between client and VAP</desc>
			<log-file>ping_vap1.log</log-file>
			<ssh target="sta1">
				-v "ping ${vap1.ip} -c 4"
			</ssh>
			<log-match>-e "0%.*loss" -c</log-match>
		</step>

		<step no="12" delay="30">
			<desc>telnet AP1 from laptop1</desc>
			<ssh target="sta1" timeout="900" prompt="root@.*~.*#" slow="true">
				-v 'echo "clicfg.pl -i 23 -o 600 -d ${vap1.ip} -u ${ap.def.user} -p ${ap.def.passwd} -m \"AH.*#\" -n -z step12_ssh_vap1.log -l /tmp/ -v \"show admin active\"" > /tmp/tmp.sh'
				-v 'sh /tmp/tmp.sh'
				-v 'sleep 20'
				-v ''
			</ssh>
			<no-error-check />
		</step>

		<step no="13" delay="30">
			<desc>Cat file</desc>
			<log-file>step13_ssh_ap1.log</log-file>
			<ssh target="sta1">
				-v "cat /tmp/step12_ssh_vap1.log"
			</ssh>
			<log-match>-i "admin" -i "pts" -c</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<step no="14">
				<desc>Remove file in station</desc>
				<ssh target="sta1">
					-v "rm -f /tmp/step12_ssh_vap1.log"
					-v "rm -f /tmp/step12_ssh_vap1.log.bak"
					-v "rm -f /tmp/step13_ssh_ap1.log"
					-v "rm -f /tmp/tmp.sh"
				</ssh>
			</step>
		</stage>

		<include prefix="def_post" file="include/default_post_process.xml" />
	</post-process>

</testcase>
