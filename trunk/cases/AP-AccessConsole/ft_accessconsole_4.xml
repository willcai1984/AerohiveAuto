<testcase>
	<brief>The fourth test case of Access Console</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<description>

		Description: Ethernet backhaul is not connected, wireless backhaul is lost (MP), check if we can login AP via ssh by associate default access console SSID(default super user)
		Pre-condition
		Login AP1 and AP2 via console
		AP1 and AP2 obtain ip address from DHCP server
		Test procedure
		1.Set access console with auto mode in AP2(default access console is auto mode)
		2.Set track action enable-access-console and set track default-gateway in AP2
		3.Check track result in AP2
		4.Shutdown interface wifi1 or change interface wifi1 with access mode in AP2, or shutdown interface wifi1 of AP1(when do automation)
		5.Check track result by show track xxx
		6.Check access console state by show access console _
		7.Check if access console SSID be bound to interface by show interface
		8.Use a laptop to connect to access console SSID
		9.Login AP via SSH from laptop
		Expect result
		1.Show access console mode display: auto
		2.Show running-config should display these two commands:
		track xxx action enable-access-console
		track
		xxx default-gateway
		3.Show
		track xxx display targets reachable
		4.Show interface can see wifi1 with access mode or with state “D”
		5.Track result: targets unreachable
		6.Access console with running state
		7.Access console SSID be bound to interface
		8.Laptop can connect to access console SSID and obtain a internal ip address
		9.Can login AP via SSH from laptop
		TOPO:
		AP1------SW------DHCP server
		|
		AP2

	</description>
	<stage>
		<step no="1">
			<desc>Remove the current ~/.ssh/known_hosts of Master PC to avoid the denial access to the APs</desc>
			<script>
				rm -f ~/.ssh/known_hosts
			</script>
		</step>

		<step no="2">
			<desc>Set config for AP1</desc>
			<ssh target="ap1">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "no interface wifi1 mode"
				-v "interface wifi1 radio channel 36"
				-v "save config"
			</ssh>
		</step>

		<step no="3">
			<desc>Show interface wifi1.1 of AP1</desc>
			<log-file>show_ap1_wifi1.1.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi1.1"
			</ssh>
		</step>

		<step no="4">
			<desc>Get_mac of wifi1.1 on AP1</desc>
			<setvar name="ap1.wifi1.mac">
				perl ${bin.dir}/getrmtip.pl -l ${log.dir} -f ${log.dir}/show_ap1_wifi1.1.log -i wifi1.1 -o aero -m -width 2
			</setvar>
		</step>

		<step no="5.1">
			<desc>Set config for AP2</desc>
			<console target="ap2">
				-v "interface eth0 shutdown"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "no interface wifi1 mode"
				-v "track ${tb.name} action enable-access-console"
				-v "track ${tb.name} default-gateway"
				-v "save config"
			</console>
		</step>

		<step no="5.2">
			<desc>Shutdown eth1 of AP2</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap2">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="5.3">
			<desc>Set channel to wifi1 of AP2</desc>
			<console target="ap2">
				-v "interface wifi1 radio channel 36"
			</console>
		</step>

		<step no="6" delay="120">
			<desc>Check AP1 is AP2's backhaul neighbor</desc>
			<log-file>show_amrp_neighbor.log</log-file>
			<console target="ap2">
				-v "show amrp neighbor"
			</console>
			<log-match>-i "${ap1.wifi1.mac}" -e "TWO-WAY" -c</log-match>
		</step>

		<step no="7">
			<desc>Set interface wifi1 to access mode of AP1</desc>
			<console target="ap1">
				-v "interface wifi1 mode access"
				-v "save config"
			</console>
		</step>

		<step no="8" delay="60">
			<desc>Check track result should be unreachable in AP2</desc>
			<log-file>show_track2.log</log-file>
			<console target="ap2">
				-v "show track "
			</console>
			<log-match>-i "${tb.name}" -e "Unreachable" -c</log-match>
		</step>

		<step no="9">
			<desc>Check access console should be in running state in AP2</desc>
			<log-file>show_ac.log</log-file>
			<console target="ap2">
				-v "show access-console _"
			</console>
			<log-match>-i "Current state" -e "running" -c</log-match>
		</step>

		<step no="10">
			<desc>Get access console SSID on AP2</desc>
			<setvar name="ac.ssid">
				cat ${log.dir}/show_ac.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<step no="11" delay="5">
			<desc>Show interface wifi0.1 to check access console SSID be bound to interface wifi0.1 in AP2</desc>
			<log-file>show_interface_wifi0.1.log</log-file>
			<console target="ap2">
				-v "show interface wifi0.1"
			</console>
			<log-match>-i "SSID=" -e "${ac.ssid}" -c</log-match>
		</step>

		<step no="12">
			<desc>Get access console SSID</desc>
			<setvar name="conn1.ssid">
				cat ${log.dir}/show_ac.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>


		<property name="conn1.proto" value="wpa-aes-psk" />
		<property name="conn1.psk" value="aerohive" />
		<include prefix="13" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn1, sta1, ap2" />

		<step no="13.1">
			<desc>Show laptop1's dhcp info</desc>
			<log-file>sta1.dhcp.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "cat /var/lib/dhclient/dhclient.leases"
			</ssh>
		</step>

		<step no="13.2">
			<desc>Get access interface's IP</desc>
			<setvar name="vap.ip">
				awk '/option dhcp-server-identifier/ {print $3}' ${log.dir}/sta1.dhcp.log | tail -n1 | sed 's/;//'
			</setvar>
		</step>

		<step no="14">
			<desc>Check traffic between client and VAP</desc>
			<log-file>ping_vap.log</log-file>
			<ssh target="sta1">
				-v "ping ${vap.ip} -c 4"
			</ssh>
			<log-match>-i "from ${vap.ip}" -i "ttl=" -c</log-match>
		</step>

		<step no="15" delay="30">
			<desc>SSH to AP1 from laptop1</desc>
			<ssh target="sta1" timeout="900" prompt="root@.*~.*#" slow="true">
				-v 'rm -rf /root/.ssh/known_hosts'
				-v 'echo "clicfg.pl -i 22 -o 600 -d ${vap.ip} -u ${ap.def.user} -p ${ap.def.passwd} -m \"AH.*#\" -n -z step15_ssh_ap1.log -l /tmp/ -v \"show admin active\"" > /tmp/tmp.sh'
				-v 'sh /tmp/tmp.sh'
				-v 'sleep 20'
				-v ''
			</ssh>
			<no-error-check />
		</step>

		<step no="16">
			<desc>Cat file</desc>
			<log-file>step16_ssh_ap1.log</log-file>
			<ssh target="sta1">
				-v "cat /tmp/step15_ssh_ap1.log"
			</ssh>
			<log-match>-i "admin" -i "pts" -c</log-match>
		</step>

	</stage>

	<post-process>
		<stage>
			<step no="17">
				<desc>Remove file in station</desc>
				<ssh target="sta1">
					-v "rm -f /tmp/step15_ssh_ap1.log"
					-v "rm -f /tmp/step15_ssh_ap1.log.bak"
					-v "rm -f /tmp/step16_ssh_ap1.log"
					-v "rm -f /tmp/tmp.sh"
				</ssh>
			</step>
		</stage>

		<include prefix="def_post" file="include/default_post_process.xml" />
	</post-process>
</testcase>
