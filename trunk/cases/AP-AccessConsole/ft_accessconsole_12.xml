<testcase>
	<brief>Check default client number that can connect to access console SSID</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-condition:
		Login AP1 via console
		AP1 can obtain ip address from DHCP server

		Test procedure:
		1. Check default client number by show access console in AP1
		2. Set access console with auto mode in AP1(default access console is auto mode)
		3. Set track action enable-access-console and set track default-gateway in AP1
		4. Set wifi1 to access mode and shutdown interface eth0 and eth1 in AP1
		5. Check track result by show track xxx
		6. Check access console state by show access console _
		7. Use more laptops to connect to access console SSID

		Expect result:
		1. Default client number is 2
		2. Show access console display mode : auto
		3. Show running-config can see these two commands:
		track xxx action enable-access-console
		track xxx default-gateway
		4. Show interface can see wifi1 with state “D” or with access mode
		5. Track result: targets unreachable
		6. Access console with running state
		7. Only 2
		laptops can connect to access console SSID and obtain internal ip address
	</description>
	<numofap>1</numofap>
	<numofsta>3</numofsta>
	<tbtype>winlin</tbtype>

	<property name="conn1.pif" value="wifi0" />
	<property name="conn1.proto" value="wpa-aes-psk" />
	<property name="conn1.psk" value="aerohive" />
	<property name="conn2.pif" value="wifi0" />
	<property name="conn2.proto" value="wpa-aes-psk" />
	<property name="conn2.psk" value="aerohive" />
	<property name="conn2.auth_negative_test" value="true" />

	<stage>
		<step no="1">
			<desc>Set access console with auto mode in AP1</desc>
			<telnet target="ap1">
				-v "access-console mode auto"
			</telnet>
		</step>

		<step no="1.1">
			<desc>Show access console display mode</desc>
			<log-file>step1.1_show_access_console.log</log-file>
			<telnet target="ap1">
				-v "show access-console"
			</telnet>
			<log-match>-i "Mode" -i "auto" -c</log-match>
			<log-match>-c -i "Max client number: *2"</log-match>
		</step>

		<step no="2">
			<desc>Set track config for AP1 via console</desc>
			<telnet target="ap1" timeout="60">
				-v "track ${tb.name} enable "
				-v "track ${tb.name} action enable-access-console"
				-v "track ${tb.name} default-gateway"
			</telnet>
		</step>

		<step no="3" delay="10">
			<desc>Check track result on AP1 via console</desc>
			<log-file>step3_show_track.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show track"
			</telnet>
			<log-match>-c -i "${tb.name} *Reachable"</log-match>
		</step>

		<step no="3.1">
			<desc>Show running-config</desc>
			<log-file>step3.1_show_running_config.log</log-file>
			<telnet target="ap1" timeout="60">
				-v "show running"
			</telnet>
			<log-match>-c -i "track ${tb.name} default-gateway"</log-match>
			<log-match>-c -i "track ${tb.name} action enable-access-console"</log-match>
		</step>

		<step no="4">
			<desc>Set interface wifi1 to access mode by CLI on AP1 via console</desc>
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<telnet target="ap1" timeout="80">
				-v "interface wifi1 mode access"
			</telnet>
		</step>

		<step no="4.1">
			<desc>Show interface</desc>
			<log-file>step4.1_show_interface.log</log-file>
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<telnet target="ap1" timeout="60">
				-v "show interface"
			</telnet>
			<log-match>-c -i "wifi1" -i "access"</log-match>
		</step>

		<step no="4.2">
			<desc>Shutdown interface eth0 and eth1 by CLI on AP1 via console</desc>
			<console target="ap1" timeout="80">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="4.3">
			<desc>Shutdown interface eth1</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1" timeout="60">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="5" delay="30">
			<desc>Check track result by CLI via console on AP1</desc>
			<log-file>step5_show_track.log</log-file>
			<console target="ap1" timeout="60">
				-v "show track"
			</console>
			<log-match>-c -i "${tb.name} *Unreachable"</log-match>
		</step>

		<step no="6" delay="30">
			<desc>Check access console state of AP1</desc>
			<log-file>step6_show_acc_console.log</log-file>
			<console target="ap1" timeout="60">
				-v "show access-console _"
			</console>
			<log-match>-c -i "Current state: *running"</log-match>
		</step>

		<step no="7">
			<desc>Get access console SSID</desc>
			<setvar name="conn1.ssid">
				cat ${log.dir}/step6_show_acc_console.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<step no="7.1">
			<desc>Get access console SSID</desc>
			<setvar name="conn2.ssid">
				cat ${log.dir}/step6_show_acc_console.log | awk -F ':' '/Selected SSID/{split($2,a," "); print a[1]}'
			</setvar>
		</step>

		<step no="8" delay="5">
			<desc>Show interface wifi0.1 of AP1</desc>
			<log-file>step8_show_interface_wifi0.1.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface wifi0.1"
			</console>
			<log-match>-c -i "SSID=\\\&quot;${conn1.ssid}\\\&quot;"</log-match>
		</step>

		<step no="9" delay="5">
			<desc>Show interface wifi1.1 of AP1</desc>
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<log-file>step9_show_interface_wifi1.1.log</log-file>
			<console target="ap1" timeout="60">
				-v "show interface wifi1.1"
			</console>
			<log-match>-c -i "SSID=\\\&quot;${conn1.ssid}\\\&quot;"</log-match>
		</step>
    
    
    <property name="conn1.proto" value="wpa-aes-psk" />
		<property name="conn1.psk" value="aerohive" />
		<include prefix="10" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap1" />
    <include prefix="11" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta2, ap1" />


		<step no="12">
			<desc>Set filter and open debug on AP1</desc>
			<console target="ap1" timeout="60">
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log all"
				-v "_kde wifi-driver wifi0.1 assoc"
			</console>
		</step>

		<step no="12.1">
			<desc>Set filter and open debug on AP1</desc>
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<console target="ap1" timeout="60">
				-v "_kde wifi-driver wifi1.1 assoc"
			</console>
		</step>

    <include prefix="13" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta3, ap1" />

		<step no="ifconfig.lin">
			<desc>
				get sta mac
			</desc>
			<if>"${tb.os}" =="linux"</if>
			<log-file>sta3_ifconfig.log</log-file>
			<ssh target="sta3">
				-v "ifconfig ${sta3.tif.name}"
			</ssh>
		</step>

		<step no="ifconfig.win">
			<desc>
				get sta mac
			</desc>
			<if>"${tb.os}" =="windows"</if>
			<log-file>sta3_ifconfig.log</log-file>
			<ssh target="sta3">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="get.mac.linux">
			<desc>
				get sta mac
			</desc>
			<if>"${tb.os}" =="linux"</if>
			<setvar name="sta.wifi.mac">
				${bin.dir}/getrmtip.pl -f "${log.dir}/sta3_ifconfig.log" -i ${sta3.tif.name} -m | tr '[A-F]' '[a-f]'
			</setvar>
		</step>

		<step no="get.mac.windows">
			<desc>
				get sta mac
			</desc>
			<if>"${tb.os}" =="windows"</if>
			<setvar name="sta.wifi.mac">
				${bin.dir}/getrmtip.pl -f "${log.dir}/sta3_ifconfig.log" -i ${sta3.tif.name} -o win -m | tr '[A-F]' '[a-f]'
			</setvar>
		</step>

		<step no="14" delay="15">
			<desc>Show logging buffered on AP1</desc>
			<log-file>step14_show_logging_buffered.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered"
			</console>
			<log-match>-c -i "\[${sta.wifi.mac}\]deny \[re\]assoc request, too many assocs (max 2)"</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>