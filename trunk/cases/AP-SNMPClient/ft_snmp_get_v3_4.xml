<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Set SNMP reader version to v3, set user and set md5 auth, set aes encryption, verify can get information of AP via NMS tool Precondition AP setting: Interface eth0 manage snmp Snmp reader version v3 admin test auth md5 password testtest encryption aes password 11111111 (exist CLI bug: the second password could not be hidden) NMS tool setting: Select reader version v3, set user, set auth protocol and password, set encryption protocol and password</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1. Check snmp setting and snmp v3 user by show runningconfig
		and show snmp v3admin
		2. Select node and get, verify if can get information of AP
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<property name="user_name" value="test" />
	<property name="user_pw" value="testtest" />
	<property name="auth_pro" value="md5" />
	<property name="encry_pw" value="11111111" />

	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="1.1">
			<desc>
				1. Check snmp setting and snmp v3 user by show runningconfig
				and show snmp v3admin
			</desc>
			<telnet target="ap1">
				-v "interface eth0 manage snmp"
				-v "snmp reader version v3 admin ${user_name} auth ${auth_pro} password ${user_pw} encryption aes password ${encry_pw}"
			</telnet>
		</step>

		<step no="1.2">
			<desc>
				-show running configuration
			</desc>
			<log-file>step1_show_runningconfig.log</log-file>
			<telnet target="ap1">
				-v "show running-config"
			</telnet>
			<log-match>-i "interface eth0 manage snmp"</log-match>
			<log-match>-i "snmp reader version v3 admin ${user_name} auth ${auth_pro} password \*\*\* encryption aes password \*\*\*"</log-match>
		</step>

		<step no="1.3">
			<desc>
				-Check snmp v3 user by show snmp v3admin
			</desc>
			<log-file>step1_show_snmp.log</log-file>
			<telnet target="ap1">
				-v "show snmp v3"
			</telnet>
			<log-match>-n -i "${user_name} *${auth_pro} *AES"</log-match>
		</step>

		<step no="2.1">
			<desc>
				Shutdown eth1 when ap is not ap120. And config eth1 ,agg0,red0'mode
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<telnet target="ap1">
				-v "interface eth1 shutdown"
				-v "interface eth1 mode backhaul"
				-v "interface Agg0 mode backhaul"
				-v "interface Red0 mode backhaul"
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				2. Select node, type get SNMP variable or get next SNMP variable
				or get bulk SNMP data, verify if can get correct information of
				AP
			</desc>
			<telnet target="ap1">
				-v "hostname AH-hello_world"
				-v "interface wifi0 mode access"
				-v "interface wifi1 mode backhaul"
				-v "interface eth0 mode backhaul"
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
			</telnet>
		</step>

		<step no="3">
			<desc>
				show interface eth0 info
			</desc>
			<log-file>show_interface_eth0_info.log</log-file>
			<telnet target="ap1">
				-v "show interface eth0"
			</telnet>
		</step>

		<step no="3.1">
			<desc>
				show interface eth1 info
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>show_interface_eth1_info.log</log-file>
			<telnet target="ap1">
				-v "show interface eth1"
			</telnet>
		</step>

		<step no="3.2">
			<desc>
				show interface wifi0 info
			</desc>
			<log-file>show_interface_wifi0_info.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0"
			</telnet>
		</step>

		<step no="3.3">
			<desc>
				show interface wifi1 info
			</desc>
			<log-file>show_interface_wifi1_info.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="3.4">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>show_interface_mgt0_info.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="3.5">
			<desc>
				show interface wifi0.1 info
			</desc>
			<log-file>show_interface_wifi0.1_info.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0.1"
			</telnet>
		</step>

		<step no="3.6">
			<desc>
				show interface wifi1.1 info
			</desc>
			<log-file>show_interface_wifi1.1_info.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi1.1"
			</telnet>
		</step>

		<step no="3.7">
			<desc>
				show version
			</desc>
			<log-file>show_version_info.log</log-file>
			<telnet target="ap1">
				-v "show version"
			</telnet>
		</step>

		<step no="4">
			<desc>
				start service snmpd
			</desc>
			<script>
				service snmpd start
			</script>
		</step>

		<step no="snmp.all.interface.0">
			<desc>
				snmpwalk all the interface (include agg0 and red0).
			</desc>
			<log-file>snmp.all.interface.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.4.1.26928.1.1.1.2.1.1.1.1 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"eth0\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"wifi0\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"wifi1\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"mgt0\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"wifi0.1\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"wifi1.1\\\""</log-match>
		</step>

		<step no="snmp.all.interface.1">
			<desc>
				check the result of snmpwalk all the interface (eth1,agg0 and red0) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.all.interface.0_snmp_ap1.log</log-file>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"eth1\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"red0\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1." -i "= STRING: \\\"agg0\\\""</log-match>
		</step>

		<step no="get.interface.index.number.0">
			<desc>
				get eth0's index number
			</desc>
			<setvar name="ap1.eth0.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"eth0\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="get.interface.index.number.1">
			<desc>
				get eth1's index number
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<setvar name="ap1.eth1.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"eth1\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="get.interface.index.number.2">
			<desc>
				get wifi0's index number
			</desc>
			<setvar name="ap1.wifi0.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"wifi0\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="get.interface.index.number.3">
			<desc>
				get wifi1's index number
			</desc>
			<setvar name="ap1.wifi1.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"wifi1\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="get.interface.index.number.4">
			<desc>
				get wifi0.1's index number
			</desc>
			<setvar name="ap1.wifi0.1.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"wifi0.1\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="get.interface.index.number.5">
			<desc>
				get wifi1.1's index number
			</desc>
			<setvar name="ap1.wifi1.1.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"wifi1.1\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="get.interface.index.number.6">
			<desc>
				get mgt0's index number
			</desc>
			<setvar name="ap1.mgt0.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"mgt0\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="get.interface.index.number.7">
			<desc>
				get Agg0's index number
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<setvar name="ap1.agg0.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"agg0\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="get.interface.index.number.8">
			<desc>
				get Red0's index number
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<setvar name="ap1.red0.index.number">
				${bin.dir}/getbyrexp.py -p "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.1.(\d+) = STRING: \"red0\"" -f ${log.dir}/snmp.all.interface.0_snmp_ap1.log
			</setvar>
		</step>

		<step no="snmp.interface.index.0">
			<desc>
				snmpwalk the interface's index
			</desc>
			<log-file>snmp.interface.index.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.1 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "IF-MIB::ifIndex.1 = INTEGER:"</log-match>
			<log-match>-i "IF-MIB::ifIndex.${ap1.eth0.index.number} = INTEGER:"</log-match>
			<log-match>-i "IF-MIB::ifIndex.${ap1.wifi0.index.number} = INTEGER:"</log-match>
			<log-match>-i "IF-MIB::ifIndex.${ap1.wifi1.index.number} = INTEGER:"</log-match>
			<log-match>-i "IF-MIB::ifIndex.${ap1.mgt0.index.number} = INTEGER:"</log-match>
			<log-match>-i "IF-MIB::ifIndex.${ap1.wifi0.1.index.number} = INTEGER:"</log-match>
			<log-match>-i "IF-MIB::ifIndex.${ap1.wifi1.1.index.number} = INTEGER:"</log-match>
		</step>

		<step no="snmp.interface.index.1">
			<desc>
				check the result of snmpwalk the interface's index (eth1) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.interface.index.0_snmp_ap1.log</log-file>
			<log-match>-i "IF-MIB::ifIndex.${ap1.eth1.index.number} = INTEGER:"</log-match>
		</step>

		<step no="snmp.interface.0">
			<desc>
				snmpwalk the interface
			</desc>
			<log-file>snmp.interface.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.2 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "IF-MIB::ifDescr.1 = STRING: lo"</log-match>
			<log-match>-i "IF-MIB::ifDescr.${ap1.eth0.index.number} = STRING: eth0"</log-match>
			<log-match>-i "IF-MIB::ifDescr.${ap1.wifi0.index.number} = STRING: wifi0"</log-match>
			<log-match>-i "IF-MIB::ifDescr.${ap1.wifi1.index.number} = STRING: wifi1"</log-match>
			<log-match>-i "IF-MIB::ifDescr.${ap1.mgt0.index.number} = STRING: mgt0"</log-match>
			<log-match>-i "IF-MIB::ifDescr.${ap1.wifi0.1.index.number} = STRING: wifi0.1"</log-match>
			<log-match>-i "IF-MIB::ifDescr.${ap1.wifi1.1.index.number} = STRING: wifi1.1"</log-match>
		</step>

		<step no="snmp.interface.1">
			<desc>
				check the result of snmpwalk the interface (eth1) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.interface.0_snmp_ap1.log</log-file>
			<log-match>-i "IF-MIB::ifDescr.${ap1.eth1.index.number} = STRING: eth1"</log-match>
		</step>

		<step no="snmp.interface.type.0">
			<desc>
				snmpwalk the interface's type
			</desc>
			<log-file>snmp.interface.type.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.3 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "IF-MIB::ifType.1 = INTEGER: softwareLoopback(24)"</log-match>
			<log-match>-i "IF-MIB::ifType.${ap1.eth0.index.number} = INTEGER: ethernetCsmacd(6)"</log-match>
			<log-match>-i "IF-MIB::ifType.${ap1.wifi0.index.number} = INTEGER: ethernetCsmacd(6)"</log-match>
			<log-match>-i "IF-MIB::ifType.${ap1.wifi1.index.number} = INTEGER: ethernetCsmacd(6)"</log-match>
			<log-match>-i "IF-MIB::ifType.${ap1.mgt0.index.number} = INTEGER: ethernetCsmacd(6)"</log-match>
			<log-match>-i "IF-MIB::ifType.${ap1.wifi0.1.index.number} = INTEGER: ethernetCsmacd(6)"</log-match>
			<log-match>-i "IF-MIB::ifType.${ap1.wifi1.1.index.number} = INTEGER: ethernetCsmacd(6)"</log-match>
		</step>

		<step no="snmp.interface.type.1">
			<desc>
				check the result of snmpwalk the interface's type (eth1) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.interface.type.0_snmp_ap1.log</log-file>
			<log-match>-i "IF-MIB::ifType.${ap1.eth1.index.number} = INTEGER: ethernetCsmacd(6)"</log-match>
		</step>

		<step no="get.interface.mtu.0">
			<desc>
				get eth0's MTU
			</desc>
			<setvar name="ap1.eth0.mtu">
				${bin.dir}/getbyrexp.py -p "MTU=(\d+)" -f ${log.dir}/show_interface_eth0_info.log -t str
			</setvar>
		</step>

		<step no="get.interface.mtu.1">
			<desc>
				get eth1's MTU
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<setvar name="ap1.eth1.mtu">
				${bin.dir}/getbyrexp.py -p "MTU=(\d+)" -f ${log.dir}/show_interface_eth1_info.log -t str
			</setvar>
		</step>

		<step no="get.interface.mtu.2">
			<desc>
				get wifi0's MTU
			</desc>
			<setvar name="ap1.wifi0.mtu">
				${bin.dir}/getbyrexp.py -p "MTU=(\d+)" -f ${log.dir}/show_interface_wifi0_info.log -t str
			</setvar>
		</step>

		<step no="get.interface.mtu.3">
			<desc>
				get wifi1's MTU
			</desc>
			<setvar name="ap1.wifi1.mtu">
				${bin.dir}/getbyrexp.py -p "MTU=(\d+)" -f ${log.dir}/show_interface_wifi1_info.log -t str
			</setvar>
		</step>

		<step no="get.interface.mtu.4">
			<desc>
				get mgt0's MTU
			</desc>
			<setvar name="ap1.mgt0.mtu">
				${bin.dir}/getbyrexp.py -p "MTU=(\d+)" -f ${log.dir}/show_interface_mgt0_info.log -t str
			</setvar>
		</step>

		<step no="get.interface.mtu.5">
			<desc>
				get wifi0.1's MTU
			</desc>
			<setvar name="ap1.wifi0.1.mtu">
				${bin.dir}/getbyrexp.py -p "MTU=(\d+)" -f ${log.dir}/show_interface_wifi0.1_info.log -t str
			</setvar>
		</step>

		<step no="get.interface.mtu.6">
			<desc>
				get wifi1.1's MTU
			</desc>
			<setvar name="ap1.wifi1.1.mtu">
				${bin.dir}/getbyrexp.py -p "MTU=(\d+)" -f ${log.dir}/show_interface_wifi1.1_info.log -t str
			</setvar>
		</step>

		<step no="snmp.interface.MTU.0">
			<desc>
				snmpwalk the interface's MTU
			</desc>
			<log-file>snmp.interface.MTU.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.4 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "IF-MIB::ifMtu.1 = INTEGER: 16436"</log-match>
			<log-match>-i "IF-MIB::ifMtu.${ap1.eth0.index.number} = INTEGER: ${ap1.eth0.mtu}"</log-match>
			<log-match>-i "IF-MIB::ifMtu.${ap1.wifi0.index.number} = INTEGER: ${ap1.wifi0.mtu}"</log-match>
			<log-match>-i "IF-MIB::ifMtu.${ap1.wifi1.index.number} = INTEGER: ${ap1.wifi1.mtu}"</log-match>
			<log-match>-i "IF-MIB::ifMtu.${ap1.mgt0.index.number} = INTEGER: ${ap1.mgt0.mtu}"</log-match>
			<log-match>-i "IF-MIB::ifMtu.${ap1.wifi0.1.index.number} = INTEGER: ${ap1.wifi0.1.mtu}"</log-match>
			<log-match>-i "IF-MIB::ifMtu.${ap1.wifi1.1.index.number} = INTEGER: ${ap1.wifi1.1.mtu}"</log-match>
		</step>

		<step no="snmp.interface.MTU.1">
			<desc>
				check the result of snmpwalk the interface's mtu (eth1) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.interface.MTU.0_snmp_ap1.log</log-file>
			<log-match>-i "IF-MIB::ifMtu.${ap1.eth1.index.number} = INTEGER: ${ap1.eth1.mtu}"</log-match>
		</step>

		<step no="get.interface.speed">
			<desc>
				get ap's Version info from show version
			</desc>
			<setvar name="ap1.eth0.speed">
				${bin.dir}/getbyrexp.py -p "Speed=(\d+)Mbps" --script "m.group(1)+'000000'" -f ${log.dir}/show_interface_eth0_info.log
			</setvar>
		</step>

		<step no="snmp.interface.speed">
			<desc>
				snmpwalk the interface's speed
			</desc>
			<log-file>snmp.interface.speed.1_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.5 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "IF-MIB::ifSpeed.${ap1.eth0.index.number} = Gauge32: ${ap1.eth0.speed}"</log-match>
		</step>

		<step no="get.interface.mac.0">
			<desc>
				show interface info
			</desc>
			<log-file>snmp.interface.mac.0_show_interface_info.log</log-file>
			<telnet target="ap1">
				-v "show interface"
			</telnet>
		</step>

		<step no="get.interface.mac.1">
			<desc>
				get mgt0's mac address (format:xx xx xx xx xx xx)
			</desc>
			<setvar name="ap1.mgt0.mac">
				${bin.dir}/getbyrexp.py -p "Mgt0\s+(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" --script "' '.join(m.groups())" -f ${log.dir}/snmp.interface.mac.0_show_interface_info.log
			</setvar>
		</step>

		<step no="get.interface.mac.2">
			<desc>
				get eth0's mac address (format:xx xx xx xx xx xx)
			</desc>
			<setvar name="ap1.eth0.mac">
				${bin.dir}/getbyrexp.py -p "Eth0\s+(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" --script "' '.join(m.groups())" -f ${log.dir}/snmp.interface.mac.0_show_interface_info.log
			</setvar>
		</step>

		<step no="get.interface.mac.3">
			<desc>
				get eth1's mac address (format:xx xx xx xx xx xx)
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<setvar name="ap1.eth1.mac">
				${bin.dir}/getbyrexp.py -p "Eth1\s+(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" --script "' '.join(m.groups())" -f ${log.dir}/snmp.interface.mac.0_show_interface_info.log
			</setvar>
		</step>

		<step no="get.interface.mac.4">
			<desc>
				get wifi0's mac address (format:xx xx xx xx xx xx)
			</desc>
			<setvar name="ap1.wifi0.mac">
				${bin.dir}/getbyrexp.py -p "Wifi0\s+(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" --script "' '.join(m.groups())" -f ${log.dir}/snmp.interface.mac.0_show_interface_info.log
			</setvar>
		</step>

		<step no="get.interface.mac.5">
			<desc>
				get eth1's mac address (format:xx xx xx xx xx xx)
			</desc>
			<setvar name="ap1.wifi1.mac">
				${bin.dir}/getbyrexp.py -p "Wifi1\s+(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" --script "' '.join(m.groups())" -f ${log.dir}/snmp.interface.mac.0_show_interface_info.log
			</setvar>
		</step>

		<step no="snmp.interface.mac.0">
			<desc>
				snmpwalk the interface's mac
			</desc>
			<log-file>snmp.interface.mac.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -Ih -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.6 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "IF-MIB::ifPhysAddress.1 = \"\""</log-match>
			<log-match>-c -i "IF-MIB::ifPhysAddress.${ap1.eth0.index.number} = Hex-STRING: ${ap1.eth0.mac}"</log-match>
			<log-match>-c -i "IF-MIB::ifPhysAddress.${ap1.wifi0.index.number} = Hex-STRING: ${ap1.wifi0.mac}"</log-match>
			<log-match>-c -i "IF-MIB::ifPhysAddress.${ap1.wifi1.index.number} = Hex-STRING: ${ap1.wifi1.mac}"</log-match>
			<log-match>-c -i "IF-MIB::ifPhysAddress.${ap1.mgt0.index.number} = Hex-STRING: ${ap1.mgt0.mac}"</log-match>
			<log-match>-c -i "IF-MIB::ifPhysAddress.${ap1.wifi0.1.index.number} = Hex-STRING: ${ap1.wifi0.mac}"</log-match>
			<log-match>-c -i "IF-MIB::ifPhysAddress.${ap1.wifi1.1.index.number} = Hex-STRING: ${ap1.wifi1.mac}"</log-match>
		</step>

		<step no="snmp.interface.mac.1">
			<desc>
				check the result of snmpwalk the interface's mac (eth1) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.interface.mac.0_snmp_ap1.log</log-file>
			<log-match>-c -i "IF-MIB::ifPhysAddress.${ap1.eth1.index.number} = Hex-STRING: ${ap1.eth1.mac}"</log-match>
		</step>

		<step no="get.admin.status.0">
			<desc>
				get eth0's admin status
			</desc>
			<setvar name="ap1.eth0.admin.status">
				${bin.dir}/getbyrexp.py -p "Admin state=(\w+);" -f ${log.dir}/show_interface_eth0_info.log --script "'up' if m.group(1)=='enabled' else 'down'"
			</setvar>
		</step>

		<step no="get.admin.status.1">
			<desc>
				get eth1's admin status
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<setvar name="ap1.eth1.admin.status">
				${bin.dir}/getbyrexp.py -p "Admin state=(\w+);" -f ${log.dir}/show_interface_eth1_info.log --script "'up' if m.group(1)=='enabled' else 'down'"
			</setvar>
		</step>

		<step no="get.admin.status.2">
			<desc>
				get wifi0's admin status
			</desc>
			<setvar name="ap1.wifi0.admin.status">
				${bin.dir}/getbyrexp.py -p "Admin state=(\w+);" -f ${log.dir}/show_interface_wifi0_info.log --script "'up' if m.group(1)=='enabled' else 'down'"
			</setvar>
		</step>

		<step no="get.admin.status.3">
			<desc>
				get wifi1's admin status
			</desc>
			<setvar name="ap1.wifi1.admin.status">
				${bin.dir}/getbyrexp.py -p "Admin state=(\w+);" -f ${log.dir}/show_interface_wifi1_info.log --script "'up' if m.group(1)=='enabled' else 'down'"
			</setvar>
		</step>

		<step no="get.admin.status.4">
			<desc>
				get wifi0.1's admin status
			</desc>
			<setvar name="ap1.wifi0.1.admin.status">
				${bin.dir}/getbyrexp.py -p "Admin state=(\w+);" -f ${log.dir}/show_interface_wifi0.1_info.log --script "'up' if m.group(1)=='enabled' else 'down'"
			</setvar>
		</step>

		<step no="get.admin.status.5">
			<desc>
				get wifi1.1's admin status
			</desc>
			<setvar name="ap1.wifi1.1.admin.status">
				${bin.dir}/getbyrexp.py -p "Admin state=(\w+);" -f ${log.dir}/show_interface_wifi1.1_info.log --script "'up' if m.group(1)=='enabled' else 'down'"
			</setvar>
		</step>

		<step no="get.admin.status.6">
			<desc>
				get mgt0's admin status
			</desc>
			<setvar name="ap1.mgt0.admin.status">
				${bin.dir}/getbyrexp.py -p "Admin state=(\w+);" -f ${log.dir}/show_interface_mgt0_info.log --script "'up' if m.group(1)=='enabled' else 'down'"
			</setvar>
		</step>

		<step no="snmp.admin.status.0">
			<desc>
				snmpwalk the admin status
			</desc>
			<log-file>snmp.admin.status.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.7 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "IF-MIB::ifAdminStatus.1 = INTEGER: up(1)"</log-match>
			<log-match>-i "IF-MIB::ifAdminStatus.${ap1.eth0.index.number} = INTEGER: ${ap1.eth0.admin.status}"</log-match>
			<log-match>-i "IF-MIB::ifAdminStatus.${ap1.wifi0.index.number} = INTEGER: ${ap1.wifi0.admin.status}"</log-match>
			<log-match>-i "IF-MIB::ifAdminStatus.${ap1.wifi1.index.number} = INTEGER: ${ap1.wifi1.admin.status}"</log-match>
			<log-match>-i "IF-MIB::ifAdminStatus.${ap1.mgt0.index.number} = INTEGER: ${ap1.mgt0.admin.status}"</log-match>
			<log-match>-i "IF-MIB::ifAdminStatus.${ap1.wifi0.1.index.number} = INTEGER: ${ap1.wifi0.1.admin.status}"</log-match>
			<log-match>-i "IF-MIB::ifAdminStatus.${ap1.wifi1.1.index.number} = INTEGER: ${ap1.wifi1.1.admin.status}"</log-match>
		</step>

		<step no="snmp.admin.status.1">
			<desc>
				check the result of snmpwalk the operational status (eth1) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.admin.status.0_snmp_ap1.log</log-file>
			<log-match>-i "IF-MIB::ifAdminStatus.${ap1.eth1.index.number} = INTEGER: ${ap1.eth1.admin.status}"</log-match>
		</step>


		<step no="get.operational.state.0">
			<desc>
				get eth0's operational state
			</desc>
			<setvar name="ap1.eth0.operational.state">
				${bin.dir}/getbyrexp.py -p "Operational state=(\w+);" -f ${log.dir}/show_interface_eth0_info.log -t str
			</setvar>
		</step>

		<step no="get.operational.state..1">
			<desc>
				get eth1's operational state
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<setvar name="ap1.eth1.operational.state">
				${bin.dir}/getbyrexp.py -p "Operational state=(\w+);" -f ${log.dir}/show_interface_eth1_info.log -t str
			</setvar>
		</step>

		<step no="get.operational.state.2">
			<desc>
				get wifi0's operational state
			</desc>
			<setvar name="ap1.wifi0.operational.state">
				${bin.dir}/getbyrexp.py -p "Operational state=(\w+);" -f ${log.dir}/show_interface_wifi0_info.log -t str
			</setvar>
		</step>

		<step no="get.operational.state.3">
			<desc>
				get wifi1's operational state
			</desc>
			<setvar name="ap1.wifi1.operational.state">
				${bin.dir}/getbyrexp.py -p "Operational state=(\w+);" -f ${log.dir}/show_interface_wifi1_info.log -t str
			</setvar>
		</step>

		<step no="get.operational.state.4">
			<desc>
				get wifi0.1's operational state
			</desc>
			<setvar name="ap1.wifi0.1.operational.state">
				${bin.dir}/getbyrexp.py -p "Operational state=(\w+);" -f ${log.dir}/show_interface_wifi0.1_info.log -t str
			</setvar>
		</step>

		<step no="get.operational.state.5">
			<desc>
				get wifi1.1's operational state
			</desc>
			<setvar name="ap1.wifi1.1.operational.state">
				${bin.dir}/getbyrexp.py -p "Operational state=(\w+);" -f ${log.dir}/show_interface_wifi1.1_info.log -t str
			</setvar>
		</step>

		<step no="get.operational.state.6">
			<desc>
				get mgt0's operational state
			</desc>
			<setvar name="ap1.mgt0.operational.state">
				${bin.dir}/getbyrexp.py -p "Operational state=(\w+);" -f ${log.dir}/show_interface_mgt0_info.log -t str
			</setvar>
		</step>

		<step no="snmp.operational.status.0">
			<desc>
				snmpwalk the operational status
			</desc>
			<log-file>snmp.operational.status.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.8 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "IF-MIB::ifOperStatus.1 = INTEGER: up(1)"</log-match>
			<log-match>-i "IF-MIB::ifOperStatus.${ap1.eth0.index.number} = INTEGER: ${ap1.eth0.operational.state}"</log-match>
			<log-match>-i "IF-MIB::ifOperStatus.${ap1.wifi0.index.number} = INTEGER: ${ap1.wifi0.operational.state}"</log-match>
			<log-match>-i "IF-MIB::ifOperStatus.${ap1.wifi1.index.number} = INTEGER: ${ap1.wifi1.operational.state}"</log-match>
			<log-match>-i "IF-MIB::ifOperStatus.${ap1.mgt0.index.number} = INTEGER: ${ap1.mgt0.operational.state}"</log-match>
			<log-match>-i "IF-MIB::ifOperStatus.${ap1.wifi0.1.index.number} = INTEGER: ${ap1.wifi0.1.operational.state}"</log-match>
			<log-match>-i "IF-MIB::ifOperStatus.${ap1.wifi1.1.index.number} = INTEGER: ${ap1.wifi1.1.operational.state}"</log-match>
		</step>

		<step no="snmp.operational.status.1">
			<desc>
				check the result of snmpwalk the operational status (eth1) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.operational.status.0_snmp_ap1.log</log-file>
			<log-match>-i "IF-MIB::ifOperStatus.${ap1.eth1.index.number} = INTEGER: ${ap1.eth1.operational.state}"</log-match>
		</step>

		<step no="get.lastchange.uptime">
			<desc>
				get ap's uptime from show version
			</desc>
			<setvar name="ap1.lastchange.uptime">
				${bin.dir}/getbyrexp.py -p "(\d+)\s*weeks,\s*(\d+)\s*days,\s*(\d+)\s*hours" -f ${log.dir}/show_version_info.log -t str -t str --script "'%d days, %d' % (int(m.group(1))*7 + int(m.group(2)),int( m.group(3))) if (int(m.group(1))*7 + int(m.group(2))) else '%d' % (int(m.group(3)))"
			</setvar>
		</step>

		<step no="snmp.lastchange.uptime.0">
			<desc>
				snmpwalk the uptime.
			</desc>
			<log-file>snmp.lastchange.uptime.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.2.2.1.9 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "IF-MIB::ifLastChange.1 = Timeticks:" -i " ${ap1.lastchange.uptime}:"</log-match>
			<log-match>-i "IF-MIB::ifLastChange.${ap1.eth0.index.number} = Timeticks:" -i " ${ap1.lastchange.uptime}:"</log-match>
			<log-match>-i "IF-MIB::ifLastChange.${ap1.wifi0.index.number} = Timeticks:" -i " ${ap1.lastchange.uptime}:"</log-match>
			<log-match>-i "IF-MIB::ifLastChange.${ap1.wifi1.index.number} = Timeticks:" -i " ${ap1.lastchange.uptime}:"</log-match>
			<log-match>-i "IF-MIB::ifLastChange.${ap1.mgt0.index.number} = Timeticks:" -i " ${ap1.lastchange.uptime}:"</log-match>
			<log-match>-i "IF-MIB::ifLastChange.${ap1.wifi0.1.index.number} = Timeticks:" -i " ${ap1.lastchange.uptime}:"</log-match>
			<log-match>-i "IF-MIB::ifLastChange.${ap1.wifi1.1.index.number} = Timeticks:" -i " ${ap1.lastchange.uptime}:"</log-match>
		</step>

		<step no="snmp.lastchange.uptime.1">
			<desc>
				check the result of snmpwalk the lastchange uptime (eth1) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.lastchange.uptime.0_snmp_ap1.log</log-file>
			<log-match>-i "IF-MIB::ifLastChange.${ap1.eth1.index.number} = Timeticks:" -i " ${ap1.lastchange.uptime}:"</log-match>
		</step>

		<step no="get.amrp.neighbor.0">
			<desc>
				show amrp neighbor info
			</desc>
			<log-file>get.amrp.neighbor.0_show_amrp_neighbor.log</log-file>
			<telnet target="ap1">
				-v "show amrp neighbor Ethernet"
			</telnet>
		</step>

		<step no="get.amrp.neighbor.1">
			<desc>
				get eth0's amrp neighbor
			</desc>
			<setvar name="ap.eth0.amrpneighbor">
				${bin.dir}/getbyrexp.py -p "\s.*(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{1})0\s*.*\s.*" --script "' '.join(m.groups())+'0'" -f ${log.dir}/get.amrp.neighbor.0_show_amrp_neighbor.log
			</setvar>
		</step>

		<step no="snmp.amrp.neighbor">
			<desc>
				snmpwalk the mac of amrp neighbor.
			</desc>
			<log-file>snmp.amrp.neighbor_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.4.1.26928.1.1.1.3.1.1.1.1 &gt; ${log.dir}/${log.file}
			</script>
			<log-match loop-values="${ap.eth0.amrpneighbor}">-c -i "SNMPv2-SMI::enterprises.26928.1.1.1.3.1.1.1.1.${ap1.eth0.index.number}." -i "${loop.v}"</log-match>
		</step>

		<step no="get.eth0.amrp.neighbor.count">
			<desc>
				get eth0's amrp neighbor
			</desc>
			<setvar name="ap.eth0.amrpneighbor.count">
				${bin.dir}/getbyrexp.py -p "\s.*(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{1})0\s*.*\s.*" --script_ms "len(ms)" -f ${log.dir}/get.amrp.neighbor.0_show_amrp_neighbor.log
			</setvar>
		</step>

		<step no="show.wifi.amrp.neighbor.info">
			<desc>
				show amrp neighbor info
			</desc>
			<log-file>show.wifi.amrp.neighbor.info_show_amrp_neighbor.log</log-file>
			<telnet target="ap1">
				-v "show amrp neighbor WiFi"
			</telnet>
		</step>

		<step no="get.wifi.amrp.neighbor.count">
			<desc>
				get wifi1.1's amrp neighbor
			</desc>
			<setvar name="ap.wifi.amrpneighbor.count">
				${bin.dir}/getbyrexp.py -p "\s.*(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{1})0\s*.*\s.*TWO-WAY" --script_ms "len(ms)" -f ${log.dir}/show.wifi.amrp.neighbor.info_show_amrp_neighbor.log
			</setvar>
		</step>

		<step no="snmp.link.type">
			<desc>
				snmpwalk link type.
			</desc>
			<log-file>snmp.link.type_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.4.1.26928.1.1.1.3.1.1.1.5 &gt; ${log.dir}/${log.file}
			</script>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SNMPv2-SMI::enterprises.26928.1.1.1.3.1.1.1.5.${ap1.eth0.index.number}.* = INTEGER: 0" -c ${ap.eth0.amrpneighbor.count} -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SNMPv2-SMI::enterprises.26928.1.1.1.3.1.1.1.5.${ap1.wifi1.1.index.number}.* = INTEGER: 1" -c ${ap.wifi.amrpneighbor.count} -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="get.platform.info">
			<desc>
				get ap's platform info from show version
			</desc>
			<setvar name="ap1.platform">
				${bin.dir}/getbyrexp.py -p "Platform:\s+(.*)" -f ${log.dir}/show_version_info.log -t str
			</setvar>
		</step>

		<step no="get.version.info">
			<desc>
				get ap's Version info from show version
			</desc>
			<setvar name="ap1.Version">
				${bin.dir}/getbyrexp.py -p "Version:\s+(.*)" -f ${log.dir}/show_version_info.log -t str
			</setvar>
		</step>

		<step no="snmp.platform-version.info">
			<desc>
				snmpwalk the version info.
			</desc>
			<log-file>snmp.platform-version.info_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.1.1 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "SNMPv2-MIB::sysDescr.0 = STRING: ${ap1.platform}, ${ap1.Version}"</log-match>
		</step>

		<step no="snmp.objectid">
			<desc>
				snmpwalk the version info.
			</desc>
			<log-file>snmp.objectid_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.1.2 -Of &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i ".iso.org.dod.internet.mgmt.mib-2.system.sysObjectID.0 = OID: .iso.org.dod.internet.private.enterprises.26928.1"</log-match>
		</step>

		<step no="get.system.uptime">
			<desc>
				get ap's uptime from show version
			</desc>
			<setvar name="ap1.system.uptime">
				${bin.dir}/getbyrexp.py -p "(\d+)\s*weeks,\s*(\d+)\s*days,\s*(\d+)\s*hours" -f ${log.dir}/show_version_info.log -t str -t str --script "'%d days, %d' % (int(m.group(1))*7 + int(m.group(2)),int( m.group(3))) if (int(m.group(1))*7 + int(m.group(2))) else '%d' % (int(m.group(3)))"
			</setvar>
		</step>

		<step no="snmp.system.uptime">
			<desc>
				snmpwalk the system uptime info.
			</desc>
			<log-file>snmp.system.uptime_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.1.3 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks:" -i " ${ap1.system.uptime}:"</log-match>
		</step>

		<step no="show.snmp.info">
			<desc>
				show snmp info
			</desc>
			<log-file>show.snmp.info_snmp_ap1.log</log-file>
			<telnet target="ap1">
				-v "show snmp"
			</telnet>
		</step>

		<step no="get.contact.info">
			<desc>
				get snmp contact info
			</desc>
			<setvar name="ap1.snmp.contact">
				${bin.dir}/getbyrexp.py -p "Syscontact:\s*(\S+)\s*" -t str -f ${log.dir}/show.snmp.info_snmp_ap1.log
			</setvar>
		</step>

		<step no="snmp.contact.info">
			<desc>
				snmpwalk the snmp contact info.
			</desc>
			<log-file>snmp.contact.info.2_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.1.4 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "SNMPv2-MIB::sysContact.0 = STRING: ${ap1.snmp.contact}"</log-match>
		</step>

		<step no="snmp.hostname">
			<desc>
				snmpwalk the ap's hostname.
			</desc>
			<log-file>snmp.hostname_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.1.5 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "SNMPv2-MIB::sysName.0 = STRING: AH-hello_world"</log-match>
		</step>

		<step no="get.location">
			<desc>
				get snmp location info
			</desc>
			<setvar name="ap1.snmp.location">
				${bin.dir}/getbyrexp.py -p "Syslocation:\s*(\w+)\s*" -t str -f ${log.dir}/show.snmp.info_snmp_ap1.log
			</setvar>
		</step>

		<step no="snmp.location">
			<desc>
				snmpwalk the snmp location info.
			</desc>
			<log-file>snmp.location.1_snmp_ap1.log</log-file>
			<script host="${mpc.mif.ip}" timeout="300">
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.1.6 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "SNMPv2-MIB::sysLocation.0 = STRING: ${ap1.snmp.location}"</log-match>
		</step>

		<step no="snmp.PhysAddress">
			<desc>
				snmpwalk atPhysAddress.
			</desc>
			<log-file>snmp.PhysAddress_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.3.1.1.2 &gt; ${log.dir}/${log.file}
			</script>
		</step>

		<step no="snmp.atNetAddress">
			<desc>
				snmpwalk atNetAddress.
			</desc>
			<log-file>snmp.atNetAddress_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.2.1.3.1.1.3 &gt; ${log.dir}/${log.file}
			</script>
		</step>

		<step no="snmp.ssid.0">
			<desc>
				snmpwalk the ssid info
			</desc>
			<log-file>snmp.ssid.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.4.1.26928.1.1.1.2.1.1.1.2 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.eth0.index.number} = STRING: \\\"N/A\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.wifi0.index.number} = STRING: \\\"N/A\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.wifi1.index.number} = STRING: \\\"N/A\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.mgt0.index.number} = STRING: \\\"N/A\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.wifi0.1.index.number} = STRING: \\\"${ssid.name}\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.wifi1.1.index.number} = STRING: \\\"N/A\\\""</log-match>
		</step>

		<step no="snmp.ssid.1">
			<desc>
				check the result of snmp ssid (eth1,red0,agg0) when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.ssid.0_snmp_ap1.log</log-file>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.eth1.index.number} = STRING: \\\"N/A\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.red0.index.number} = STRING: \\\"N/A\\\""</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.2.${ap1.agg0.index.number} = STRING: \\\"N/A\\\""</log-match>
		</step>

		<step no="snmp.phy-vir.interface.0">
			<desc>
				snmpwalk the interface (physical and virtual)
			</desc>
			<log-file>snmp.phy-vir.interface.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.4.1.26928.1.1.1.2.1.1.1.4 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.eth0.index.number} = INTEGER: 0"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.wifi0.index.number} = INTEGER: 0"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.wifi1.index.number} = INTEGER: 0"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.mgt0.index.number} = INTEGER: 0"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.wifi0.1.index.number} = INTEGER: 1"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.wifi1.1.index.number} = INTEGER: 1"</log-match>
		</step>

		<step no="snmp.phy-vir.interface.1">
			<desc>
				check the result of snmp interface (eth1,red0,agg0)when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.phy-vir.interface.0_snmp_ap1.log</log-file>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.eth1.index.number} = INTEGER: 0"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.red0.index.number} = INTEGER: 0"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.4.${ap1.agg0.index.number} = INTEGER: 0"</log-match>
		</step>

		<step no="snmp.interface.mode.0">
			<desc>
				snmpwalk the interface's mode
			</desc>
			<log-file>snmp.interface.mode.0_snmp_ap1.log</log-file>
			<script>
				snmpwalk -v3 ${ap1.mgt0.ip} -u ${user_name} -a ${auth_pro} -A ${user_pw} -x aes -X ${encry_pw} -l authPriv .1.3.6.1.4.1.26928.1.1.1.2.1.1.1.5 &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.eth0.index.number} = INTEGER: 2"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.wifi0.index.number} = INTEGER: 1"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.wifi1.index.number} = INTEGER: 2"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.mgt0.index.number} = INTEGER: 0"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.wifi0.1.index.number} = INTEGER: 1"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.wifi1.1.index.number} = INTEGER: 2"</log-match>
		</step>

		<step no="snmp.interface.mode.1">
			<desc>
				check the result of snmp interface mode (eth1,red0,agg0)when ap's type is not ap120.
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<log-file>snmp.interface.mode.0_snmp_ap1.log</log-file>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.eth1.index.number} = INTEGER: 2"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.red0.index.number} = INTEGER: 2"</log-match>
			<log-match>-i "SNMPv2-SMI::enterprises.26928.1.1.1.2.1.1.1.5.${ap1.agg0.index.number} = INTEGER: 2"</log-match>
		</step>
	</stage>
</testcase>