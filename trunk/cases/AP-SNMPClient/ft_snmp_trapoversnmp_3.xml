<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Whenever interface state change occurs, trap will be sent to SNMP server Precondition Enable trap over SNMP by snmp trapinfo oversnmp in AP Disable trap over Capwap by no trapinfo overcapwap in AP Set trap host by snmp traphost v2c a.b.c.d with default community (a.b.c.d is PC's ip address) in AP change occurs." ::= { ahTrapModule 3} 6.1.2.4. Ft_SNMP_TrapoverSNMP_4</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:

		1. Up interface wifi0.1(create a SSID and bind it to interface wifi0),
		use Wireshark or Ethereal to capture packet , check if trap be
		sent to SNMP server ,check trap format
		2. Shutdown interface wifi0.1(unbind SSID), use Wireshark or
		Ethereal to capture packet , check if trap be sent to SNMP
		server, check trap format
		3. Change community and do the above operation, check if trap be
		sent to SNMP server, check trap format
		4. Change version to v1 with default community, execute CLI
		"_test trapcase alert statechange" to generate trap, check if trap
		can be sent to SNMP server, check trap format
		5. Change community, do the same operation as above, check if
		trap can be sent to SNMP server, check trap format
		6. For AP340, when AP use red0 interface , the trap will be sent
		if interface status is backup&gt;active; active&gt;backup(bind red0 to
		interface eth0 and eth1, then unplug eth0 cable) (version is v2c
		or v1, community with default or userdefined)
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<property name="checkfile" value="/tmp/checkfile" />

	<stage>
		<step no="0">
			<desc>rm checkfile</desc>
			<ssh host="${tb.server1}">
				-v "rm -f ${checkfile}"
			</ssh>
		</step>

		<step no="0.1">
			<desc>
				Enable trap over SNMP by snmp trapinfo oversnmp in AP
				Disable trap over Capwap by no trapinfo overcapwap in AP
				Set trap host by snmp traphost v2c a.b.c.d with default community (a.b.c.d is PCâ€™s ip address) in AP
			</desc>
			<telnet target="ap1">
				-v "snmp trap-host v2c ${tb.server1}"
				-v "snmp trap-info over-snmp"
				-v "no snmp trap-info over-capwap"
			</telnet>
		</step>

		<step no="1">
			<desc>
				1. Up interface wifi0.1(create a SSID and bind it to interface wifi0),
				use Wireshark or Ethereal to capture packet , check if trap be
				sent to SNMP server ,check trap format
			</desc>
			<telnet target="ap1">
				-v "_test trap-case alert threshold"
			</telnet>
		</step>

		<step no="1.1">
			<desc>check log file</desc>
			<log-file>check_log_file1.log</log-file>
			<ssh host="${tb.server1}">
				-v "cat ${checkfile}"
				-v "rm -f ${checkfile}"
			</ssh>
			<log-match>-c -i "SNMPv2-MIB" -i "ahThresholdCrossingEvent," -i "ahAPId" -i "ahAPName" -i "ahTrapDesc = cpu temperature overflow" -i "ahCode" -i "ahObjectName = cpu temperature" -i "ahCurValue = 85" -i "ahThresholdHigh = 80" -i "ahThresholdLow = -10"</log-match>
		</step>

		<step no="2">
			<desc>
				2. Shutdown interface wifi0.1(unbind SSID), use Wireshark or
				Ethereal to capture packet , check if trap be sent to SNMP
				server, check trap format
			</desc>
			<telnet target="ap1">
				-v "no snmp trap-host v2c ${tb.server1}"
				-v "snmp trap-host v2c ${tb.server1} community aerohive"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				_test trap-case alert threshold
			</desc>
			<telnet target="ap1">
				-v "_test trap-case alert threshold"
			</telnet>
		</step>

		<step no="2.2">
			<desc>check log file</desc>
			<log-file>check_log_file2.log</log-file>
			<ssh host="${tb.server1}">
				-v "cat ${checkfile}"
				-v "rm -f ${checkfile}"
			</ssh>
			<log-match>-c -i "SNMPv2-MIB" -i "ahThresholdCrossingEvent," -i "ahAPId" -i "ahAPName" -i "ahTrapDesc = cpu temperature overflow" -i "ahCode" -i "ahObjectName = cpu temperature" -i "ahCurValue = 85" -i "ahThresholdHigh = 80" -i "ahThresholdLow = -10"</log-match>
		</step>

		<step no="3">
			<desc>
				3. Change community and do the above operation, check if trap be
				sent to SNMP server, check trap format
			</desc>
			<telnet target="ap1">
				-v "no snmp trap-host v2c ${tb.server1}"
				-v "snmp trap-host v1 ${tb.server1}"
			</telnet>
		</step>

		<step no="3.1">
			<desc>
				_test trap-case alert threshold
			</desc>
			<telnet target="ap1">
				-v "_test trap-case alert threshold"
			</telnet>
		</step>

		<step no="3.2">
			<desc>check log file</desc>
			<log-file>check_log_file3.log</log-file>
			<ssh host="${tb.server1}">
				-v "cat ${checkfile}"
				-v "rm -f ${checkfile}"
			</ssh>
			<log-match>-c -i "${tb.server1}" -i "${ap1.mgt0.ip}" -i "ahAPId" -i "ahAPName" -i "ahTrapDesc = cpu temperature overflow" -i "ahCode" -i "ahObjectName = cpu temperature" -i "ahCurValue = 85" -i "ahThresholdHigh = 80" -i "ahThresholdLow = -10" -i "snmpTrapAddress.0 = ${ap1.mgt0.ip}" -i "snmpTrapCommunity.0 = \\\&quot;hivecommunity\\\&quot;"</log-match>
		</step>

		<step no="4">
			<desc>
				4. Change version to v1 with default community, execute CLI
				"_test trapcase alert statechange" to generate trap, check if trap
				can be sent to SNMP server, check trap format
			</desc>
			<telnet target="ap1">
				-v "no snmp trap-host v1 ${tb.server1}"
				-v "snmp trap-host v1 ${tb.server1} community aerohive"
			</telnet>
		</step>

		<step no="4.1">
			<desc>
				_test trap-case alert threshold
			</desc>
			<telnet target="ap1">
				-v "_test trap-case alert threshold"
			</telnet>
		</step>

		<step no="4.2">
			<desc>check log file</desc>
			<log-file>check_log_file4.log</log-file>
			<ssh host="${tb.server1}">
				-v "cat ${checkfile}"
				-v "rm -f ${checkfile}"
			</ssh>
			<log-match>-c -i "${tb.server1}" -i "${ap1.mgt0.ip}" -i "ahAPId" -i "ahAPName" -i "ahTrapDesc = cpu temperature overflow" -i "ahCode" -i "ahObjectName = cpu temperature" -i "ahCurValue = 85" -i "ahThresholdHigh = 80" -i "ahThresholdLow = -10" -i "snmpTrapAddress.0 = ${ap1.mgt0.ip}" -i "snmpTrapCommunity.0 = \\\&quot;aerohive\\\&quot;"</log-match>
		</step>
	</stage>
</testcase>