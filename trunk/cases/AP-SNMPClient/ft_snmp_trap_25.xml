<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>When AP with the max SNMP server, the same trap can be sent to every SNMP server Precondition AP connect to HM Configure 4 SNMP server in AP with different community Use Wireshark or Ethereal to capture packet</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Test Procedure:

		1. Execute CLI "_test trapcase alert { bwsentinel| channelpower|
		clientinfo| connectionchange| failure| idp| interferencealert|
		mitigate|
		Powerinfo| statechange| threshold} to generate trap, check if trap
		can sent to every SNMP server
		2. Change community, then do the same operation as above, check
		if trap can be sent to every SNMP server
		3. Change version to v1 and with default community, then do the
		same same operation , check if trap can be sent to every SNMP
		server
		4. Change community and do the same operation, check if trap can
		be sent to every SNMP server
	</description>
	<numofap>1</numofap>
	<numofsta>3</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="community1" value="aerohive1" />
	<property name="community2" value="aerohive2" />
	<property name="community3" value="aerohive3" />
	<property name="community4" value="aerohive4" />

	<stage>
		<step no="0">
			<desc>
				config ssid
			</desc>
			<telnet target="ap1">
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
			</telnet>
		</step>

		<include prefix="0.1" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<include prefix="0.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta2, ap1" />

		<include prefix="0.3" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta3, ap1" />

		<step no="0.4">
			<desc>
				config snmp server
			</desc>
			<telnet target="ap1">
				-v "snmp trap-host v2c ${tb.server1} community ${community1}"
				-v "snmp trap-host v2c ${sta1.tif.ip} community ${community2}"
				-v "snmp trap-host v2c ${sta2.tif.ip} community ${community3}"
				-v "snmp trap-host v2c ${sta3.tif.ip} community ${community4}"
				-v "snmp trap-info over-snmp"
				-v "no snmp trap-info over-capwap"
			</telnet>
		</step>

		<step no="0.5.1">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>start_tshark1.log</log-file>
			<ssh host="${tb.server1}">
				-v "nohup tshark -i ${tb.server1.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="0.5.2">
			<desc>
				get process id
			</desc>
			<setvar name="process_id1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/start_tshark1.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="0.5.3">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>start_tshark2.log</log-file>
			<ssh target="sta1">
				-v "nohup tshark -i ${sta1.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="0.5.4">
			<desc>
				get process id
			</desc>
			<setvar name="process_id2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/start_tshark2.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="0.5.5">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>start_tshark3.log</log-file>
			<ssh target="sta2">
				-v "nohup tshark -i ${sta2.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="0.5.6">
			<desc>
				get process id
			</desc>
			<setvar name="process_id3">
				${bin.dir}/getbyrexp.py -f ${log.dir}/start_tshark3.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="0.5.7">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>start_tshark4.log</log-file>
			<ssh target="sta3">
				-v "nohup tshark -i ${sta3.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="0.5.8">
			<desc>
				get process id
			</desc>
			<setvar name="process_id4">
				${bin.dir}/getbyrexp.py -f ${log.dir}/start_tshark4.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="1">
			<desc>
				1. Execute CLI "_test trapcase alert { bwsentinel| channelpower|
				clientinfo| connectionchange| failure| idp| interferencealert|
				mitigate|
				Powerinfo| statechange| threshold} to generate trap, check if trap
				can sent to every SNMP server
			</desc>
			<telnet target="ap1">
				-v "_test trap-case alert failure"
			</telnet>
		</step>

		<step no="1.1.1" delay="20">
			<desc>check log file</desc>
			<log-file>check_log_file1.log</log-file>
			<ssh host="${tb.server1}">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${tb.server1} \(${tb.server1}\)" -ps p "version: v2c" p "community: ${community1}" p "data: sNMPv2-Trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="1.1.2">
			<desc>
				kill tshark
			</desc>
			<ssh host="${tb.server1}">
				-v "kill ${process_id}"
			</ssh>
		</step>

		<step no="1.1.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh host="${tb.server1}">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="1.2.1">
			<desc>check log file</desc>
			<log-file>check_log_file2.log</log-file>
			<ssh target="sta1">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta1.tif.ip} \(${sta1.tif.ip}\)" -ps p "version: v2c" p "community: ${community2}" p "data: sNMPv2-Trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="1.2.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta1">
				-v "kill ${process_id2}"
			</ssh>
		</step>

		<step no="1.2.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta1">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="1.3.1">
			<desc>check log file</desc>
			<log-file>check_log_file3.log</log-file>
			<ssh target="sta2">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta2.tif.ip} \(${sta2.tif.ip}\)" -ps p "version: v2c" p "community: ${community3}" p "data: sNMPv2-Trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="1.3.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta2">
				-v "kill ${process_id3}"
			</ssh>
		</step>

		<step no="1.3.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta2">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="1.4.1">
			<desc>check log file</desc>
			<log-file>check_log_file4.log</log-file>
			<ssh target="sta3">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta3.tif.ip} \(${sta3.tif.ip}\)" -ps p "version: v2c" p "community: ${community4}" p "data: sNMPv2-Trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="1.4.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta3">
				-v "kill ${process_id4}"
			</ssh>
		</step>

		<step no="1.4.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta3">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="2">
			<desc>
				2. Change community, then do the same operation as above, check
				if trap can be sent to every SNMP server
			</desc>
			<telnet target="ap1">
				-v "no snmp trap-host v2c ${tb.server1}"
				-v "no snmp trap-host v2c ${sta1.tif.ip}"
				-v "no snmp trap-host v2c ${sta2.tif.ip}"
				-v "no snmp trap-host v2c ${sta3.tif.ip}"
				-v "snmp trap-host v2c ${tb.server1} community ${community4}"
				-v "snmp trap-host v2c ${sta1.tif.ip} community ${community3}"
				-v "snmp trap-host v2c ${sta2.tif.ip} community ${community2}"
				-v "snmp trap-host v2c ${sta3.tif.ip} community ${community1}"
			</telnet>
		</step>

		<step no="1.5.1">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>start_tshark1.log</log-file>
			<ssh host="${tb.server1}">
				-v "nohup tshark -i ${tb.server1.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="1.5.2">
			<desc>
				get process id
			</desc>
			<setvar name="process_id1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/start_tshark1.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="1.5.3">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>start_tshark2.log</log-file>
			<ssh target="sta1">
				-v "nohup tshark -i ${sta1.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="1.5.4">
			<desc>
				get process id
			</desc>
			<setvar name="process_id2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/start_tshark2.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="1.5.5">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>start_tshark3.log</log-file>
			<ssh target="sta2">
				-v "nohup tshark -i ${sta2.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="1.5.6">
			<desc>
				get process id
			</desc>
			<setvar name="process_id3">
				${bin.dir}/getbyrexp.py -f ${log.dir}/start_tshark3.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="1.5.7">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>start_tshark4.log</log-file>
			<ssh target="sta3">
				-v "nohup tshark -i ${sta3.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="1.5.8">
			<desc>
				get process id
			</desc>
			<setvar name="process_id4">
				${bin.dir}/getbyrexp.py -f ${log.dir}/start_tshark4.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="1">
			<desc>
				1. Execute CLI "_test trapcase alert { bwsentinel| channelpower|
				clientinfo| connectionchange| failure| idp| interferencealert|
				mitigate|
				Powerinfo| statechange| threshold} to generate trap, check if trap
				can sent to every SNMP server
			</desc>
			<telnet target="ap1">
				-v "_test trap-case alert failure"
			</telnet>
		</step>

		<step no="2.1.1" delay="20">
			<desc>check log file</desc>
			<log-file>step2_check_log_file1.log</log-file>
			<ssh host="${tb.server1}">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${tb.server1} \(${tb.server1}\)" -ps p "version: v2c" p "community: ${community4}" p "data: sNMPv2-Trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="2.1.2">
			<desc>
				kill tshark
			</desc>
			<ssh host="${tb.server1}">
				-v "kill ${process_id}"
			</ssh>
		</step>

		<step no="2.1.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh host="${tb.server1}">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="2.2.1">
			<desc>check log file</desc>
			<log-file>step2_check_log_file2.log</log-file>
			<ssh target="sta1">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta1.tif.ip} \(${sta1.tif.ip}\)" -ps p "version: v2c" p "community: ${community3}" p "data: sNMPv2-Trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="2.2.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta1">
				-v "kill ${process_id2}"
			</ssh>
		</step>

		<step no="2.2.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta1">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="2.3.1">
			<desc>check log file</desc>
			<log-file>step2_check_log_file3.log</log-file>
			<ssh target="sta2">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta2.tif.ip} \(${sta2.tif.ip}\)" -ps p "version: v2c" p "community: ${community2}" p "data: sNMPv2-Trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="2.3.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta2">
				-v "kill ${process_id3}"
			</ssh>
		</step>

		<step no="2.3.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta2">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="2.4.1">
			<desc>check log file</desc>
			<log-file>step2_check_log_file4.log</log-file>
			<ssh target="sta3">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta3.tif.ip} \(${sta3.tif.ip}\)" -ps p "version: v2c" p "community: ${community1}" p "data: sNMPv2-Trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="2.4.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta3">
				-v "kill ${process_id4}"
			</ssh>
		</step>

		<step no="2.4.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta3">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="3">
			<desc>
				3. Change version to v1 and with default community, then do the
				same same operation , check if trap can be sent to every SNMP
				server
			</desc>
			<telnet target="ap1">
				-v "no snmp trap-host v2c ${tb.server1}"
				-v "no snmp trap-host v2c ${sta1.tif.ip}"
				-v "no snmp trap-host v2c ${sta2.tif.ip}"
				-v "no snmp trap-host v2c ${sta3.tif.ip}"
				-v "snmp trap-host v1 ${tb.server1} community ${community1}"
				-v "snmp trap-host v1 ${sta1.tif.ip} community ${community2}"
				-v "snmp trap-host v1 ${sta2.tif.ip} community ${community3}"
				-v "snmp trap-host v1 ${sta3.tif.ip} community ${community4}"
			</telnet>
		</step>

		<step no="2.5.1">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>step2_start_tshark1.log</log-file>
			<ssh host="${tb.server1}">
				-v "nohup tshark -i ${tb.server1.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="2.5.2">
			<desc>
				get process id
			</desc>
			<setvar name="process_id1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2_start_tshark1.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="2.5.3">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>step2_start_tshark2.log</log-file>
			<ssh target="sta1">
				-v "nohup tshark -i ${sta1.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="2.5.4">
			<desc>
				get process id
			</desc>
			<setvar name="process_id2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2_start_tshark2.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="2.5.5">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>step2_start_tshark3.log</log-file>
			<ssh target="sta2">
				-v "nohup tshark -i ${sta2.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="2.5.6">
			<desc>
				get process id
			</desc>
			<setvar name="process_id3">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2_start_tshark3.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="2.5.7">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>step2_start_tshark4.log</log-file>
			<ssh target="sta3">
				-v "nohup tshark -i ${sta3.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="1">
			<desc>
				1. Execute CLI "_test trapcase alert { bwsentinel| channelpower|
				clientinfo| connectionchange| failure| idp| interferencealert|
				mitigate|
				Powerinfo| statechange| threshold} to generate trap, check if trap
				can sent to every SNMP server
			</desc>
			<telnet target="ap1">
				-v "_test trap-case alert failure"
			</telnet>
		</step>

		<step no="2.5.8">
			<desc>
				get process id
			</desc>
			<setvar name="process_id4">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step2_start_tshark4.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="3.1.1" delay="20">
			<desc>check log file</desc>
			<log-file>step3_check_log_file1.log</log-file>
			<ssh host="${tb.server1}">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${tb.server1} \(${tb.server1}\)" -ps p "version: version-1" p "community: ${community1}" p "data: trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="3.1.2">
			<desc>
				kill tshark
			</desc>
			<ssh host="${tb.server1}">
				-v "kill ${process_id}"
			</ssh>
		</step>

		<step no="3.1.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh host="${tb.server1}">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="3.2.1">
			<desc>check log file</desc>
			<log-file>step3_check_log_file2.log</log-file>
			<ssh target="sta1">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta1.tif.ip} \(${sta1.tif.ip}\)" -ps p "version: version-1" p "community: ${community2}" p "data: trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="3.2.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta1">
				-v "kill ${process_id2}"
			</ssh>
		</step>

		<step no="3.2.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta1">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="3.3.1">
			<desc>check log file</desc>
			<log-file>step3_check_log_file3.log</log-file>
			<ssh target="sta2">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta2.tif.ip} \(${sta2.tif.ip}\)" -ps p "version: version-1" p "community: ${community3}" p "data: trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="3.3.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta2">
				-v "kill ${process_id3}"
			</ssh>
		</step>

		<step no="3.3.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta2">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="3.4.1">
			<desc>check log file</desc>
			<log-file>step3_check_log_file4.log</log-file>
			<ssh target="sta3">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta3.tif.ip} \(${sta3.tif.ip}\)" -ps p "version: version-1" p "community: ${community4}" p "data: trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="3.4.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta3">
				-v "kill ${process_id4}"
			</ssh>
		</step>

		<step no="3.4.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta3">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="4">
			<desc>
				4. Change community and do the same operation, check if trap can
				be sent to every SNMP server
			</desc>
			<telnet target="ap1">
				-v "no snmp trap-host v1 ${tb.server1}"
				-v "no snmp trap-host v1 ${sta1.tif.ip}"
				-v "no snmp trap-host v1 ${sta2.tif.ip}"
				-v "no snmp trap-host v1 ${sta3.tif.ip}"
				-v "snmp trap-host v1 ${tb.server1} community ${community4}"
				-v "snmp trap-host v1 ${sta1.tif.ip} community ${community3}"
				-v "snmp trap-host v1 ${sta2.tif.ip} community ${community2}"
				-v "snmp trap-host v1 ${sta3.tif.ip} community ${community1}"
			</telnet>
		</step>


		<step no="3.5.1">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>step3_start_tshark1.log</log-file>
			<ssh host="${tb.server1}">
				-v "nohup tshark -i ${tb.server1.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="3.5.2">
			<desc>
				get process id
			</desc>
			<setvar name="process_id1">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3_start_tshark1.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="3.5.3">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>step3_start_tshark2.log</log-file>
			<ssh target="sta1">
				-v "nohup tshark -i ${sta1.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="3.5.4">
			<desc>
				get process id
			</desc>
			<setvar name="process_id2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3_start_tshark2.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="3.5.5">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>step3_start_tshark3.log</log-file>
			<ssh target="sta2">
				-v "nohup tshark -i ${sta2.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="3.5.6">
			<desc>
				get process id
			</desc>
			<setvar name="process_id3">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3_start_tshark3.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="3.5.7">
			<desc>
				open tshark on snmp server background
			</desc>
			<log-file>step3_start_tshark4.log</log-file>
			<ssh target="sta3">
				-v "nohup tshark -i ${sta3.tif.name} -w /tmp/tshark_log.pcap &gt; yyy.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="3.5.8">
			<desc>
				get process id
			</desc>
			<setvar name="process_id4">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3_start_tshark4.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="1">
			<desc>
				1. Execute CLI "_test trapcase alert { bwsentinel| channelpower|
				clientinfo| connectionchange| failure| idp| interferencealert|
				mitigate|
				Powerinfo| statechange| threshold} to generate trap, check if trap
				can sent to every SNMP server
			</desc>
			<telnet target="ap1">
				-v "_test trap-case alert failure"
			</telnet>
		</step>

		<step no="4.1.1" delay="20">
			<desc>check log file</desc>
			<log-file>step4_check_log_file1.log</log-file>
			<ssh host="${tb.server1}">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${tb.server1} \(${tb.server1}\)" -ps p "version: version-1" p "community: ${community4}" p "data: trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="4.1.2">
			<desc>
				kill tshark
			</desc>
			<ssh host="${tb.server1}">
				-v "kill ${process_id}"
			</ssh>
		</step>

		<step no="4.1.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh host="${tb.server1}">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="4.2.1">
			<desc>check log file</desc>
			<log-file>step4_check_log_file2.log</log-file>
			<ssh target="sta1">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta1.tif.ip} \(${sta1.tif.ip}\)" -ps p "version: version-1" p "community: ${community3}" p "data: trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="4.2.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta1">
				-v "kill ${process_id2}"
			</ssh>
		</step>

		<step no="4.2.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta1">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="4.3.1">
			<desc>check log file</desc>
			<log-file>step4_check_log_file3.log</log-file>
			<ssh target="sta2">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta2.tif.ip} \(${sta2.tif.ip}\)" -ps p "version: version-1" p "community: ${community2}" p "data: trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="4.3.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta2">
				-v "kill ${process_id3}"
			</ssh>
		</step>

		<step no="4.3.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta2">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>

		<step no="4.4.1">
			<desc>check log file</desc>
			<log-file>step4_check_log_file4.log</log-file>
			<ssh target="sta3">
				-v "tshark -r /tmp/tshark_log.pcap -V -R snmp"
			</ssh>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Internet Protocol, Src: ${ap1.mgt0.ip} \(${ap1.mgt0.ip}\), Dst: ${sta3.tif.ip} \(${sta3.tif.ip}\)" -ps p "version: version-1" p "community: ${community1}" p "data: trap" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="4.4.2">
			<desc>
				kill tshark
			</desc>
			<ssh target="sta3">
				-v "kill ${process_id4}"
			</ssh>
		</step>

		<step no="4.4.3">
			<desc>
				remove tmpfile
			</desc>
			<ssh target="sta3">
				-v "rm -f /tmp/tshark_log.pcap"
			</ssh>
		</step>
	</stage>

	<post-process>
		<stage>
			<step no="1">
				<desc>
					kill tshark
				</desc>
				<ssh host="${tb.server1}">
					-v "kill ${process_id}"
				</ssh>
			</step>

			<step no="1.1">
				<desc>
					remove tmpfile
				</desc>
				<ssh host="${tb.server1}">
					-v "rm -f /tmp/tshark_log.pcap"
				</ssh>
			</step>

			<step no="2">
				<desc>
					kill tshark
				</desc>
				<ssh target="sta1">
					-v "kill ${process_id2}"
				</ssh>
			</step>

			<step no="2.1">
				<desc>
					remove tmpfile
				</desc>
				<ssh target="sta1">
					-v "rm -f /tmp/tshark_log.pcap"
				</ssh>
			</step>

			<step no="3">
				<desc>
					kill tshark
				</desc>
				<ssh target="sta2">
					-v "kill ${process_id3}"
				</ssh>
			</step>

			<step no="3.1">
				<desc>
					remove tmpfile
				</desc>
				<ssh target="sta2">
					-v "rm -f /tmp/tshark_log.pcap"
				</ssh>
			</step>

			<step no="4">
				<desc>
					kill tshark
				</desc>
				<ssh target="sta3">
					-v "kill ${process_id4}"
				</ssh>
			</step>

			<step no="4.1">
				<desc>
					remove tmpfile
				</desc>
				<ssh target="sta3">
					-v "rm -f /tmp/tshark_log.pcap"
				</ssh>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />

	</post-process>
</testcase>