<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>account-interim-interval returned from radius server, then fast roaming</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-two APs,config a ssid with wpa2 802.1x on both AP
		-enable accounting on this ssid
		-active the ssid
		-add the attribute of Acct-Interim-Interval to the account on radius
		server

		Test Procedure:
		-client connects to the ssid on AP1
		-client do fast roaming(reconnect)
		-check client fast roaming success
		-check the account-interim-interval on AP2
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>windows</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="acct1.InterimInterval" value="30" />

	<stage>
		<include prefix="start_selenium_server" file="subs/start_selenium_server.xml" args="${sta1.mif.ip}, ${job_selenium_dir}, ${job_selenium_jar}, ${job_selenium_workload}" />

		<include prefix="add_account" file="subs/ldap_add1.xml" args="${job.sid}-aerohive, aerohive" obj-args="acct1" />

		<step no="1">
			<desc>
				-config e-cwp radius auth on ap1
			</desc>
			<telnet target="ap1">
				-v "hive ${hive.name}123"
				-v "interface mgt0 hive ${hive.name}123"
				-v "security-object in_cwp"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security protocol-suite wpa2-tkip-8021x"
				-v "security-object in_cwp security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret} acct-port ${pub.radius1.acctport}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal auth-user-profile-attr 1 timer-display"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security additional-auth-method captive-web-portal external-server primary login-page http://${pub.ecwp1.ip}/weblogin.php/7"
				-v "security-object in_cwp walled-garden ip-address ${pub.ecwp1.ip}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal failure-redirect login-page"
				-v "security-object in_cwp web-server"
				-v "security-object in_cwp security additional-auth-method
				captive-web-portal timer-display alert 10"
			</telnet>
		</step>

		<step no="1.1">
			<desc>
				-config ssid and enable accounting on this ssid, active the ssid
				-open debug mode and clear log all
			</desc>
			<telnet target="ap1">
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object in_cwp"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile auto qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "_debug auth all"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2">
			<desc>
				-config e-cwp radius auth on ap2
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}123"
				-v "interface mgt0 hive ${hive.name}123"
				-v "security-object in_cwp"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security protocol-suite wpa2-tkip-8021x"
				-v "security-object in_cwp security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret} acct-port ${pub.radius1.acctport}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal auth-user-profile-attr 1 timer-display"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security additional-auth-method captive-web-portal external-server primary login-page http://${pub.ecwp1.ip}/weblogin.php/7"
				-v "security-object in_cwp walled-garden ip-address ${pub.ecwp1.ip}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal failure-redirect login-page"
				-v "security-object in_cwp web-server"
				-v "security-object in_cwp security additional-auth-method
				captive-web-portal timer-display alert 10"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				-config ssid and enable accounting on this ssid, active the ssid
				-open debug mode and clear log all
			</desc>
			<telnet target="ap2">
				-v "interface wif0 radio channel 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object in_cwp"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name} shutdown"
				-v "user-profile auto qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "_debug auth all"
				-v "clear log all"
			</telnet>
		</step>

		<step no="3">
			<desc>Generate wifi_aerohive_test profile</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/wpa2_tkip_8021x.xml -o wifi_aerohive_test_1.xml -s "${ssid.name}" -l ${log.dir}
			</script>
		</step>

		<step no="3.1">
			<desc>Copy to target Windows host machine a wifi windows profile file </desc>
			<script>
				staf local fs copy file ${log.dir}/wifi_aerohive_test_1.xml tofile "c:\\staf\\wifi_aerohive_test_1.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="3.2">
			<desc>Bring down the client Wireless</desc>
			<script>
				perl ${bin.dir}/stafcmd.pl -d ${sta1.mif.ip} -v "netsh wlan disconnect interface=\"${sta1.tif.name}\""
			</script>
		</step>

		<step no="3.3">
			<desc>Delete current Wireless profile</desc>
			<script>
				perl ${bin.dir}/stafcmd.pl -d ${sta1.mif.ip} -v "netsh wlan delete profile ${ssid.name} "
			</script>
		</step>

		<step no="3.4">
			<desc>Add new profile</desc>
			<script>
				perl ${bin.dir}/stafcmd.pl -d ${sta1.mif.ip} -v "netsh wlan add profile filename="c:\\staf\\wifi_aerohive_test_1.xml" interface=\"${sta1.tif.name}\""
			</script>
		</step>

		<step no="3.5" delay="180">
			<desc>Bring up the client Wireless</desc>
			<log-file>laptop1_connect_ssid1.log</log-file>
			<script>
				perl ${bin.dir}/stafcmd.pl -d ${sta1.mif.ip} -v "netsh wlan connect ssid=${ssid.name} name=${ssid.name} interface=\"${sta1.tif.name}\"" -v " netsh wlan show profiles ${ssid.name}" -v "netsh wlan show interfaces" -l ${log.dir} -o ${log.file}
			</script>
		</step>

		<step no="3.6" delay="15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if sta1 is associated successfully</desc>
			<log-file>step3.6_ipconfig_sta1_${loop_check.idx}.log</log-file>
			<script>
				${bin.dir}/stafcmd.pl -d ${__STA__.mif.ip} -v "netsh wlan show interface " -l ${log.dir} -o ${log.file}
			</script>
			<log-match>-i "State\s*:\s*connected" -c</log-match>
			<log-match>-i "SSID" -i "${__CONN__.ssid}" </log-match>
		</step>

		<step no="3.7" delay="15">
			<desc>Dump all interfaces data from remote host</desc>
			<log-file>ipconfig_${sta1.mif.ip}.log</log-file>
			<script>
				perl ${bin.dir}/stafcmd.pl -d ${sta1.mif.ip} -v "ipconfig /all" -l ${log.dir} -o ${log.file}
			</script>
		</step>

		<step no="3.8">
			<desc>Get laptop's IP</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ipconfig_${sta1.mif.ip}.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="3.9">
			<desc>Get laptop's MAC</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ipconfig_${sta1.mif.ip}.log -i Wireless -o win -m
			</setvar>
		</step>

		<step no="4">
			<desc>
				access public HM through CWP
			</desc>
			<log-file>station_log_in.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/scripts/cwp/cwp_login_positive_amigoopod.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters visit.url=${pub.hm2.ip} login.username=${job.sid}-aerohive login.password=aerohive -t ff -f ${log.dir}/${log.file} -l info --preserve-session &gt; ${log.dir}/session_id.log
			</script>
		</step>

		<step no="4.1">
			<desc>
				get session id
			</desc>
			<setvar name="session.id">
				${bin.dir}/getbyrexp.py -p "- session preserved - (\S+) pic:" -f ${log.dir}/session_id.log
			</setvar>
		</step>

		<step no="5">
			<desc>
				- 'sh ssid xxx sta',
			</desc>
			<log-file>step5_show_station.log</log-file>
			<telnet target="ap1">
				-v "show ssid ${ssid.name} station"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "1 *yes *1" </log-match>
		</step>

		<step no="5.1">
			<desc>
				-'sh auth'
			</desc>
			<log-file>step5.1_show_auth.log</log-file>
			<telnet target="ap1">
				-v "show auth"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac} *wifi0.1 *04 *${sta1.tif.ip}"</log-match>
		</step>

		<step no="6">
			<desc>
				-'sh roa ca'
			</desc>
			<log-file>step6_show_roaming.log</log-file>
			<telnet target="ap1">
				-v "show roaming cache"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac}" -i "YYNN"</log-match>
		</step>

		<step no="6.1">
			<desc>
				-'sh roa ca'
			</desc>
			<log-file>step6.1_show_roaming.log</log-file>
			<telnet target="ap2">
				-v "show roaming cache"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac}" -i "1 *YYNN"</log-match>
		</step>

		<step no="7">
			<desc>show logging buffered on ap1</desc>
			<log-file>step7_show_logging_buffered.log</log-file>
			<telnet target="ap1" timeout="300">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "Accounting-Request"</log-match>
		</step>

		<step no="7.1">
			<desc>Get the first times of sending accounting request</desc>
			<setvar name="first.send.acct.request">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step7_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*RADIUS message:\s*code=\d+\s*\(Accounting-Request\)\s*identifier=\d+\s*length=\d+" -t str -g0 -s none
			</setvar>
		</step>

		<step no="7.2">
			<desc>Get the second times of sending accounting request</desc>
			<setvar name="second.send.acct.request">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step7_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*RADIUS message:\s*code=\d+\s*\(Accounting-Request\)\s*identifier=\d+\s*length=\d+" -t str -g1 -s none
			</setvar>
		</step>

		<step no="7.3">
			<desc>
				check if the interval is 30.
			</desc>
			<log-file>step7.3_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${first.send.acct.request}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${second.send.acct.request}', '%Y-%m-%d %H:%M:%S').timetuple())) == 30.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="8">
			<desc>enable ssid ${ssid.name}on AP2</desc>
			<telnet target="ap2">
				-v "no interface wifi0 ssid ${ssid.name} shutdown"
			</telnet>
		</step>

		<step no="8.1" delay="5">
			<desc>disable ssid ${ssid.name}on AP1</desc>
			<telnet target="ap1">
				-v "interface wifi0 ssid ${ssid.name} shutdown"
			</telnet>
		</step>

		<step no="9" delay="10" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show station on ap2
			</desc>
			<log-file>step9_show_station_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show station"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="9.1" delay="10" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show station on ap1
			</desc>
			<log-file>step9.1_show_station_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show station"
			</telnet>
			<log-match>-n -c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="10">
			<desc>
				-'sh roa ca'
			</desc>
			<log-file>step10_show_roaming.log</log-file>
			<telnet target="ap1">
				-v "show roaming cache"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac}" -i "1 *YYNN"</log-match>
		</step>

		<step no="10.1">
			<desc>
				-'sh roa ca'
			</desc>
			<log-file>step10.1_show_roaming.log</log-file>
			<telnet target="ap2">
				-v "show roaming cache"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac}" -i "0 *YYNN"</log-match>
		</step>

		<step no="11" delay="30">
			<desc>show logging buffered on ap1</desc>
			<log-file>step11_show_logging_buffered.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
		</step>

		<step no="11.1">
			<desc>Get the first times of sending accounting request</desc>
			<setvar name="roaming.first.send.acct.request">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step11_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*RADIUS message:\s*code=\d+\s*\(Accounting-Request\)\s*identifier=\d+\s*length=\d+" -t str -g0 -s none
			</setvar>
		</step>

		<step no="11.2">
			<desc>Get the second times of sending accounting request</desc>
			<setvar name="roaming.second.send.acct.request">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step11_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*RADIUS message:\s*code=\d+\s*\(Accounting-Request\)\s*identifier=\d+\s*length=\d+" -t str -g1 -s none
			</setvar>
		</step>

		<step no="11.3">
			<desc>
				check if the interval is 30.
			</desc>
			<log-file>step11.3_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${roaming.first.send.acct.request}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${roaming.second.send.acct.request}', '%Y-%m-%d %H:%M:%S').timetuple())) == 30.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="11">
			<desc>
				do log out operate
			</desc>
			<log-file>station_log_out.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/scripts/cwp/cwp_login_positive_amigoopod.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters visit.url=${pub.hm2.ip} login.username=${job.sid}-aerohive login.password=aerohive -t ff -f ${log.dir}/${log.file} -l info --session-id ${session.id}
			</script>
		</step>
	</stage>

	<post-process>
		<stage>

			<include prefix="stop_selenium_server" file="subs/stop_selenium_server.xml" args="${sta1.mif.ip}, ${job_selenium_workload}" />

			<include prefix="delete_account" file="subs/ldap_delete.xml" args="${job.sid}-aerohive" />

		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>