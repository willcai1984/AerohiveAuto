<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Acct-Terminate-Cause, Session Timeout</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-config a ssid with 802.1x
		-enable accounting on this ssid
		-active the ssid
		-add the attribute of Session Timeout to the account on radius server

		Test Procedure:
		-client connects to this ssid
		-wait for this client being session timeout, check the last accounting request
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.proto" value="wpa2-aes-8021x" />
	<property name="conn1.username" value="${job.sid}-aerohive" />
	<property name="conn1.passwd" value="aerohive" />
	<property name="acct1.session_time" value="240" />
	<property name="ftp_test_file_local_dir" value="/tmp" />

	<stage>
		<include prefix="0" file="subs/ldap_add.xml" args="${job.sid}-aerohive, aerohive" obj-args="acct1" />

		<step no="0.1">
			<desc>
				delete local files
			</desc>
			<ssh target="sta1" timeout="500">
				-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
				-v "rm -f ${ftp_test_file_local_dir}/step3_stdout.log"
			</ssh>
		</step>

		<step no="1">
			<desc>Set SSID for ap1</desc>
			<telnet target="ap1">
				-v "ssid ${ssid.name}"
				-v "security-object autoap"
				-v "security-object autoap default-user-profile-attr 1"
				-v "security-object autoap security protocol-suite wpa2-aes-8021x"
				-v "security-object autoap security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security aaa radius-server accounting primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile normal qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "interface wif0 radio channel 1"
				-v "_debug auth all"
				-v "clear log all"
			</telnet>
		</step>

		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="3" delay="5">
			<desc>
				download files
			</desc>
			<log-file>step3_download_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "nohup curl -u ${tb.ftp.user}:${tb.ftp.passwd} ftp://${tb.ftp}/${tb.ftp.file3_small} -o ${ftp_test_file_local_dir}/${tb.ftp.file3_small} --limit-rate 100k --connect-timeout 200 &gt; ${ftp_test_file_local_dir}/step3_stdout.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="3.1" delay="15" type="loop-check" loop-max-times="5" loop-interval="5">
			<desc>
				wait for process end.
			</desc>
			<log-file>step3.1_curl_pid_chk_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ps aux | grep curl"
			</ssh>
			<log-match>-n -i "curl" -i "ftp"</log-match>
		</step>

		<step no="3.2">
			<desc>
				check "curl get" result
			</desc>
			<log-file>step3.2_check_file.log</log-file>
			<ssh target="sta1">
				-v "cat ${ftp_test_file_local_dir}/step3_stdout.log"
			</ssh>
			<log-match>-n -i "curl" -i "Connection time-out"</log-match>
		</step>

		<step no="3.3">
			<desc>
				cat files
			</desc>
			<log-file>step3.3_cat_file.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "ll -n ${ftp_test_file_local_dir} | grep ${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="3.4">
			<desc>show ssid xxx counter station xxx</desc>
			<log-file>step3.4_show_ssid_counter.log</log-file>
			<telnet target="ap1">
				-v "show ssid ${ssid.name} counter station ${sta1.tif.mac}"
			</telnet>
			<no-error-check />
		</step>

		<step no="4">
			<desc>Get the second number of times in default mode</desc>
			<setvar name="received.data.number">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3.4_show_ssid_counter.log -p "(\d+) tx data bytes" -t str
			</setvar>
		</step>

		<step no="5" delay="80" type="loop-check" loop-max-times="30" loop-interval="5">
			<desc>show logging buffered</desc>
			<log-file>step5_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchblocks.py">-b "Value: \d+" -ps p1 "Value: 5" p0 "Value: 5\d+" p1 "Attribute \d+ \(Acct-Terminate-Cause\)" -e "Attribute \d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Value: \d+" -ps p1 "Value: 2" p0 "Value: 2\d+" p1 "Attribute \d+ \(Acct-Status-Type\)" -e "Attribute \d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Value: \d+" -ps p1 "Value: 240" p0 "Value: 240\d+" p1 "Attribute \d+ \(Acct-Session-Time\)" -e "Attribute \d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Value:" -ps p "Value: 2" p1 "Attribute \d+ \(Acct-Status-Type\)" p "Value: 5" p1 "Attribute \d+ \(Acct-Terminate-Cause\)" p "Value: 240" p1 "Attribute \d+ \(Acct-Session-Time\)" p1 "RADIUS message: code=\d+ \(Accounting-Request\)" -e "RADIUS message: code=" -f ${log.dir}/${log.file}</log-match>
		</step>

		<include prefix="5.1" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step5.1_show_logging_buffered.log" />

		<step no="5.2">
			<desc>Get the second number of times in default mode</desc>
			<setvar name="acct.return.received.data.number">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step5.1_show_logging_buffered.log -b "Attribute 49 \(Acct-Terminate-Cause\)" -p "Value:\s*(\d+)" -e "Attribute 43 \(Acct-Output-Octets\)" -t str -g-1 -s none
			</setvar>
		</step>

		<step no="6">
			<desc>
				check if the value of (acct.return.received.data.number-received.data.number) is between 1 to 1000.
			</desc>
			<log-file>step6_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "${acct.return.received.data.number} - ${received.data.number} &gt;= 0 and ${acct.return.received.data.number} - ${received.data.number} &lt;= 1000" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>

			<include prefix="1" file="subs/ldap_delete.xml" args="${job.sid}-aerohive" />

			<step no="2">
				<desc>
					delete local files
				</desc>
				<ssh target="sta1">
					-v "killall -q curl"
					-v "rm -f ${ftp_test_file_local_dir}/${tb.ftp.file3_small}"
					-v "rm -f ${ftp_test_file_local_dir}/step3_stdout.log"
				</ssh>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>