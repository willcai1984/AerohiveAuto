<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>session timeout should work when STA does fast roaming</brief>
	<priority>high</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-AP1 and AP2 are roaming neighbours
		-config a ssid with wpa2 802.1x auth on both sides
		-config a radius server to support eap type
		-config the return attribute on radius server side:
		-wait for session-timeout
		-Termination-Action can be any value (0,1 or not set)

		Test Procedure:
		-client connected to AP1 success, stay with it for several minutes
		-client does fast roaming to AP2
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.proto" value="wpa2-aes-8021x" />
	<property name="conn1.username" value="${job.sid}-aerohive" />
	<property name="conn1.passwd" value="aerohive" />
	<property name="acct1.session_time" value="200" />

	<stage>
		<include prefix="0" file="subs/ldap_add.xml" args="${job.sid}-aerohive, aerohive" obj-args="acct1" />

		<step no="1">
			<desc>setup ap with ssid wpa2-aes-802.1x</desc>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "security-object ${ssid.name} security protocol-suite wpa2-aes-8021x"
				-v "security-object ${ssid.name} security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
				-v "user-profile ${ssid.name} vlan-id ${tb.vlan1} attribute 1"
				-v "roaming cache update-interval 10 ageout 30"
			</console>
		</step>

		<step no="2">
			<desc>setup ap with ssid wpa2-aes-802.1x</desc>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "security-object ${ssid.name} security protocol-suite wpa2-aes-8021x"
				-v "security-object ${ssid.name} security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object ${ssid.name} security preauth"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name} shutdown"
				-v "user-profile ${ssid.name} vlan-id ${tb.vlan1} attribute 1"
				-v "interface wifi0 radio channel 1"
				-v "roaming cache update-interval 10 ageout 30"
			</console>
		</step>
		<step no="pre.1.1">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>pre1.1_show_interface_mgt0_info.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="pre.1.2">
			<desc>Get ap1's ip</desc>
			<setvar name="ap1.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/pre1.1_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="pre.2.1">
			<desc>
				show interface mgt0 info
			</desc>
			<log-file>pre.2.1_show_interface_mgt0_info.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="pre.2.2">
			<desc>Get ap2's ip</desc>
			<setvar name="ap2.mgt0.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/pre.2.1_show_interface_mgt0_info.log -i mgt0 -o aero -nomask
			</setvar>
		</step>
		<step no="2.1">
			<desc>
				show interface wifi0 info
			</desc>
			<log-file>step2.1_show_interface_wifi0_info.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi0"
			</telnet>
		</step>

		<step no="2.2">
			<desc>Get ap2's wifi0‘s mac</desc>
			<setvar name="ap2.wifi0.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.1_show_interface_wifi0_info.log -i wifi0 -o aero -m -width
			</setvar>
		</step>

		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="4">
			<desc>show auth on AP1</desc>
			<log-file>show_auth_ap1.log</log-file>
			<telnet target="ap1" timeout="10">
				-v "show auth"
			</telnet>
			<log-match>-p 7 -i "done" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 9 -i "WPA2/CCMP" -i "${sta1.tif.mac}"</log-match>
		</step>

		<step no="5">
			<desc>show station on AP1</desc>
			<log-file>show_station_ap1.log</log-file>
			<telnet target="ap1" timeout="10">
				-v "show ssid ${ssid.name} station"
			</telnet>
			<log-match>-p 12 -i "Yes" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 7 -i "wpa2-8021x" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 8 -i "aes" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 2 -i "${sta1.tif.ip}" -i "${sta1.tif.mac}"</log-match>
		</step>

		<step no="6">
			<desc>show roaming cache on AP1</desc>
			<log-file>show_roaming_cache_ap1.log</log-file>
			<telnet target="ap1" timeout="10">
				-v "show roaming cache"
			</telnet>
			<log-match>-p 12 -i "YNNN" -i "${sta1.tif.mac}"</log-match>
			<log-match>-p 11 -i "0" -i "${sta1.tif.mac}"</log-match>
		</step>

		<step no="7">
			<desc>enable ssid ${ssid.name}on AP2</desc>
			<telnet target="ap2">
				-v "no interface wifi0 ssid ${ssid.name} shutdown"
			</telnet>
		</step>

		<step no="8">
			<desc>enable auth debug on AP2</desc>
			<telnet target="ap2">
				-v "_ff id 1 src-mac ${sta1.tif.mac} etype 88c7 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_debug auth all"
			</telnet>
		</step>

		<step no="9">
			<desc>show auth on AP2</desc>
			<log-file>show_auth_ap2.log</log-file>
			<telnet target="ap2">
				-v "show auth"
			</telnet>
		</step>

		<step no="10.1">
			<desc>get bssid on AP2</desc>
			<setvar name="ap2.bssid">
				${bin.dir}/getstring.pl -f ${log.dir}/show_auth_ap2.log -k SSID= -k1 AA= -k2 \;|sed 's/://g; s/../&amp;:/g;s/.$//'
			</setvar>
		</step>

		<step no="11">
			<desc>client does preauth against AP2</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "preauthenticate ${ap2.bssid}"
				-v "quit"
			</ssh>
		</step>

		<step no="12" delay="20" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check pre-auth success</desc>
			<log-file>preauth_check_${loop_check.idx}.log</log-file>
			<telnet target="ap2" timeout="10">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-c -i "pre-authentication for station ${sta1.tif.mac} succeeded"</log-match>
		</step>

		<step no="12.1">
			<desc>enable auth debug on AP2</desc>
			<telnet target="ap2">
				-v "no _kde fe basic"
				-v "_debug auth all"
				-v "clear log buffered"
			</telnet>
		</step>

		<step no="13">
			<desc>client roams to AP2</desc>
			<ssh target="sta1" timeout="10" prompt=">|.*#">
				-v "wpa_cli"
				-v "set_network 0 bssid ${ap2.bssid}"
				-v "reass"
				-v "quit"
			</ssh>
		</step>

		<step no="14" delay="5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-i "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="15" delay="20" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>check roaming process to AP2</desc>
			<log-file>auth_debug_ap2.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<log-match>-c -i "Number of PMKIDs provided by station ${sta1.tif.mac} = 1"</log-match>
			<log-match>-c -i "Auth info is got from local PMKSA cache: SPA=${sta1.tif.mac}"</log-match>
			<log-match>-c -i "PMK from PMKSA cache - skip IEEE 802.1X/EAP"</log-match>
			<no-error-check />
		</step>
		<step no="15.0">
			<desc>get connected time on AP2</desc>
			<setvar name="connected.time">
				${bin.dir}/getbyrexp.py -p "(\d+-\d+-\d+\s+\d+:\d+:\d+).*PMK from PMKSA cache - skip IEEE 802.1X/EAP" -f ${log.dir}/auth_debug_ap2.log --script "time.mktime(time.strptime(m.group(1), '%Y-%m-%d %H:%M:%S'))"
			</setvar>
		</step>

		<step no="15.1">
			<desc>disable some debug </desc>
			<telnet target="ap2">
				-v "no _ff id 1"
				-v "no _kdebug fe detail"
			</telnet>
		</step>

		<step no="16" delay="20" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>show logging buffered</desc>
			<log-file>step16_show_logging_buffered.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "IEEE 802.1X: ${sta1.tif.mac} REAUTH_TIMER entering state INITIALIZE" -f ${log.dir}/${log.file}</log-match>
		</step>
		<step no="16.1">
			<desc>get reauth time on AP2</desc>
			<setvar name="reauth.time">
				${bin.dir}/getbyrexp.py -p "(\d+-\d+-\d+\s+\d+:\d+:\d+).*IEEE 802.1X: ${sta1.tif.mac} REAUTH_TIMER entering state INITIALIZE" -f ${log.dir}/step16_show_logging_buffered.log --script "time.mktime(time.strptime(m.group(1), '%Y-%m-%d %H:%M:%S'))"
			</setvar>
		</step>

		<step no="17">
			<desc>check roaming cache on ap2</desc>
			<log-file>step18_show_roaming_cache.log</log-file>
			<telnet target="ap2">
				-v "show roaming cache"
			</telnet>
			<log-match>-p 11 -i "0" -i "${sta1.tif.mac}" -c</log-match>
		</step>

		<step no="17.1">
			<desc>check roaming cache info on ap1</desc>
			<log-file>step18.1_show_roaming_cache.log</log-file>
			<telnet target="ap1">
				-v "show roaming cache"
			</telnet>
			<log-match>-p 11 -i "1" -i "${sta1.tif.mac}" -c</log-match>
		</step>

		<step no="18">
			<desc>show auth interface of ap1</desc>
			<log-file>show_auth_interface_ap1.log</log-file>
			<telnet target="ap1">
				-v "show auth interface wifi0.1"
			</telnet>
			<log-match>-n -c -i "${sta1.tif.mac} *0" -i "200 *done" -i "${job.sid}-aerohive"</log-match>
			<log-match>-i "Local Cache Table:"</log-match>
		</step>

		<step no="18.1" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>show auth interface of ap1</desc>
			<log-file>show_auth_interface_ap2_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show auth interface wifi0.1"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac}" -i "200 *done" -i "${job.sid}-aerohive"</log-match>
			<log-match>-i "Local Cache Table:"</log-match>
		</step>

		<step no="19">
			<desc>
				check interval time
			</desc>
			<log-file>check_interval_time.log</log-file>
			<script>
				python -c "print 'pass' if((${reauth.time}-${connected.time})&lt;= 200 ) else 'fail' " &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-e "pass"</log-match>
		</step>

<!--  
		<step no="19">
			<desc>Get the ap2's age</desc>
			<setvar name="ap2.age"> ${bin.dir}/getbyrexp.py -f ${log.dir}/step18_show_roaming_cache.log -p "(?i)${sta1.tif.mac}\s*${ap2.wifi0.mac}\s*\d+\s*\d+\s*\S+\s*\S+\s*200\s*(\d+)\s*\d+\s*0\s*" -t str -s none </setvar>
		</step>
		<step no="19.1">
			<desc>Get the ap1's age</desc>
			<setvar name="ap1.age"> ${bin.dir}/getbyrexp.py -f ${log.dir}/step18.1_show_roaming_cache.log -p "(?i)${sta1.tif.mac}\s*${ap2.wifi0.mac}\s*\d+\s*\d+\s*\S+\s*\S+\s*200\s*(\d+)\s*\d+\s*1\s*" -t str -s none </setvar>
		</step>
		<step no="20">
			<desc> check if ap2.age smaller than 200 </desc>
			<log-file>step20_check_result.log</log-file>
			<script> ${bin.dir}/pyeval.py "200 - ${ap2.age} &gt; 0" &gt; ${log.dir}/${log.file} </script>
			<log-match>-c -i "true"</log-match>
		</step>
		<step no="20.1">
			<desc> check if ap1.age smaller than 200 </desc>
			<log-file>step20.1_check_result.log</log-file>
			<script> ${bin.dir}/pyeval.py "200 - ${ap1.age} &gt; 0" &gt; ${log.dir}/${log.file} </script>
			<log-match>-c
				-i "true"
			</log-match>
		</step>
-->
	</stage>

	<post-process>
		<stage>

			<include prefix="1" file="subs/ldap_delete.xml" args="${job.sid}-aerohive" />

		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>