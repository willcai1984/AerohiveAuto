<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Roaming after COA reauthorize  </brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-ssid enable cwp auth
		-ssid enable dynamic-auth-extension,accounting
		-ssid is active
		-GM is ready for coa

		Test Procedure:
		-client connect to the ssid on AP2
		-client pass the cwp auth,got attributes correctly
		-change the valid time on GM
		-radius server sends a COA-reauthorize by GM,with a active session
		-client open the timing page,then roams to AP1
		-client open a browser,pass cwp auth
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>windows</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="acct1.session_time" value="3600" />

	<stage>
		<include prefix="start_selenium_server" file="subs/start_selenium_server.xml" args="${sta1.mif.ip}, ${job_selenium_dir}, ${job_selenium_jar}, ${job_selenium_workload}" />

		<include prefix="0" file="subs/ldap_add.xml" args="${job.sid}-aerohive, aerohive" />

		<step no="0.1">
			<desc>shutdown interface eth1</desc>
			<if>"${ap1.eth1.existed}" =="true"</if>
			<telnet target="ap1">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="0.2">
			<desc>shutdown interface eth1</desc>
			<if>"${ap2.eth1.existed}" =="true"</if>
			<telnet target="ap2">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="1">
			<desc>
				-config e-CWP on ap1
			</desc>
			<telnet target="ap1">
				-v "hive ${hive.name}123"
				-v "interface mgt0 hive ${hive.name}123"
				-v "security-object in_cwp"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret} acct-port ${pub.radius1.acctport}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal auth-user-profile-attr 1 timer-display"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security additional-auth-method captive-web-portal external-server primary login-page http://${pub.ecwp1.ip}/weblogin.php/7"
				-v "security-object in_cwp walled-garden ip-address ${pub.ecwp1.ip}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal failure-redirect login-page"
				-v "security-object in_cwp web-server"
				-v "security-object in_cwp security additional-auth-method captive-web-portal timer-display alert 10"
			</telnet>
		</step>

		<step no="1.1">
			<desc>
				-config a ssid on ap1
			</desc>
			<telnet target="ap1">
				-v "security-object in_cwp security aaa radius-server dynamic-auth-extension"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object in_cwp"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name} shutdown"
				-v "user-profile auto qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "_debug auth all"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2">
			<desc>
				-config e-cwp on ap2
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}123"
				-v "interface mgt0 hive ${hive.name}123"
				-v "security-object in_cwp"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret} acct-port ${pub.radius1.acctport}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal auth-user-profile-attr 1 timer-display"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security additional-auth-method captive-web-portal external-server primary login-page http://${pub.ecwp1.ip}/weblogin.php/7"
				-v "security-object in_cwp walled-garden ip-address ${pub.ecwp1.ip}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal failure-redirect login-page"
				-v "security-object in_cwp web-server"
				-v "security-object in_cwp security additional-auth-method captive-web-portal timer-display alert 10"
			</telnet>
		</step>

		<step no="2.1">
			<desc>
				-config a ssid on ap2
			</desc>
			<telnet target="ap2">
				-v "security-object in_cwp security aaa radius-server dynamic-auth-extension"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object in_cwp"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile auto qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "interface wifi1 radio channel 153"
				-v "_debug auth all"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				show ap1's interface wifi0 info
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0"
				-v ""
			</telnet>
		</step>

		<step no="2.3">
			<desc>
				get ap1's wifi0's mac address
			</desc>
			<setvar name="ap1.wifi0.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i wifi0 -o aero -m -width
			</setvar>
		</step>

		<step no="2.4">
			<desc>
				show ap2's interface wifi1 info
			</desc>
			<log-file>step2.4_show_ap2_interface_info.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="2.5">
			<desc>
				get ap2's wifi1's mac address
			</desc>
			<setvar name="ap2.wifi1.mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step2.4_show_ap2_interface_info.log -i wifi1 -o aero -m -width
			</setvar>
		</step>

		<step no="2.6">
			<desc>shutdown interface wifi1 and then up it (it's aimed to clear wifi1's neighbor list)</desc>
			<telnet target="ap1">
				-v "interface wifi1 hive ${hive.name}123 shutdown"
				-v "no interface wifi1 hive ${hive.name}123 shutdown"
				-v "interface wifi1 radio channel 153"
			</telnet>
		</step>

		<step no="3" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor
			</desc>
			<log-file>step3_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap1" timeout="180">
				-v "show acsp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+Backhaul\s+${hive.name}123" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4">
			<desc>
				-shutdown ap1's eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2.wifi1.mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6" delay="30" type="loop-check" loop-max-times="10" loop-interval="15">
			<desc>check roaming neighbor on ap1</desc>
			<log-file>check_roaming_neighor_ap1_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "show roaming neighbor"
			</console>
			<log-match>-i "${ap2.mgt0.ip}" -p 4 -i "D"</log-match>
		</step>

		<step no="6.1" delay="30" type="loop-check" loop-max-times="10" loop-interval="15">
			<desc>check roaming neighbor on ap2</desc>
			<log-file>check_roaming_neighor_ap2_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show roaming neighbor"
			</telnet>
			<log-match>-i "${ap1.mgt0.ip}" -p 4 -i "D"</log-match>
		</step>

		<include prefix="7" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap2" />

		<step no="8">
			<desc>
				access public HM through CWP
			</desc>
			<log-file>station_log_in.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/scripts/cwp/cwp_login_positive_amigoopod.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters visit.url=${pub.hm2.ip} login.username=${job.sid}-aerohive login.password=aerohive -t ff -f ${log.dir}/${log.file} -l info --preserve-session &gt; ${log.dir}/session_id.log
			</script>
		</step>

		<step no="8.1">
			<desc>
				get session id
			</desc>
			<setvar name="session.id">
				${bin.dir}/getbyrexp.py -p "- session preserved - (\S+) pic:" -f ${log.dir}/session_id.log
			</setvar>
		</step>

		<step no="8.2">
			<desc>
				Show roaming cache
			</desc>
			<log-file>session_id.log</log-file>
			<log-match>-c -i "left 11 hours 60 minutes left"</log-match>
		</step>

		<step no="9">
			<desc>
				- 'sh ssid xxx sta',
			</desc>
			<log-file>step9_show_station.log</log-file>
			<telnet target="ap2">
				-v "show ssid ${ssid.name} station"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i " 1 *yes *1 " </log-match>
		</step>

		<step no="10">
			<desc>
				-'sh roa ca'
			</desc>
			<log-file>step10_show_roaming.log</log-file>
			<telnet target="ap2">
				-v "show roaming cache"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac}" -i "YYNN"</log-match>
		</step>

		<step no="10.1">
			<desc>
				-'sh auth'
			</desc>
			<log-file>step10.1_show_auth.log</log-file>
			<telnet target="ap2">
				-v "show auth"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac} *wifi0.1 *04 *${sta1.tif.ip}"</log-match>
		</step>

		<step no="11">
			<desc>
				up interface wifi0 on ap1
			</desc>
			<console target="ap1">
				-v "no interface wifi0 ssid ${ssid.name} shutdown"
			</console>
		</step>

		<step no="11.1">
			<desc>
				shutdown interface wifi0 on ap2
			</desc>
			<telnet target="ap2">
				-v "interface wifi0 ssid ${ssid.name} shutdown"
			</telnet>
		</step>

		<step no="12" delay="10" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show station on ap2
			</desc>
			<log-file>step12_show_station_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "show station"
			</console>
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="12.1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show station on ap1
			</desc>
			<log-file>step12.1_show_station_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show station"
			</telnet>
			<log-match>-n -c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
		</step>

		<step no="13" delay="30">
			<desc>
				Show roaming cache
			</desc>
			<log-file>step13_show_roaming_cache.log</log-file>
			<telnet target="ap2">
				-v "show roaming cache"
			</telnet>
			<log-match>-c -i "${sta1.tif.mac} *${ap1.wifi0.mac}" -i "1 *YYNN"</log-match>
		</step>

		<step no="13.1">
			<desc>
				Show roaming cache
			</desc>
			<log-file>step13.1_show_roaming_cache.log</log-file>
			<console target="ap1">
				-v "show roaming cache"
			</console>
			<log-match>-c -i "${sta1.tif.mac} *${ap1.wifi0.mac}" -i "0 *YYNN"</log-match>
		</step>

		<step no="13.2">
			<desc>
				-'sh auth'
			</desc>
			<log-file>step13.2_show_auth.log</log-file>
			<console target="ap1">
				-v "show auth"
			</console>
			<log-match>-c -i "${sta1.tif.mac} *wifi0.1 *04 *${sta1.tif.ip}"</log-match>
		</step>

		<step no="14">
			<desc>
				access public HM directly
			</desc>
			<log-file>access_hm2.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/scripts/cwp/cwp_to_url.py -r http://${sta1.mif.ip}:4444/wd/hub -t ff -f ${log.dir}/${log.file} -l info --preserve-session
			</script>
		</step>

		<step no="15">
			<desc>
				-show sta1's ip
			</desc>
			<log-file>step20_ipconfig.log</log-file>
			<staf target="sta1">
				-v "ipconfig /all"
			</staf>
		</step>

		<step no="15.1">
			<desc>get mac from client with five dash</desc>
			<setvar name="sta1.tif.mac_5dash">
				${bin.dir}/getrmtip.pl perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step20_ipconfig.log -i ${sta1.tif.name} -o win -m -dash -uppercase
			</setvar>
		</step>

		<step no="15.2">
			<desc>show intface wifi0 on ap2</desc>
			<log-file>show_interface.log</log-file>
			<console target="ap1">
				-v "show interface wifi0.1"
			</console>
		</step>

		<step no="15.3">
			<desc>get mac from bssid of wifi0.1</desc>
			<setvar name="ssid.wifi0.bssid">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_interface.log -o aero -i wifi0.1 -m -dash -uppercase
			</setvar>
		</step>

		<step no="16">
			<desc>enable auth debug to check COA</desc>
			<console target="ap1">
				-v "_debug auth all"
				-v "clear log buffered"
			</console>
		</step>

		<include prefix="17" file="subs/ldap_delete.xml" args="${job.sid}-aerohive" />

		<include prefix="18" file="subs/ldap_add.xml" args="${job.sid}-aerohive, aerohive" obj-args="acct1" />

		<step no="19">
			<desc>sent coa reauth from radius server</desc>
			<log-file>coa_disc.log</log-file>
			<ssh host="${pub.radius1.ip}" prompt=".*#">
				-v "echo -e \"Calling-Station-Id=${sta1.tif.mac_5dash}\\nCalled-Station-Id=${ssid.wifi0.bssid}:${ssid.name}\\nUser-Name=${job.sid}-aerohive\\nService-Type=Authorize-only\" | radclient -x ${ap1.mgt0.ip}:3799 disconnect aerohive"
			</ssh>
			<log-match>-i "Disconnect-NAK"</log-match>
			<log-match>-i "Error-Cause = Request-Initiated"</log-match>
		</step>

		<step no="20">
			<desc>check debug on AP</desc>
			<log-file>step20_show_roaming_cache.log</log-file>
			<console target="ap1" timeout="500">
				-v "show logging buffered"
			</console>
			<no-error-check />
			<log-match>-c -i "dynamic auth message from RADIUS server"</log-match>
			<log-match>-c -i "Received a Disconnect request from radius server ${pub.radius1.ip}"</log-match>
			<log-match>-c -i "Send a Disconnect-Nak message to ${pub.radius1.ip}"</log-match>
		</step>

		<step no="21" delay="30">
			<desc>
				Show roaming cache
			</desc>
			<log-file>step21_show_roaming_cache.log</log-file>
			<console target="ap1">
				-v "show roaming cache"
			</console>
			<log-match>-c -i "${sta1.tif.mac} *${ap1.wifi0.mac}" -p 8 -i "3600"</log-match>
		</step>

		<step no="21.1">
			<desc>
				-'sh auth'
			</desc>
			<log-file>step21.1_show_auth.log</log-file>
			<console target="ap1">
				-v "show auth"
			</console>
			<log-match>-c -i "${sta1.tif.mac} *wifi0.1 *04 *${sta1.tif.ip}"</log-match>
			<log-match>-c -i "${sta1.tif.mac}" -p 6 -i "3600"</log-match>
		</step>

		<step no="22">
			<desc>
				do log out operate
			</desc>
			<log-file>station_log_out_through_ap1.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/scripts/cwp/cwp_login_positive_amigoopod.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters visit.url=${pub.hm2.ip} login.username=${job.sid}-aerohive login.password=aerohive -t ff -f ${log.dir}/${log.file} -l info --session-id ${session.id} &gt; ${log.dir}/check_timer.log
			</script>
		</step>

		<step no="22.1">
			<desc>
				Show roaming cache
			</desc>
			<log-file>check_timer.log</log-file>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Left Session Time:\s*\d+\s*minutes" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="23">
			<desc>Get the second number of times</desc>
			<setvar name="log.out.time">
				${bin.dir}/getbyrexp.py -f ${log.dir}/check_timer.log -p "(?i)Left Session Time:\s*(\d+)\s*minutes" -t str
			</setvar>
		</step>

		<step no="23.1">
			<desc>
				check if the leave time is smaller than 60 minutes.
			</desc>
			<log-file>step23.1_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "60 - ${log.out.time} &gt; 0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>

			<include prefix="stop_selenium_server" file="subs/stop_selenium_server.xml" args="${sta1.mif.ip}, ${job_selenium_workload}" />

			<include prefix="1" file="subs/ldap_delete.xml" args="${job.sid}-aerohive" />

		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>