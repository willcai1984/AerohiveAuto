<testcase>
	<brief>UPID reassign via COA packet</brief>
	<priority>accept</priority>
	<automated>yes</automated>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<description>Roaming test for UPID reassign</description>
	
	<property name="UPID_X" value="1000" />
	<property name="UPID_Y" value="2000" />


	<stage>

		<step no="0.1">
			<desc>get sta1's mac </desc>
			<setvar name="sta1.auth_mac">
				echo "${sta1.tif.smac}" | tr '[A-Z]' '[a-z]'
			</setvar>
		</step>
		
		<!-- config account(username and password) on radius server -->
		<include prefix="0.2" file="subs/ldap_add.xml" args="${sta1.auth_mac}, ${sta1.auth_mac}" />
		
		<step no="1">
			<desc>setup  AP1</desc>
			<ssh target="ap1">
				-v "security-object autoap"
				-v "security-object autoap security additional-auth-method mac-based-auth"
				-v "security-object autoap security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security aaa radius-server accounting primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security aaa radius-server dynamic-auth-extension"
				-v "security-object autoap default-user-profile-attr ${UPID_X} "			
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "no interface wifi0 ssid ${ssid.name} shut"
				-v "interface wifi0 radio channel 11" 
				-v "hive ${hive.name}" 
				-v "interface mgt0 hive ${hive.name}"
				-v "user-profile x qos-policy def-user-qos vlan-id ${tb.vlan2} attribute ${UPID_X}"
				-v "user-profile y qos-policy def-user-qos vlan-id ${tb.vlan2} attribute ${UPID_Y}"
				-v "save config"
			</ssh>
		</step>
		
		
		<step no="2">
			<desc>setup  AP2</desc>
			<ssh target="ap2">
				-v "security-object autoap"
				-v "security-object autoap security additional-auth-method mac-based-auth"
				-v "security-object autoap security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security aaa radius-server accounting primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security aaa radius-server dynamic-auth-extension"
				-v "security-object autoap default-user-profile-attr ${UPID_X} "			
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "no interface wifi0 ssid ${ssid.name} shut"
				-v "interface wifi0 radio channel 11" 
				-v "hive ${hive.name}" 
				-v "interface mgt0 hive ${hive.name}"
				-v "user-profile x qos-policy def-user-qos vlan-id ${tb.vlan2} attribute ${UPID_X}"
				-v "user-profile y qos-policy def-user-qos vlan-id ${tb.vlan2} attribute ${UPID_Y}"
				-v "save config"
			</ssh>
		</step>
		
		
		<step no="CheckAP1RoamingNeighbor1" loop-interval="10" loop-max-times="5" type="loop-check">
			<desc>show roaming neighbor on ap1</desc>
			<log-file>show_roaming_neighbor1_ap1_${loop_check.idx}.log</log-file>
			<ssh target="ap1" timeout="180"> 
				-v "show roaming neighbor"
			</ssh>
			<log-match>-i "${ap2.mgt0.ip}" -i "${ap2.mgt0.mac}" -p 4 -i "D" -c </log-match>
		</step>
		
		<step no="CheckAP2RoamingNeighbor2" loop-interval="10" loop-max-times="5" type="loop-check">
			<desc>show roaming neighbor on ap2</desc>
			<log-file>show_roaming_neighbor2_ap2_${loop_check.idx}.log</log-file>
			<ssh target="ap2" timeout="180"> 
				-v "show roaming neighbor"
			</ssh>
			<log-match>-i "${ap1.mgt0.ip}" -i "${ap1.mgt0.mac}" -p 4 -i "D" -c </log-match>
		</step>
		
		
		<step no="int wifi0 ssid XXX shut on AP2">
			<ssh target="ap2" timeout="180"> 
				-v "interface wifi0 ssid ${ssid.name} shut"
			</ssh>
		</step>
		
		<!-- *********************************** sta1 connect to AP1 ******************************************** -->
		
		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn1, sta1, ap1" args="1" />
		
		<step no="show station and roaming cache">
			<desc>show station and check the client's UPID is UPID_X</desc>
			<log-file>show_station.log</log-file>		
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
				-v "show roaming  cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${UPID_X}"</log-match>
			<log-match>-c -i "${sta1.tif.mac}" -i "0" -i "YNNN"</log-match>
		</step>
		
		
		
		
		<!--**************************check 1 : Send Coa Packet to AP1, AP1 will recept **************************-->
		<step no="pre1">
			<desc>show intface on wifi0</desc>
			<log-file>show_interface.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi0.1"
			</ssh>
		</step>
		
		<step no="pre2">
			<desc>get mac from bssid of wifi0.1</desc>
			<setvar name="ssid.wifi0.bssid">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_interface.log -o aero -i wifi0.1 -m -dash -uppercase
			</setvar>
		</step>
		
		<step no="pre3">
			<desc>get mac from client with five dash</desc>
			<setvar name="sta1.tif.mac_5dash">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -dash -uppercase
			</setvar>
		</step>
		
		<step no="pre4">
			<desc>enable auth debug to check COA</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log buffered"
			</ssh>
		</step>
		
		<step no="4">
			<desc>send CoA packet with UPID_Y by using free radius</desc>
			<log-file>coa_upid_y.log</log-file>
			<ssh host="${pub.radius1.ip}" prompt=".*#">
				-v "echo -e \"Calling-Station-Id=${sta1.tif.mac_5dash}\\nCalled-Station-Id=${ssid.wifi0.bssid}:${ssid.name}\\nNAS-IP-Address=${ap1.mgt0.ip}\\nTunnel-Type:0=10\nTunnel-Medium-Type:0=1\\nTunnel-Private-Group-ID:0=${UPID_Y}\" | radclient -x ${ap1.mgt0.ip}:3799 coa aerohive"
			</ssh>
			<log-match>-e "CoA-ACK"</log-match>
		</step>
		
		<step no="check log buffer on AP1">
			<desc>check debug on AP</desc>
			<log-file>show_buffer.log</log-file>
			<ssh target="ap1">
				-v "show logg buff"
			</ssh>
			<no-error-check />
		</step>
		
		
		<step no="4.1">
			<desc>extract a piece of log</desc>
			<script>
				tac ${log.dir}/show_buffer.log |sed -n '/Received a CoA request from radius server/,/Send a CoA-Ack message to ${pub.radius1.ip}/I'p > ${log.dir}/coa_ap.log
			</script>
		</step>
		<step no="4.2">
			<desc>check the COA process on AP</desc>
			<log-file>coa_ap.log</log-file>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Received a CoA request from radius server ${pub.radius1.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)event is sent to AMRP: event=join SPA=${sta1.tif.mac} .* uid=${UPID_Y} vlan=${tb.vlan2} flag=0:hit" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Send a CoA-Ack message to ${pub.radius1.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>
		
			
		<step no="show station and roaming cache on AP1" delay="5">
			<desc>show station and check the client's UPID is UPID_Y</desc>
			<log-file>show_station.log</log-file>		
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
				-v "show roaming  cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${UPID_Y}"</log-match>
		</step>
		
		
			
		
		<!-- **************************** check 2 :  STA roams to AP2 , and gets CoA's UPID (UPID_Y) on PA2 *************************  -->
		
		<step no="no int wifi0 ssid XXX shut on AP2">
			<ssh target="ap2" timeout="180"> 
				-v "no interface wifi0 ssid ${ssid.name} shut"
			</ssh>
		</step>
		
		<step no="5" delay="5">
			<desc>STA roams to AP2</desc>
			<ssh target="ap1">
				-v "interface  wifi0 ssid ${ssid.name} shut"
			</ssh>
		</step>
		
		<step no="6" delay="5">
			<desc>show station and check the client's UPID is UPID_Y on AP2</desc>
			<log-file>show_station.log</log-file>		
			<ssh target="ap2">
				-v "show ssid ${ssid.name} station"
				-v "show roaming  cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${UPID_Y}"</log-match>
			<log-match>-c -i "${sta1.tif.mac}" -i "0" -i "YNNN"</log-match>
		</step>
		
			
		<!--************************** check 3 :  Send Coa Packet to AP1, AP1 will reject **************************-->
		<step no="pre1">
			<desc>get mac from client with five dash</desc>
			<setvar name="sta1.tif.mac_5dash">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -dash -uppercase
			</setvar>
		</step>
		
		<step no="pre2">
			<desc>show intface on wifi0</desc>
			<log-file>show_interface.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi0.1"
			</ssh>
		</step>
		
		<step no="pre3">
			<desc>get mac from bssid of wifi0.1</desc>
			<setvar name="ssid.wifi0.bssid">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_interface.log -o aero -i wifi0.1 -m -dash -uppercase
			</setvar>
		</step>
		
		<step no="pre4">
			<desc>enable auth debug to check COA</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log buffered"
			</ssh>
		</step>
		
		<step no="pre5">
			<desc>up ap1's wifi then ap will send coa-nak packet to radius server</desc>
			<ssh target="ap1">
				-v "no interface  wifi0 ssid ${ssid.name} shut"
			</ssh>
		</step>
		
		<step no="7">
			<desc>send CoA packet with UPID_X by using free radius</desc>
			<log-file>coa_upid_y.log</log-file>
			<ssh host="${pub.radius1.ip}" prompt=".*#">
				-v "echo -e \"Calling-Station-Id=${sta1.tif.mac_5dash}\\nCalled-Station-Id=${ssid.wifi0.bssid}:${ssid.name}\\nNAS-IP-Address=${ap1.mgt0.ip}\\nTunnel-Type:0=10\nTunnel-Medium-Type:0=1\\nTunnel-Private-Group-ID:0=${UPID_X}\" | radclient -x ${ap1.mgt0.ip}:3799 coa aerohive"
			</ssh>
			<log-match>-e "CoA-NAK"</log-match>
		</step>
		
		
		<step no="check log buffer on AP1">
			<desc>check debug on AP</desc>
			<log-file>show_buffer.log</log-file>
			<ssh target="ap1">
				-v "show logg buff"
			</ssh>
			<no-error-check />
		</step>
		
		<step no="7.1">
			<desc>extract a piece of log</desc>
			<script>
				tac ${log.dir}/show_buffer.log |sed -n '/Received a CoA request from radius server/,/CoA-Nak message to ${pub.radius1.ip}/I'p > ${log.dir}/coa_ap.log
			</script>
		</step>
		<step no="7.2">
			<desc>check the COA process on AP</desc>
			<log-file>coa_ap.log</log-file>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Received a CoA request from radius server ${pub.radius1.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Looking for session by \[calling-station-id=${sta1.tif.mac_5dash}\]" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Looking for sta by the session id failed" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Send a CoA-Nak message to ${pub.radius1.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		
		
		
		<!--************************** check 4 : Send Coa Packet to AP2, AP2 will recept **************************-->
		<step no="pre1">
			<desc>show intface on wifi0</desc>
			<log-file>show_interface.log</log-file>
			<ssh target="ap2">
				-v "show interface wifi0.1"
			</ssh>
		</step>
		
		<step no="pre2">
			<desc>get mac from bssid of wifi0.1</desc>
			<setvar name="ssid.wifi0.bssid">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_interface.log -o aero -i wifi0.1 -m -dash -uppercase
			</setvar>
		</step>
		
		<step no="pre3">
			<desc>enable auth debug to check COA</desc>
			<ssh target="ap2">
				-v "_debug auth all"
				-v "clear log buffered"
			</ssh>
		</step>
		
		<step no="8">
			<desc>send CoA packet with UPID_X by using free radius</desc>
			<log-file>coa_upid_y.log</log-file>
			<ssh host="${pub.radius1.ip}" prompt=".*#">
				-v "echo -e \"Calling-Station-Id=${sta1.tif.mac_5dash}\\nCalled-Station-Id=${ssid.wifi0.bssid}:${ssid.name}\\nNAS-IP-Address=${ap2.mgt0.ip}\\nTunnel-Type:0=10\nTunnel-Medium-Type:0=1\\nTunnel-Private-Group-ID:0=${UPID_X}\" | radclient -x ${ap2.mgt0.ip}:3799 coa aerohive"
			</ssh>
			<log-match>-e "CoA-ACK"</log-match>
		</step>
		
		<step no="check log buffer on AP1">
			<desc>check debug on AP</desc>
			<log-file>show_buffer.log</log-file>
			<ssh target="ap2">
				-v "show logg buff"
			</ssh>
			<no-error-check />
		</step>
		
		
		<step no="8.1">
			<desc>extract a piece of log</desc>
			<script>
				tac ${log.dir}/show_buffer.log |sed -n '/Received a CoA request from radius server/,/Send a CoA-Ack message to ${pub.radius1.ip}/I'p > ${log.dir}/coa_ap.log
			</script>
		</step>
		<step no="8.2">
			<desc>check the COA process on AP</desc>
			<log-file>coa_ap.log</log-file>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Received a CoA request from radius server ${pub.radius1.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)event is sent to AMRP: event=join SPA=${sta1.tif.mac} .* uid=${UPID_X} vlan=${tb.vlan2} flag=0:hit" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Send a CoA-Ack message to ${pub.radius1.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>
		
			
		<step no="show station and roaming cache on AP2" delay="5">
			<desc>show station and check the client's UPID is UPID_Y</desc>
			<log-file>show_station.log</log-file>		
			<ssh target="ap2">
				-v "show ssid ${ssid.name} station"
				-v "show roaming  cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${UPID_X}"</log-match>
		</step>
		
		<step no="9">
			<desc>Ping from station to master Server </desc>
			<log-file>pingmaster_${mpc.tif.ip}.log</log-file>
			<ssh target="sta1">
				-v "ping ${mpc.tif.ip} -c 4"
			</ssh>
			<log-match>-i "from ${mpc.tif.ip}" -i "ttl="</log-match>
		</step>
		
		
	</stage>
	
	<post-process>
		<stage>
			<include prefix="0.3" file="subs/ldap_delete.xml" args="${sta1.auth_mac}" />
		</stage>

		<include prefix="def_post" file="include/default_post_process.xml" />
	</post-process>
	
</testcase>		