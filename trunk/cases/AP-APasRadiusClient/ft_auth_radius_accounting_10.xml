<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Aerohive Vendor-Specific attribute(00 00 69 30)</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-config a ssid with wpa 802.1x
		-enable accounting on this ssid

		Test Procedure:
		-STA1 connects to ssid with account1, assigned to a vlan
		-check the Vendor-Id of 00 00 69 30 in accounting request, vlan-id is correct
		-STA1 connects to ssid with account2, assigned to another vlan
		-check the Vendor-Id of 00 00 69 30 in accounting request, vlan-id is correct
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.proto" value="wpa2-aes-8021x" />
	<property name="conn1.username" value="${job.sid}-aerohive" />
	<property name="conn1.passwd" value="aerohive" />
	<property name="conn2.ssid" value="${ssid.name}" />
	<property name="conn2.proto" value="wpa2-aes-8021x" />
	<property name="conn2.username" value="${job.id}" />
	<property name="conn2.passwd" value="aerohive1" />
	<property name="acct1.vlan" value="${tb.vlan2}" />
	<property name="acct2.vlan" value="${tb.vlan3}" />

	<stage>
		<include prefix="0" file="subs/ldap_add.xml" args="${job.sid}-aerohive, aerohive" obj-args="acct1" />

		<include prefix="0.1" file="subs/ldap_add.xml" args="${job.id}, aerohive1" obj-args="acct2" />

		<step no="1">
			<desc>
				-config a ssid with wpa 802.1x
				-enable accounting on this ssid
			</desc>
			<ssh target="ap1">
				-v "ssid ${ssid.name}"
				-v "security-object autoap"
				-v "security-object autoap default-user-profile-attr 1"
				-v "security-object autoap security protocol-suite wpa2-aes-8021x"
				-v "security-object autoap security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security aaa radius-server accounting primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile normal qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "interface wif0 radio channel 1"
				-v "_debug auth all"
				-v "clear log all"
			</ssh>
		</step>

		<step no="1.1">
			<desc>
				change tb.vlan2 to hex.
			</desc>
			<log-file>hex_vlan2.log</log-file>
			<script>
				${bin.dir}/pyeval.py "\"%08x\" % int(${tb.vlan2})" &gt; ${log.dir}/${log.file}
			</script>
		</step>

		<step no="1.2">
			<desc>
				change tb.vlan3 to hex.
			</desc>
			<log-file>hex_vlan3.log</log-file>
			<script>
				${bin.dir}/pyeval.py "\"%08x\" % int(${tb.vlan3})" &gt; ${log.dir}/${log.file}
			</script>
		</step>

		<step no="1.3">
			<desc>get vlan2 of hex format (xx xx xx xx)</desc>
			<setvar name="hex.vlan2">
				${bin.dir}/getbyrexp.py -f ${log.dir}/hex_vlan2.log -p "(\S{2})(\S{2})(\S{2})(\S{2})" --script "' '.join(m.groups())"
			</setvar>
		</step>

		<step no="1.4">
			<desc>get vlan3 of hex format (xx xx xx xx)</desc>
			<setvar name="hex.vlan3">
				${bin.dir}/getbyrexp.py -f ${log.dir}/hex_vlan3.log -p "(\S{2})(\S{2})(\S{2})(\S{2})" --script "' '.join(m.groups())"
			</setvar>
		</step>

		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="3">
			<desc>
				show station info
			</desc>
			<log-file>step3_show_station.log</log-file>
			<ssh target="ap1">
				-v "show station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${tb.vlan2} *Yes *1"</log-match>
		</step>

		<include prefix="4" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step4_show_logging_buffered.log" />

		<step no="5">
			<desc>show logging buffered</desc>
			<log-file>step4_show_logging_buffered.log</log-file>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Value: \d+" -ps p1 "Value:\s*00 00 69 30 01 06 ${hex.vlan2}" p1 "Attribute \d+ \(Vendor-Specific\)" -e "Attribute \d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Value: \d+" -ps p "Value:\s*00 00 69 30 01 06 ${hex.vlan2}" p "Attribute \d+ \(Vendor-Specific\)" p1 "RADIUS message: code=\d+ \(Accounting-Request\)" -e "RADIUS message:" -f ${log.dir}/${log.file}</log-match>
		</step>

		<include prefix="6" file="subs/release_station_wifi.xml" obj-args="sta1" />

		<step no="6.1">
			<desc>clear log all</desc>
			<ssh target="ap1">
				-v "clear log all"
			</ssh>
		</step>

		<include prefix="7" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta1, ap1" />

		<step no="8">
			<desc>
				show station info
			</desc>
			<log-file>step8_show_station.log</log-file>
			<ssh target="ap1">
				-v "show station"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${tb.vlan3} *Yes *1"</log-match>
		</step>

		<include prefix="9" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step9_show_logging_buffered.log" />

		<step no="10">
			<desc>show logging buffered</desc>
			<log-file>step9_show_logging_buffered.log</log-file>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Value: \d+" -ps p1 "Value:\s*00 00 69 30 01 06 ${hex.vlan3}" p1 "Attribute \d+ \(Vendor-Specific\)" -e "Attribute \d+" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Value: \d+" -ps p "Value:\s*00 00 69 30 01 06 ${hex.vlan3}" p "Attribute \d+ \(Vendor-Specific\)" p1 "RADIUS message: code=4 \(Accounting-Request\)" -e "RADIUS message:" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>

	<post-process>
		<stage>

			<include prefix="1" file="subs/ldap_delete.xml" args="${job.sid}-aerohive" />

			<include prefix="1.1" file="subs/ldap_delete.xml" args="${job.id}" />

		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>			