<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check the account-interim-interval works</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-config a ssid with 802.1x
		-enable accounting on this ssid, active the ssid

		Test Procedure:

		-check the account-interim-interval by default, 'sh aaa' to make sure
		-client connects to this ssid,check the accounting procedure, result 2,3
		-change the account-interim-interval by cli,
		'security-object xxx security aaa radius-server account-interim-interval
		10'
		-check the account-interim-interval, result 4
		-client connects to this ssid,check the accounting procedure, result 5,6
		-no the account-interim-interval
		'no security-object xxx security aaa radius-server account-interim-
		interval'
		-client connects to this ssid,check the accounting procedure, result 7
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="conn1.proto" value="wpa2-aes-8021x" />
	<property name="conn1.username" value="${pub.radius1.username}" />
	<property name="conn1.passwd" value="${pub.radius1.passwd}" />

	<stage>
		<step no="1">
			<desc>
				-config a ssid with 802.1x
				-enable accounting on this ssid, active the ssid
			</desc>
			<telnet target="ap1">
				-v "security-object autoap"
				-v "security-object autoap default-user-profile-attr 1"
				-v "security-object autoap security protocol-suite wpa2-aes-8021x"
				-v "security-object autoap security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security aaa radius-server accounting primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object autoap"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile normal qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "interface wif0 radio channel 1"
				-v "_debug auth all"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2">
			<desc>show aaa</desc>
			<log-file>step2_show_aaa.log</log-file>
			<telnet target="ap1">
				-v "show aaa"
			</telnet>
			<log-match>-i "Account interim interval: *20 seconds"</log-match>
		</step>

		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="4" delay="30">
			<desc>show logging buffered on ap1</desc>
			<log-file>step4_show_logging_buffered.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
		</step>

		<step no="4.1">
			<desc>Get the second number of times in default mode</desc>
			<setvar name="default.second.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*Sending RADIUS message to accounting server ${pub.radius1.ip}" -t str -g-1
			</setvar>
		</step>

		<step no="4.2">
			<desc>Get the first number of times in default mode</desc>
			<setvar name="default.first.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*Sending RADIUS message to accounting server ${pub.radius1.ip}" -t str -g-2
			</setvar>
		</step>

		<step no="4.3">
			<desc>
				check if the interval is 20s.
			</desc>
			<log-file>step4.3_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${default.second.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${default.first.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple())) == 20.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="4.4">
			<desc>Get the second number of times in default mode</desc>
			<setvar name="default.second.request.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4_show_logging_buffered.log -p "Value:\s*(\d+)" -e "Attribute \d+ \(Acct-Session-Time\) length=\d+" -t str -s none -g-1
			</setvar>
		</step>

		<step no="4.5">
			<desc>Get the first number of times in default mode</desc>
			<setvar name="default.first.request.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4_show_logging_buffered.log -b "RADIUS message: code=4 \(Accounting-Request\)" -p "Value:\s*(\d+)" -e "Attribute \d+ \(Acct-Session-Time\) length=\d+" -t str -s none -g-1
			</setvar>
		</step>

		<step no="4.6">
			<desc>
				check if the interval is 20s.
			</desc>
			<log-file>step4.6_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "${default.second.request.times} - ${default.first.request.times} == 20" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="5">
			<desc>
				-change the account-interim-interval by cli,
				'security-object xxx security aaa radius-server account-interim-interval 10'
			</desc>
			<telnet target="ap1">
				-v "security-object autoap security aaa radius-server account-interim-interval 10"
			</telnet>
		</step>

		<step no="5.1">
			<desc>clear log all</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="6">
			<desc>show aaa</desc>
			<log-file>step5_show_aaa.log</log-file>
			<telnet target="ap1">
				-v "show aaa"
			</telnet>
			<log-match>-i "Account interim interval: *10 seconds"</log-match>
		</step>

		<step no="6.1reconnect">
			<desc>configure ssid property on _sta1_</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="6.2check-connect" delay="15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if sta1 is associated successful</desc>
			<log-file>wpa_stat_sta1_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>


		<step no="7" delay="60">
			<desc>Show logging buffered</desc>
			<log-file>step7_show_logging_buffered.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
		</step>

		<step no="7.1">
			<desc>Get the second number of times</desc>
			<setvar name="second.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step7_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*Sending RADIUS message to accounting server ${pub.radius1.ip}" -t str -g-1
			</setvar>
		</step>

		<step no="7.2">
			<desc>Get the first number of times</desc>
			<setvar name="first.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step7_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*Sending RADIUS message to accounting server ${pub.radius1.ip}" -t str -g-2
			</setvar>
		</step>

		<step no="7.3">
			<desc>
				check if the interval is 10s.
			</desc>
			<log-file>step7.3_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${second.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${first.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple())) == 10.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="7.4">
			<desc>Get the second number of times</desc>
			<setvar name="second.request.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step7_show_logging_buffered.log -p "Value:\s*(\d+)" -e "Attribute \d+ \(Acct-Session-Time\) length=\d+" -t str -s none -g-1
			</setvar>
		</step>

		<step no="7.5">
			<desc>Get the first number of times</desc>
			<setvar name="first.request.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step7_show_logging_buffered.log -b "RADIUS message: code=4 \(Accounting-Request\)" -p "Value:\s*(\d+)" -e "Attribute \d+ \(Acct-Session-Time\) length=\d+" -t str -s none -g-1
			</setvar>
		</step>

		<step no="7.6">
			<desc>
				check if the interval is 10s.
			</desc>
			<log-file>step7.6_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "${second.request.times} - ${first.request.times} == 10" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="8">
			<desc>
				-no the account-interim-interval
				'no security-object xxx security aaa radius-server account-interim-interval'
			</desc>
			<telnet target="ap1">
				-v "no security-object autoap security aaa radius-server account-interim-interval"
			</telnet>
		</step>

		<step no="8.1">
			<desc>clear log all</desc>
			<telnet target="ap1">
				-v "clear log all"
			</telnet>
		</step>

		<step no="9">
			<desc>show aaa</desc>
			<log-file>step9_show_aaa.log</log-file>
			<telnet target="ap1">
				-v "show aaa"
			</telnet>
			<log-match>-i "Account interim interval: *20 seconds"</log-match>
		</step>
		<step no="9.1reconnect">
			<desc>configure ssid property on sta1</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="9.2check-connect" delay="15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if sta1 is associated successful</desc>
			<log-file>9.2_wpa_stat_sta1_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>
		<step no="10" delay="60">
			<desc>show logging buffered</desc>
			<log-file>step10_show_logging_buffered.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
		</step>

		<step no="10.1">
			<desc>Get the second number of times</desc>
			<setvar name="comeback.default.second.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step10_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*Sending RADIUS message to accounting server ${pub.radius1.ip}" -t str -g-1
			</setvar>
		</step>

		<step no="10.2">
			<desc>Get the first number of times</desc>
			<setvar name="comeback.default.first.sending.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step10_show_logging_buffered.log -p "(\S{4}-\S{2}-\S{2}\s*\d+:\d+:\d+).*Sending RADIUS message to accounting server ${pub.radius1.ip}" -t str -g-2
			</setvar>
		</step>

		<step no="10.3">
			<desc>
				check if the interval is 20s.
			</desc>
			<log-file>step10.3_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "(mktime(datetime.strptime('${comeback.default.second.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple()) - mktime(datetime.strptime('${comeback.default.first.sending.times}', '%Y-%m-%d %H:%M:%S').timetuple())) == 20.0" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>

		<step no="10.4">
			<desc>Get the second number of times</desc>
			<setvar name="comeback.default.second.request.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step10_show_logging_buffered.log -p "Value:\s*(\d+)" -e "Attribute \d+ \(Acct-Session-Time\) length=\d+" -t str -s none -g-1
			</setvar>
		</step>

		<step no="10.5">
			<desc>Get the first number of times</desc>
			<setvar name="comeback.default.first.request.times">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step10_show_logging_buffered.log -b "RADIUS message: code=4 \(Accounting-Request\)" -p "Value:\s*(\d+)" -e "Attribute \d+ \(Acct-Session-Time\) length=\d+" -t str -s none -g-1
			</setvar>
		</step>

		<step no="10.6">
			<desc>
				check if the interval is 20s.
			</desc>
			<log-file>step10.6_check_result.log</log-file>
			<script>
				${bin.dir}/pyeval.py "${comeback.default.second.request.times} - ${comeback.default.first.request.times} == 20" &gt; ${log.dir}/${log.file}
			</script>
			<log-match>-c -i "true"</log-match>
		</step>
	</stage>
</testcase>