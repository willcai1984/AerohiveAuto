<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<priority>Accept</priority>
	<brief>PSE with 802.3at enable/disable/shutdown</brief>
	<automated>yes</automated>
	<description></description>
	<numofbr>1</numofbr>
	<numofsta>0</numofsta>
	<tbtype>linux</tbtype>
	
	<property name="" value="" />
	
	<property name="pub.tclclient1.ip" value="${mpc.mif.ip}" />
	
	<property name="sw1.user" value="admin" />
	<property name="sw1.passwd" value="aerohive" />
	<property name="sw1.sfs_tcl_server" value="10.155.32.80"/>
	<property name="sw1.sfs_tcl_server.port" value="6900"/>
	
	<property name="eth.port.1" value="eth1" />
	<property name="eth.port.2" value="eth2" />
	
	<property name="pse.profile.0" value="pse_profile0" />
	<property name="pse.profile.1" value="pse-at" />
	<property name="pse.profile.2" value="pse-af" />
	<property name="power.mode.1" value="AT" />
	<property name="power.mode.2" value="AF" />
	<property name="power.limit.1" value="32.0" />
	<property name="power.limit.2" value="15.4" />
	<property name="payload.0" value="12" /> <!-- class0, 13 -->
	<property name="payload.1" value="3.5" /> <!-- class1, 3.8 -->
	<property name="payload.2" value="6" /> <!-- class2, 6.5 -->
	<property name="payload.3" value="12" /> <!-- class3, 13 -->
	<property name="payload.4" value="25" /> <!-- class4, 25.5 -->
	
	<property name="payload.4.1" value="17" /> <!-- class4, 25.5 -->
	<property name="payload.4.2" value="17.7" /> <!-- class4, 25.5 -->
	
	<property name="payload.delta.1" value="2" />
	<property name="payload.delta.2" value="4" />
	<property name="pse.status.1" value="Searching" />
	<property name="pse.status.2" value="delivering" />
	<property name="pse.status.3" value="fault" />
	<property name="pse.status.4" value="turn off by PM" />
	<property name="pse.status.5" value="disabled" />
	
	<property name="pse.priority.1" value="critical" />
	<property name="pse.priority.2" value="high" />
	<property name="pse.priority.3" value="low" />
	
	<stage>

		<step no="0.1.1">
			<desc>
				check default pse config
			</desc>
			<log-file>step0.1.1.log</log-file>
			<console target="br1.br">
				-v 'show pse'
			</console>
			<log-match>-c -i "Total power available" -i "44.0*"</log-match>
			<log-match>-c -i "PSE enabled" -p 3 -i "Y" -p 4 -i "Y"</log-match>
			<log-match>-c -i "Powerup power mode" -p 4 -i "802.3af" -p 5 -i "802.3af"</log-match>
			<log-match>-c -i "Max. *power threshold" -p 4 -i "15.40" -p 5 -i "15.40"</log-match>
			<log-match>-c -p 1 -i "Priority" -p 2 -i "0" -p 3 -i "0"</log-match>
			<log-match>-c -i "Physical port" -p 3 -i "2" -p 4 -i "3"</log-match>
		</step>
		
		<step no="0.1.2">
			<desc>
				check pse config of eth port
			</desc>
			<log-file>step0.1.2_PseCfgOfEthPort.log</log-file>
			<console target="br1.br">
				-v 'show in ${eth.port.1} pse'
			</console>
			<log-match>-c -i "Port" -i "${eth.port.1}"</log-match>
			<log-match>-c -i "Present power mode" -i "802.3af"</log-match>
		</step>
		
		<step no="0.1.3">
			<desc>
				check pse config of eth port
			</desc>
			<log-file>step0.1.3_PseCfgOfEthPort.log</log-file>
			<console target="br1.br">
				-v 'show in ${eth.port.2} pse'
			</console>
			<log-match>-c -i "Port" -i "${eth.port.2}"</log-match>
			<log-match>-c -i "Present power mode" -i "802.3af"</log-match>
		</step>
		
		<step no="0.2">
			<desc>
				config pse mode as at
			</desc>
			<console target="br1.br">
				-v 'in ${eth.port.1} pse mode 802.3af-extended'
			</console>
		</step>
		
		<step no="0.3">
			<desc>
				check pse config
			</desc>
			<log-file>step0.3.log</log-file>
			<console target="br1.br">
				-v 'show pse'
			</console>
			<log-match>-c -i "Total power available" -i "44.0*"</log-match>
			<log-match>-c -i "PSE enabled" -p 3 -i "Y" -p 4 -i "Y"</log-match>
			<log-match>-c -i "Powerup power mode" -p 4 -i "802.3af" -p 5 -i "802.3af"</log-match>
			<log-match>-c -i "Power threshold type" -i "user defined" -i "class based"</log-match>
			<log-match>-c -i "Max. *power threshold" -p 4 -i "18.00" -p 5 -i "15.40"</log-match>
			<log-match>-c -p 1 -i "Priority" -p 2 -i "0" -p 3 -i "0"</log-match>
			<log-match>-c -i "Physical port" -p 3 -i "2" -p 4 -i "3"</log-match>
		</step>
	
		
		<step no="1.3.1">
			<desc>simulate pd by sifos with class and payload</desc>
			<log-file>step1.3.1_sifos.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|.*root@.*#" timeout="200" session-new="${job.user}-${job.sid}-1">
				<!--  ahsfs initialize  -->
				-v 'tclsh8.5' 
				-v 'package req ahsfs' 
				-v '' 
				-v 'sfs_connect ${sw1.sfs_tcl_server} ${sw1.sfs_tcl_server.port}' 
				-v '' 
				-v 'cmd "psa_getConfig"' 
				-v 'cmd "psa_emulate_pd 12,1 c 4 p ${payload.4.1} o 0 alt A pol NEG start"' 
				-v 'after 3000'
				-v 'cmd "psa_emulate_pd 12,1 stat#100"' 
			</ssh>
			<log-match>-i "cmdSeq 100" -i "Status:;RUNNING" -i "State:;POWERED"</log-match>
		</step>
		
		<step no="1.3.2">
			<desc>
				get power consumption on sifos
			</desc>
			<setvar name="power.consump.1">
				grep "cmdSeq 100" ${log.dir}/step1.3.1_sifos.log | awk -F ';' '{ print $24 }'
			</setvar>
		</step>
		
		<step no="1.4.1">
			<desc>
				check power deliver on switch
			</desc>
			<log-file>step1.4.1_PowerDeliverOnSwitch.log</log-file>
			<console target="br1.br">
				-v 'show in ${eth.port.1} pse'
			</console>
			<log-match>-c -i "Port" -i "${eth.port.1}"</log-match>
			<log-match>-c -i "PoE state" -i "${pse.status.2}"</log-match>
			<log-match>-c -i "Present power mode" -i "802.3af-extended"</log-match>
			<log-match>-c -i "PD type" -i "802.3at"</log-match>
			<log-match>-c -i "PD class" -i "4"</log-match>
			<log-match>-c -i "Power\(W\)" -re</log-match>
		</step>
		
		<step no="1.4.2">
			<desc>
				get power delivering on switch
			</desc>
			<setvar name="power.deliver.1">
				${bin.dir}/getbyrexp.py -p "Power\(W\)\s+(\d+\.\d+)" -f ${log.dir}/step1.4.1_PowerDeliverOnSwitch.log -t str
			</setvar>
		</step>		
		
		<step no="1.5">
			<desc>stop pd simulation on sifos</desc>
			<log-file>step1.5_sifos.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|.*root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				<!--  ahsfs initialize  -->
				-v ''
				-v 'cmd "psa_emulate_pd 12,1 stop"' 
				-v 'after 3000'
				-v 'cmd "psa_emulate_pd 12,1 stat#200"' 
			</ssh>
			<log-match>-i "cmdSeq 200" -i "Status:;IDLE" -i "State:;UNPOWERED" -i "Pload:;0.0;W"</log-match>
		</step>		
		
		<step no="1.6.1">
			<desc>
				Check if power consumption on sifos is reasonable
			</desc>
			<script>
				echo ${payload.4.1} ${power.consump.1} ${payload.delta.1} | awk '{
				 if ( ($1-$2) &lt; $3 &amp;&amp; ($1-$2) &gt; -$3)  
				 	{exit (0);} 
				 else 
				 	{exit (1);} 
				 }' 
			</script>
		</step>
		
		<step no="1.6.2">
			<desc>
				Check if power deliver on switch is reasonable
			</desc>
			<script>
				echo ${payload.4.1} ${power.deliver.1} ${payload.delta.1} | awk '{
				 if ( ($1-$2) &lt; $3 &amp;&amp; ($1-$2) &gt; -$3)  
				 	{exit (0);} 
				 else 
				 	{exit (1);} 
				 }' 
			</script>
		</step>
		
		
		<step no="2.3.1">
			<desc>simulate pd by sifos with class and payload</desc>
			<log-file>step2.3.1_sifos.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|.*root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				<!--  ahsfs initialize  -->
				-v '' 
				-v 'cmd "psa_emulate_pd 12,1 c 4 p ${payload.4.2} o 0 alt A pol NEG start"' 
				-v 'after 3000'
				-v 'cmd "psa_emulate_pd 12,1 stat#101"' 
			</ssh>
			<log-match>-i "cmdSeq 101" -i "Status:;RUNNING" -i "State:;UNPOWERED" -i "Pload:;0.0;W"</log-match>
		</step>
		
		<step no="2.3.2">
			<desc>
				get power consumption on sifos
			</desc>
			<setvar name="power.consump.2">
				grep "cmdSeq 101" ${log.dir}/step2.3.1_sifos.log | awk -F ';' '{ print $24 }'
			</setvar>
		</step>
		
		<step no="2.4.1">
			<desc>
				check power deliver on switch
			</desc>
			<log-file>step2.4.1_PowerDeliverOnSwitch.log</log-file>
			<console target="br1.br">
				-v 'show in ${eth.port.1} pse'
			</console>
			<log-match>-c -i "Port" -i "${eth.port.1}"</log-match>
			<log-match>-c -i "PoE state" -i "${pse.status.3}"</log-match>
			<log-match>-c -i "Present power mode" -i "802.3af-extended"</log-match>
			<log-match>-c -i "PD type" -i "PD not detected"</log-match>
			<log-match>-c -i "PD class" -i "PD not detected"</log-match>
			<log-match>-c -i "Power\(W\) *0.0*" -re</log-match>
		</step>
		
		<step no="2.4.2">
			<desc>
				get power delivering on switch
			</desc>
			<setvar name="power.deliver.2">
				${bin.dir}/getbyrexp.py -p "Power\(W\)\s+(\d+\.\d+)" -f ${log.dir}/step2.4.1_PowerDeliverOnSwitch.log -t str
			</setvar>
		</step>		
		
		<step no="2.5">
			<desc>stop pd simulation on sifos</desc>
			<log-file>step2.5_sifos.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|.*root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				<!--  ahsfs initialize  -->
				-v ''
				-v 'cmd "psa_emulate_pd 12,1 stop"' 
				-v 'after 3000'
				-v 'cmd "psa_emulate_pd 12,1 stat#201"' 
			</ssh>
			<log-match>-i "cmdSeq 201" -i "Status:;IDLE" -i "State:;UNPOWERED" -i "Pload:;0.0;W"</log-match>
		</step>		
<!--		
		<step no="2.6.1">
			<desc>
				Check if power consumption on sifos is reasonable
			</desc>
			<script>
				echo ${payload.4.2} ${power.consump.2} ${payload.delta.1} | awk '{
				 if ( ($1-$2) &lt; $3 &amp;&amp; ($1-$2) &gt; -$3)  
				 	{exit (0);} 
				 else 
				 	{exit (1);} 
				 }' 
			</script>
		</step>
		
		<step no="2.6.2">
			<desc>
				Check if power deliver on switch is reasonable
			</desc>
			<script>
				echo ${payload.4.2} ${power.deliver.2} ${payload.delta.1} | awk '{
				 if ( ($1-$2) &lt; $3 &amp;&amp; ($1-$2) &gt; -$3)  
				 	{exit (0);} 
				 else 
				 	{exit (1);} 
				 }' 
			</script>
		</step>
-->
		
		<step no="quit_sifos_session">
			<desc>stop pd simulation on sifos</desc>
			<log-file>quit_sifos_session.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|.*root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				<!--  ahsfs initialize  -->
				-v '' 
				-v 'ctrl-c'
			</ssh>
		</step>	
		
	</stage>
	
	<failed-process>
		<stage>
			<step no="post_1">
			<desc>stop pd simulation on sifos</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|.*root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				<!--  ahsfs initialize  -->
				-v '' 
				-v 'ctrl-c'
			</ssh>
			<no-error-check />
			</step>
		</stage>
	</failed-process>
	
</testcase>
