<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify "clear hive &lt;hiveID&gt; counter neighbor" command works normally when clears specified ssid which has been assigned to an interface.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		1.Created hive ID already existing
		2. Created hiveID has been assigned to mgt0 interface of each MP.
		3. All MPs can discover each other

		Test Procedure:
		Ececute CLI command on each MP:
		clear hive &lt;hiveID&gt; counter neighbor
		how hive &lt;hiveID&gt; counter neighbor
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>

		<if>"${ap.wifi1.existed}" == "true"</if>
		<step no="0">
			<desc>
				shutdown interface eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap2">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="0.1">
			<desc>
				MP interface eth0 shutdown
			</desc>
			<console target="ap2">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="1">
			<desc>
				Created hive ID assigned to mgt0 of MP
			</desc>
			<log-file>step1_hive_assigned_mgt0_MP.log</log-file>
			<console target="ap2">
				-v "interface wifi0 mode access"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</console>
		</step>
		<step no="1.3">
			<desc>
				Created hive ID assigned to mgt0 of AP1
			</desc>
			<log-file>step1.3_hive_assigned_mgt0_AP1.log</log-file>
			<console target="ap1">
				-v "interface wifi0 mode access"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</console>
		</step>

		<step no="1.0">

			<desc>
				Created hive ID assigned to mgt0 of MP
			</desc>
			<log-file>step1.0_hive_assigned_mgt0_MP.log</log-file>
			<console target="ap2">
				-v "interface wifi1 mode dual"
				-v "interface wifi1 radio channel 149"
			</console>
		</step>

		<step no="1.1">
			<desc>
				MP show interface wifi1
			</desc>
			<log-file>step1.1_show_int_wifi1.log</log-file>
			<console target="ap2">
				-v "show interface wifi1"
			</console>
		</step>

		<step no="1.2">
			<desc>
				get the mgt0 MAC of MP
			</desc>
			<setvar name="mac_3">
				${bin.dir}/getbyrexp.py -p "(?i)MAC addr=(\d+.*?);" -f ${log.dir}/step1.1_show_int_wifi1.log -t str
			</setvar>
		</step>

		<step no="1.3.1">
			<desc>
				Created hive ID assigned to mgt0 of AP1
			</desc>
			<log-file>step1.3.1_hive_assigned_mgt0_AP1.log</log-file>
			<console target="ap1">
				-v "interface wifi1 mode dual"
				-v "interface wifi1 radio channel 149"
			</console>
		</step>

		<step no="1.4">
			<desc>
				AP1 show interface wifi1
			</desc>
			<log-file>step1.4_show_int_wifi1.log</log-file>
			<console target="ap1">
				-v "show interface wifi1"
			</console>
		</step>

		<step no="1.5">
			<desc>
				get the mgt0 MAC of AP1
			</desc>
			<setvar name="mac_1">
				${bin.dir}/getbyrexp.py -p "(?i)MAC addr=(\d+.*?);" -f ${log.dir}/step1.4_show_int_wifi1.log -t str
			</setvar>
		</step>

		<step no="1.6" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				MP show hive ${hive.name} neighbor
			</desc>
			<log-file>step1.6_show_int_mgt0_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show hive ${hive.name} neighbor"
			</console>
			<log-match>-e "${mac_1}"</log-match>
		</step>

		<step no="1.7" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				AP1 show hive ${hive.name} neighbor
			</desc>
			<log-file>step1.7_show_int_mgt0_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "show hive ${hive.name} neighbor"
			</console>
			<log-match>-e "${mac_3}"</log-match>
		</step>

		<step no="2" delay="200" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				show hive ${hive.name} counter neighbor
			</desc>
			<log-file>step2_MP_show_hive_counter_neighbor.log</log-file>
			<console target="ap2">
				-v "show hive ${hive.name} counter neighbor"
			</console>
			<log-match>-c -e "Hive:${hive.name}" -i "interface:wifi1.1"</log-match>
			<log-match>-c -e "neighbor ${mac_1}:"</log-match>
			<log-match>-c -e "rx data bytes"</log-match>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "rx control frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx probe response frames"</log-match>
			<log-match>-c -e "rx dropped because of duplicate"</log-match>
			<log-match>-c -e "rx dropped because frame with wep but privicy off"</log-match>
			<log-match>-c -e "rx dropped because frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx demic failed"</log-match>
			<log-match>-c -e "rx decapsulation failed"</log-match>
			<log-match>-c -e "rx defragmentation failed"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx decrypt failed on crc"</log-match>
			<log-match>-c -e "rx on unauthorized port"</log-match>
			<log-match>-c -e "rx unecrypted with privacy"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx \[re\]associations while associated"</log-match>
			<log-match>-c -e "tx data bytes"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx management frames"</log-match>
			<log-match>-c -e "rx probe request frames"</log-match>
			<log-match>-c -e "tx on uapsd queue"</log-match>
			<log-match>-c -e "tx dropped because no vlan tag"</log-match>
			<log-match>-c -e "tx dropped because bad vlan tag"</log-match>
			<log-match>-c -e "tx dropped because repeat tx failures"</log-match>
			<log-match>-c -e "tx discard on uapsd queue because excessive retry"</log-match>
			<log-match>-c -e "tx \[re\]associations"</log-match>
			<log-match>-c -e "tx \[re\]association failures"</log-match>
			<log-match>-c -e "tx \[re\]authentications"</log-match>
			<log-match>-c -e "tx \[re\]authentication failures"</log-match>
			<log-match>-c -e "tx deauthentications"</log-match>
			<log-match>-c -e "tx disassociations"</log-match>
			<log-match>-c -e "tx dropped because power save queue full"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "uapsd triggers"</log-match>
			<log-match>-c -e "SLA disabled status good_and_meet"</log-match>
			<log-match>-c -e "Kbps SLA BW"</log-match>
			<log-match>-c -e "Kbps BW usage"</log-match>
			<log-match>-c -e "connectivity score"</log-match>
			<log-match>-c -e "SLA violation traps sent"</log-match>
			<log-match>-c -e "SLA clear traps sent"</log-match>
			<log-match>-c -e "tx frames buffered"</log-match>
			<log-match>-c -e "PS q depth"</log-match>
			<log-match>-c -e "UAPSD q depth"</log-match>
			<log-match>-c -e "TX Latency Stats:"</log-match>
			<log-match>-c -e "AC: BE:"</log-match>
			<log-match>-c -e "AC: BK:"</log-match>
			<log-match>-c -e "AC: Vi:"</log-match>
			<log-match>-c -e "AC: Vo:"</log-match>
			<log-match>-c -e "Extra TX/RX Drops:"</log-match>
			<log-match>-c -e "tx max retried"</log-match>
			<log-match>-c -e "tx fifo err"</log-match>
			<log-match>-c -e "tx filtered"</log-match>
			<log-match>-c -e "tx exceed txop"</log-match>
			<log-match>-c -e "tx exceed timer"</log-match>
			<log-match>-c -e "rx ver mismatch"</log-match>
			<log-match>-c -e "rx old seq"</log-match>
			<log-match>-c -e "rx subframe dup"</log-match>
			<log-match>-c -e "rx too short"</log-match>
			<log-match>-c -e "rx wrong bssid"</log-match>
			<log-match>-c -e "rx wrong direction"</log-match>
			<log-match>-c -e "rx not assoc"</log-match>
			<no-error-check />
		</step>

		<step no="2.1">
			<desc>
				get ap2 content "rx data frames"
			</desc>
			<setvar name="content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step2_MP_show_hive_counter_neighbor.log -t str
			</setvar>
		</step>

		<step no="2.2">
			<desc>
				get ap2 content "tx data frames"
			</desc>
			<setvar name="content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step2_MP_show_hive_counter_neighbor.log -t str
			</setvar>
		</step>
			
		<step no="4" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				clear hive ${hive.name} counter neighbor
				and execute CLI command on each MP:
				show hive ${hive.name} counter neighbor
			</desc>
			<log-file>step4_MP_show_hive_counter_neighbor.log</log-file>
			<console target="ap2">
			  -v "clear hive ${hive.name} counter neighbor"
				-v "show hive ${hive.name} counter neighbor"
			</console>
			<log-match>-c -e "Hive:${hive.name}" -i "interface:wifi1.1"</log-match>
			<log-match>-c -e "neighbor ${mac_1}:"</log-match>
			<log-match>-c -e "rx data bytes"</log-match>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "0 rx management frames"</log-match>
			<log-match>-c -e "0 rx control frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0 rx probe response frames"</log-match>
			<log-match>-c -e "0 rx dropped because of duplicate"</log-match>
			<log-match>-c -e "0 rx dropped because frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 rx dropped because frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx demic failed"</log-match>
			<log-match>-c -e "0 rx decapsulation failed"</log-match>
			<log-match>-c -e "0 rx defragmentation failed"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "\d* rx decrypt failed on crc"</log-match>
			<log-match>-c -e "0 rx on unauthorized port"</log-match>
			<log-match>-c -e "0 rx unecrypted with privacy"</log-match>
			<log-match>-c -e "\d*.\d*s rx airtime"</log-match>
			<log-match>-c -e "0 rx \[re\]associations while associated"</log-match>
			<log-match>-c -e "tx data bytes"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "\d* tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "\d* tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx management frames"</log-match>
			<log-match>-c -e "0 rx probe request frames"</log-match>
			<log-match>-c -e "0 tx on uapsd queue"</log-match>
			<log-match>-c -e "0 tx dropped because no vlan tag"</log-match>
			<log-match>-c -e "0 tx dropped because bad vlan tag"</log-match>
			<log-match>-c -e "0 tx dropped because repeat tx failures"</log-match>
			<log-match>-c -e "0 tx discard on uapsd queue because excessive retry"</log-match>
			<log-match>-c -e "\d* tx \[re\]associations"</log-match>
			<log-match>-c -e "0 tx \[re\]association failures"</log-match>
			<log-match>-c -e "0 tx \[re\]authentications"</log-match>
			<log-match>-c -e "0 tx \[re\]authentication failures"</log-match>
			<log-match>-c -e "0 tx deauthentications"</log-match>
			<log-match>-c -e "0 tx disassociations"</log-match>
			<log-match>-c -e "0 tx dropped because power save queue full"</log-match>
			<log-match>-c -e "\d*.\d*s tx airtime"</log-match>
			<log-match>-c -e "0 uapsd triggers"</log-match>
			<log-match>-c -e "SLA disabled status good_and_meet"</log-match>
			<log-match>-c -e "0 Kbps SLA BW"</log-match>
			<log-match>-c -e "Kbps BW usage"</log-match>
			<log-match>-c -e "0 connectivity score"</log-match>
			<log-match>-c -e "0 SLA violation traps sent"</log-match>
			<log-match>-c -e "0 SLA clear traps sent"</log-match>
			<log-match>-c -e "0 tx frames buffered"</log-match>
			<log-match>-c -e "0 PS q depth"</log-match>
			<log-match>-c -e "0 UAPSD q depth"</log-match>
			<log-match>-c -e "TX Latency Stats:"</log-match>
			<log-match>-c -e "AC: BE:"</log-match>
			<log-match>-c -e "AC: BK:"</log-match>
			<log-match>-c -e "AC: Vi:"</log-match>
			<log-match>-c -e "AC: Vo:"</log-match>
			<log-match>-c -e "Extra TX/RX Drops:"</log-match>
			<log-match>-c -e "\d* tx max retried"</log-match>
			<log-match>-c -e "0 tx fifo err"</log-match>
			<log-match>-c -e "0 tx filtered"</log-match>
			<log-match>-c -e "0 tx exceed txop"</log-match>
			<log-match>-c -e "0 tx exceed timer"</log-match>
			<log-match>-c -e "0 rx ver mismatch"</log-match>
			<log-match>-c -e "0 rx old seq"</log-match>
			<log-match>-c -e "0 rx subframe dup"</log-match>
			<log-match>-c -e "0 rx too short"</log-match>
			<log-match>-c -e "0 rx wrong bssid"</log-match>
			<log-match>-c -e "rx wrong direction"</log-match>
			<log-match>-c -e "rx not assoc"</log-match>
			<no-error-check />
		</step>

		<step no="4.1">
			<desc>
				get ap2 content "rx data frames"
			</desc>
			<setvar name="content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step4_MP_show_hive_counter_neighbor.log -t str
			</setvar>
		</step>

		<step no="4.2">
			<desc>
				get ap2 content "tx data frames"
			</desc>
			<setvar name="content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step4_MP_show_hive_counter_neighbor.log -t str
			</setvar>
		</step>

		<step no="4.3">
			<desc>
				compare ap2 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${content_1} &gt; ${content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="4.4">
			<desc>
				compare ap2 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${content_2} &gt; ${content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>
	</stage>
</testcase>