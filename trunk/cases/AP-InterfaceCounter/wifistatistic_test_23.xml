<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify “show hive &lt;string&gt; counter neighbor &lt;mac&gt;” command works normally when displays specified neighbor.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		1.Created hive ID already existing
		2. Created hive ID has been assigned to mgt0 interface of
		each MP.
		3.Each MP set up a neigbor table which includes all
		discovered neighbors
		Test Procedure:
		Ececute CLI command on each MP:
		# show hive hiveID counter neighbor specified
		neighbor mac
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<stage>
		<step no="1">
			<desc>
				Created hive ID assigned to mgt0 of MP
			</desc>
			<log-file>step1_hive_assigned_mgt0_MP.log</log-file>
			<telnet target="ap2">
				-v "interface wifi0 mode access"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</telnet>
		</step>
		<step no="1.3">
			<desc>
				Created hive ID assigned to mgt0 of AP1
			</desc>
			<log-file>step1.3_hive_assigned_mgt0_AP1.log</log-file>
			<telnet target="ap1">
				-v "interface wifi0 mode access"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</telnet>
		</step>
		
		<if>"${ap2.wifi1.existed}" == "true"</if>
		<step no="1.0">
			<desc>
				Created hive ID assigned to mgt0 of MP
			</desc>
			<log-file>step1.0_hive_assigned_mgt0_MP.log</log-file>
			<telnet target="ap2">
				-v "interface wifi1 mode dual"
				-v "interface wifi1 radio channel 161"
			</telnet>
		</step>

		<step no="1.1">
			<desc>
				MP show interface wifi1
			</desc>
			<log-file>step1.1_show_int_wifi1.log</log-file>
			<telnet target="ap2">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="1.2">
			<desc>
				get the mgt0 MAC of MP
			</desc>
			<setvar name="mac_2">
				${bin.dir}/getbyrexp.py -p "(?i)MAC addr=(\d+.*?);" -f ${log.dir}/step1.1_show_int_wifi1.log -t str
			</setvar>
		</step>

		
		<step no="1.3.1">
			<desc>
				Created hive ID assigned to mgt0 of AP1
			</desc>
			<log-file>step1.3.1_hive_assigned_mgt0_AP1.log</log-file>
			<telnet target="ap1">
				-v "interface wifi1 mode dual"
				-v "interface wifi1 radio channel 161"
			</telnet>
		</step>

		<step no="1.4">
			<desc>
				AP1 show interface wifi1
			</desc>
			<log-file>step1.4_show_int_wifi1.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi1"
			</telnet>
		</step>

		<step no="1.5">
			<desc>
				get the mgt0 MAC of AP1
			</desc>
			<setvar name="mac_1">
				${bin.dir}/getbyrexp.py -p "(?i)MAC addr=(\d+.*?);" -f ${log.dir}/step1.4_show_int_wifi1.log -t str
			</setvar>
		</step>

		<step no="1.6">
			<desc>ap2 hive down and up</desc>
			<log-file>ap2_hive_updown.log</log-file>
			<telnet target="ap2">
				-v "interface wifi1 hive ${hive.name}1 shutdown"
				-v "no interface wifi1 hive ${hive.name}1 shutdown"
			</telnet>
		</step>
		<step no="1.7" delay="120">
			<desc>
				3) show ap2 acsp _neighbor
			</desc>
			<log-file>show_acsp_neighbor.log</log-file>
			<console target="ap2">
				-v "show acsp _nbr | include ${mac_1}"
			</console>
		</step>
		<step no="1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				MP show hive ${hive.name} neighbor
			</desc>
			<log-file>step1.9_show_int_mgt0_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show hive ${hive.name} neighbor"
			</console>
			<log-match>-e "${mac_1}"</log-match>
		</step>

		<step no="2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Ececute CLI command on each VAP interface:
				MP show hive &lt;hiveID&gt; counter neighbor
			</desc>
			<log-file>step2_MP_show_hive_counter_neighbor.log</log-file>
			<console target="ap2">
				-v "show hive ${hive.name} counter neighbor ${mac_1}"
			</console>
			<log-match>-c -e "neighbor ${mac_1}:"</log-match>
			<log-match>-c -e "rx data bytes"</log-match>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "rx control frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx probe response frames"</log-match>
			<log-match>-c -e "rx dropped because of duplicate"</log-match>
			<log-match>-c -e "rx dropped because frame with wep but privicy off"</log-match>
			<log-match>-c -e "rx dropped because frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx demic failed"</log-match>
			<log-match>-c -e "rx decapsulation failed"</log-match>
			<log-match>-c -e "rx defragmentation failed"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx decrypt failed on crc"</log-match>
			<log-match>-c -e "rx on unauthorized port"</log-match>
			<log-match>-c -e "rx unecrypted with privacy"</log-match>
			<log-match>-c -e "ms rx airtime"</log-match>
			<log-match>-c -e "rx \[re\]associations while associated"</log-match>
			<log-match>-c -e "rx" -i "Kpbs stat:"</log-match>
			<log-match>-c -e "rx unicast"</log-match>
			<log-match>-c -e "rx retries"</log-match>
			<log-match>-c -e "tx data bytes"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx management frames"</log-match>

			<log-match>-c -e "tx on uapsd queue"</log-match>
			<log-match>-c -e "tx dropped because no vlan tag"</log-match>
			<log-match>-c -e "tx dropped because bad vlan tag"</log-match>
			<log-match>-c -e "tx dropped because repeat tx failures"</log-match>
			<log-match>-c -e "tx discard on uapsd queue because excessive retry"</log-match>
			<log-match>-c -e "tx \[re\]associations"</log-match>
			<log-match>-c -e "tx \[re\]association failures"</log-match>
			<log-match>-c -e "tx \[re\]authentications"</log-match>
			<log-match>-c -e "tx \[re\]authentication failures"</log-match>
			<log-match>-c -e "tx deauthentications"</log-match>
			<log-match>-c -e "tx disassociations"</log-match>
			<log-match>-c -e "tx dropped because power save queue full"</log-match>
			<log-match>-c -e "ms tx airtime"</log-match>
			<log-match>-c -e "uapsd triggers"</log-match>
			<log-match>-c -e "tx" -i "Kbps stat:"</log-match>
			<log-match>-c -e "tx unicasts"</log-match>
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "SLA disabled status good_and_meet"</log-match>
			<log-match>-c -e "Kbps SLA BW"</log-match>
			<log-match>-c -e "Kbps BW usage"</log-match>
			<log-match>-c -e "connectivity score"</log-match>
			<log-match>-c -e "SLA violation traps sent"</log-match>
			<log-match>-c -e "SLA clear traps sent"</log-match>
			<log-match>-c -e "tx frames buffered"</log-match>
			<log-match>-c -e "PS q depth"</log-match>
			<log-match>-c -e "UAPSD q depth"</log-match>
			<log-match>-c -e "TX Latency Stats:"</log-match>
			<log-match>-c -e "AC: BE:"</log-match>
			<log-match>-c -e "Less than 5ms:"</log-match>
			<log-match>-c -e "5ms to 10ms:"</log-match>
			<log-match>-c -e "10ms to 15ms:"</log-match>
			<log-match>-c -e "15ms to 20ms:"</log-match>
			<log-match>-c -e "20ms or more:"</log-match>
			<log-match>-c -e "AC: BK:"</log-match>
			<log-match>-c -e "AC: Vi:"</log-match>
			<log-match>-c -e "AC: Vo:"</log-match>
			<log-match>-c -e "Extra TX/RX Drops:"</log-match>
			<log-match>-c -e "tx max retried"</log-match>
			<log-match>-c -e "tx fifo err"</log-match>
			<log-match>-c -e "tx filtered"</log-match>
			<log-match>-c -e "tx exceed txop"</log-match>
			<log-match>-c -e "tx exceed timer"</log-match>
			<log-match>-c -e "rx ver mismatch"</log-match>
			<log-match>-c -e "rx old seq"</log-match>
			<log-match>-c -e "rx subframe dup"</log-match>
			<log-match>-c -e "rx too short"</log-match>
			<log-match>-c -e "rx wrong bssid"</log-match>
			<log-match>-c -e "rx wrong direction"</log-match>
			<log-match>-c -e "rx not assoc"</log-match>
			<no-error-check />
		</step>

		<step no="2.1">
			<desc>
				get mac1 "rx data frames"
			</desc>
			<setvar name="ap2_mac1_content_1">
				${bin.dir}/getbyrexp.py -b "(?i)neighbor\s+${mac_1}" -e "(?i)rx\s+not\s+assoc" -p "(\d+)\s+rx data frames" -f ${log.dir}/step2_MP_show_hive_counter_neighbor.log -t str
			</setvar>
		</step>

		<step no="2.2">
			<desc>
				get mac1 content "rx unicast data frames"
			</desc>
			<setvar name="ap2_mac1_content_2">
				${bin.dir}/getbyrexp.py -b "(?i)neighbor\s+${mac_1}" -e "(?i)rx\s+not\s+assoc" -p "(\d+)\s+rx unicast data frames" -f ${log.dir}/step2_MP_show_hive_counter_neighbor.log -t str
			</setvar>
		</step>

		<step no="2.3">
			<desc>
				get mac1 content "tx data frames"
			</desc>
			<setvar name="ap2_mac1_content_3">
				${bin.dir}/getbyrexp.py -b "(?i)neighbor\s+${mac_1}" -e "(?i)rx\s+not\s+assoc" -p "(\d+)\s+tx data frames" -f ${log.dir}/step2_MP_show_hive_counter_neighbor.log -t str
			</setvar>
		</step>

		<step no="2.4">
			<desc>
				get mac1 content "tx unicast data frames"
			</desc>
			<setvar name="ap2_mac1_content_4">
				${bin.dir}/getbyrexp.py -b "(?i)neighbor\s+${mac_1}" -e "(?i)rx\s+not\s+assoc" -p "(\d+)\s+tx unicast data frames" -f ${log.dir}/step2_MP_show_hive_counter_neighbor.log -t str
			</setvar>
		</step>

		<step no="2.5">
			<desc>
				compare mac1 content "rx data frames"
			</desc>
			<script>
				if [ ${ap2_mac1_content_1} -gt 0 ]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="2.6">
			<desc>
				compare mac1 content "rx unicast data frames"
			</desc>
			<script>
				if [ ${ap2_mac1_content_2} -gt 0 ]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="2.7">
			<desc>
				compare mac1 content "tx data frames"
			</desc>
			<script>
				if [ ${ap2_mac1_content_3} -gt 0 ]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="2.8">
			<desc>
				compare mac1 content "tx unicast data frames"
			</desc>
			<script>
				if [ ${ap2_mac1_content_4} -gt 0 ]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

	</stage>
</testcase>
