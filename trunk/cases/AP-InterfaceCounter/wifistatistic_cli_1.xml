<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify "show interface wifi1 counter" works normally when interface wifi1 is up</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Interface wifi1 is up

		Test Procedure:
		Ececute CLI command on each MP:
		show interface wifi1 counter
		show interface wifi1 _counter
	</description>
	<numofap>1</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="1">
			<desc>
				"interface wifi1 mode dual"
			</desc>
			<console target="ap1">
				-v "interface wifi1 mode dual"
				-v "interface wifi1 radio channel 36"
			</console>
		</step>

		<step no="2">
			<desc>
				Interface wifi1 is up
			</desc>
			<log-file>step2_wifi1_up.log</log-file>
			<console target="ap1">
				-v "show interface"
			</console>
			<log-match>-e "Wifi1 " -i "U"</log-match>
		</step>

		<step no="3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				"show interface wifi1 counter"
			</desc>
			<log-file>step3_wifi1_counter.log</log-file>
			<console target="ap1" timeout="300">
				-v "show interface wifi1 counter"
			</console>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "rx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "rx Retries"</log-match>
			<log-match>-c -e "rx retry rate"</log-match>
			<log-match>-c -e "rx CRC errors"</log-match>
			<log-match>-c -e "rx CRC rate"</log-match>
			<log-match>-c -e "rx frame errors other than CRC"</log-match>
			<log-match>-c -e "hw FIFO overrun"</log-match>
			<log-match>-c -e "decryption failed"</log-match>
			<log-match>-c -e "MIC failure"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "frame too short"</log-match>
			<log-match>-c -e "frame too large"</log-match>
			<log-match>-c -e "frame in other mode"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>		
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx management frames other than beacon"</log-match>
			<log-match>-c -e "tx beacon frames"</log-match>
			<log-match>-c -e "tx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "tx aggregated completions"</log-match>
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "tx RTS failures"</log-match>
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "tx retry rate"</log-match>
			<log-match>-c -e "unicast data tx retry rate"</log-match>
			<log-match>-c -e "tx frames with no ack marked"</log-match>
			<log-match>-c -e "tx frames with rts enabled"</log-match>
			<log-match>-c -e "tx frames with cts enabled"</log-match>
			<log-match>-c -e "tx frames with short preamble"</log-match>
			<log-match>-c -e "tx frames with an alternate rate"</log-match>
			<log-match>-c -e "tx frames with protection"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "no tx buffer (data)"</log-match>
			<log-match>-c -e "no tx buffer (mgmt)"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "too many hw retries"</log-match>
			<log-match>-c -e "hw FIFO underrun"</log-match>
			<log-match>-c -e "transmit filtered by hw"</log-match>
			<log-match>-c -e "exceeded txop"</log-match>
			<log-match>-c -e "exceeded tx timer"</log-match>
			<log-match>-c -e "interference raise alert"</log-match>
			<log-match>-c -e "interference clear alert"</log-match>
			<log-match>-c -e "band steering suppress"</log-match>
			<log-match>-c -e "load balance suppress"</log-match>
			<log-match>-c -e "weak snr suppress"</log-match>
			<log-match>-c -e "safety net bypassed suppress"</log-match>
			<no-error-check />
		</step>

		<step no="4.1">
			<desc>
				get wifi1 "rx data frames"
			</desc>
			<setvar name="wifi1_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step3_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="4.2">
			<desc>
				get wifi1 content "tx data frames"
			</desc>
			<setvar name="wifi1_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step3_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="4.3">
			<desc>
				get wifi1 content "rx management frames"
			</desc>
			<setvar name="wifi1_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/step3_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="4.4">
			<desc>
				get wifi1 content "tx beacon frames"
			</desc>
			<setvar name="wifi1_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/step3_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="4.5">
			<desc>
				get wifi1 content "tx management frames"
			</desc>
			<setvar name="wifi1_content_5">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx management frames" -f ${log.dir}/step3_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="4.6">
			<desc>
				compare wifi1 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_1} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="4.7">
			<desc>
				compare wifi1 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_2} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="4.8">
			<desc>
				compare wifi1 content "rx management frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_3} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="4.9">
			<desc>
				compare wifi1 content "tx beacon frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_4} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="4.10">
			<desc>
				compare wifi1 content "tx management frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_5} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				"show interface wifi1 _counter"
			</desc>
			<log-file>step5_wifi1__counter.log</log-file>
			<console target="ap1" timeout="300">
				-v "show interface wifi1 _counter"
			</console>
			<log-match>-c -e "rx frames"</log-match>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "11n rx frames"</log-match>
			<!--  <log-match>-c -e "rx chip keyix errors"</log-match> -->
			<log-match>-c -e "rx Retries"</log-match>
			<log-match>-c -e "rx CRC errors"</log-match>
			<!--  <log-match>-c -e "decryption failed"</log-match> -->
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx management frames other than beacon"</log-match>
			<log-match>-c -e "tx beacon frames"</log-match>
			<!--  <log-match>-c -e "tx global timeout interrupts"</log-match> -->
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "tx frames with no ack marked"</log-match>
			<log-match>-c -e "tx frames with an alternate rate"</log-match>
			<!--  <log-match>-c -e "tx frame errors"</log-match> -->
			<!-- <log-match>-c -e "too many hw retries"</log-match> -->
			<log-match>-c -e "tx available buffers"</log-match>
			<!-- <log-match>-c -e "rx PHY error summary count"</log-match> -->
			<!-- <log-match>-c -e "illegal service"</log-match> -->
			<!-- <log-match>-c -e "tx rssi of last ack"</log-match> -->
			<log-match>-c -e "rx rssi from histogram"</log-match> 
			<!-- <log-match>-c -e "periodic calibrations"</log-match> -->
			<!--  <log-match>-c -e "rx/default antenna switches"</log-match> 
			<log-match>-c -e "Antenna profile"</log-match>
			<log-match>-c -e "\[0\] tx" -i "rx"</log-match>
			<log-match>-c -e "\[1\] tx" -i "rx"</log-match> -->

			<log-match>-c -e "interference raise alert"</log-match>
			<log-match>-c -e "interference clear alert"</log-match>
			<log-match>-c -e "band steering suppress"</log-match>
			<log-match>-c -e "load balance suppress"</log-match>
			<log-match>-c -e "weak snr suppress"</log-match>
			<log-match>-c -e "safety net bypassed suppress"</log-match>
			<no-error-check />
		</step>

		<step no="5.1">
			<desc>
				get wifi1 "rx data frames"
			</desc>
			<setvar name="wifi1_content_6">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step5_wifi1__counter.log -t str
			</setvar>
		</step>

		<step no="5.2">
			<desc>
				get wifi1 content "tx data frames"
			</desc>
			<setvar name="wifi1_content_7">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step5_wifi1__counter.log -t str
			</setvar>
		</step>

		<step no="5.3">
			<desc>
				get wifi1 content "rx management frames"
			</desc>
			<setvar name="wifi1_content_8">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/step5_wifi1__counter.log -t str
			</setvar>
		</step>

		<step no="5.4">
			<desc>
				get wifi1 content "tx beacon frames"
			</desc>
			<setvar name="wifi1_content_9">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/step5_wifi1__counter.log -t str
			</setvar>
		</step>

		<step no="5.5">
			<desc>
				get wifi1 content "tx management frames"
			</desc>
			<setvar name="wifi1_content_10">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx management frames" -f ${log.dir}/step5_wifi1__counter.log -t str
			</setvar>
		</step>

		<step no="5.6">
			<desc>
				compare wifi1 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_6} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="5.7">
			<desc>
				compare wifi1 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_7} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="5.8">
			<desc>
				compare wifi1 content "rx management frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_8} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="5.9">
			<desc>
				compare wifi1 content "tx beacon frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_9} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="5.10">
			<desc>
				compare wifi1 content "tx management frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_10} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>
	</stage>
</testcase>