<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify “show interface wifi0.2 counter” works normally when interface wifi0.2 is up</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		There is a ssid binding with wifi0.2 interface and wifi0.2 is up
		Test Procedure:
		Ececute CLI command on each MP:
		# show interface wifi0.2 counter
		# show interface wifi0.2 _counter
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<stage>
		<step no="1">
			<desc>
				STA connects to MP
				"interface wifi0 mode access"
				"ssid ${ssid.name}"
				"interface wifi0 ssid ${ssid.name}"
				"interface wifi0 radio channel 1"
			</desc>
			<log-file>step1_config_client_connects_AP.log</log-file>
			<console target="ap1">
				-v "interface wifi0 mode access"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name}1"
				-v "interface wifi0 ssid ${ssid.name}1"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
			</console>
		</step>
		
		<step no="1.01">
			<desc> shutdown interface wifi0.1</desc>
			<log-file>ap_configure_2.log</log-file>
			<telnet target="ap1">
				-v "interface wifi0 ssid ${ssid.name}1 shutdown"
			</telnet>
		</step>
		
		<step no="1.02">
			<desc>
				check interface wifi0.1 is down
			</desc>
			<log-file>wifi01_down.log</log-file>
			<console target="ap1">
				-v "show interface"
			</console>
			<log-match>-e "Wifi0.1 " -i "D"</log-match>
			<log-match>-e "Wifi0.2 " -i "U"</log-match>
		</step>
		
		<property name="conn1.ssid" value="${ssid.name}"/>
		<property name="rx_data_frames_0" value="0"/>
		<property name="tx_data_frames_0" value="0"/>
		<property name="rx_beacon_frames_0" value="0"/>
			
		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap1"/>
		<include prefix="2.1" file="subs/sta_ping.xml" args="sta1, ${ap1.mgt0.ip}, 55"/>
		
		<step no="3">
			<desc>
				show station
			</desc>
			<log-file>step3.log</log-file>
			<console target="ap1">
				-v "show sta"
			</console>
			<no-error-check />
		</step>	
		
        <step no="3.1">
            <desc>
                Get station's ip
            </desc>
            <setvar name="sta1.tif.ip">
                ${bin.dir}/getbyrexp.py -p "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})" -f ${log.dir}/step3.log -t str
            </setvar>
        </step>
		
		<step no="3.2">
            <desc>
                AP ping station
            </desc>
            <log-file>step3.2.log</log-file>
            <console target="ap1" timeout="360">
                  -v "ping ${sta1.tif.ip} count 150"
            </console>
            <no-error-check />
        </step>  
		
		<step no="4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi0.2 counter
			</desc>
			<log-file>step4.log</log-file>
			<console target="ap1">
				-v "show interface wifi0.2 counter"
			</console>
		    <log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "ms rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "bad version"</log-match>
			<log-match>-c -e "frame too short"</log-match>
			<log-match>-c -e "wep processing failed"</log-match>
			<log-match>-c -e "decapsulation failed"</log-match>
			<log-match>-c -e "no tx buffer"</log-match>
			<log-match>-c -e "decrypt failed on crc"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "s tx airtime"</log-match>
			<log-match>-c -e "s tx airtime(BE)"</log-match>
			<log-match>-c -e "ms tx airtime(BK)"</log-match>
			<log-match>-c -e "ms tx airtime(VO)"</log-match>
			<log-match>-c -e "ms tx airtime(VI)"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "other reasons"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>
		
		<step no="4.0">
			<desc>
				show interface wifi0.2 _counter
			</desc>
			<log-file>step4.0.log</log-file>
			<console target="ap1">
				-v "show interface wifi0.2 _counter"
			</console>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx beacon frames"</log-match>
			<no-error-check />
		</step>
		
		<step no="4.1">
			<desc>
				get wifi0.2 content "rx data frames"
			</desc>
			<setvar name="rx_data_frames_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step4.log -t str
			</setvar>
		</step>
		
		<step no="4.2">
			<desc>
				get wifi0.2 content "tx data frames"
			</desc>
			<setvar name="tx_data_frames_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step4.log -t str
			</setvar>
		</step>
		
		<step no="4.3">
			<desc>
				get wifi0.2 content "rx beacon frames"
			</desc>
			<setvar name="rx_beacon_frames_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx beacon frames" -f ${log.dir}/step4.log -t str
			</setvar>
		</step>		
		
		<step no="5">
			<desc>
				compare content "tx data frames"
			</desc>
			 <script>
             echo ${tx_data_frames_0} ${tx_data_frames_1} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>
				
		<step no="5.1">
			<desc>
				compare content "rx data frames"
			</desc>
			 <script>
             echo ${rx_data_frames_0} ${rx_data_frames_1} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>	
		
		<step no="5.2">
			<desc>
				compare content "rx beacon frames"
			</desc>
			 <script>
             echo ${rx_beacon_frames_0} ${rx_beacon_frames_1} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>	
		
	</stage>
</testcase>
