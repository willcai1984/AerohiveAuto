<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify "clear ssid XXX counter station‚Äù command works normally when clears specified ssid which has been assigned to an interface.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Created a ssid and bound with interface wifi0.1
        Created a ssid1 and bound with interface wifi0.2
		
		Test Procedure:
		Ececute CLI command on each MP:
		show ssid wst counter station
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>linux</tbtype>

	<stage>
		<step no="1">
			<desc>
				STA connects to MP
				"interface wifi0 mode access"
				"ssid ${ssid.name}"
				"ssid ${ssid.name}1"
				"interface wifi0 ssid ${ssid.name}"
				"interface wifi0 ssid ${ssid.name}1"
			</desc>
			<log-file>step1_config_client_connects_AP.log</log-file>
			<console target="ap1">
				-v "interface wifi0 mode access"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name}1"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}1"
			</console>
		</step>
		
		<property name="conn1.ssid" value="${ssid.name}"/>
		<property name="conn2.ssid" value="${ssid.name}"/>
					
		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap1"/>
		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn2, sta2, ap1"/>
		
		<step no="4">
			<desc>show station</desc>
			<log-file>step4.log</log-file>
			<console target="ap1">
				-v "show sta"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
			<log-match>-c -i "${sta2.tif.mac}" -i "${sta2.tif.ip}"</log-match>	
		</step>	
		
		<step no="5">
			<desc>
				 Execute ping from client1 to client2 more than 2 minutes then stoped
			</desc>
			<log-file>step5.log</log-file>
			<ssh target="sta1" timeout="200">
				 -v "ping ${sta2.tif.ip} -c 1000 -i 0.01 -s 1024"
			</ssh>
			<log-match>-e "from ${sta2.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="6">
			<desc>
				 Execute ping from client2 to client1 for 2 minutes then stoped
			</desc>
			<log-file>step6.log</log-file>
			<ssh target="sta2" timeout="200">
				 -v "ping ${sta1.tif.ip} -c 1000 -i 0.01 -s 1024"
			</ssh>
			<log-match>-e "from ${sta1.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
		
		<step no="7" delay="10">
			<desc>
				show ssid ${ssid.name} counter station
			</desc>
			<log-file>step7.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name} counter station"
			</console>
			<log-match>-c -e "SSID:${ssid.name} interface: wifi0.1"</log-match>
			<log-match>-c -e "station ${sta1.tif.mac}"</log-match>
			<log-match>-c -e "station ${sta2.tif.mac}"</log-match>
			<no-error-check />
		</step>
		
		<step no="8" delay="10">
			<desc>
				show ssid ${ssid.name} counter station ${sta1.tif.mac}
			</desc>
			<log-file>step8.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name} counter station ${sta1.tif.mac}"
			</console>	
			<no-error-check />
		</step>	

		<step no="8.1" delay="10">
			<desc>
				show ssid ${ssid.name} counter station ${sta2.tif.mac}
			</desc>
			<log-file>step8.1.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name} counter station ${sta2.tif.mac}"
			</console>	
			<no-error-check />
		</step>			
		
		<step no="9">
			<desc>
				get sta1 wifi0.1 content "rx data frames"
			</desc>
			<setvar name="A">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step8.log -t str
			</setvar>
		</step>
		
		<step no="9.1">
			<desc>
				get sta1 wifi0.1 content "tx data frames"
			</desc>
			<setvar name="B">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step8.log -t str
			</setvar>
		</step>

		<step no="10">
			<desc>
				get sta2 wifi0.1 content "rx data frames"
			</desc>
			<setvar name="C">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step8.1.log -t str
			</setvar>
		</step>
		
		<step no="10.1">
			<desc>
				get sta2 wifi0.1 content "tx data frames"
			</desc>
			<setvar name="D">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step8.1.log -t str
			</setvar>
		</step>
		
		<step no="11">
			<desc></desc>
			<log-file>step11.log</log-file>
			<console target="ap1">
				-v "clear ssid ${ssid.name} counter station"
				-v "show ssid ${ssid.name} counter station ${sta1.tif.mac}"
			</console>
			<no-error-check />
		</step>

		<step no="12">
			<desc></desc>
			<log-file>step12.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name} counter station ${sta2.tif.mac}"
			</console>
			<no-error-check />
		</step>	
		
        <step no="13">
			<desc>
				get sta1 wifi0.1 content "rx data frames"
			</desc>
			<setvar name="A1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step11.log -t str
			</setvar>
		</step>
		
		<step no="13.1">
			<desc>
				get sta1 wifi0.1 content "tx data frames"
			</desc>
			<setvar name="B1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step11.log -t str
			</setvar>
		</step>

		<step no="14">
			<desc>
				get sta2 wifi0.1 content "rx data frames"
			</desc>
			<setvar name="C1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step12.log -t str
			</setvar>
		</step>
		
		<step no="14.1">
			<desc>
				get sta2 wifi0.1 content "tx data frames"
			</desc>
			<setvar name="D1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step12.log -t str
			</setvar>
		</step>
		
		<step no="15">
			<desc>
				compare content "rx data frames"
			</desc>
			 <script>
             echo ${A1} ${A} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>		
		
		<step no="15.1">
			<desc>
				compare station1 content "tx data frames"
			</desc>
			<script>
				echo ${B1} ${B} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
			</script>
		</step>

		<step no="15.2">
			<desc>
				compare content "rx data frames"
			</desc>
			 <script>
             echo ${C1} ${C} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>	
		
		<step no="15.3">
			<desc>
				compare station1 content "tx data frames"
			</desc>
			<script>
				echo ${D1} ${D} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
			</script>
		</step>
		
	    <step no="16">
			<desc></desc>
			<log-file>16.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name}1 counter station"
			</console>
			<log-match>-c -i "no station associated to interface wifi0.2" </log-match>
			<no-error-check />
		</step>
	</stage>	

	<stage>
        <step no="100">
            <desc>
                shutdown wlan interface on sta1
            </desc>
            <log-file>100.log</log-file>
            <ssh target="sta1" prompt=".*#">
                -v "ifconfig ${sta1.tif.name} down"
            </ssh>
        </step>
		<step no="101">
            <desc>
                shutdown wlan interface on sta2
            </desc>
            <log-file>101.log</log-file>
            <ssh target="sta2" prompt=".*#">
                -v "ifconfig ${sta2.tif.name} down"
            </ssh>
        </step>	
    </stage>
	
	<failed-process>
    <stage>
        <step no="110">
            <desc>
                shutdown wlan interface on sta1
            </desc>
            <log-file>110.log</log-file>
            <ssh target="sta1" prompt=".*#">
                -v "ifconfig ${sta1.tif.name} down"
            </ssh>
        </step>
		<step no="111">
            <desc>
                shutdown wlan interface on sta2
            </desc>
            <log-file>111.log</log-file>
            <ssh target="sta2" prompt=".*#">
                -v "ifconfig ${sta2.tif.name} down"
            </ssh>
        </step>
    </stage>
    </failed-process>
	
</testcase>