<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify “show ssid &lt;string&gt; counter” command works normally when display the specified station which mac address does not exist.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		1.This ssid has been created and assigned to the interface
		2.No stations associated with this ssid
		Test Procedure:
		Ececute CLI command on each MP:
		# show ssid wst counter station xxxx:yyyy:zzzz (station
		mac)
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>windows</tbtype>
	<stage>
		<property name="non.sta.mac" value="1111:2222:3333" />
		<step no="1">
			<desc>
				STA connects to MP
				"interface wifi0 mode access"
				"ssid ${ssid.name}"
				"security-object ${ssid.name}"
				"ssid ${ssid.name} security-object ${ssid.name}"
				"security-object ${ssid.name} security protocol-suite wpa-auto-psk ascii-key aerohive"
				"interface wifi0 ssid ${ssid.name}"
				"interface wifi0 radio channel 1"
			</desc>
			<log-file>step1_config_client_connects_AP.log</log-file>
			<console target="ap1">
				-v "interface wifi0 mode access"
				-v "ssid ${ssid.name}"
				-v "security-object ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "security-object ${ssid.name} security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
			</console>
		</step>

		<step no="1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o step1.1_wifi_prof.xml -s "${ssid.name}" -l ${log.dir}
			</script>
		</step>

		<step no="1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/step1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>step1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}&lt;/name&gt;"</log-match>
		</step>

		<step no="1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name} to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name} on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}"
			</ssh>
			<log-match>-i "SSID name" -i "${ssid.name}"</log-match>
		</step>

		<step no="1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-i "SSID" -i "${ssid.name}"</log-match>
		</step>

		<step no="1.6">
			<desc>
				connect to ssid ${ssid.name} on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name} name=${ssid.name} interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name} connected on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-i "State" -i " connected"</log-match>
		</step>

		<step no="1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-i "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>step1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>step1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/step1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap_ip_1} -c 10"
			</ssh>
			<log-match>-i "from ${ap_ip_1}" -i "ttl="</log-match>
		</step>
		<step no="2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				The station associated with this ssid
				show ssid ${ssid.name} counter station xxxx:yyyy:zzzz (station
				mac)
			</desc>
			<log-file>step2_show_ssid_counter_sta.log</log-file>
			<console target="ap1">
				-v "show ssid ${ssid.name} counter station ${non.sta.mac}" ; exit 0
			</console>
			<log-match>-c -e "Invalid parameter"</log-match>
			<no-error-check />
		</step>
	</stage>
</testcase>
