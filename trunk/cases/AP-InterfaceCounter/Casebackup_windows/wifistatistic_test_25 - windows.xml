<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify "clear interface &lt;specified wifi interface&gt; counter" command works normally when clear specified wifi interface.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		1.The specified wifi interface exists and up

		Test Procedure:
		Ececute CLI command on each MP:
		# clear interface wifi0 counter
		# show interface wifi0 counter
		# clear interface wifi1 counter
		# show interface wifi1 counter
		# clear interface wifi0.1 counter
		# show interface wifi0.1 counter
		# clear interface wifi0.2 counter
		# show interface wifi0.2 counter
		# clear interface wifi0.3 counter
		# show interface wifi0.3 counter
		# clear interface wifi0.4 counter
		# show interface wifi0.4 counter
		# clear interface wifi1.1 counter
		# show interface wifi1.1 counter
		# clear interface wifi1.2 counter
		# show interface wifi1.2 counter
		# clear interface wifi1.3 counter
		# show interface wifi1.3 counter
		# clear interface wifi1.4 counter
		# show interface wifi1.4 counter
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>windows</tbtype>

	<stage>
		<step no="0">
			<desc>
				MP interface wifi0 mode access
				interface wifi1 mode dual
			</desc>
			<telnet target="ap1">
				-v "interface wifi0 mode access"
				-v "interface wifi0 radio channel 1"
			</telnet>
		</step>

		<step no="0.1">
			<desc>
				Created ssids
			</desc>
			<log-file>step0.1_created_ssids.log</log-file>
			<telnet target="ap1">
				-v "ssid ${ssid.name}-1"
				-v "ssid ${ssid.name}-2"
				-v "ssid ${ssid.name}-3"
				-v "ssid ${ssid.name}-4"
				-v "ssid ${ssid.name}-5"
				-v "ssid ${ssid.name}-6"
				-v "ssid ${ssid.name}-7"
				-v "ssid ${ssid.name}-8"
				-v "security-object ${ssid.name}-1"
				-v "ssid ${ssid.name}-1 security-object ${ssid.name}-1"
				-v "security-object ${ssid.name}-1 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "security-object ${ssid.name}-2"
				-v "ssid ${ssid.name}-2 security-object ${ssid.name}-2"
				-v "security-object ${ssid.name}-2 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "security-object ${ssid.name}-3"
				-v "ssid ${ssid.name}-3 security-object ${ssid.name}-3"
				-v "security-object ${ssid.name}-3 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "security-object ${ssid.name}-4"
				-v "ssid ${ssid.name}-4 security-object ${ssid.name}-4"
				-v "security-object ${ssid.name}-4 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "security-object ${ssid.name}-5"
				-v "ssid ${ssid.name}-5
				security-object ${ssid.name}-5"
				-v "security-object ${ssid.name}-5 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "security-object ${ssid.name}-6"
				-v "ssid ${ssid.name}-6 security-object ${ssid.name}-6"
				-v "security-object ${ssid.name}-6 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "security-object ${ssid.name}-7"
				-v "ssid ${ssid.name}-7 security-object ${ssid.name}-7"
				-v "security-object ${ssid.name}-7 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "security-object ${ssid.name}-8"
				-v "ssid ${ssid.name}-8 security-object ${ssid.name}-8"
				-v "security-object ${ssid.name}-8 security protocol-suite wpa-auto-psk ascii-key aerohive"
			</telnet>
		</step>

		<step no="0.2">
			<desc>
				Ssids bind to wifi0
			</desc>
			<log-file>step0.2_ssids_bind.log</log-file>
			<telnet target="ap1">
				-v "interface wifi0 ssid ${ssid.name}-1"
				-v "interface wifi0 ssid ${ssid.name}-2"
				-v "interface wifi0 ssid ${ssid.name}-3"
				-v "interface wifi0 ssid ${ssid.name}-4"
			</telnet>
		</step>

		<step no="w0.1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-1
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw0.1.1_wifi_prof.xml -s "${ssid.name}-1" -l ${log.dir}
			</script>
		</step>

		<step no="w0.1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw0.1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w0.1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw0.1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-1"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-1&lt;/name&gt;"</log-match>
		</step>

		<step no="w0.1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-1 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-1 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw0.1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-1"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-1"</log-match>
		</step>

		<step no="w0.1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw0.1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-1"</log-match>
		</step>

		<step no="w0.1.6">
			<desc>
				connect to ssid ${ssid.name}-1 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw0.1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-1 name=${ssid.name}-1 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w0.1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-1 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw0.1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0.1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw0.1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0.1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>stepw0.1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0.1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw0.1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w0.1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>stepw0.1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w0.1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw0.1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w0.1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ping ${ap_ip_1} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w0.2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-1
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw0.2.1_wifi_prof.xml -s "${ssid.name}-1" -l ${log.dir}
			</script>
		</step>

		<step no="w0.2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw0.2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w0.2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw0.2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-1"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-1&lt;/name&gt;"</log-match>
		</step>

		<step no="w0.2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name}-1 to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name}-1 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw0.2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-1"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-1"</log-match>
		</step>

		<step no="w0.2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw0.2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-1"</log-match>
		</step>

		<step no="w0.2.6">
			<desc>
				connect to ssid ${ssid.name}-1 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw0.2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name}-1 name=${ssid.name}-1 interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="w0.2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-1 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw0.2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0.2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw0.2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0.2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>stepw0.2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0.2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw0.2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w0.2.11">
			<desc>
				show mgt0 ip of ap1
			</desc>
			<log-file>stepw0.2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w0.2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw0.2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w0.2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>stepw0.2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2" timeout="120">
				-v "ping ${ap_ip_2} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w0.2.14" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi0 counter
			</desc>
			<log-file>stepw0.2.14_show_int_wifi0.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "rx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "rx Retries"</log-match>
			<log-match>-c -e "rx CRC errors"</log-match>
			<log-match>-c -e "rx frame errors other than CRC"</log-match>
			<log-match>-c -e "hw desc overrun"</log-match>
			<log-match>-c -e "hw FIFO overrun"</log-match>
			<log-match>-c -e "decryption failed"</log-match>
			<log-match>-c -e "MIC failure"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "frame too short"</log-match>
			<log-match>-c -e "frame too large"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx management frames other than beacon"</log-match>
			<log-match>-c -e "tx beacon frames"</log-match>
			<log-match>-c -e "tx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "tx aggregated completions"</log-match>
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "tx RTS failures"</log-match>
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "tx frames with no ack marked"</log-match>
			<log-match>-c -e "tx frames with rts enabled"</log-match>
			<log-match>-c -e "tx frames with cts enabled"</log-match>
			<log-match>-c -e "tx frames with short preamble"</log-match>
			<log-match>-c -e "tx frames with an alternate rate"</log-match>
			<log-match>-c -e "tx frames with protection"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "transmit queue too deeper"</log-match>
			<log-match>-c -e "device gone"</log-match>
			<log-match>-c -e "tx encapsulation failed"</log-match>
			<log-match>-c -e "invalid station"</log-match>
			<log-match>-c -e "uapsd queue full"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "too many hw retries"</log-match>
			<log-match>-c -e "hw FIFO underrun"</log-match>
			<log-match>-c -e "transmit filtered by hw"</log-match>
			<log-match>-c -e "hw other errors"</log-match>
			<log-match>-c -e "exceeded txop"</log-match>
			<log-match>-c -e "exceeded tx timer"</log-match>
			<log-match>-c -e "RX tasklet run:"</log-match>
			<log-match>-c -e "interference raise alert"</log-match>
			<log-match>-c -e "interference clear alert"</log-match>
			<log-match>-c -e "band steering suppress"</log-match>
			<log-match>-c -e "load balance suppress"</log-match>
			<log-match>-c -e "weak snr suppress"</log-match>
			<log-match>-c -e "safety net bypassed suppres"</log-match>
			<no-error-check />
		</step>

		<step no="w0.2.15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi0 counter
				show interface wifi0 counter
			</desc>
			<log-file>stepw0.2.15_show_int_wifi0.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi0 counter"
				-v "show interface wifi0 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx unicast data frames"</log-match>
			<log-match>-c -e "0 rx multicast data frames"</log-match>
			<log-match>-c -e "0 rx broadcast data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "0 rx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "0 rx Retries"</log-match>
			<log-match>-c -e "0 rx CRC errors"</log-match>
			<log-match>-c -e "0 rx frame errors other than CRC"</log-match>
			<log-match>-c -e "0 hw desc overrun"</log-match>
			<log-match>-c -e "0 hw FIFO overrun"</log-match>
			<log-match>-c -e "0 decryption failed"</log-match>
			<log-match>-c -e "0 MIC failure"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 frame too short"</log-match>
			<log-match>-c -e "0 frame too large"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx management frames other than beacon"</log-match>
			<log-match>-c -e "tx beacon frames"</log-match>
			<log-match>-c -e "0 tx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "0 tx aggregated completions"</log-match>
			<log-match>-c -e "0 tx retries"</log-match>
			<log-match>-c -e "0 tx RTS failures"</log-match>
			<log-match>-c -e "0 tx retries"</log-match>
			<log-match>-c -e "0 tx frames with no ack marked"</log-match>
			<log-match>-c -e "0 tx frames with rts enabled"</log-match>
			<log-match>-c -e "0 tx frames with cts enabled"</log-match>
			<log-match>-c -e "0 tx frames with short preamble"</log-match>
			<log-match>-c -e "0 tx frames with an alternate rate"</log-match>
			<log-match>-c -e "0 tx frames with protection"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 transmit queue too deeper"</log-match>
			<log-match>-c -e "0 device gone"</log-match>
			<log-match>-c -e "0 tx encapsulation failed"</log-match>
			<log-match>-c -e "0 invalid station"</log-match>
			<log-match>-c -e "0 uapsd queue full"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0 too many hw retries"</log-match>
			<log-match>-c -e "0 hw FIFO underrun"</log-match>
			<log-match>-c -e "0 transmit filtered by hw"</log-match>
			<log-match>-c -e "0 hw other errors"</log-match>
			<log-match>-c -e "0 exceeded txop"</log-match>
			<log-match>-c -e "0 exceeded tx timer"</log-match>
			<log-match>-c -e "RX tasklet run:"</log-match>
			<log-match>-c -e "0 interference raise alert"</log-match>
			<log-match>-c -e "0 interference clear alert"</log-match>
			<log-match>-c -e "0 band steering suppress"</log-match>
			<log-match>-c -e "0 load balance suppress"</log-match>
			<log-match>-c -e "0 weak snr suppress"</log-match>
			<log-match>-c -e "0 safety net bypassed suppres"</log-match>
			<no-error-check />
		</step>

		<step no="w0.2.15.1">
			<desc>
				get wifi0 content "rx data frames"
			</desc>
			<setvar name="w0_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw0.2.14_show_int_wifi0.log -t str
			</setvar>
		</step>

		<step no="w0.2.15.2">
			<desc>
				get wifi0 content "tx data frames"
			</desc>
			<setvar name="w0_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw0.2.14_show_int_wifi0.log -t str
			</setvar>
		</step>

		<step no="w0.2.15.3">
			<desc>
				get wifi0 content "rx data frames"
			</desc>
			<setvar name="w0_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw0.2.15_show_int_wifi0.log -t str
			</setvar>
		</step>

		<step no="w0.2.15.4">
			<desc>
				get wifi0 content "tx data frames"
			</desc>
			<setvar name="w0_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw0.2.15_show_int_wifi0.log -t str
			</setvar>
		</step>

		<step no="w0.2.15.5">
			<desc>
				compare wifi0 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w0_content_1} &gt; ${w0_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w0.2.15.6">
			<desc>
				compare wifi0 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w0_content_2} &gt; ${w0_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w01.2.16" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi0.1 counter
			</desc>
			<log-file>stepw01.2.16_show_int_wifi0.1.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0.1 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w01.2.17" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi0.1 counter
				show interface wifi0.1 counter
			</desc>
			<log-file>stepw01.2.17_show_int_wifi0.1.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi0.1 counter"
				-v "show interface wifi0.1 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0.00ms rx airtime"</log-match>
			<log-match>-c -e "0 rx frame errors"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 wrong bssid"</log-match>
			<log-match>-c -e "0 duplicate"</log-match>
			<log-match>-c -e "0 invalid direction"</log-match>
			<log-match>-c -e "0 multicast echo"</log-match>
			<log-match>-c -e "0 station not associated"</log-match>
			<log-match>-c -e "0 frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx sta auth failure"</log-match>
			<log-match>-c -e "0 rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "0 rx assoc without auth"</log-match>
			<log-match>-c -e "0 rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "0 rx assoc with no rate match"</log-match>
			<log-match>-c -e "0 rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx frame with unknown subtype"</log-match>
			<log-match>-c -e "0 rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "0 rx format bad (CCMP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "0 rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "0 rx format bad (TKIP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx failed because key type"</log-match>
			<log-match>-c -e "0 rx failed because key notsetup"</log-match>
			<log-match>-c -e "0 rx probe suppressed"</log-match>
			<log-match>-c -e "0 rx auth suppressed"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0.00ms tx airtime"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 no tx buffer"</log-match>
			<log-match>-c -e "0 unknown destination"</log-match>
			<log-match>-c -e "0 bad cipher/key type"</log-match>
			<log-match>-c -e "0 no defkey"</log-match>
			<log-match>-c -e "0 no space for crypto hdrs"</log-match>
			<log-match>-c -e "0 power save queue full"</log-match>
			<log-match>-c -e "0 unicast vlan mismatch"</log-match>
			<log-match>-c -e "0 multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "0 SLA traps sent"</log-match>
			<log-match>-c -e "0 node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "0 Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "0 BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w01.2.17.1">
			<desc>
				get wifi0.1 content "rx data frames"
			</desc>
			<setvar name="w01_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw01.2.16_show_int_wifi0.1.log -t str
			</setvar>
		</step>

		<step no="w01.2.17.2">
			<desc>
				get wifi0.1 content "tx data frames"
			</desc>
			<setvar name="w01_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw01.2.16_show_int_wifi0.1.log -t str
			</setvar>
		</step>

		<step no="w01.2.17.3">
			<desc>
				get wifi0.1 content "rx data frames"
			</desc>
			<setvar name="w01_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw01.2.17_show_int_wifi0.1.log -t str
			</setvar>
		</step>

		<step no="w01.2.17.4">
			<desc>
				get wifi0.1 content "tx data frames"
			</desc>
			<setvar name="w01_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw01.2.17_show_int_wifi0.1.log -t str
			</setvar>
		</step>

		<step no="w01.2.17.5">
			<desc>
				compare wifi0.1 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w01_content_1} &gt; ${w01_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w01.2.17.6">
			<desc>
				compare wifi0.1 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w01_content_2} &gt; ${w01_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w02.1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-2
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw02.1.1_wifi_prof.xml -s "${ssid.name}-2" -l ${log.dir}
			</script>
		</step>

		<step no="w02.1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw02.1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w02.1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw02.1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-2"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-2&lt;/name&gt;"</log-match>
		</step>

		<step no="w02.1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-2 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-2 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw02.1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-2"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-2"</log-match>
		</step>

		<step no="w02.1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw02.1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-2"</log-match>
		</step>

		<step no="w02.1.6">
			<desc>
				connect to ssid ${ssid.name}-2 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw02.1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-2 name=${ssid.name}-2 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w02.1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-2 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw02.1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w02.1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw02.1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w02.1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>stepw02.1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w02.1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw02.1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w02.1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>stepw02.1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w02.1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw02.1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w02.1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ping ${ap_ip_1} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w02.2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-2
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw02.2.1_wifi_prof.xml -s "${ssid.name}-2" -l ${log.dir}
			</script>
		</step>

		<step no="w02.2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw02.2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w02.2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw02.2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-2"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-2&lt;/name&gt;"</log-match>
		</step>

		<step no="w02.2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name}-2 to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name}-2 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw02.2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-2"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-2"</log-match>
		</step>

		<step no="w02.2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw02.2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-2"</log-match>
		</step>

		<step no="w02.2.6">
			<desc>
				connect to ssid ${ssid.name}-2 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw02.2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name}-2 name=${ssid.name}-2 interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="w02.2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-2 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw02.2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w02.2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw02.2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w02.2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>stepw02.2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w02.2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw02.2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w02.2.11">
			<desc>
				show mgt0 ip of ap1
			</desc>
			<log-file>stepw02.2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w02.2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw02.2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w02.2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>stepw02.2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2" timeout="120">
				-v "ping ${ap_ip_2} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w02.2.14" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi0.2 counter
			</desc>
			<log-file>stepw02.2.14_show_int_wifi0.2.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0.2 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w02.2.15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi0.2 counter
				show interface wifi0.2 counter
			</desc>
			<log-file>stepw02.2.15_show_int_wifi0.2.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi0.2 counter"
				-v "show interface wifi0.2 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0.00ms rx airtime"</log-match>
			<log-match>-c -e "0 rx frame errors"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 wrong bssid"</log-match>
			<log-match>-c -e "0 duplicate"</log-match>
			<log-match>-c -e "0 invalid direction"</log-match>
			<log-match>-c -e "0 multicast echo"</log-match>
			<log-match>-c -e "0 station not associated"</log-match>
			<log-match>-c -e "0 frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx sta auth failure"</log-match>
			<log-match>-c -e "0 rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "0 rx assoc without auth"</log-match>
			<log-match>-c -e "0 rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "0 rx assoc with no rate match"</log-match>
			<log-match>-c -e "0 rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx frame with unknown subtype"</log-match>
			<log-match>-c -e "0 rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "0 rx format bad (CCMP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "0 rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "0 rx format bad (TKIP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx failed because key type"</log-match>
			<log-match>-c -e "0 rx failed because key notsetup"</log-match>
			<log-match>-c -e "0 rx probe suppressed"</log-match>
			<log-match>-c -e "0 rx auth suppressed"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0.00ms tx airtime"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 unknown destination"</log-match>
			<log-match>-c -e "0 bad cipher/key type"</log-match>
			<log-match>-c -e "0 no defkey"</log-match>
			<log-match>-c -e "0 no space for crypto hdrs"</log-match>
			<log-match>-c -e "0 power save queue full"</log-match>
			<log-match>-c -e "0 unicast vlan mismatch"</log-match>
			<log-match>-c -e "0 multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "0 SLA traps sent"</log-match>
			<log-match>-c -e "0 node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "0 Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "0 BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w02.2.15.1">
			<desc>
				get wifi0.2 content "rx data frames"
			</desc>
			<setvar name="w02_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw02.2.14_show_int_wifi0.2.log -t str
			</setvar>
		</step>

		<step no="w02.2.15.2">
			<desc>
				get wifi0.2 content "tx data frames"
			</desc>
			<setvar name="w02_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw02.2.14_show_int_wifi0.2.log -t str
			</setvar>
		</step>

		<step no="w02.2.15.3">
			<desc>
				get wifi0.2 content "rx data frames"
			</desc>
			<setvar name="w02_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw02.2.15_show_int_wifi0.2.log -t str
			</setvar>
		</step>

		<step no="w02.2.15.4">
			<desc>
				get wifi0.2 content "tx data frames"
			</desc>
			<setvar name="w02_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw02.2.15_show_int_wifi0.2.log -t str
			</setvar>
		</step>

		<step no="w02.2.15.5">
			<desc>
				compare wifi0.2 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w02_content_1} &gt; ${w02_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w02.2.15.6">
			<desc>
				compare wifi0.2 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w02_content_2} &gt; ${w02_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w03.1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-3
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw03.1.1_wifi_prof.xml -s "${ssid.name}-3" -l ${log.dir}
			</script>
		</step>

		<step no="w03.1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw03.1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w03.1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw03.1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-3"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-3&lt;/name&gt;"</log-match>
		</step>

		<step no="w03.1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-3 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-3 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw03.1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-3"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-3"</log-match>
		</step>

		<step no="w03.1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw03.1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-3"</log-match>
		</step>

		<step no="w03.1.6">
			<desc>
				connect to ssid ${ssid.name}-3 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw03.1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-3 name=${ssid.name}-3 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w03.1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-3 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw03.1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w03.1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw03.1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w03.1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>stepw03.1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w03.1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw03.1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w03.1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>stepw03.1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w03.1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw03.1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w03.1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ping ${ap_ip_1} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w03.2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-3
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw03.2.1_wifi_prof.xml -s "${ssid.name}-3" -l ${log.dir}
			</script>
		</step>

		<step no="w03.2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw03.2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w03.2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw03.2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-3"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-3&lt;/name&gt;"</log-match>
		</step>

		<step no="w03.2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name}-3 to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name}-3 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw03.2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-3"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-3"</log-match>
		</step>

		<step no="w03.2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw03.2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-3"</log-match>
		</step>

		<step no="w03.2.6">
			<desc>
				connect to ssid ${ssid.name}-3 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw03.2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name}-3 name=${ssid.name}-3 interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="w03.2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-3 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw03.2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w03.2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw03.2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w03.2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>stepw03.2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w03.2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw03.2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w03.2.11">
			<desc>
				show mgt0 ip of ap1
			</desc>
			<log-file>stepw03.2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w03.2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw03.2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w03.2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>stepw03.2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2" timeout="120">
				-v "ping ${ap_ip_2} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w03.2.14" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi0.3 counter
			</desc>
			<log-file>stepw03.2.14_show_int_wifi0.3.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0.3 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w03.2.15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi0.3 counter
				show interface wifi0.3 counter
			</desc>
			<log-file>stepw03.2.15_show_int_wifi0.3.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi0.3 counter"
				-v "show interface wifi0.3 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0.00ms rx airtime"</log-match>
			<log-match>-c -e "0 rx frame errors"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 wrong bssid"</log-match>
			<log-match>-c -e "0 duplicate"</log-match>
			<log-match>-c -e "0 invalid direction"</log-match>
			<log-match>-c -e "0 multicast echo"</log-match>
			<log-match>-c -e "0 station not associated"</log-match>
			<log-match>-c -e "0 frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx sta auth failure"</log-match>
			<log-match>-c -e "0 rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "0 rx assoc without auth"</log-match>
			<log-match>-c -e "0 rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "0 rx assoc with no rate match"</log-match>
			<log-match>-c -e "0 rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx frame with unknown subtype"</log-match>
			<log-match>-c -e "0 rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "0 rx format bad (CCMP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "0 rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "0 rx format bad (TKIP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx failed because key type"</log-match>
			<log-match>-c -e "0 rx failed because key notsetup"</log-match>
			<log-match>-c -e "0 rx probe suppressed"</log-match>
			<log-match>-c -e "0 rx auth suppressed"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0.00ms tx airtime"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 unknown destination"</log-match>
			<log-match>-c -e "0 bad cipher/key type"</log-match>
			<log-match>-c -e "0 no defkey"</log-match>
			<log-match>-c -e "0 no space for crypto hdrs"</log-match>
			<log-match>-c -e "0 power save queue full"</log-match>
			<log-match>-c -e "0 unicast vlan mismatch"</log-match>
			<log-match>-c -e "0 multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "0 SLA traps sent"</log-match>
			<log-match>-c -e "0 node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "0 Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "0 BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w03.2.15.1">
			<desc>
				get wifi0.3 content "rx data frames"
			</desc>
			<setvar name="w03_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw03.2.14_show_int_wifi0.3.log -t str
			</setvar>
		</step>

		<step no="w03.2.15.2">
			<desc>
				get wifi0.3 content "tx data frames"
			</desc>
			<setvar name="w03_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw03.2.14_show_int_wifi0.3.log -t str
			</setvar>
		</step>

		<step no="w03.2.15.3">
			<desc>
				get wifi0.3 content "rx data frames"
			</desc>
			<setvar name="w03_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw03.2.15_show_int_wifi0.3.log -t str
			</setvar>
		</step>

		<step no="w03.2.15.4">
			<desc>
				get wifi0.3 content "tx data frames"
			</desc>
			<setvar name="w03_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw03.2.15_show_int_wifi0.3.log -t str
			</setvar>
		</step>

		<step no="w03.2.15.5">
			<desc>
				compare wifi0.3 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w03_content_1} &gt; ${w03_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w03.2.15.6">
			<desc>
				compare wifi0.3 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w03_content_2} &gt; ${w03_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w04.1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-4
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw04.1.1_wifi_prof.xml -s "${ssid.name}-4" -l ${log.dir}
			</script>
		</step>

		<step no="w04.1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw04.1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w04.1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw04.1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-4"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-4&lt;/name&gt;"</log-match>
		</step>

		<step no="w04.1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-4 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-4 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw04.1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-4"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-4"</log-match>
		</step>

		<step no="w04.1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw04.1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-4"</log-match>
		</step>

		<step no="w04.1.6">
			<desc>
				connect to ssid ${ssid.name}-4 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw04.1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-4 name=${ssid.name}-4 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w04.1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-4 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw04.1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w04.1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw04.1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w04.1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>stepw04.1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w04.1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw04.1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w04.1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>stepw04.1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w04.1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw04.1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w04.1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ping ${ap_ip_1} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w04.2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-4
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw04.2.1_wifi_prof.xml -s "${ssid.name}-4" -l ${log.dir}
			</script>
		</step>

		<step no="w04.2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw04.2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w04.2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw04.2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-4"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-4&lt;/name&gt;"</log-match>
		</step>

		<step no="w04.2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name}-4 to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name}-4 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw04.2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-4"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-4"</log-match>
		</step>

		<step no="w04.2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw04.2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-4"</log-match>
		</step>

		<step no="w04.2.6">
			<desc>
				connect to ssid ${ssid.name}-4 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw04.2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name}-4 name=${ssid.name}-4 interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="w04.2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-4 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw04.2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w04.2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw04.2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w04.2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>stepw04.2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w04.2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw04.2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w04.2.11">
			<desc>
				show mgt0 ip of ap1
			</desc>
			<log-file>stepw04.2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w04.2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw04.2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w04.2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>stepw04.2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2" timeout="120">
				-v "ping ${ap_ip_2} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w04.2.14" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi0.4 counter
			</desc>
			<log-file>stepw04.2.14_show_int_wifi0.4.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0.4 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w04.2.15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi0.4 counter
				show interface wifi0.4 counter
			</desc>
			<log-file>stepw04.2.15_show_int_wifi0.4.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi0.4 counter"
				-v "show interface wifi0.4 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0.00ms rx airtime"</log-match>
			<log-match>-c -e "0 rx frame errors"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 wrong bssid"</log-match>
			<log-match>-c -e "0 duplicate"</log-match>
			<log-match>-c -e "0 invalid direction"</log-match>
			<log-match>-c -e "0 multicast echo"</log-match>
			<log-match>-c -e "0 station not associated"</log-match>
			<log-match>-c -e "0 frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx sta auth failure"</log-match>
			<log-match>-c -e "0 rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "0 rx assoc without auth"</log-match>
			<log-match>-c -e "0 rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "0 rx assoc with no rate match"</log-match>
			<log-match>-c -e "0 rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx frame with unknown subtype"</log-match>
			<log-match>-c -e "0 rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "0 rx format bad (CCMP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "0 rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "0 rx format bad (TKIP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx failed because key type"</log-match>
			<log-match>-c -e "0 rx failed because key notsetup"</log-match>
			<log-match>-c -e "0 rx probe suppressed"</log-match>
			<log-match>-c -e "0 rx auth suppressed"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0.00ms tx airtime"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 unknown destination"</log-match>
			<log-match>-c -e "0 bad cipher/key type"</log-match>
			<log-match>-c -e "0 no defkey"</log-match>
			<log-match>-c -e "0 no space for crypto hdrs"</log-match>
			<log-match>-c -e "0 power save queue full"</log-match>
			<log-match>-c -e "0 unicast vlan mismatch"</log-match>
			<log-match>-c -e "0 multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "0 SLA traps sent"</log-match>
			<log-match>-c -e "0 node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "0 Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "0 BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w04.2.15.1">
			<desc>
				get wifi0.3 content "rx data frames"
			</desc>
			<setvar name="w04_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw04.2.14_show_int_wifi0.4.log -t str
			</setvar>
		</step>

		<step no="w04.2.15.2">
			<desc>
				get wifi0.3 content "tx data frames"
			</desc>
			<setvar name="w04_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw04.2.14_show_int_wifi0.4.log -t str
			</setvar>
		</step>

		<step no="w04.2.15.3">
			<desc>
				get wifi0.3 content "rx data frames"
			</desc>
			<setvar name="w04_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw04.2.15_show_int_wifi0.4.log -t str
			</setvar>
		</step>

		<step no="w04.2.15.4">
			<desc>
				get wifi0.3 content "tx data frames"
			</desc>
			<setvar name="w04_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw04.2.15_show_int_wifi0.4.log -t str
			</setvar>
		</step>

		<step no="w04.2.15.5">
			<desc>
				compare wifi0.3 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w04_content_1} &gt; ${w04_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w04.2.15.6">
			<desc>
				compare wifi0.3 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w04_content_2} &gt; ${w04_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w04.2.15.7">
			<desc>
				clear the ssids of wifi0
			</desc>
			<log-file>step1.2_ssids_bind.log</log-file>
			<telnet target="ap1">
				-v "no security-object ${ssid.name}-1 security protocol-suite"
				-v "no ssid ${ssid.name}-1 security-object ${ssid.name}-1"
				-v "no security-object ${ssid.name}-1"
				-v "no security-object ${ssid.name}-2 security protocol-suite"
				-v "no ssid ${ssid.name}-2 security-object ${ssid.name}-2"
				-v "no security-object ${ssid.name}-2"
				-v "no security-object ${ssid.name}-3 security protocol-suite"
				-v "no ssid ${ssid.name}-3 security-object ${ssid.name}-3"
				-v "no security-object ${ssid.name}-3"
				-v "no security-object ${ssid.name}-4 security protocol-suite"
				-v "no ssid ${ssid.name}-1 security-object ${ssid.name}-4"
				-v "no security-object ${ssid.name}-4"
				-v "no interface wifi0 ssid ${ssid.name}-1"
				-v "no interface wifi0 ssid ${ssid.name}-2"
				-v "no interface wifi0 ssid ${ssid.name}-3"
				-v "no interface wifi0 ssid ${ssid.name}-4"
			</telnet>
		</step>
  </stage>
  <stage>
    <if>"${ap1.wifi1.existed}" =="true"</if>
		<step no="w1.1">
			<desc>
				Ssids bind to wifi1
			</desc>
			<log-file>stepw1.1_ssids_bind.log</log-file>
			<telnet target="ap1">
				-v "interface wifi0 mode dual"
				-v "interface wifi1 mode access"
				-v "interface wifi1 ssid ${ssid.name}-5"
				-v "interface wifi1 ssid ${ssid.name}-6"
				-v "interface wifi1 ssid ${ssid.name}-7"
				-v "interface wifi1 ssid ${ssid.name}-8"
				-v "interface wifi1 radio channel 36"
			</telnet>
		</step>

		<step no="w1.1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-5
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw1.1.1_wifi_prof.xml -s "${ssid.name}-5" -l ${log.dir}
			</script>
		</step>

		<step no="w1.1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw1.1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w1.1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw1.1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-5"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-5&lt;/name&gt;"</log-match>
		</step>

		<step no="w1.1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-5 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-5 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw1.1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-5"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-5"</log-match>
		</step>

		<step no="w1.1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw1.1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-5"</log-match>
		</step>

		<step no="w1.1.6">
			<desc>
				connect to ssid ${ssid.name}-5 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw1.1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-5 name=${ssid.name}-5 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w1.1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-5 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw1.1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1.1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw1.1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1.1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>stepw1.1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1.1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw1.1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1.1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>stepw1.1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w1.1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw1.1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w1.1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ping ${ap_ip_1} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w1.2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-5
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw1.2.1_wifi_prof.xml -s "${ssid.name}-5" -l ${log.dir}
			</script>
		</step>

		<step no="w1.2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw1.2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w1.2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw1.2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-5"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-5&lt;/name&gt;"</log-match>
		</step>

		<step no="w1.2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name}-5 to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name}-5 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw1.2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-5"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-5"</log-match>
		</step>

		<step no="w1.2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw1.2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-5"</log-match>
		</step>

		<step no="w1.2.6">
			<desc>
				connect to ssid ${ssid.name}-5 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw1.2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name}-5 name=${ssid.name}-5 interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="w1.2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-5 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw1.2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1.2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw1.2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1.2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>stepw1.2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1.2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw1.2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1.2.11">
			<desc>
				show mgt0 ip of ap1
			</desc>
			<log-file>stepw1.2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w1.2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw1.2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w1.2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>stepw1.2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2" timeout="120">
				-v "ping ${ap_ip_2} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w1.2.14" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi1 counter
			</desc>
			<log-file>stepw1.2.14_show_int_wifi1.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi1 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "rx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "rx Retries"</log-match>
			<log-match>-c -e "rx CRC errors"</log-match>
			<log-match>-c -e "rx frame errors other than CRC"</log-match>
			<log-match>-c -e "hw desc overrun"</log-match>
			<log-match>-c -e "hw FIFO overrun"</log-match>
			<log-match>-c -e "decryption failed"</log-match>
			<log-match>-c -e "MIC failure"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "frame too short"</log-match>
			<log-match>-c -e "frame too large"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx management frames other than beacon"</log-match>
			<log-match>-c -e "tx beacon frames"</log-match>
			<log-match>-c -e "tx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "tx aggregated completions"</log-match>
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "tx RTS failures"</log-match>
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "tx frames with no ack marked"</log-match>
			<log-match>-c -e "tx frames with rts enabled"</log-match>
			<log-match>-c -e "tx frames with cts enabled"</log-match>
			<log-match>-c -e "tx frames with short preamble"</log-match>
			<log-match>-c -e "tx frames with an alternate rate"</log-match>
			<log-match>-c -e "tx frames with protection"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "transmit queue too deeper"</log-match>
			<log-match>-c -e "device gone"</log-match>
			<log-match>-c -e "tx encapsulation failed"</log-match>
			<log-match>-c -e "invalid station"</log-match>
			<log-match>-c -e "no tx buffer (data)"</log-match>
			<log-match>-c -e "no tx buffer (mgmt)"</log-match>
			<log-match>-c -e "uapsd queue full"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "too many hw retries"</log-match>
			<log-match>-c -e "hw FIFO underrun"</log-match>
			<log-match>-c -e "transmit filtered by hw"</log-match>
			<log-match>-c -e "hw other errors"</log-match>
			<log-match>-c -e "exceeded txop"</log-match>
			<log-match>-c -e "exceeded tx timer"</log-match>
			<log-match>-c -e "RX tasklet run:"</log-match>
			<log-match>-c -e "interference raise alert"</log-match>
			<log-match>-c -e "interference clear alert"</log-match>
			<log-match>-c -e "band steering suppress"</log-match>
			<log-match>-c -e "load balance suppress"</log-match>
			<log-match>-c -e "weak snr suppress"</log-match>
			<log-match>-c -e "safety net bypassed suppres"</log-match>
			<no-error-check />
		</step>

		<step no="w1.2.15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi1 counter
				show interface wifi1 counter
			</desc>
			<log-file>stepw1.2.15_show_int_wifi1.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi1 counter"
				-v "show interface wifi1 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx unicast data frames"</log-match>
			<log-match>-c -e "0 rx multicast data frames"</log-match>
			<log-match>-c -e "0 rx broadcast data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "0 rx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "0 rx Retries"</log-match>
			<log-match>-c -e "0 rx CRC errors"</log-match>
			<log-match>-c -e "0 rx frame errors other than CRC"</log-match>
			<log-match>-c -e "0 hw desc overrun"</log-match>
			<log-match>-c -e "0 hw FIFO overrun"</log-match>
			<log-match>-c -e "0 decryption failed"</log-match>
			<log-match>-c -e "0 MIC failure"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 frame too short"</log-match>
			<log-match>-c -e "0 frame too large"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx management frames other than beacon"</log-match>
			<log-match>-c -e "tx beacon frames"</log-match>
			<log-match>-c -e "0 tx BAR (Block Ack Request) frames"</log-match>
			<log-match>-c -e "0 tx aggregated completions"</log-match>
			<log-match>-c -e "0 tx retries"</log-match>
			<log-match>-c -e "0 tx RTS failures"</log-match>
			<log-match>-c -e "0 tx retries"</log-match>
			<log-match>-c -e "0 tx frames with no ack marked"</log-match>
			<log-match>-c -e "0 tx frames with rts enabled"</log-match>
			<log-match>-c -e "0 tx frames with cts enabled"</log-match>
			<log-match>-c -e "0 tx frames with short preamble"</log-match>
			<log-match>-c -e "0 tx frames with an alternate rate"</log-match>
			<log-match>-c -e "0 tx frames with protection"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 transmit queue too deeper"</log-match>
			<log-match>-c -e "0 device gone"</log-match>
			<log-match>-c -e "0 tx encapsulation failed"</log-match>
			<log-match>-c -e "0 invalid station"</log-match>
			<log-match>-c -e "0 no tx buffer (data)"</log-match>
			<log-match>-c -e "0 no tx buffer (mgmt)"</log-match>
			<log-match>-c -e "0 uapsd queue full"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0 too many hw retries"</log-match>
			<log-match>-c -e "0 hw FIFO underrun"</log-match>
			<log-match>-c -e "0 transmit filtered by hw"</log-match>
			<log-match>-c -e "0 hw other errors"</log-match>
			<log-match>-c -e "0 exceeded txop"</log-match>
			<log-match>-c -e "0 exceeded tx timer"</log-match>
			<log-match>-c -e "RX tasklet run:"</log-match>
			<log-match>-c -e "0 interference raise alert"</log-match>
			<log-match>-c -e "0 interference clear alert"</log-match>
			<log-match>-c -e "0 band steering suppress"</log-match>
			<log-match>-c -e "0 load balance suppress"</log-match>
			<log-match>-c -e "0 weak snr suppress"</log-match>
			<log-match>-c -e "0 safety net bypassed suppres"</log-match>
			<no-error-check />
		</step>

		<step no="w1.2.15.1">
			<desc>
				get wifi1 content "rx data frames"
			</desc>
			<setvar name="w1_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw1.2.14_show_int_wifi1.log -t str
			</setvar>
		</step>

		<step no="w1.2.15.2">
			<desc>
				get wifi1 content "tx data frames"
			</desc>
			<setvar name="w1_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw1.2.14_show_int_wifi1.log -t str
			</setvar>
		</step>

		<step no="w1.2.15.3">
			<desc>
				get wifi1 content "rx data frames"
			</desc>
			<setvar name="w1_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw1.2.15_show_int_wifi1.log -t str
			</setvar>
		</step>

		<step no="w1.2.15.4">
			<desc>
				get wifi1 content "tx data frames"
			</desc>
			<setvar name="w1_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw1.2.15_show_int_wifi1.log -t str
			</setvar>
		</step>

		<step no="w1.2.15.5">
			<desc>
				compare wifi1 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w1_content_1} &gt; ${w1_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w1.2.15.6">
			<desc>
				compare wifi1 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w1_content_2} &gt; ${w1_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w11.2.16" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi1.1 counter
			</desc>
			<log-file>stepw11.2.16_show_int_wifi1.1.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi1.1 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w11.2.17" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi1.1 counter
				show interface wifi1.1 counter
			</desc>
			<log-file>stepw11.2.17_show_int_wifi1.1.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi1.1 counter"
				-v "show interface wifi1.1 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx unicast data frames"</log-match>
			<log-match>-c -e "0 rx multicast data frames"</log-match>
			<log-match>-c -e "0 rx broadcast data frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0.00ms rx airtime"</log-match>
			<log-match>-c -e "0 rx frame errors"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 wrong bssid"</log-match>
			<log-match>-c -e "0 duplicate"</log-match>
			<log-match>-c -e "0 invalid direction"</log-match>
			<log-match>-c -e "0 multicast echo"</log-match>
			<log-match>-c -e "0 station not associated"</log-match>
			<log-match>-c -e "0 frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx sta auth failure"</log-match>
			<log-match>-c -e "0 rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "0 rx assoc without auth"</log-match>
			<log-match>-c -e "0 rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "0 rx assoc with no rate match"</log-match>
			<log-match>-c -e "0 rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx frame with unknown subtype"</log-match>
			<log-match>-c -e "0 rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "0 rx format bad (CCMP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "0 rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "0 rx format bad (TKIP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx failed because key type"</log-match>
			<log-match>-c -e "0 rx failed because key notsetup"</log-match>
			<log-match>-c -e "0 rx probe suppressed"</log-match>
			<log-match>-c -e "0 rx auth suppressed"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0.00ms tx airtime"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 unknown destination"</log-match>
			<log-match>-c -e "0 bad cipher/key type"</log-match>
			<log-match>-c -e "0 no defkey"</log-match>
			<log-match>-c -e "0 no space for crypto hdrs"</log-match>
			<log-match>-c -e "0 power save queue full"</log-match>
			<log-match>-c -e "0 unicast vlan mismatch"</log-match>
			<log-match>-c -e "0 multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "0 SLA traps sent"</log-match>
			<log-match>-c -e "0 node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "0 Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "0 BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w11.2.17.1">
			<desc>
				get wifi1.1 content "rx data frames"
			</desc>
			<setvar name="w11_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw11.2.16_show_int_wifi1.1.log -t str
			</setvar>
		</step>

		<step no="w11.2.17.2">
			<desc>
				get wifi1.1 content "tx data frames"
			</desc>
			<setvar name="w11_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw11.2.16_show_int_wifi1.1.log -t str
			</setvar>
		</step>

		<step no="w11.2.17.3">
			<desc>
				get wifi1.1 content "rx data frames"
			</desc>
			<setvar name="w11_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw11.2.17_show_int_wifi1.1.log -t str
			</setvar>
		</step>

		<step no="w11.2.17.4">
			<desc>
				get wifi1.1 content "tx data frames"
			</desc>
			<setvar name="w11_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw11.2.17_show_int_wifi1.1.log -t str
			</setvar>
		</step>

		<step no="w11.2.17.5">
			<desc>
				compare wifi1.1 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w11_content_1} &gt; ${w11_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w11.2.17.6">
			<desc>
				compare wifi1.1 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w11_content_2} &gt; ${w11_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w12.1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-6
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw12.1.1_wifi_prof.xml -s "${ssid.name}-6" -l ${log.dir}
			</script>
		</step>

		<step no="w12.1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw12.1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w12.1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw12.1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-6"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-6&lt;/name&gt;"</log-match>
		</step>

		<step no="w12.1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-6 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-6 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw12.1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-6"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-6"</log-match>
		</step>

		<step no="w12.1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw12.1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-6"</log-match>
		</step>

		<step no="w12.1.6">
			<desc>
				connect to ssid ${ssid.name}-6 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw12.1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-6 name=${ssid.name}-6 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w12.1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-6 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw12.1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w12.1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw12.1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w12.1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>stepw12.1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w12.1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw12.1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w12.1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>stepw12.1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w12.1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw12.1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w12.1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ping ${ap_ip_1} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w12.2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-6
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw12.2.1_wifi_prof.xml -s "${ssid.name}-6" -l ${log.dir}
			</script>
		</step>

		<step no="w12.2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw12.2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w12.2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw12.2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-6"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-6&lt;/name&gt;"</log-match>
		</step>

		<step no="w12.2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name}-6 to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name}-6 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw12.2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-6"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-6"</log-match>
		</step>

		<step no="w12.2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw12.2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-6"</log-match>
		</step>

		<step no="w12.2.6">
			<desc>
				connect to ssid ${ssid.name}-6 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw12.2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name}-6 name=${ssid.name}-6 interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="w12.2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-6 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw12.2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w12.2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw12.2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w12.2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>stepw12.2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w12.2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw12.2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w12.2.11">
			<desc>
				show mgt0 ip of ap1
			</desc>
			<log-file>stepw12.2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w12.2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw12.2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w12.2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>stepw12.2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2" timeout="120">
				-v "ping ${ap_ip_2} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w12.2.14" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi1.2 counter
			</desc>
			<log-file>stepw12.2.14_show_int_wifi1.2.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi1.2 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w12.2.15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi1.2 counter
				show interface wifi1.2 counter
			</desc>
			<log-file>stepw12.2.15_show_int_wifi1.2.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi1.2 counter"
				-v "show interface wifi1.2 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx unicast data frames"</log-match>
			<log-match>-c -e "0 rx multicast data frames"</log-match>
			<log-match>-c -e "0 rx broadcast data frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0.00ms rx airtime"</log-match>
			<log-match>-c -e "0 rx frame errors"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 wrong bssid"</log-match>
			<log-match>-c -e "0 duplicate"</log-match>
			<log-match>-c -e "0 invalid direction"</log-match>
			<log-match>-c -e "0 multicast echo"</log-match>
			<log-match>-c -e "0 station not associated"</log-match>
			<log-match>-c -e "0 frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx sta auth failure"</log-match>
			<log-match>-c -e "0 rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "0 rx assoc without auth"</log-match>
			<log-match>-c -e "0 rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "0 rx assoc with no rate match"</log-match>
			<log-match>-c -e "0 rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx frame with unknown subtype"</log-match>
			<log-match>-c -e "0 rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "0 rx format bad (CCMP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "0 rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "0 rx format bad (TKIP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx failed because key type"</log-match>
			<log-match>-c -e "0 rx failed because key notsetup"</log-match>
			<log-match>-c -e "0 rx probe suppressed"</log-match>
			<log-match>-c -e "0 rx auth suppressed"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0.00ms tx airtime"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 unknown destination"</log-match>
			<log-match>-c -e "0 bad cipher/key type"</log-match>
			<log-match>-c -e "0 no defkey"</log-match>
			<log-match>-c -e "0 no space for crypto hdrs"</log-match>
			<log-match>-c -e "0 power save queue full"</log-match>
			<log-match>-c -e "0 unicast vlan mismatch"</log-match>
			<log-match>-c -e "0 multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "0 SLA traps sent"</log-match>
			<log-match>-c -e "0 node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "0 Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "0 BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w12.2.15.1">
			<desc>
				get wifi1.2 content "rx data frames"
			</desc>
			<setvar name="w12_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw12.2.14_show_int_wifi1.2.log -t str
			</setvar>
		</step>

		<step no="w12.2.15.2">
			<desc>
				get wifi1.2 content "tx data frames"
			</desc>
			<setvar name="w12_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw12.2.14_show_int_wifi1.2.log -t str
			</setvar>
		</step>

		<step no="w12.2.15.3">
			<desc>
				get wifi1.2 content "rx data frames"
			</desc>
			<setvar name="w12_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw12.2.15_show_int_wifi1.2.log -t str
			</setvar>
		</step>

		<step no="w12.2.15.4">
			<desc>
				get wifi1.2 content "tx data frames"
			</desc>
			<setvar name="w12_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw12.2.15_show_int_wifi1.2.log -t str
			</setvar>
		</step>

		<step no="w12.2.15.5">
			<desc>
				compare wifi1.2 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w12_content_1} &gt; ${w12_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w12.2.15.6">
			<desc>
				compare wifi1.2 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w12_content_2} &gt; ${w12_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w13.1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-7
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw13.1.1_wifi_prof.xml -s "${ssid.name}-7" -l ${log.dir}
			</script>
		</step>

		<step no="w13.1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw13.1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w13.1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw13.1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-7"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-7&lt;/name&gt;"</log-match>
		</step>

		<step no="w13.1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-7 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-7 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw13.1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-7"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-7"</log-match>
		</step>

		<step no="w13.1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw13.1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-7"</log-match>
		</step>

		<step no="w13.1.6">
			<desc>
				connect to ssid ${ssid.name}-7 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw13.1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-7 name=${ssid.name}-7 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w13.1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-7 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw13.1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w13.1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw13.1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w13.1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>stepw13.1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w13.1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw13.1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w13.1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>stepw13.1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w13.1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw13.1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w13.1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ping ${ap_ip_1} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w13.2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-7
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw13.2.1_wifi_prof.xml -s "${ssid.name}-7" -l ${log.dir}
			</script>
		</step>

		<step no="w13.2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw13.2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w13.2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw13.2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-7"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-7&lt;/name&gt;"</log-match>
		</step>

		<step no="w13.2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name}-7 to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name}-7 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw13.2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-7"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-7"</log-match>
		</step>

		<step no="w13.2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw13.2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-7"</log-match>
		</step>

		<step no="w13.2.6">
			<desc>
				connect to ssid ${ssid.name}-7 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw13.2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name}-7 name=${ssid.name}-7 interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="w13.2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-7 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw13.2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w13.2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw13.2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w13.2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>stepw13.2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w13.2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw13.2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w13.2.11">
			<desc>
				show mgt0 ip of ap1
			</desc>
			<log-file>stepw13.2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w13.2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw13.2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w13.2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>stepw13.2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2" timeout="120">
				-v "ping ${ap_ip_2} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w13.2.14" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi1.3 counter
			</desc>
			<log-file>stepw13.2.14_show_int_wifi1.3.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi1.3 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w13.2.15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi1.3 counter
				show interface wifi1.3 counter
			</desc>
			<log-file>stepw13.2.15_show_int_wifi1.3.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi1.3 counter"
				-v "show interface wifi1.3 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx unicast data frames"</log-match>
			<log-match>-c -e "0 rx multicast data frames"</log-match>
			<log-match>-c -e "0 rx broadcast data frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0.00ms rx airtime"</log-match>
			<log-match>-c -e "0 rx frame errors"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 wrong bssid"</log-match>
			<log-match>-c -e "0 duplicate"</log-match>
			<log-match>-c -e "0 invalid direction"</log-match>
			<log-match>-c -e "0 multicast echo"</log-match>
			<log-match>-c -e "0 station not associated"</log-match>
			<log-match>-c -e "0 frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx sta auth failure"</log-match>
			<log-match>-c -e "0 rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "0 rx assoc without auth"</log-match>
			<log-match>-c -e "0 rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "0 rx assoc with no rate match"</log-match>
			<log-match>-c -e "0 rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx frame with unknown subtype"</log-match>
			<log-match>-c -e "0 rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "0 rx format bad (CCMP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "0 rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "0 rx format bad (TKIP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx failed because key type"</log-match>
			<log-match>-c -e "0 rx failed because key notsetup"</log-match>
			<log-match>-c -e "0 rx probe suppressed"</log-match>
			<log-match>-c -e "0 rx auth suppressed"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0.00ms tx airtime"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 unknown destination"</log-match>
			<log-match>-c -e "0 bad cipher/key type"</log-match>
			<log-match>-c -e "0 no defkey"</log-match>
			<log-match>-c -e "0 no space for crypto hdrs"</log-match>
			<log-match>-c -e "0 power save queue full"</log-match>
			<log-match>-c -e "0 unicast vlan mismatch"</log-match>
			<log-match>-c -e "0 multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "0 SLA traps sent"</log-match>
			<log-match>-c -e "0 node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "0 Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "0 BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w13.2.15.1">
			<desc>
				get wifi1.3 content "rx data frames"
			</desc>
			<setvar name="w13_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw13.2.14_show_int_wifi1.3.log -t str
			</setvar>
		</step>

		<step no="w13.2.15.2">
			<desc>
				get wifi1.3 content "tx data frames"
			</desc>
			<setvar name="w13_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw13.2.14_show_int_wifi1.3.log -t str
			</setvar>
		</step>

		<step no="w13.2.15.3">
			<desc>
				get wifi1.3 content "rx data frames"
			</desc>
			<setvar name="w13_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw13.2.15_show_int_wifi1.3.log -t str
			</setvar>
		</step>

		<step no="w13.2.15.4">
			<desc>
				get wifi1.3 content "tx data frames"
			</desc>
			<setvar name="w13_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw13.2.15_show_int_wifi1.3.log -t str
			</setvar>
		</step>

		<step no="w13.2.15.5">
			<desc>
				compare wifi1.3 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w13_content_1} &gt; ${w13_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w13.2.15.6">
			<desc>
				compare wifi1.3 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w13_content_2} &gt; ${w13_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w14.1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-8
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw14.1.1_wifi_prof.xml -s "${ssid.name}-8" -l ${log.dir}
			</script>
		</step>

		<step no="w14.1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw14.1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w14.1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw14.1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-8"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-8&lt;/name&gt;"</log-match>
		</step>

		<step no="w14.1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-8 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-8 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw14.1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-8"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-8"</log-match>
		</step>

		<step no="w14.1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw14.1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-8"</log-match>
		</step>

		<step no="w14.1.6">
			<desc>
				connect to ssid ${ssid.name}-8 on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw14.1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-8 name=${ssid.name}-8 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w14.1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-8 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw14.1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w14.1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>stepw14.1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w14.1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>stepw14.1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w14.1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw14.1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w14.1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>stepw14.1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w14.1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw14.1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w14.1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1" timeout="120">
				-v "ping ${ap_ip_1} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w14.2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-8
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o stepw14.2.1_wifi_prof.xml -s "${ssid.name}-8" -l ${log.dir}
			</script>
		</step>

		<step no="w14.2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/stepw14.2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="w14.2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>stepw14.2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-8"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-8&lt;/name&gt;"</log-match>
		</step>

		<step no="w14.2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name}-8 to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name}-8 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw14.2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-8"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-8"</log-match>
		</step>

		<step no="w14.2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw14.2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-8"</log-match>
		</step>

		<step no="w14.2.6">
			<desc>
				connect to ssid ${ssid.name}-8 on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw14.2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name}-8 name=${ssid.name}-8 interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="w14.2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-8 connected on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw14.2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w14.2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>stepw14.2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w14.2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>stepw14.2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w14.2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/stepw14.2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w14.2.11">
			<desc>
				show mgt0 ip of ap1
			</desc>
			<log-file>stepw14.2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="w14.2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/stepw14.2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="w14.2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>stepw14.2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2" timeout="120">
				-v "ping ${ap_ip_2} -c 60"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="w14.2.14" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show interface wifi1.4 counter
			</desc>
			<log-file>stepw14.2.14_show_int_wifi1.4.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi1.4 counter"
			</telnet>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "tx airtime"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w14.2.15" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				clear interface wifi1.4 counter
				show interface wifi1.4 counter
			</desc>
			<log-file>stepw14.2.15_show_int_wifi1.4.log</log-file>
			<telnet target="ap1">
				-v "clear interface wifi1.4 counter"
				-v "show interface wifi1.4 counter"
			</telnet>
			<log-match>-c -e "0 rx data frames"</log-match>
			<log-match>-c -e "0 rx unicast data frames"</log-match>
			<log-match>-c -e "0 rx multicast data frames"</log-match>
			<log-match>-c -e "0 rx broadcast data frames"</log-match>
			<log-match>-c -e "0 rx beacon frames"</log-match>
			<log-match>-c -e "0.00ms rx airtime"</log-match>
			<log-match>-c -e "0 rx frame errors"</log-match>
			<log-match>-c -e "0 rx frames dropped"</log-match>
			<log-match>-c -e "0 wrong bssid"</log-match>
			<log-match>-c -e "0 duplicate"</log-match>
			<log-match>-c -e "0 invalid direction"</log-match>
			<log-match>-c -e "0 multicast echo"</log-match>
			<log-match>-c -e "0 station not associated"</log-match>
			<log-match>-c -e "0 frame with wep but privicy off"</log-match>
			<log-match>-c -e "0 frame without wep but privacy on"</log-match>
			<log-match>-c -e "0 rx sta auth failure"</log-match>
			<log-match>-c -e "0 rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "0 rx assoc without auth"</log-match>
			<log-match>-c -e "0 rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "0 rx assoc with no rate match"</log-match>
			<log-match>-c -e "0 rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "0 rx deauthentication"</log-match>
			<log-match>-c -e "0 rx disassociation"</log-match>
			<log-match>-c -e "0 rx frame with unknown subtype"</log-match>
			<log-match>-c -e "0 rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "0 rx format bad (CCMP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "0 rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "0 rx format bad (TKIP)"</log-match>
			<log-match>-c -e "0 rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "0 rx failed because key type"</log-match>
			<log-match>-c -e "0 rx failed because key notsetup"</log-match>
			<log-match>-c -e "0 rx probe suppressed"</log-match>
			<log-match>-c -e "0 rx auth suppressed"</log-match>
			<log-match>-c -e "0 tx data frames"</log-match>
			<log-match>-c -e "0 tx unicast data frames"</log-match>
			<log-match>-c -e "0 tx multicast data frames"</log-match>
			<log-match>-c -e "0 tx broadcast data frames"</log-match>
			<log-match>-c -e "0 tx WMM best effort data frames"</log-match>
			<log-match>-c -e "0 tx WMM background data frames"</log-match>
			<log-match>-c -e "0 tx WMM video data frames"</log-match>
			<log-match>-c -e "0 tx WMM voice data frames"</log-match>
			<log-match>-c -e "0 tx frame errors"</log-match>
			<log-match>-c -e "0.00ms tx airtime"</log-match>
			<log-match>-c -e "0 tx frames dropped"</log-match>
			<log-match>-c -e "0 unknown destination"</log-match>
			<log-match>-c -e "0 bad cipher/key type"</log-match>
			<log-match>-c -e "0 no defkey"</log-match>
			<log-match>-c -e "0 no space for crypto hdrs"</log-match>
			<log-match>-c -e "0 power save queue full"</log-match>
			<log-match>-c -e "0 unicast vlan mismatch"</log-match>
			<log-match>-c -e "0 multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "0 SLA traps sent"</log-match>
			<log-match>-c -e "0 node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "0 Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "0 BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="w14.2.15.1">
			<desc>
				get wifi1.4 content "rx data frames"
			</desc>
			<setvar name="w14_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw14.2.14_show_int_wifi1.4.log -t str
			</setvar>
		</step>

		<step no="w14.2.15.2">
			<desc>
				get wifi1.4 content "tx data frames"
			</desc>
			<setvar name="w14_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw14.2.14_show_int_wifi1.4.log -t str
			</setvar>
		</step>

		<step no="w14.2.15.3">
			<desc>
				get wifi1.4 content "rx data frames"
			</desc>
			<setvar name="w14_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/stepw14.2.15_show_int_wifi1.4.log -t str
			</setvar>
		</step>

		<step no="w14.2.15.4">
			<desc>
				get wifi1.4 content "tx data frames"
			</desc>
			<setvar name="w14_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/stepw14.2.15_show_int_wifi1.4.log -t str
			</setvar>
		</step>

		<step no="w14.2.15.5">
			<desc>
				compare wifi1.4 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${w14_content_1} &gt; ${w14_content_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w14.2.15.6">
			<desc>
				compare wifi1.4 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${w14_content_2} &gt; ${w14_content_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>
	</stage>
</testcase>