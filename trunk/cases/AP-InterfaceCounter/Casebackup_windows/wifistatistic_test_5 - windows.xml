<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify "show interface wifi0.1 counter" works normally when interface wifi0.1 is up</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		There is a ssid binding with wifi0.1 interface and wifi0.1 is up

		Test Procedure:
		Ececute CLI command on each MP:
		show interface wifi0.1 counter
		show interface wifi0.1 _counter
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>windows</tbtype>

	<stage>
		<step no="1">
			<desc>
				STA connects to MP
				"interface wifi0 mode access"
				"ssid ${ssid.name}"
				"security-object ${ssid.name}"
				"ssid ${ssid.name} security-object ${ssid.name}"
				"security-object ${ssid.name} security protocol-suite wpa-auto-psk ascii-key aerohive"
				"interface wifi0 ssid ${ssid.name}"
				"interface wifi0 radio channel 1"
			</desc>
			<log-file>step1_config_client_connects_AP.log</log-file>
			<console target="ap1">
				-v "interface wifi0 mode access"
				-v "ssid ${ssid.name}"
				-v "security-object ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "security-object ${ssid.name} security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
			</console>
		</step>

		<step no="1.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o step1.1_wifi_prof.xml -s "${ssid.name}" -l ${log.dir}
			</script>
		</step>

		<step no="1.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/step1.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="1.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>step1.3_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}&lt;/name&gt;"</log-match>
		</step>

		<step no="1.4">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name} to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name} on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.4_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}"</log-match>
		</step>

		<step no="1.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}"</log-match>
		</step>

		<step no="1.6">
			<desc>
				connect to ssid ${ssid.name} on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.6_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name} name=${ssid.name} interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="1.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name} connected on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="1.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>step1.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="1.9">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>step1.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="1.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step1.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="1.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>step1.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="1.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/step1.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="1.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2_sta_ping_ap.log</log-file>
			<ssh target="sta1">
				-v "ping ${ap_ip_1} -c 10"
			</ssh>
			<log-match>-e "from ${ap_ip_1}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="2.1">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o step2.1_wifi_prof.xml -s "${ssid.name}" -l ${log.dir}
			</script>
		</step>

		<step no="2.2">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/step2.1_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta2.mif.ip}
			</script>
		</step>

		<step no="2.3">
			<desc>
				verify profile copied
			</desc>
			<log-file>step2.3_cat_profile_sta.log</log-file>
			<ssh target="sta2">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}&lt;/name&gt;"</log-match>
		</step>

		<step no="2.4">
			<desc>
				Delete all current Wireless profile of host ${sta2.mif.ip}
				Bring down the client Wireless ${sta2.mif.ip}
				Bring up the client Wireless on host ${sta2.mif.ip}
				Add new profile for ssid ${ssid.name} to host ${sta2.mif.ip}
				Check profile for ssid ${ssid.name} on host ${sta2.mif.ip}
			</desc>
			<log-file>step2.4_wlan_conf_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan delete profile name=* interface=\"${sta2.tif.name}\""
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta2.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta2.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}"</log-match>
		</step>

		<step no="2.5" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show wlan network on host ${sta2.mif.ip}
			</desc>
			<log-file>step2.5_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}"</log-match>
		</step>

		<step no="2.6">
			<desc>
				connect to ssid ${ssid.name} on host ${sta2.mif.ip}
			</desc>
			<log-file>step2.6_wlan_conn_sta.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan connect ssid=${ssid.name} name=${ssid.name} interface=\"${sta2.tif.name}\""
			</ssh>
		</step>

		<step no="2.7" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name} connected on host ${sta2.mif.ip}
			</desc>
			<log-file>step2.7_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta2">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="2.8" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta2.mif.ip}
			</desc>
			<log-file>step2.8_wlan_ip_chk_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="2.9">
			<desc>
				Dump all interfaces data from remote host ${sta2.mif.ip}
			</desc>
			<log-file>step2.9_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta2">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="2.10">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta2.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.9_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="2.11">
			<desc>
				show mgt0.1 ip of ap1
			</desc>
			<log-file>step2.11_show_interface_mgt0.log</log-file>
			<telnet target="ap1">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="2.12">
			<desc>
				Get ap1's ip
			</desc>
			<setvar name="ap_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(.*?);" -f ${log.dir}/step2.11_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="2.13">
			<desc>
				sta ping ap
			</desc>
			<log-file>step2.13_sta_ping_ap.log</log-file>
			<ssh target="sta2">
				-v "ping ${ap_ip_2} -c 10"
			</ssh>
			<log-match>-e "from ${ap_ip_2}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Ececute CLI command on MP:
				show interface wifi0.1 counter
			</desc>
			<log-file>step3_wifi0.1_counter.log</log-file>
			<console target="ap1">
				-v "show interface wifi0.1 counter"
			</console>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "ms rx airtime"</log-match>
			<log-match>-c -e "rx frame errors"</log-match>
			<log-match>-c -e "bad version"</log-match>
			<log-match>-c -e "frame too short"</log-match>
			<log-match>-c -e "wep processing failed"</log-match>
			<log-match>-c -e "decapsulation failed"</log-match>
			<log-match>-c -e "no tx buffer"</log-match>
			<log-match>-c -e "decrypt failed on crc"</log-match>
			<log-match>-c -e "rx frames dropped"</log-match>
			<log-match>-c -e "wrong bssid"</log-match>
			<log-match>-c -e "duplicate"</log-match>
			<log-match>-c -e "invalid direction"</log-match>
			<log-match>-c -e "multicast echo"</log-match>
			<log-match>-c -e "station not associated"</log-match>
			<log-match>-c -e "frame with wep but privicy off"</log-match>
			<log-match>-c -e "frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx sta auth failure"</log-match>
			<log-match>-c -e "rx assoc from wrong bssid"</log-match>
			<log-match>-c -e "rx assoc without auth"</log-match>
			<log-match>-c -e "rx assoc with cap mismatch"</log-match>
			<log-match>-c -e "rx assoc with no rate match"</log-match>
			<log-match>-c -e "rx assoc with bad WPA IE"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx frame with unknown subtype"</log-match>
			<log-match>-c -e "rx seq# violation (CCMP)"</log-match>
			<log-match>-c -e "rx format bad (CCMP)"</log-match>
			<log-match>-c -e "rx MIC check failed (CCMP)"</log-match>
			<log-match>-c -e "rx seq# violation (TKIP)"</log-match>
			<log-match>-c -e "rx format bad (TKIP)"</log-match>
			<log-match>-c -e "rx MIC check failed (TKIP)"</log-match>
			<log-match>-c -e "rx ICV check failed (TKIP)"</log-match>
			<log-match>-c -e "rx failed because key type"</log-match>
			<log-match>-c -e "rx failed because key notsetup"</log-match>
			<log-match>-c -e "rx probe suppressed"</log-match>
			<log-match>-c -e "rx auth suppressed"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx frame errors"</log-match>
			<log-match>-c -e "s tx airtime"</log-match>
			<log-match>-c -e "s tx airtime(BE)"</log-match>
			<log-match>-c -e "ms tx airtime(BK)"</log-match>
			<log-match>-c -e "ms tx airtime(VO)"</log-match>
			<log-match>-c -e "ms tx airtime(VI)"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "bad cipher/key type"</log-match>
			<log-match>-c -e "no defkey"</log-match>
			<log-match>-c -e "no space for crypto hdrs"</log-match>
			<log-match>-c -e "power save queue full"</log-match>
			<log-match>-c -e "other reasons"</log-match>
			<log-match>-c -e "unicast vlan mismatch"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<log-match>-c -e "SLA traps sent"</log-match>
			<log-match>-c -e "node not found by sta vlan ioctl"</log-match>
			<log-match>-c -e "Tx drops due to Q stopped"</log-match>
			<log-match>-c -e "BSSID spoofing detected"</log-match>
			<no-error-check />
		</step>

		<step no="3.1">
			<desc>
				get wifi0.1 content "rx data frames"
			</desc>
			<setvar name="wifi0.1_content_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step3_wifi0.1_counter.log -t str
			</setvar>
		</step>

		<step no="3.2">
			<desc>
				get wifi0.1 content "rx beacon frames"
			</desc>
			<setvar name="wifi0.1_content_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx beacon frames" -f ${log.dir}/step3_wifi0.1_counter.log -t str
			</setvar>
		</step>

		<step no="3.3">
			<desc>
				get wifi0.1 content "tx data frames"
			</desc>
			<setvar name="wifi0.1_content_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step3_wifi0.1_counter.log -t str
			</setvar>
		</step>

		<step no="3.4">
			<desc>
				compare wifi0.1 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${wifi0.1_content_1} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="3.5">
			<desc>
				compare wifi0.1 content "rx beacon frames"
			</desc>
			<script>
				c=$(echo "${wifi0.1_content_2} &gt;= 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="3.6">
			<desc>
				compare wifi0.1 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${wifi0.1_content_3} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="4" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Ececute CLI command on MP:
				show interface wifi0.1 _counter
			</desc>
			<log-file>step4_wifi0.1__counter.log</log-file>
			<console target="ap1">
				-v "show interface wifi0.1 _counter"
			</console>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx frame ssid mismatch"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx multicast data frames"</log-match>
			<log-match>-c -e "tx broadcast data frames"</log-match>
			<log-match>-c -e "s tx airtime"</log-match>
			<log-match>-c -e "s tx airtime(BE)"</log-match>
			<log-match>-c -e "ms tx airtime(BK)"</log-match>
			<log-match>-c -e "ms tx airtime(VI)"</log-match>
			<log-match>-c -e "tx frames dropped"</log-match>
			<log-match>-c -e "unknown destination"</log-match>
			<log-match>-c -e "multicast/broadcast vlan mismatch"</log-match>
			<no-error-check />
		</step>

		<step no="4.1">
			<desc>
				get wifi0.1 _content "rx data frames"
			</desc>
			<setvar name="wifi0.1_content_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step4_wifi0.1__counter.log -t str
			</setvar>
		</step>

		<step no="4.2">
			<desc>
				get wifi0.1 _content "tx data frames"
			</desc>
			<setvar name="wifi0.1_content_5">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step4_wifi0.1__counter.log -t str
			</setvar>
		</step>

		<step no="4.3">
			<desc>
				compare wifi0.1 _content "rx data frames"
			</desc>
			<script>
				c=$(echo "${wifi0.1_content_4} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="4.4">
			<desc>
				compare wifi0.1 _content "tx data frames"
			</desc>
			<script>
				c=$(echo "${wifi0.1_content_5} &gt; 0" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>
	</stage>
</testcase>