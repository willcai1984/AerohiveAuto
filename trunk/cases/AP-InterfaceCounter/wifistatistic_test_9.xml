<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify "show ssid xxx counter" command works normally when there is a ssid existing.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Created a ssid and bound with interface wifi0.1

		Test Procedure:
		Ececute CLI command on each MP:
		show ssid wst counter station
	</description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>linux</tbtype>

	<stage>
		<step no="1">
			<desc>
				STA connects to MP
				"interface wifi0 mode access"
				"ssid ${ssid.name}"
				"interface wifi0 ssid ${ssid.name}"
				"interface wifi0 radio channel 1"
			</desc>
			<log-file>step1_config_client_connects_AP.log</log-file>
			<console target="ap1">
				-v "interface wifi0 mode access"
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
			</console>
		</step>
		
		<property name="conn1.ssid" value="${ssid.name}"/>
		<property name="conn2.ssid" value="${ssid.name}"/>
		<property name="rx_data_frames_0" value="0"/>
		<property name="tx_data_frames_0" value="0"/>
		<property name="rx_beacon_frames_0" value="0"/>
		<property name="rx_unicast_data_frames_0" value="0"/>
		<property name="tx_unicast_data_frames_0" value="0"/>
					
		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn1, sta1, ap1"/>
		<include prefix="3" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn2, sta2, ap1"/>
		
		<step no="4">
			<desc>show station</desc>
			<log-file>step4.log</log-file>
			<console target="ap1">
				-v "show sta"
			</console>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "${sta1.tif.ip}"</log-match>
			<log-match>-c -i "${sta2.tif.mac}" -i "${sta2.tif.ip}"</log-match>	
		</step>	
		
		<step no="5">
			<desc>
				 Execute ping from client1 to client2 more than 2 minutes then stoped
			</desc>
			<log-file>step5.log</log-file>
			<ssh target="sta1" timeout="200">
				 -v "ping ${sta2.tif.ip} -c 1000 -i 0.01 -s 1024"
			</ssh>
			<log-match>-e "from ${sta2.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>

		<step no="6">
			<desc>
				 Execute ping from client2 to client1 for 2 minutes then stoped
			</desc>
			<log-file>step6.log</log-file>
			<ssh target="sta2" timeout="200">
				 -v "ping ${sta1.tif.ip} -c 1000 -i 0.01 -s 1024"
			</ssh>
			<log-match>-e "from ${sta1.tif.ip}"</log-match>
			<log-match>-n -e "100% packet loss"</log-match>
		</step>
		
		<step no="7" delay="120" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				show ssid ${ssid.name} counter station
			</desc>
			<log-file>step7.log</log-file>
			<console target="ap1" timeout="150">
				-v "show ssid ${ssid.name} counter station"
			</console>
		    <log-match>-c -e "SSID:${ssid.name}" -i "interface: wifi0.1"</log-match>
			<log-match>-c -e "station ${sta1.tif.mac}"</log-match>
			<log-match>-c -e "rx data bytes"</log-match>
			<log-match>-c -e "rx data frames"</log-match>
			<log-match>-c -e "rx unicast data frames"</log-match>
			<log-match>-c -e "rx multicast data frames"</log-match>
			<log-match>-c -e "rx broadcast data frames"</log-match>
			<log-match>-c -e "rx management frames"</log-match>
			<log-match>-c -e "rx control frames"</log-match>
			<log-match>-c -e "rx beacon frames"</log-match>
			<log-match>-c -e "rx probe response frames"</log-match>
			<log-match>-c -e "rx dropped because of duplicate"</log-match>
			<log-match>-c -e "rx dropped because frame with wep but privicy off"</log-match>
			<log-match>-c -e "rx dropped because frame without wep but privacy on"</log-match>
			<log-match>-c -e "rx demic failed"</log-match>
			<log-match>-c -e "rx decapsulation failed"</log-match>
			<log-match>-c -e "rx defragmentation failed"</log-match>
			<log-match>-c -e "rx disassociation"</log-match>
			<log-match>-c -e "rx deauthentication"</log-match>
			<log-match>-c -e "rx decrypt failed on crc"</log-match>
			<log-match>-c -e "rx on unauthorized port"</log-match>
			<log-match>-c -e "rx unecrypted with privacy"</log-match>
			<log-match>-c -e "ms rx airtime"</log-match>
			<log-match>-c -e "rx \[re\]associations while associated"</log-match>
			<log-match>-c -e "rx" -i "Kpbs stat:"</log-match>
			<log-match>-c -e "rx unicast"</log-match>
			<log-match>-c -e "rx retries"</log-match>
			<log-match>-c -e "tx data bytes"</log-match>
			<log-match>-c -e "tx data frames"</log-match>
			<log-match>-c -e "tx unicast data frames"</log-match>
			<log-match>-c -e "tx WMM best effort data frames"</log-match>
			<log-match>-c -e "tx WMM background data frames"</log-match>
			<log-match>-c -e "tx WMM video data frames"</log-match>
			<log-match>-c -e "tx WMM voice data frames"</log-match>
			<log-match>-c -e "tx management frames"</log-match>
			<log-match>-c -e "rx probe request frames"</log-match>
			<log-match>-c -e "tx on uapsd queue"</log-match>
			<log-match>-c -e "tx dropped because no vlan tag"</log-match>
			<log-match>-c -e "tx dropped because bad vlan tag"</log-match>
			<log-match>-c -e "tx dropped because repeat tx failures"</log-match>
			<log-match>-c -e "tx discard on uapsd queue because excessive retry"</log-match>
			<log-match>-c -e "tx \[re\]associations"</log-match>
			<log-match>-c -e "tx \[re\]association failures"</log-match>
			<log-match>-c -e "tx \[re\]authentications"</log-match>
			<log-match>-c -e "tx \[re\]authentication failures"</log-match>
			<log-match>-c -e "tx deauthentications"</log-match>
			<log-match>-c -e "tx disassociations"</log-match>
			<log-match>-c -e "tx dropped because power save queue full"</log-match>
			<log-match>-c -e "ms tx airtime"</log-match>
			<log-match>-c -e "uapsd triggers"</log-match>
			<log-match>-c -e "tx" -i "Kbps stat:"</log-match>
			<log-match>-c -e "tx unicasts"</log-match>
			<log-match>-c -e "tx retries"</log-match>
			<log-match>-c -e "SLA disabled status good_and_meet"</log-match>
			<log-match>-c -e "Kbps SLA BW"</log-match>
			<log-match>-c -e "Kbps BW usage"</log-match>
			<log-match>-c -e "connectivity score"</log-match>
			<log-match>-c -e "SLA violation traps sent"</log-match>
			<log-match>-c -e "SLA clear traps sent"</log-match>
			<log-match>-c -e "tx frames buffered"</log-match>
			<log-match>-c -e "PS q depth"</log-match>
			<log-match>-c -e "UAPSD q depth"</log-match>
			<log-match>-c -e "TX Latency Stats:"</log-match>
			<log-match>-c -e "AC: BE:"</log-match>
			<log-match>-c -e "Less than 5ms:"</log-match>
			<log-match>-c -e "5ms to 10ms:"</log-match>
			<log-match>-c -e "10ms to 15ms:"</log-match>
			<log-match>-c -e "15ms to 20ms:"</log-match>
			<log-match>-c -e "20ms or more:"</log-match>
			<log-match>-c -e "AC: BK:"</log-match>
			<log-match>-c -e "AC: Vi:"</log-match>
			<log-match>-c -e "AC: Vo:"</log-match>
			<log-match>-c -e "Extra TX/RX Drops:"</log-match>
			<log-match>-c -e "tx max retried"</log-match>
			<log-match>-c -e "tx fifo err"</log-match>
			<log-match>-c -e "tx filtered"</log-match>
			<log-match>-c -e "tx exceed txop"</log-match>
			<log-match>-c -e "tx exceed timer"</log-match>
			<log-match>-c -e "rx ver mismatch"</log-match>
			<log-match>-c -e "rx old seq"</log-match>
			<log-match>-c -e "rx subframe dup"</log-match>
			<log-match>-c -e "rx too short"</log-match>
			<log-match>-c -e "rx wrong bssid"</log-match>
			<log-match>-c -e "rx wrong direction"</log-match>
			<log-match>-c -e "rx not assoc"</log-match>
			<no-error-check />
		</step>
		
		<step no="7.1">
			<desc>
				get wifi0.1 content "rx data frames"
			</desc>
			<setvar name="rx_data_frames_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/step7.log -t str
			</setvar>
		</step>
		
		<step no="7.2">
			<desc>
				get wifi0.1 content "tx data frames"
			</desc>
			<setvar name="tx_data_frames_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/step7.log -t str
			</setvar>
		</step>
		
		<step no="7.3">
			<desc>
				get wifi0.1 content "rx beacon frames"
			</desc>
			<setvar name="rx_beacon_frames_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx beacon frames" -f ${log.dir}/step7.log -t str
			</setvar>
		</step>		
		
		<step no="7.4">
			<desc>
				get wifi0.1 content "rx unicast data frames"
			</desc>
			<setvar name="rx_unicast_data_frames_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx unicast data frames" -f ${log.dir}/step7.log -t str
			</setvar>
		</step>
		
		<step no="7.5">
			<desc>
				get wifi0.1 content "tx unicast data frames"
			</desc>
			<setvar name="tx_unicast_data_frames_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx unicast data frames" -f ${log.dir}/step7.log -t str
			</setvar>
		</step>
		
        <step no="8">
			<desc>
				compare content "tx data frames"
			</desc>
			 <script>
             echo ${tx_data_frames_0} ${tx_data_frames_1} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>
				
		<step no="8.1">
			<desc>
				compare content "rx data frames"
			</desc>
			 <script>
             echo ${rx_data_frames_0} ${rx_data_frames_1} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>	
		
		<step no="8.2">
			<desc>
				compare content "rx beacon frames"
			</desc>
			 <script>
             echo ${rx_beacon_frames_0} ${rx_beacon_frames_1} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>	
		
		
		<step no="8.3">
			<desc>
				compare content "rx unicast data frames"
			</desc>
			 <script>
             echo ${rx_unicast_data_frames_0} ${rx_unicast_data_frames_1} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>	
		
		<step no="8.4">
			<desc>
				compare content "tx unicast data frames"
			</desc>
			 <script>
             echo ${tx_unicast_data_frames_0} ${tx_unicast_data_frames_1} | awk '{
             if ($2 &gt; $1)
                {exit (0);}
            else
                {exit (1);}
            }'
            </script>
		</step>	
	</stage>
	

	<stage>
        <step no="100">
            <desc>
                shutdown wlan interface on sta1
            </desc>
            <log-file>100.log</log-file>
            <ssh target="sta1" prompt=".*#">
                -v "ifconfig ${sta1.tif.name} down"
            </ssh>
        </step>
		<step no="101">
            <desc>
                shutdown wlan interface on sta2
            </desc>
            <log-file>101.log</log-file>
            <ssh target="sta2" prompt=".*#">
                -v "ifconfig ${sta2.tif.name} down"
            </ssh>
        </step>	
    </stage>
	
	<failed-process>
    <stage>
        <step no="110">
            <desc>
                shutdown wlan interface on sta1
            </desc>
            <log-file>110.log</log-file>
            <ssh target="sta1" prompt=".*#">
                -v "ifconfig ${sta1.tif.name} down"
            </ssh>
        </step>
		<step no="111">
            <desc>
                shutdown wlan interface on sta2
            </desc>
            <log-file>111.log</log-file>
            <ssh target="sta2" prompt=".*#">
                -v "ifconfig ${sta2.tif.name} down"
            </ssh>
        </step>
    </stage>
    </failed-process>
	
</testcase>