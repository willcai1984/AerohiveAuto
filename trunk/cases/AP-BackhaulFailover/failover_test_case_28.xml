<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Different VLAN AP trigger failover cannot succeed</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-AP1 and AP2 are in different VLAN
		-AP1 wifi0 is dual/backhaul mode, wifi1 is dual/backhaul mode
		-AP2 wifi0 is dual/backhaul mode, wifi1 is dual/backhaul mode

		Test Procedure:
		1, shutdown AP1 ethernet: interface eth0 shutdown
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="0">
			<desc>
				shutdown interface eth1
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="1">
			<desc>
				AP1 and AP2 are in different VLAN
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="1.1">
			<desc>
				AP1 and AP2 are in different VLAN
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan2}"
			</console>
		</step>

		<step no="2">
			<desc>
				AP1 wifi0 is dual/backhaul mode, wifi1 is dual/backhaul mode
				set radio profile to wifi0 and wifi1
			</desc>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 3"
				-v "interface wifi1 mode dual"
				-v "interface wifi1 radio channel 36"
				-v "radio profile failover_na"
				-v "radio profile failover_na phymode 11na"
				-v "radio profile failover_na backhaul failover"
				-v "interface wifi1 radio profile failover_na"
				-v "radio profile failover_ng"
				-v "radio profile failover_ng phymode 11ng"
				-v "radio profile failover_ng backhaul failover"
				-v "interface wifi1 radio profile failover_ng"
			</console>
		</step>

		<step no="2.1">
			<desc>
				AP2 wifi0 is dual/backhaul mode, wifi1 is dual/backhaul mode
				set radio profile to wifi0 and wifi1
			</desc>
			<console target="ap2">
				-v "hive ${hive.name}"
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 5"
				-v "interface wifi1 mode dual"
				-v "interface wifi1 radio channel 40"
				-v "radio profile failover_na"
				-v "radio profile failover_na phymode 11na"
				-v "radio profile failover_na backhaul failover"
				-v "interface wifi1 radio profile failover_na"
				-v "radio profile failover_ng"
				-v "radio profile failover_ng phymode 11ng"
				-v "radio profile failover_ng backhaul failover"
				-v "interface wifi1 radio profile failover_ng"
			</console>
		</step>

		<step no="2.2">
			<desc>
				clear log all
			</desc>
			<console target="ap1">
				-v "_debug dcd chnl"
				-v "clear log all"
			</console>
		</step>

		<step no="3">
			<desc>
				shutdown AP1 ethernet: interface eth0 shutdown
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="3.1" delay="5">
			<desc>
				show log buffer
			</desc>
			<log-file>show_log_buffer.log</log-file>
			<console target="ap1" timeout="200">
				-v "show logging buffered | in failover"
			</console>
			<log-match>-e "wifi1" -i "start do failover"</log-match>
			<log-match>-e "wifi0" -i "start do failover"</log-match>
			<log-match>-e "ACSP failover trigger timer" -i "wifi1"</log-match>
			<log-match>-e "ACSP failover trigger timer" -i "wifi0"</log-match>
			<log-match>-e "wifi1" -i "start failover trigger timer"</log-match>
			<log-match>-e "wifi0" -i "start failover trigger timer"</log-match>
			<no-error-check />
		</step>

		<step no="4">
			<desc>
				check the AP2 interface eth0 of MAC
			</desc>
			<log-file>step4_check_eth0_MAC.log</log-file>
			<console target="ap2">
				-v "show interface eth0"
			</console>
		</step>

		<step no="4.1">
			<desc>
				check the AP2 interface wifi0.1 of MAC
			</desc>
			<log-file>step4.1_check_wifi0.1_MAC.log</log-file>
			<console target="ap2">
				-v "show interface wifi0.1"
			</console>
		</step>

		<step no="4.2">
			<desc>
				check the AP2 interface wifi1.1 of MAC
			</desc>
			<log-file>step4.2_check_wifi1.1_MAC.log</log-file>
			<console target="ap2">
				-v "show interface wifi1.1"
			</console>
		</step>

		<step no="4.3">
			<desc>
				get the AP2 interface eth0 of MAC
			</desc>
			<setvar name="eth0_mac">
				${bin.dir}/getbyrexp.py -p "MAC addr=(\w+\:\w+\:\w+);" -f ${log.dir}/step4_check_eth0_MAC.log -t str
			</setvar>
		</step>

		<step no="4.4">
			<desc>
				get the AP2 interface wifi0.1 of MAC
			</desc>
			<setvar name="wifi0.1_mac">
				${bin.dir}/getbyrexp.py -p "MAC Addr=(\w+\:\w+\:\w+);" -f ${log.dir}/step4.1_check_wifi0.1_MAC.log -t str
			</setvar>
		</step>

		<step no="4.5">
			<desc>
				get the AP2 interface wifi1.1 of MAC
			</desc>
			<setvar name="wifi1.1_mac">
				${bin.dir}/getbyrexp.py -p "MAC Addr=(\w+\:\w+\:\w+);" -f ${log.dir}/step4.2_check_wifi1.1_MAC.log -t str
			</setvar>
		</step>

		<step no="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step5_show_amrp_neighbor.log</log-file>
			<console target="ap1">
				-v "show amrp neighbor"
			</console>
			<log-match>-n -e "${eth0_mac}"</log-match>
			<log-match>-n -e "${wifi0.1_mac}"</log-match>
			<log-match>-n -e "${wifi1.1_mac}"</log-match>
		</step>
	</stage>
</testcase>