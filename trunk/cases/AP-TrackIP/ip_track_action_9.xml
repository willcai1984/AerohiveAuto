<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Trigger action disable radio and recover, on MP</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-Configure AP1 IP_addr is IP1, AP2 IP_addr is IP2 , (IP1, IP2is in the same subnet)
		-Configure AP1
		"hive tracktest"
		"interface mgt0 hive tracktest"
		"interface wifi1 radio channel 161"
		-Configure AP2(MP)
		"hive tracktest"
		"interface mgt0 hive tracktest"
		"ssid tracktest"
		"interface wifi0 ssid tracktest"
		"track group1 default-gateway"
		"track group1 action disable-access-radio"
		"interface wifi1 radio channel 161"
		"interface eth0 shutdown"
		"interface eth1 shutdown"

		Test Procedure:
		1) Shutdown wifi1 on AP2
		"interface wifi1 hive tracktest shutdown"
		"show track"
		"show interface wifi0.1"
		2) Recover
		"no interface wifi1 hive tracktest shutdown"
		"show track"
		"show interface wifi0.1"
		3) Shutdown eth0 on AP1
		"interface eth0 shutdown"(AP1)
		"show track"(AP2)
		"show interface wifi0.1"(AP2)
		4) Recover
		"no interface eth0 shutdown"(AP1)
		"show track"(AP2)
		"show interface wifi0.1"(AP2)
		5) Shutdown wifi1 on AP1
		"interface wifi1 hive tracktest shutdown"(AP1)
		"show track"(AP2)
		"show interface wifi0.1"(AP2)
		6) Recover
		"no interface wifi1 hive tracktest shutdown"(AP1)
		"show track"(AP2)
		"show interface wifi0.1"(AP2)
		Expectant result:
		1. Track all IFS is unreachable, Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both
		Ethernet and
		wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet
		interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		"show interface wifi0.1"
		AH-457a80#show interface wifi0.1
		SSID=service set
		identifier; MTU=maximum transmission unit;
		RTS=request to send;
		DTIM=delivery traffic indication message; WMM=Wi-Fi Multimedia;
		UAPSD=unscheduled automatic power save delivery; AC=access
		console;
		Mode=access; SSID configured="tracktest"; SSID=" ";
		Admin state=enabled; Operational state=down; WMM state=enabled;
		AC state=disabled;
		2. Track all IFS is reachable, Track ETH IFS is Inactive
		"show
		track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both
		Ethernet and
		wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet
		interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Reachable Inactive
		"show interface wifi0.1"
		AH-457a80#show interface wifi0.1
		SSID=service set identifier;
		MTU=maximum transmission unit;
		RTS=request to send;
		DTIM=delivery traffic indication message; WMM=Wi-Fi Multimedia;
		UAPSD=unscheduled automatic power save delivery;
		AC=access
		console;
		Mode=access; SSID configured="tracktest"; SSID="tracktest";
		Admin state=enabled; Operational state=down; WMM state=enabled;
		AC state=disabled;
		3. Track all IFS is unreachable, Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both
		Ethernet and
		wireless);
		Track ETH IFs=Perform IP tracking only through
		Ethernet
		interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		"show interface wifi0.1"
		AH-457a80#show interface wifi0.1
		SSID=service set
		identifier; MTU=maximum transmission unit;
		RTS=request to send;
		DTIM=delivery traffic indication message; WMM=Wi-Fi Multimedia;
		UAPSD=unscheduled automatic power save delivery; AC=access
		console;
		Mode=access; SSID configured="tracktest"; SSID=" ";
		Admin state=enabled; Operational state=down; WMM state=enabled;
		AC state=disabled;
		4. Track all IFS is
		reachable, Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both
		Ethernet and
		wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet
		interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Reachable
		Inactive
		"show interface wifi0.1"
		AH-457a80#show interface wifi0.1
		SSID=service set identifier; MTU=maximum transmission unit;
		RTS=request to send;
		DTIM=delivery traffic indication message; WMM=Wi-Fi Multimedia;
		UAPSD=unscheduled automatic power save delivery;
		AC=access
		console;
		Mode=access; SSID configured="tracktest"; SSID="tracktest";
		Admin state=enabled; Operational state=down; WMM state=enabled;
		AC state=disabled;
		5. Track all IFS is unreachable,
		Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both
		Ethernet and
		wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet
		interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		"show interface wifi0.1"
		AH-457a80#show interface wifi0.1
		SSID=service set identifier; MTU=maximum transmission unit;
		RTS=request to send;
		DTIM=delivery traffic
		indication message; WMM=Wi-Fi Multimedia;
		UAPSD=unscheduled automatic power save delivery; AC=access
		console;
		Mode=access; SSID configured="tracktest"; SSID=" ";
		Admin state=enabled; Operational state=down; WMM state=enabled;
		AC state=disabled;
		6. Track all IFS is
		reachable, Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both
		Ethernet and
		wireless);
		Track ETH IFs=Perform IP
		tracking only through Ethernet
		interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Reachable Inactive
		"show interface wifi0.1"
		AH-457a80#show interface wifi0.1
		SSID=service set identifier; MTU=maximum transmission unit;
		RTS=request to send;
		DTIM=delivery traffic indication message; WMM=Wi-Fi Multimedia;
		UAPSD=unscheduled automatic power save delivery; AC=access
		console;
		Mode=access; SSID configured="tracktest"; SSID="tracktest";
		Admin
		state=enabled; Operational state=down; WMM state=enabled;
		AC state=disabled;
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="0">
			<desc>
				-when ap2 is ap340,shutdown eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<telnet target="ap2">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="0.1">
			<desc>
				-when ap1 is ap340,shutdown eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<telnet target="ap1">
				-v "interface eth1 shutdown"
			</telnet>
		</step>

		<step no="1">
			<desc>
				-Configure AP1
				"hive tracktest"
				"interface mgt0 hive tracktest"
				"interface wifi1 radio channel 48"
			</desc>
			<telnet target="ap1">
				-v "hive ${hive.name}_${img.prodtype}"
				-v "interface mgt0 hive ${hive.name}_${img.prodtype}"
				-v "interface wifi1 radio channel 48"
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
				-v "no interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
			</telnet>
		</step>

		<step no="2">
			<desc>
				-Configure AP2(MP)
				"hive tracktest"
				"interface mgt0 hive tracktest"
				"ssid tracktest"
				"interface wifi0 ssid tracktest"
				"interface wifi1 mode backhaul"
				"track group1 default-gateway"
				"track group1 action disable-access-radio"
				"interface wifi1 radio channel 48"
				"interface eth0 shutdown"
				"interface eth1 shutdown"
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}_${img.prodtype}"
				-v "interface mgt0 hive ${hive.name}_${img.prodtype}"
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi1 mode backhaul"
				-v "track group1 default-gateway"
				-v "track group1 action disable-access-radio"
				-v "interface wifi1 radio channel 48"
				-v "interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
				-v "no interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
			</telnet>
		</step>

		<step no="3.1">
			<desc>
				show ap1's interface
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<console target="ap1">
				-v "show interface wifi1"
			</console>
		</step>

		<step no="3.2">
			<desc>
				gain ap1's mgt0's mac address
			</desc>
			<setvar name="ap1_wifi1_mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i wifi1 -o aero -m -width 2
			</setvar>
		</step>

		<step no="3.3">
			<desc>
				show ap2's interface
			</desc>
			<log-file>show_ap2_interface_info.log</log-file>
			<console target="ap2">
				-v "show interface wifi1"
			</console>
		</step>

		<step no="3.4">
			<desc>
				gain ap2's mgt0's mac address
			</desc>
			<setvar name="ap2_wifi1_mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap2_interface_info.log -i wifi1 -o aero -m -width 2
			</setvar>
		</step>
<!--  
		<step no="ap1_acsp_neighbor_check_1">
			<desc>
				show ap1's acsp neighbor
			</desc>
			<log-file>ap1_acsp_neighbor_check_1.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="ap1_acsp_neighbor_check_2">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_1">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/ap1_acsp_neighbor_check_1.log
			</setvar>
		</step>

		<step no="ap1_acsp_neighbor_check_3">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_1} &gt;= 128</if>
			<log-file>ap1_acsp_neighbor_check_3.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap1_acsp_neighbor_check_4" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_1} &lt; 128</if>
			<log-file>ap1_acsp_neighbor_check_4_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap2_acsp_neighbor_check_1">
			<desc>
				show ap2's acsp neighbor
			</desc>
			<log-file>ap2_acsp_neighbor_check_1.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="ap2_acsp_neighbor_check_2">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_2">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/ap2_acsp_neighbor_check_1.log
			</setvar>
		</step>

		<step no="ap2_acsp_neighbor_check_3">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_2} &gt;= 128</if>
			<log-file>ap2_acsp_neighbor_check_3.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap2_acsp_neighbor_check_4" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_2} &lt; 128</if>
			<log-file>ap2_acsp_neighbor_check_4_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>
-->
		<step no="5" type="loop-check" loop-max-times="60" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<telnet target="ap2" timeout="180">
				-v "show amrp neighbor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6">
			<desc>
				for this top, shutdown eth0
			</desc>
			<console target="ap2">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="7">
			<desc>
				1) Shutdown wifi1 on AP2
				"interface wifi1 hive tracktest shutdown"
			</desc>
			<console target="ap2">
				-v "interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
			</console>
		</step>

		<step no="7.1" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				1) Shutdown wifi1 on AP2
				"show track"
			</desc>
			<log-file>show_ap2_wifi1_shutdown_track_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Unreachable" -i "group1" -p 3</log-match>
		</step>

		<step no="7.2" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				1) Shutdown wifi1 on AP2
				"show interface wifi0.1"
			</desc>
			<log-file>show_interface_wifi0.1_shutdown_ap2_wifi1_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show interface wifi0.1"
			</console>
			<log-match> -e "SSID=\\\"\\\""</log-match>
		</step>

		<step no="8">
			<desc>
				2) Recover
				"no interface wifi1 hive tracktest shutdown"
			</desc>
			<console target="ap2">
				-v "no interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
			</console>
		</step>
<!-- 
		<step no="ap1_acsp_neighbor_check_1_1">
			<desc>
				show ap1's acsp neighbor
			</desc>
			<log-file>ap1_acsp_neighbor_check_1_1.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="ap1_acsp_neighbor_check_2_1">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_3">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/ap1_acsp_neighbor_check_1_1.log
			</setvar>
		</step>

		<step no="ap1_acsp_neighbor_check_3_1">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_3} &gt;= 128</if>
			<log-file>ap1_acsp_neighbor_check_3_1.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap1_acsp_neighbor_check_4_1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_3} &lt; 128</if>
			<log-file>ap1_acsp_neighbor_check_4_1_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap2_acsp_neighbor_check_1_1">
			<desc>
				show ap2's acsp neighbor
			</desc>
			<log-file>ap2_acsp_neighbor_check_1_1.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="ap2_acsp_neighbor_check_2_1">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_4">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/ap2_acsp_neighbor_check_1_1.log
			</setvar>
		</step>

		<step no="ap2_acsp_neighbor_check_3_1">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_4} &gt;= 128</if>
			<log-file>ap2_acsp_neighbor_check_3_1.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap2_acsp_neighbor_check_4_1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_4} &lt; 128</if>
			<log-file>ap2_acsp_neighbor_check_4_1_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>
 -->
		<step no="8.5" type="loop-check" loop-max-times="60" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step8.5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="8.6" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				2) Recover
				"show track"
			</desc>
			<log-file>show_ap2_wifi1_recover_track_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Reachable" -i "group1" -p 3</log-match>
		</step>

		<step no="8.7" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				2) Recover
				"show interface wifi0.1"
			</desc>
			<log-file>show_interface_wifi0.1_recover_ap2_wifi1_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show interface wifi0.1"
			</console>
			<log-match> -e "SSID=\\\"${ssid.name}\\\""</log-match>
		</step>

		<step no="9">
			<desc>
				3) Shutdown eth0 on AP1
				"interface eth0 shutdown"(AP1)
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="9.1" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				3) Shutdown eth0 on AP1
				"show track"(AP2)
			</desc>
			<log-file>show_ap1_eth0_shutdown_track_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Unreachable" -i "group1" -p 3</log-match>
		</step>

		<step no="9.2" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				3) Shutdown eth0 on AP1
				"show interface wifi0.1"(AP2)
			</desc>
			<log-file>show_interface_wifi0.1_shutdown_ap1_eth0_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show interface wifi0.1"
			</console>
			<log-match> -e "SSID=\\\"\\\""</log-match>
		</step>

		<step no="10">
			<desc>
				4) Recover
				"no interface eth0 shutdown"(AP1)
			</desc>
			<console target="ap1">
				-v "no interface eth0 shutdown"
			</console>
		</step>

		<step no="10.1">
			<desc>
				Set AP1 wifi1 channel and clear acsp neighbor tables
			</desc>
			<console target="ap1">
				-v "interface wifi1 radio channel 48"
				-v "interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
				-v "no interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
			</console>
		</step>

		<step no="10.2">
			<desc>
				clear AP2 acsp neighbor tables
			</desc>
			<console target="ap2">
				-v "interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
				-v "no interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
			</console>
		</step>

		<step no="ap1_acsp_neighbor_check_1_2">
			<desc>
				show ap1's acsp neighbor
			</desc>
			<log-file>ap1_acsp_neighbor_check_1_2.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="ap1_acsp_neighbor_check_2_2">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_5">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/ap1_acsp_neighbor_check_1_2.log
			</setvar>
		</step>

		<step no="ap1_acsp_neighbor_check_3_2">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_5} &gt;= 128</if>
			<log-file>ap1_acsp_neighbor_check_3_2.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap1_acsp_neighbor_check_4_2" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_5} &lt; 128</if>
			<log-file>ap1_acsp_neighbor_check_4_2_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap2_acsp_neighbor_check_1_2">
			<desc>
				show ap2's acsp neighbor
			</desc>
			<log-file>ap2_acsp_neighbor_check_1_2.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="ap2_acsp_neighbor_check_2_2">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_6">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/ap2_acsp_neighbor_check_1_2.log
			</setvar>
		</step>

		<step no="ap2_acsp_neighbor_check_3_2">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_6} &gt;= 128</if>
			<log-file>ap2_acsp_neighbor_check_3_2.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap2_acsp_neighbor_check_4_2" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_6} &lt; 128</if>
			<log-file>ap2_acsp_neighbor_check_4_2_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="10.5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step10.5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="10.6" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				4) Recover
				"show track"(AP2)
			</desc>
			<log-file>show_ap1_eth0_recover_track_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Reachable" -i "group1" -p 3</log-match>
		</step>

		<step no="10.7" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				4) Recover
				"show interface wifi0.1"(AP2)
			</desc>
			<log-file>show_interface_wifi0.1_recover_ap1_eth0_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show interface wifi0.1"
			</console>
			<log-match> -e "SSID=\\\"${ssid.name}\\\""</log-match>
		</step>

		<step no="11">
			<desc>
				5) Shutdown wifi1 on AP1
				"interface wifi1 hive tracktest shutdown"(AP1)
			</desc>
			<telnet target="ap1">
				-v "interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
			</telnet>
		</step>

		<step no="11.1" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				5) Shutdown wifi1 on AP1
				"show track"(AP2)
			</desc>
			<log-file>show_ap1_eth0_shutdown_track_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Unreachable" -i "group1" -p 3</log-match>
		</step>

		<step no="11.2" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				5) Shutdown wifi1 on AP1
				"show interface wifi0.1"(AP2)
			</desc>
			<log-file>show_interface_wifi0.1_shutdown_ap1_eth0_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show interface wifi0.1"
			</console>
			<log-match> -e "SSID=\\\"\\\""</log-match>
		</step>

		<step no="12">
			<desc>
				6) Recover
				"no interface wifi1 hive tracktest shutdown"(AP1)
			</desc>
			<telnet target="ap1">
				-v "no interface wifi1 hive ${hive.name}_${img.prodtype} shutdown"
			</telnet>
		</step>


		<step no="ap1_acsp_neighbor_check_1_3">
			<desc>
				show ap1's acsp neighbor
			</desc>
			<log-file>ap1_acsp_neighbor_check_1_3.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="ap1_acsp_neighbor_check_2_3">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_7">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/ap1_acsp_neighbor_check_1_3.log
			</setvar>
		</step>

		<step no="ap1_acsp_neighbor_check_3_3">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_7} &gt;= 128</if>
			<log-file>ap1_acsp_neighbor_check_3_3.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap1_acsp_neighbor_check_4_3" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap2 is ap1's acsp neighbor when ap1's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_7} &lt; 128</if>
			<log-file>ap1_acsp_neighbor_check_4_3_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap2_acsp_neighbor_check_1_3">
			<desc>
				show ap2's acsp neighbor
			</desc>
			<log-file>ap2_acsp_neighbor_check_1_3.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="ap2_acsp_neighbor_check_2_3">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_8">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/ap2_acsp_neighbor_check_1_3.log
			</setvar>
		</step>

		<step no="ap2_acsp_neighbor_check_3_3">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_2} &gt;= 128</if>
			<log-file>ap2_acsp_neighbor_check_3_3.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="ap2_acsp_neighbor_check_4_3" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_2} &lt; 128</if>
			<log-file>ap2_acsp_neighbor_check_4_3_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_${img.prodtype}" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="12.5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step12.5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="12.6" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				6) Recover
				"show track"(AP2)
			</desc>
			<log-file>show_ap1_eth0_recover_track_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Reachable" -i "group1" -p 3</log-match>
		</step>

		<step no="12.7" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				6) Recover
				"show interface wifi0.1"(AP2)
			</desc>
			<log-file>show_interface_wifi0.1_recover_ap1_eth0_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show interface wifi0.1"
			</console>
			<log-match> -e "SSID=\\\"${ssid.name}\\\""</log-match>
		</step>
	</stage>
</testcase>
