<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Trigger action access console and recover, on MP</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-Configure AP1 IP_addr is IP1, AP2 IP_addr is IP2 , (IP1, IP2 is in the same subnet)
		-Configure AP1
		"hive tracktest"
		"interface mgt0 hive tracktest"
		"interface wifi1 radio channel 48"
		-Configure AP2(MP)
		"hive tracktest"
		"interface mgt0 hive tracktest"
		"track group1 default-gateway"
		"track group1 action enable-access-console"
		"interface wifi1 radio channel 48"

		Test Procedure:
		1) Shutdown eth0 on AP2
		"interface eth0 shutdown"
		"show track"
		2) Recover
		"no interface eth0 shutdown"
		"show track"
		3) Shutdown wifi1 on AP2
		"interface wifi1 hive tracktest shutdown"
		"show track"
		"show ssid"
		4) Recover
		"no interface
		wifi1 hive tracktest shutdown"
		"show track"
		"show ssid"
		5) Shutdown eth0 on AP1
		"interface eth0 shutdown"(AP1)
		"show track"(AP2)
		"show ssid"(AP2)
		6) Recover
		"no interface eth0 shutdown"(AP1)
		"show track"(AP2)
		"show ssid"(AP2)
		7) Shutdown wifi1 on AP1
		"interface wifi1 hive tracktest shutdown"(AP1)
		"show track"(AP2)
		"show ssid"(AP2)
		8) Recover
		"no interface wifi1 hive tracktest shutdown"(AP1)
		"show
		track"(AP2)
		"show ssid"(AP2)
		Expectant result
		1. Track all IFS is
		reachable,
		Track ETH IFS is Inactive
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP
		tracking through all interfaces (both Ethernet and wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet interfaces;
		ETH=Ethernet;IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 reachable Inactive
		2. Track all IFS is reachable, Track ETH IFS is Inactive
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both Ethernet and wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs
		Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		3. Track all IFS is unreachable, Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP
		tracking through all interfaces (both Ethernet and wireless);
		Track
		ETH
		IFs=Perform IP tracking only through Ethernet interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track
		All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		"show ssid"
		(may find a ssid which name is the same as the hostname)
		AH-457a80#show ssid
		Frag=fragment threshold;
		RTS=request to send;
		DTIM=delivery traffic indication map;
		No. Name Frag
		RTS DTIM period Max client Mac filter
		--- ---- ---- --- --------------------- ----------
		1 AH-457a80_ac 2346 2346 1 2 None
		4. Track all IFS is reachable, Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both Ethernet and wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1
		group1 reachable Inactive
		"show ssid"
		(null)
		AH-457a80#show ssid
		5.Track
		all IFS is unreachable, Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both Ethernet and wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet interfaces;ETH=Ethernet;IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		"show ssid"
		(may find a ssid which name is the same as the hostname)
		AH-457a80#show ssid
		Frag=fragment threshold;RTS=request to send;
		DTIM=delivery traffic indication map;
		No. Name Frag
		RTS DTIM period Max client Mac filter
		--- ---- ---- --- --------------------- ----------
		1 AH-457a80_ac 2346 2346 1 2 None
		6. Track all IFS is reachable, Track ETH IFS is Inactive
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both Ethernet and wireless);
		Track ETH IFs=Perform IP tracking
		only through Ethernet interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO.
		Group
		Name
		Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		"show ssid"
		(null)
		AH-457a80#show ssid
		7.Track all IFS is unreachable, Track ETH IFS is Inactive
		"show track"
		AH-457a80#show track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both Ethernet and wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet interfaces;ETH=Ethernet;IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		"show ssid"
		(may find a ssid which name is the same as the hostname)
		AH-457a80#show ssid
		Frag=fragment threshold;RTS=request to send;
		DTIM=delivery traffic indication map;
		No. Name Frag
		RTS DTIM period Max client Mac filter
		--- ---- ---- --- --------------------- ----------
		1 AH-457a80_ac 2346 2346 1 2 None
		8. Track all IFS is reachable, Track
		ETH IFS is Inactive
		"show track"
		AH-457a80#show
		track
		Total Number: 1
		Track All IFs=Perform IP tracking through all interfaces (both Ethernet and wireless);
		Track ETH IFs=Perform IP tracking only through Ethernet interfaces;
		ETH=Ethernet; IFs=interfaces;
		NO. Group Name Track All IFs Track ETH IFs
		---------------------------------------------------------------------
		1 group1 Unreachable Inactive
		"show ssid"
		(null)
		AH-457a80#show ssid
	</description>
	<numofap>2</numofap>
	<numofsta>0</numofsta>
	<tbtype>linux</tbtype>
	<property name="hostname" value="AH-hello-world" />
	<stage>
		<step no="1.1">
			<desc>
				-when ap isn't ap120,shutdown eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<ssh target="ap1">
				-v "interface eth1 shutdown"
			</ssh>
		</step>

		<step no="1.2">
			<desc>
				-when ap isn't ap120,shutdown eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<ssh target="ap2">
				-v "interface eth1 shutdown"
			</ssh>
		</step>

		<step no="2">
			<desc>
				-Configure AP1
				"hive tracktest"
				"interface mgt0 hive tracktest"
			</desc>
			<ssh target="ap1">
				-v "hive ${hive.name}_1"
				-v "interface mgt0 hive ${hive.name}_1"
			</ssh>
		</step>

		<step no="3">
			<desc>
				-Configure AP2
				"hive tracktest"
				"interface mgt0 hive tracktest"
				"track group1 default-gateway"
				"track group1 action enable-access-console"
				"hostname ${hostname}"
			</desc>
			<ssh target="ap2">
				-v "hive ${hive.name}_1"
				-v "interface mgt0 hive ${hive.name}_1"
				-v "track group1 default-gateway"
				-v "track group1 action enable-access-console"
				-v "hostname ${hostname}"
			</ssh>
		</step>

		<step no="4.1">
			<desc>
				clear acsp neighbor
			</desc>
			<ssh target="ap1">
				-v "interface wifi1 hive ${hive.name}_1 shutdown"
				-v "no interface wifi1 hive ${hive.name}_1 shutdown"
			</ssh>
		</step>

		<step no="4.2">
			<desc>
				clear acsp neighbor
			</desc>
			<ssh target="ap2">
				-v "interface wifi1 hive ${hive.name}_1 shutdown"
				-v "no interface wifi1 hive ${hive.name}_1 shutdown"
			</ssh>
		</step>

		<step no="5.1">
			<desc>
				show ap1's interface
			</desc>
			<log-file>show_ap1_interface_info.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi1"
			</ssh>
		</step>

		<step no="5.2">
			<desc>
				gain ap1's wifi1's mac address
			</desc>
			<setvar name="ap1_wifi1_mac">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_ap1_interface_info.log -i wifi1 -o aero -m -width 2
			</setvar>
		</step>


		<step no="6">
			<desc>
				show acsp neighbor
			</desc>
			<log-file>step6_show_acsp_neighbor.log</log-file>
			<ssh target="ap2" timeout="180">
				-v "show acsp neighbor"
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_first">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/step6_show_acsp_neighbor.log
			</setvar>
		</step>

		<step no="6.2">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_first} &gt;= 128</if>
			<log-file>step6.2_show_acsp_neighbor.log</log-file>
			<ssh target="ap2" timeout="180">
				-v "show acsp neighbor"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_1" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6.3" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_first} &lt; 128</if>
			<log-file>step6.3_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<ssh target="ap2" timeout="180">
				-v "show acsp neighbor"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_1" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="6.4" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step6.4_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<ssh target="ap2" timeout="180">
				-v "show amrp neighbor"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="7">
			<desc>
				for this top, shutdown eth0
			</desc>
			<console target="ap2">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="8">
			<desc>
				3) Shutdown wifi1 on AP2
				"interface wifi1 hive tracktest shutdown"
				"show track"
				"show ssid"
			</desc>
			<console target="ap2">
				-v "interface wifi1 hive ${hive.name}_1 shutdown"
			</console>
		</step>

		<step no="8.1" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show track"
			</desc>
			<log-file>show_track_third_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Unreachable" -i "group1" -p 3</log-match>
		</step>

		<step no="8.2" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show ssid"
			</desc>
			<log-file>show_ssid_first_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show ssid"
			</console>
			<log-match>-e "${hostname}_ac" -p 2</log-match>
		</step>

		<step no="9">
			<desc>
				4) recover
				"no interface wifi1 hive tracktest shutdown"
				"show track"
				"show ssid"
			</desc>
			<console target="ap2">
				-v "no interface wifi1 hive ${hive.name}_1 shutdown"
			</console>
		</step>

		<step no="9.1">
			<desc>
				show acsp neighbor
			</desc>
			<log-file>step9.1_show_acsp_neighbor.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="9.2">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_second">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/step9.1_show_acsp_neighbor.log
			</setvar>
		</step>

		<step no="9.3">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_second} &gt;= 128</if>
			<log-file>step9.3_show_acsp_neighbor.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_1" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="9.4" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_second} &lt; 128</if>
			<log-file>step9.4_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_1" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="9.5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step9.5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="9.6" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show track"
			</desc>
			<log-file>show_track_fouth_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Reachable" -i "group1" -p 3</log-match>
		</step>

		<step no="9.7">
			<desc>
				"show ssid"
			</desc>
			<log-file>show_ssid_second_.log</log-file>
			<console target="ap2">
				-v "show ssid"
			</console>
			<log-match>-n -e "${hostname}_ac"</log-match>
		</step>

		<step no="10">
			<desc>
				1) Shutdown eth0
				"interface eth0 shutdown"
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="10.1" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show track"
			</desc>
			<log-file>show_track_fifth_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Unreachable" -i "group1" -p 3</log-match>
		</step>

		<step no="10.2" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show ssid"
			</desc>
			<log-file>show_ssid_third_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show ssid"
			</console>
			<log-match>-e "${hostname}_ac" -p 2</log-match>
		</step>

		<step no="11">
			<desc>
				2) no Shutdown eth0
				"no interface eth0 shutdown"
			</desc>
			<console target="ap1">
				-v "no interface eth0 shutdown"
			</console>
		</step>

		<step no="11.1">
			<desc>
				show acsp neighbor
			</desc>
			<log-file>step11.1_show_acsp_neighbor.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="11.2">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_third">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/step11.1_show_acsp_neighbor.log
			</setvar>
		</step>

		<step no="11.3">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_third} &gt;= 128</if>
			<log-file>step11.3_show_acsp_neighbor.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_1" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="11.4" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_third} &lt; 128</if>
			<log-file>step11.4_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_1" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="11.5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step11.5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="11.6" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show track"
			</desc>
			<log-file>show_track_sixth_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Reachable" -i "group1" -p 3</log-match>
		</step>

		<step no="11.7">
			<desc>
				"show ssid"
			</desc>
			<log-file>show_ssid_fouth_.log</log-file>
			<console target="ap2">
				-v "show ssid"
			</console>
			<log-match>-n -e "${hostname}_ac"</log-match>
		</step>

		<step no="12">
			<desc>
				3) Shutdown wifi1 on AP1
				"interface wifi1 hive tracktest shutdown"
				"show track"
				"show ssid"
			</desc>
			<ssh target="ap1">
				-v "interface wifi1 hive ${hive.name}_1 shutdown"
			</ssh>
		</step>

		<step no="12.1" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show track"
			</desc>
			<log-file>show_track_seventh_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Unreachable" -i "group1" -p 3</log-match>
		</step>

		<step no="12.2" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show ssid"
			</desc>
			<log-file>show_ssid_fifth_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show ssid"
			</console>
			<log-match>-e "${hostname}_ac" -p 2</log-match>
		</step>

		<step no="13">
			<desc>
				4) recover
				"no interface wifi1 hive tracktest shutdown"
				"show track"
				"show ssid"
			</desc>
			<ssh target="ap1">
				-v "no interface wifi1 hive ${hive.name}_1 shutdown"
			</ssh>
		</step>

		<step no="13.1">
			<desc>
				show acsp neighbor
			</desc>
			<log-file>step13.1_show_acsp_neighbor.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
		</step>

		<step no="13.2">
			<desc>
				get the number of wifi1's acsp neighbor from wifi1's acsp neighbor list
			</desc>
			<setvar name="wifi1_acspneighbor_number_fourth">
				perl ${case.dir}/bin/get_acsp_neighbor_count.pl ${log.dir}/step13.1_show_acsp_neighbor.log
			</setvar>
		</step>

		<step no="13.3">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list more than 128
			</desc>
			<if>${wifi1_acspneighbor_number_fourth} &gt;= 128</if>
			<log-file>step13.3_show_acsp_neighbor.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_1" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="13.4" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				show acsp neighbor to make sure ap1 is ap2's acsp neighbor when ap2's wifi1's acsp neighbor list less than 128
			</desc>
			<if>${wifi1_acspneighbor_number_fourth} &lt; 128</if>
			<log-file>step13.4_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+Backhaul\s+${hive.name}_1" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="13.5" type="loop-check" loop-max-times="50" loop-interval="5">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step13.5_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap2" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap1_wifi1_mac}\s+${ap1.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="13.6" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				"show track"
			</desc>
			<log-file>show_track_eighth_${loop_check.idx}.log</log-file>
			<console target="ap2">
				-v "show track"
			</console>
			<log-match>-e "Reachable" -i "group1" -p 3</log-match>
		</step>

		<step no="13.7">
			<desc>
				"show ssid"
			</desc>
			<log-file>show_ssid_sixth_.log</log-file>
			<console target="ap2">
				-v "show ssid"
			</console>
			<log-match>-n -e "${hostname}_ac"</log-match>
		</step>
	</stage>
</testcase>