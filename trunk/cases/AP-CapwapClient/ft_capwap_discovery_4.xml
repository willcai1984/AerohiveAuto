<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>When HiveAPs are in managed state on HM, what is the capwap state on HiveAPs. If capwap traffic is cut off.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		HiveAPs are accepted as managed APs.
		HiveAPs and HM are in capwap communication.

		Test Procedure:
		1. Check the HiveAPs capwap state.
		2. Check capwap state on HM in newly discovered page.
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="selenium_path" value="/root/selenium-server-standalone-2.42.2.jar" />
	<stage>

		<step no="0.1">
			<desc>
				start selenium server
			</desc>
			<ssh target="sta1">
				-v "export DISPLAY=:1"
				-v "nohup java -jar ${selenium_path} 1>logfile.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="0.2">
			<desc>
				start selenium server
			</desc>
			<ssh target="sta1">
				-v "printenv"
			</ssh>
		</step>

		<step no="1">
			<desc>
				HiveAPs are accepted as managed APs.
				HiveAPs and HM are in capwap communication.
			</desc>
			<ssh target="ap1">
				-v "capwap client enable"
				-v "capwap client server name ${pub.hm1.ip}"
			</ssh>
		</step>

		<step no="1.1">
			<desc>config ap2</desc>
			<ssh target="ap2">
				-v "ssid ${ssid.name}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} security protocol-suite open"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "interface ${ssid_bind_interface} ssid ${ssid.name}"
				-v "user-profile up qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "save config"
			</ssh>
		</step>


		<step no="2" type="loop-check" loop-max-times="30" loop-interval="5">
			<desc>
				1. Check the HiveAPs capwap state.
			</desc>
			<log-file>step2_check_hiveaps_capwap_state_${loop_check.idx}.log</log-file>
			<ssh target="ap1">
				-v "show capwap client"
			</ssh>
			<log-match>-e "RUN state: Connected securely to the CAPWAP server"</log-match>
		</step>

		<step no="2.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=open"
				echo "conn1.pif=${ssid_bind_interface}"
			</multi-setvar>
		</step>

		<include prefix="2.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap2" />


		<step no="3">
			<desc>step3_upload delta configura</desc>
			<log-file>step3_upload_complete_config.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/AerohiveGUI/scripts/capwap/capwap_basic.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters visit.url=http://${pub.hm1.ip} device.mac=${ap1.mgt0.mac} update.is_check=true -t ff -l info -f ${log.dir}/${log.file}
			</script>
			<log-match>-i "${ap1.mgt0.mac}" -i "Delay"</log-match>
		</step>

		<step no="4.1">
			<desc>
				shutdown eth0
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
				-v "save config"
			</console>
		</step>

		<step no="4.2">
			<if>"${ap.eth1.existed}"=="true" </if>
			<desc>
				shutdown eth1
			</desc>
			<console target="ap1">
				-v "interface eth1 shutdown"
				-v "save config"
			</console>
		</step>

		<step no="4.3">
			<if>"${ap.wifi1.existed}"=="true" </if>
			<desc>
				shutdown wifi1
			</desc>
			<console target="ap1">
				-v "interface wifi1 hive hive0 shutdown"
				-v "save config"
			</console>
		</step>

		<step no="5" delay="120">
			<desc>step5_upload delta configura</desc>
			<log-file>step5_upload_complete_config.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/AerohiveGUI/scripts/capwap/capwap_basic.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters visit.url=http://${pub.hm1.ip} device.mac=${ap1.mgt0.mac} update.is_check=true -t ff -l info -f ${log.dir}/${log.file}
			</script>
			<log-match>-i "${ap1.mgt0.mac}" -i "Disconnected"</log-match>
		</step>
	</stage>


</testcase>