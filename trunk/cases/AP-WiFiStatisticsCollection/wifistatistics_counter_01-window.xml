<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Check if "Show in wifi0/wifi1 counter""Show in wifi0/wifi1 _Counter""Clear in wifi0/wifi1 counter" work normal or not</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Initial configuration:
		Radio profile ng phymode 11ng
		Radio profile na phymode 11na
		In wifi0 radio profile ng
		In wifi1 radio profile na
		Hive statistics
		In mgt0 hive statistics
		Ssid ${ssid.name}-1
		Ssid ${ssid.name}-2
		In wifi0 ssid ${ssid.name}-1
		In wifi1 ssid ${ssid.name}-2

		Test Procedure:
		1) Push initial configuration to AP
		2) Connect client to AP ssid ${ssid.name}-1
		3) Run iperf in AP as client mode, run iperf in client as server mode
		Cli:"show station" to get client ip address
		"iperf client XX.XX.XX.XX window 64 time 65535 parallel 4"
		4) Check if wifi0 counter have been displayed correctly by CLi:
		"show in wifi0 counter"
		"show in wifi0 _counter"
		And content "rx data frames" "rx management frames""tx data
		frames""tx beacon frames" should have the value value0.
		5) Clear interface wifi0 counter to check if the above value value0 have been
		decreased
		CLI:"clear in wifi0 counter"
		"Show in wifi0 counter"
		"show in wifi0 _counter"
		6) Connect client to AP ssid ${ssid.name}-2
		7) Run iperf in AP
		as client mode, run iperf in client as server mode
		Cli:"show
		station" to
		get client ip address
		"iperf client XX.XX.XX.XX window 64 time 65535 parallel 4"
		8) Check if wifi1 counter have been displayed correctly by CLi:
		"show in wifi1 counter"
		"show in wifi1 _counter"
		And content "rx data frames" "rx management frames""tx data
		frames""tx beacon frames" should have the value value1.
		9) Clear interface wifi1 counter to check if the above value value1 have been
		decreased
		CLI:"clear in wifi1 counter"
		"Show in wifi1 counter"
		"show in wifi1 _counter
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>windows</tbtype>

	<stage>
		<step no="1">
			<desc>
				Initial configuration:
				radio profile ng phymode 11ng
				radio profile na phymode 11na
				in wifi0 radio profile ng
				in wifi1 radio profile na
				hive statistics
				in mgt0 hive statistics
				ssid ${ssid.name}-1
				security-object ${ssid.name}-1
				ssid ${ssid.name}-1 security-object ${ssid.name}-1
				ssid ${ssid.name}-2
				security-object ${ssid.name}-2
				ssid ${ssid.name}-2 security-object ${ssid.name}-2
				security-object ${ssid.name}-1 security protocol-suite wpa-auto-psk ascii-key aerohive
				security-object ${ssid.name}-2 security protocol-suite wpa-auto-psk ascii-key aerohive
				int wifi0 ssid ${ssid.name}-1
				int wifi1 ssid ${ssid.name}-2
				int wifi1 radio channel 40
			</desc>
			<telnet target="ap1">
				-v "radio profile ng phymode 11ng"
				-v "interface wifi0 radio profile ng"
				-v "hive statistics"
				-v "interface mgt0 hive statistics"
				-v "ssid ${ssid.name}-1"
				-v "security-object ${ssid.name}-1"
				-v "ssid ${ssid.name}-1 security-object ${ssid.name}-1"
				-v "security-object ${ssid.name}-1 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi0 ssid ${ssid.name}-1"
				-v "interface wifi0 radio channel 11"
			</telnet>
		</step>

		<step no="1.1">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				Initial configuration:
				radio profile na phymode 11na and wif1 related configure
			</desc>
			<telnet target="ap1">
				-v "radio profile na phymode 11na"
				-v "interface wifi1 radio profile na"
				-v "ssid ${ssid.name}-2"
				-v "security-object ${ssid.name}-2"
				-v "ssid ${ssid.name}-2 security-object ${ssid.name}-2"
				-v "security-object ${ssid.name}-2 security protocol-suite wpa-auto-psk ascii-key aerohive"
				-v "interface wifi1 ssid ${ssid.name}-2"
				-v "interface wifi1 radio channel 40"
			</telnet>
		</step>

		<step no="w0a.2">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-1
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w0a.step2_wifi_prof.xml -s "${ssid.name}-1" -l ${log.dir}
			</script>
		</step>

		<step no="w0a.2.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w0a.step2_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w0a.2.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w0a.step2.2_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-1"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-1&lt;/name&gt;"</log-match>
		</step>

		<step no="w0a.2.3">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-1 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-1 on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step2.3_wlan_conf_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-1"
			</ssh>
			<log-match>-e "SSID name" -i "${ssid.name}-1"</log-match>
		</step>

		<step no="w0a.2.4" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				show wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step2.4_wlan_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match>-e "SSID" -i "${ssid.name}-1"</log-match>
		</step>

		<step no="w0a.2.5">
			<desc>
				connect to ssid ${ssid.name}-1 on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step2.5_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-1 name=${ssid.name}-1 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w0a.2.6" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-1 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step2.6_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w0a.2.7" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step2.7_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w0a.2.8">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>w0a.step2.8_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w0a.2.9">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w0a.step2.8_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w0a.2.10">
			<desc>
				Run iperf in client as server mode
			</desc>
			<ssh target="sta1">
				-v "killall iperf"
				-v "nohup iperf -s -p 65535 &gt; nohup.out 2&gt;&amp;1 &amp;"
        -v "ps ajx | grep iperf"
			</ssh>
		</step>

		<step no="w0a.2.11" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				Run iperf in AP as client mode
			</desc>
			<log-file>w0a.step2.11_iperf_client_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "iperf client ${sta1.tif.ip} port 65535 window 64 time 20 parallel 4"
			</telnet>
			<log-match>-n -e "connect failed"</log-match>
			<log-match>-n -e "write1 failed"</log-match>
		</step>

		<step no="w0a.2.12" delay="10">
			<desc>
				Check if wifi0 counter have been displayed correctly by CLi:
				"show in wifi0 counter"
				And content "rx data frames" "rx management frames""tx data
				frames""tx beacon frames" should have the value value0.
			</desc>
			<log-file>w0a.step2.12_show_in_wifi0_counter.log</log-file>
			<telnet target="ap1">
				-v "show in wifi0 counter"
			</telnet>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx management frames"</log-match>
			<log-match>-e "tx beacon frames"</log-match>
			<no-error-check />
		</step>

		<step no="w0a.2.12.1">
			<desc>
				get wifi0 content "rx data frames"
			</desc>
			<setvar name="wifi0_content_1_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/w0a.step2.12_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.12.2">
			<desc>
				get wifi0 content "tx data frames"
			</desc>
			<setvar name="wifi0_content_1_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/w0a.step2.12_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.12.3">
			<desc>
				get wifi0 content "rx management frames"
			</desc>
			<setvar name="wifi0_content_1_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/w0a.step2.12_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.12.4">
			<desc>
				get wifi0 content "tx beacon frames"
			</desc>
			<setvar name="wifi0_content_1_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/w0a.step2.12_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.13" delay="10">
			<desc>
				"show in wifi0 _counter"
				And content "rx data frames" "rx management frames""tx data
				frames""tx beacon frames" should have the value value0.
			</desc>
			<log-file>w0a.step2.13_show_in_wifi0_counter.log</log-file>
			<telnet target="ap1">
				-v "show in wifi0 _counter"
			</telnet>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx management frames"</log-match>
			<log-match>-e "tx beacon frames"</log-match>
			<no-error-check />
		</step>

		<step no="w0a.2.13.1">
			<desc>
				get wifi0 _content "rx data frames"
			</desc>
			<setvar name="wifi0_content_2_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/w0a.step2.13_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.13.2">
			<desc>
				get wifi0 _content "tx data frames"
			</desc>
			<setvar name="wifi0_content_2_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/w0a.step2.13_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.13.3">
			<desc>
				get wifi0 _content "rx management frames"
			</desc>
			<setvar name="wifi0_content_2_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/w0a.step2.13_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.13.4">
			<desc>
				get wifi0 _content "tx beacon frames"
			</desc>
			<setvar name="wifi0_content_2_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/w0a.step2.13_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.14" delay="10">
			<desc>
				Clear interface wifi0 counter to check if the above value value0 have been
				decreased
				CLI:"clear in wifi0 counter"
				"Show in wifi0 counter"
			</desc>
			<log-file>w0a.step2.14_show_in_wifi0_counter.log</log-file>
			<telnet target="ap1">
				-v "clear in wifi0 counter"
				-v "Show in wifi0 counter"
			</telnet>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx management frames"</log-match>
			<log-match>-e "tx beacon frames"</log-match>
			<no-error-check />
		</step>

		<step no="w0a.2.14.1">
			<desc>
				get wifi0 "rx data frames"
			</desc>
			<setvar name="wifi0_content_3_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/w0a.step2.14_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.14.2">
			<desc>
				get wifi0 content "tx data frames"
			</desc>
			<setvar name="wifi0_content_3_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/w0a.step2.14_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.14.3">
			<desc>
				get wifi0 content "rx management frames"
			</desc>
			<setvar name="wifi0_content_3_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/w0a.step2.14_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

		<step no="w0a.2.14.4">
			<desc>
				get wifi0 content "tx beacon frames"
			</desc>
			<setvar name="wifi0_content_3_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/w0a.step2.14_show_in_wifi0_counter.log -t str
			</setvar>
		</step>

<!-- <step no="w0a.2.15" delay="10">
			<desc>
				"show in wifi0 _counter"
				And content "rx data frames" "rx management frames""tx data
				frames""tx beacon frames" should have the value value0.
			</desc>
			<log-file>w0a.step2.15_show_in_wifi0_counter.log</log-file>
			<telnet target="ap1">
				-v "show in wifi0 _counter"
			</telnet>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx management frames"</log-match>
			<log-match>-e "tx beacon frames"</log-match>
			<no-error-check />
		</step> -->

<!-- <step no="w0a.2.15.1">
			<desc>
				get wifi0 _content "rx data frames"
			</desc>
			<setvar name="wifi0_content_4_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/w0a.step2.15_show_in_wifi0_counter.log -t str
			</setvar>
		</step> -->

<!-- <step no="w0a.2.15.2">
			<desc>
				get wifi0 _content "tx data frames"
			</desc>
			<setvar name="wifi0_content_4_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/w0a.step2.15_show_in_wifi0_counter.log -t str
			</setvar>
		</step> -->

<!-- <step no="w0a.2.15.3">
			<desc>
				get wifi0 _content "rx management frames"
			</desc>
			<setvar name="wifi0_content_4_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/w0a.step2.15_show_in_wifi0_counter.log -t str
			</setvar>
		</step> -->

<!-- <step no="w0a.2.15.4">
			<desc>
				get wifi0 _content "tx beacon frames"
			</desc>
			<setvar name="wifi0_content_4_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/w0a.step2.15_show_in_wifi0_counter.log -t str
			</setvar>
		</step> -->

		<step no="w0a.2.15.5">
			<desc>
				compare wifi0 content "rx data frames"
			</desc>
			<script>
				c=$(echo "${wifi0_content_3_1} &lt; ${wifi0_content_1_1}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w0a.2.15.6">
			<desc>
				compare wifi0 content "tx data frames"
			</desc>
			<script>
				c=$(echo "${wifi0_content_3_2} &lt; ${wifi0_content_1_2}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w0a.2.15.7">
			<desc>
				compare wifi0 content "rx management frames"
			</desc>
			<script>
				c=$(echo "${wifi0_content_3_3} &lt; ${wifi0_content_1_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w0a.2.15.8">
			<desc>
				compare wifi0 content "tx beacon frames"
			</desc>
			<script>
				c=$(echo "${wifi0_content_3_4} &lt; ${wifi0_content_1_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

<!--	<step no="w0a.2.15.9">
			<desc>
				compare wifi0 _content "rx data frames"
			</desc>
			<script>
				c=$(echo "${wifi0_content_4_1} &lt; ${wifi0_content_2_1}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step> -->

<!--	<step no="w0a.2.15.10">
			<desc>
				compare wifi0 _content "tx data frames"
			</desc>
			<script>
				c=$(echo "${wifi0_content_4_2} &lt; ${wifi0_content_2_2}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step> -->

<!--	<step no="w0a.2.15.11">
			<desc>
				compare wifi0 _content "rx management frames"
			</desc>
			<script>
				c=$(echo "${wifi0_content_4_3} &lt; ${wifi0_content_2_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step> -->

<!--	<step no="w0a.2.15.12">
			<desc>
				compare wifi0 _content "tx beacon frames"
			</desc>
			<script>
				c=$(echo "${wifi0_content_4_4} &lt; ${wifi0_content_2_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step> -->
	</stage> 
	
	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<step no="w1a.3">
			<desc>
				Generate wifi_aerohive_test profile for ssid ${ssid.name}-2
			</desc>
			<script>
				perl ${bin.dir}/winprof_gen.pl -f ${case.dir}/conf/winprof.xml -o w1a.step3_wifi_prof.xml -s "${ssid.name}-2" -l ${log.dir}
			</script>
		</step>

		<step no="w1a.3.1">
			<desc>
				Copy to target Windows host machine a wifi windows profile file containing WEP aerohive password
			</desc>
			<script>
				staf local fs copy file ${log.dir}/w1a.step3_wifi_prof.xml tofile "c:\\staf\\wifi_aerohive_test.xml" tomachine ${sta1.mif.ip}
			</script>
		</step>

		<step no="w1a.3.2">
			<desc>
				verify profile copied
			</desc>
			<log-file>w1a.step3.2_cat_profile_sta.log</log-file>
			<ssh target="sta1">
				-v "cat /cygdrive/c/staf/wifi_aerohive_test.xml | grep ${ssid.name}-2"
			</ssh>
			<log-match>-e "&lt;name&gt;${ssid.name}-2&lt;/name&gt;"</log-match>
		</step>

		<step no="w1a.3.3" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				Delete all current Wireless profile of host ${sta1.mif.ip}
				Bring down the client Wireless ${sta1.mif.ip}
				Bring up the client Wireless on host ${sta1.mif.ip}
				Add new profile for ssid ${ssid.name}-2 to host ${sta1.mif.ip}
				Check profile for ssid ${ssid.name}-2 on host ${sta1.mif.ip}
				Check wlan network on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.3_wlan_conf_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1" timeout="600">
				-v "netsh wlan delete profile name=* interface=\"${sta1.tif.name}\""
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=DISABLED"
				-v "netsh interface set interface name=\"${sta1.tif.name}\" admin=ENABLED"
				-v "netsh wlan add profile filename=\"c:\\staf\\wifi_aerohive_test.xml\" interface=\"${sta1.tif.name}\""
				-v "netsh wlan show profiles ${ssid.name}-2"
				-v "sleep 30"
				-v "netsh wlan show network | grep SSID"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID.*name.*${ssid.name}-2" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "SSID\s*\d+\s*:\s*${ssid.name}-2" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="w1a.3.4">
			<desc>
				connect to ssid ${ssid.name}-2 on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.4_wlan_conn_sta.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan connect ssid=${ssid.name}-2 name=${ssid.name}-2 interface=\"${sta1.tif.name}\""
			</ssh>
		</step>

		<step no="w1a.3.5" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				wait until ssid ${ssid.name}-2 connected on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.5_wlan_conn_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "netsh wlan show interfaces"
			</ssh>
			<log-match>-e "State" -i " connected"</log-match>
		</step>

		<step no="w1a.3.6" type="loop-check" loop-max-times="40" loop-interval="5">
			<desc>
				wait until ip assigned on host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.6_wlan_ip_chk_sta_${loop_check.idx}.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
			<log-match>-e "IPv4 Address" -i "192.168.${tb.vlan1}."</log-match>
		</step>

		<step no="w1a.3.7">
			<desc>
				Dump all interfaces data from remote host ${sta1.mif.ip}
			</desc>
			<log-file>w1a.step3.7_wlan_ip_dump_sta.log</log-file>
			<ssh target="sta1">
				-v "ipconfig /all"
			</ssh>
		</step>

		<step no="w1a.3.8">
			<desc>
				Get station's MAC
			</desc>
			<setvar name="sta1.tif.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step3.7_wlan_ip_dump_sta.log -i Wireless -o win -m -width
			</setvar>
		</step>

		<step no="w1a.3.9">
			<desc>
				Get station's ip
			</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/w1a.step3.7_wlan_ip_dump_sta.log -i Wireless -o win -nomask
			</setvar>
		</step>

		<step no="w1a.3.10">
			<desc>
				Killall iperf
				Run iperf in client as server mode
			</desc>
			<ssh target="sta1">
				-v "killall iperf"
			  -v "nohup iperf -s -p 65535 &gt; nohup.out 2&gt;&amp;1 &amp;"
        -v "ps ajx | grep iperf"
			</ssh>
		</step>

		<step no="w1a.3.10.1" type="loop-check" loop-max-times="25" loop-interval="5">
			<desc>
				Run iperf in AP as client mode
			</desc>
			<log-file>w1a.step3.10.1_iperf_client_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "iperf client ${sta1.tif.ip} port 65535 window 64 time 20 parallel 4"
			</telnet>
			<log-match>-n -e "connect failed"</log-match>
			<log-match>-n -e "write1 failed"</log-match>
		</step>

		<step no="w1a.3.11" delay="30">
			<desc>
				Cli:"show station" to get client ip address
				"iperf client XX.XX.XX.XX window 64 time 65535 parallel 4"
			</desc>
			<log-file>w1a.step3.11_show_station.log</log-file>
			<telnet target="ap1">
				-v "show station"
			</telnet>
		</step>

		<step no="w1a.3.12" delay="15">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				Check if wifi1 counter have been displayed correctly by CLi:
				"show in wifi1 counter"
				And content "rx data frames" "rx management frames" "tx data
				frames""tx beacon frames" should have the value value 1.
			</desc>
			<log-file>w1a.step3.12_show_in_wifi1_counter.log</log-file>
			<telnet target="ap1">
				-v "show in wifi1 counter"
			</telnet>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx management frames"</log-match>
			<log-match>-e "tx beacon frames"</log-match>
			<no-error-check />
		</step>

		<step no="w1a.3.12.1">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 counter "rx data frames"
			</desc>
			<setvar name="wifi1_content_1_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/w1a.step3.12_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.12.2">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 counter "tx data frames"
			</desc>
			<setvar name="wifi1_content_1_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/w1a.step3.12_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.12.3">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 counter "rx management frames"
			</desc>
			<setvar name="wifi1_content_1_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/w1a.step3.12_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.12.4">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 counter "tx beacon frames"
			</desc>
			<setvar name="wifi1_content_1_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/w1a.step3.12_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.13" delay="10">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				"show in wifi1 _counter"
				And content "rx data frames" "rx management frames""tx data
				frames""tx beacon frames" should have the value value0.
			</desc>
			<log-file>w1a.step3.13_show_in_wifi1_counter.log</log-file>
			<telnet target="ap1">
				-v "show in wifi1 _counter"
			</telnet>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx management frames"</log-match>
			<log-match>-e "tx beacon frames"</log-match>
			<no-error-check />
		</step>

		<step no="w1a.3.13.1">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 _counter "rx data frames"
			</desc>
			<setvar name="wifi1_content_2_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/w1a.step3.13_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.13.2">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 _counter "tx data frames"
			</desc>
			<setvar name="wifi1_content_2_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/w1a.step3.13_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.13.3">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 _counter "rx management frames"
			</desc>
			<setvar name="wifi1_content_2_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/w1a.step3.13_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.13.4">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 _counter "tx beacon frames"
			</desc>
			<setvar name="wifi1_content_2_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/w1a.step3.13_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.14" delay="15">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				Clear interface wifi1 counter to check if the above value value0 have been decreased
				CLI:"clear in wifi1 counter"
				"Show in wifi1 counter"
			</desc>
			<log-file>w1a.step3.14_show_in_wifi1_counter.log</log-file>
			<telnet target="ap1">
				-v "clear in wifi1 counter"
				-v "Show in wifi1 counter"
			</telnet>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx management frames"</log-match>
			<log-match>-e "tx beacon frames"</log-match>
			<no-error-check />
		</step>

		<step no="w1a.3.14.1">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 counter "rx data frames"
			</desc>
			<setvar name="wifi1_content_3_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/w1a.step3.14_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.14.2">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 counter "tx data frames"
			</desc>
			<setvar name="wifi1_content_3_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/w1a.step3.14_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.14.3">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 counter "rx management frames"
			</desc>
			<setvar name="wifi1_content_3_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/w1a.step3.14_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

		<step no="w1a.3.14.4">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 counter "tx beacon frames"
			</desc>
			<setvar name="wifi1_content_3_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/w1a.step3.14_show_in_wifi1_counter.log -t str
			</setvar>
		</step>

<!--	<step no="w1a.3.15" delay="10">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				And content "rx data frames" "rx management frames""tx data
				frames""tx beacon frames" should have the value value0.
				"show in wifi1 _counter"
			</desc>
			<log-file>w1a.step3.15_show_in_wifi1_counter.log</log-file>
			<telnet target="ap1">
				-v "show in wifi1 _counter"
			</telnet>
			<log-match>-e "rx data frames"</log-match>
			<log-match>-e "tx data frames"</log-match>
			<log-match>-e "rx management frames"</log-match>
			<log-match>-e "tx beacon frames"</log-match>
			<no-error-check />
		</step> -->

<!--	<step no="w1a.3.15.1">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 _counter "rx data frames"
			</desc>
			<setvar name="wifi1_content_4_1">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx data frames" -f ${log.dir}/w1a.step3.15_show_in_wifi1_counter.log -t str
			</setvar>
		</step> -->

<!--	<step no="w1a.3.15.2">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 _counter "tx data frames"
			</desc>
			<setvar name="wifi1_content_4_2">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx data frames" -f ${log.dir}/w1a.step3.15_show_in_wifi1_counter.log -t str
			</setvar>
		</step> -->

<!--	<step no="w1a.3.15.3">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 _counter "rx management frames"
			</desc>
			<setvar name="wifi1_content_4_3">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+rx management frames" -f ${log.dir}/w1a.step3.15_show_in_wifi1_counter.log -t str
			</setvar>
		</step> -->

<!--	<step no="w1a.3.15.4">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				get wifi1 _counter "tx beacon frames"
			</desc>
			<setvar name="wifi1_content_4_4">
				${bin.dir}/getbyrexp.py -p "(\d+)\s+tx beacon frames" -f ${log.dir}/w1a.step3.15_show_in_wifi1_counter.log -t str
			</setvar>
		</step> -->

		<step no="w1a.3.15.5">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				compare wifi1 counter "rx data frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_3_1} &lt; ${wifi1_content_1_1}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w1a.3.15.6">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				compare wifi1 counter "tx data frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_3_2} &lt; ${wifi1_content_1_2}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w1a.3.15.7">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				compare wifi1 counter "rx management frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_3_3} &lt; ${wifi1_content_1_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

		<step no="w1a.3.15.8">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				compare wifi1 counter "tx beacon frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_3_4} &lt; ${wifi1_content_1_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step>

<!--	<step no="w1a.3.15.9">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				compare wifi1 _counter "rx data frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_4_1} &lt; ${wifi1_content_2_1}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step> -->

<!--	<step no="w1a.3.15.10">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				compare wifi1 _counter "tx data frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_4_2} &lt; ${wifi1_content_2_2}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step> -->

<!--		<step no="w1a.3.15.11">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				compare wifi1 _counter "rx management frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_4_3} &lt; ${wifi1_content_2_3}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step> -->

<!--		<step no="w1a.3.15.12">
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<desc>
				compare wifi1 _counter "tx beacon frames"
			</desc>
			<script>
				c=$(echo "${wifi1_content_4_4} &lt; ${wifi1_content_2_4}" | bc)
				if [[ $c -eq 1 ]]
				then
				exit 0
				else
				exit 1
				fi
			</script>
		</step> -->
	</stage>
</testcase>