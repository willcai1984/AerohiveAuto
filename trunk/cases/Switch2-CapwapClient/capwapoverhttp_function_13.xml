<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Test capwap switch betwwen UDP and HTTP</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>

		Pre-Condition:

		Reset config
		HM1 can be reachable
		AP configure:
		Capwap client server name HM's IP
		Capwap client server port 80
		Capwap client transfer-mode HTTP
		Capwap clinet HTTP proxy name serverIP port server port
		Capwap client HTTP proxy user &lt;string&gt; password &lt;string&gt;

		Test Procedure:

		Make a tools which can enable capwap over http and disable capwap over
		http, will be switch when capwap has run status
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>windows</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />

	<stage>
		<include prefix="start_selenium_server" file="subs/start_selenium_server.xml" args="${sta1.mif.ip}, ${job_selenium_dir}, ${job_selenium_jar}, ${job_selenium_workload}" />
		<step no="1">
			<desc>
				Reset config
				HM1 can be reachable
				AP configure:
				Capwap client server name HM's IP
				Capwap client server port 80
				Capwap client transfer-mode HTTP
				Make a tools which can enable capwap over http and disable capwap over
				http, will be switch when capwap has run status
			</desc>
			<telnet target="ap1">
				-v "capwap client enable"
				-v "capwap client server name ${pub.hm1.ip}"
				-v "capwap client transport HTTP"
				-v "capwap client server port 80"
			</telnet>
		</step>

		<step no="1.1">
			<desc>config ap2</desc>
			<telnet target="ap2">
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
			</telnet>
		</step>

		<step no="1.2" delay="180">
			<desc>check capwap state</desc>
			<log-file>step1_coapwapoverhttp_function_13.log</log-file>
			<telnet target="ap1">
				-v "show capwap client"
			</telnet>
			<log-match>-c -i "RUN state: Connected securely to the CAPWAP server"</log-match>
		</step>

		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap2" />

		<step no="3">
			<desc>upload delta configura</desc>
			<log-file>capwapvoerhttp13_upload_delta_config_1.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/scripts/hm/upload_config.py -r http://${sta1.mif.ip}:4444/wd/hub -t ie -f ${log.dir}/${log.file} -l debug --parameters login.server=https://${pub.hm1.ip}/ upload.type=compare_running_ap_config ap.mgt0_ip=${ap1.mgt0.ip}
			</script>
		</step>

		<step no="4">
			<desc>no capwap client enable</desc>
			<console target="ap1">
				-v "no capwap client transport HTTP"
				-v "no capwap client port 80"
				-v "no capwap client enable"
			</console>
		</step>

		<step no="4.1">
			<desc>capwap client enable</desc>
			<console target="ap1">
				-v "capwap client enable"
			</console>
		</step>

		<step no="4.2" delay="180">
			<desc>check the config</desc>
			<log-file>step4_coapwapoverhttp_function_13.log</log-file>
			<console target="ap1">
				-v "show capwap client"
			</console>
			<log-match>-c -i "RUN state: Connected securely to the CAPWAP server"</log-match>
		</step>

		<step no="5">
			<desc>upload delta configura</desc>
			<log-file>capwapvoerhttp13_upload_delta_config_2.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/scripts/hm/upload_config.py -r http://${sta1.mif.ip}:4444/wd/hub -t ie -f ${log.dir}/${log.file} -l debug --parameters login.server=https://${pub.hm1.ip}/ upload.type=compare_running_ap_config ap.mgt0_ip=${ap1.mgt0.ip}
			</script>
		</step>
	</stage>

	<post-process>
		<stage>
			<include prefix="stop_selenium_server" file="subs/stop_selenium_server.xml" args="${sta1.mif.ip}, ${job_selenium_workload}" />
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>