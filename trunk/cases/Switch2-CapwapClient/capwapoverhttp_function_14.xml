<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Test restartability for capwap over HTTP</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>

		Pre-Condition:

		Reset config
		HM1 can be reachable
		AP configure:
		Capwap client server name HM's IP
		Capwap client server port 80
		Capwap client transfer-mode HTTP
		Capwap clinet HTTP proxy name serverIP port server port
		Capwap client HTTP proxy user &lt;string&gt; password &lt;string&gt;

		Test Procedure:

		Enter into shell and killall -9 capwap
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>windows</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />

	<stage>
		<include prefix="start_selenium_server" file="subs/start_selenium_server.xml" args="${sta1.mif.ip}, ${job_selenium_dir}, ${job_selenium_jar}, ${job_selenium_workload}" />
		<step no="1">
			<desc>
				Reset config
				HM1 can be reachable
				AP configure:
				Capwap client server name HM's IP
				Capwap client server port 80
				Capwap client transfer-mode HTTP
				Capwap clinet HTTP proxy name serverIP port server port
				Capwap client HTTP proxy user &lt;string&gt; password &lt;string&gt;
				Enter into shell and killall -9 capwap
			</desc>
			<telnet target="ap1">
				-v "capwap client enable"
				-v "capwap client server name ${pub.hm1.ip}"
				-v "capwap client server port ${tb.http_server.port}"
				-v "capwap client transport HTTP"
				-v "capwap client HTTP proxy name ${pub.proxy2.ip} port ${pub.proxy2.port}"
				-v "capwap client HTTP proxy user ${pub.proxy2.user1} password ${pub.proxy2.passwd1}"
			</telnet>
		</step>

		<step no="1.1" delay="180">
			<desc>
				show capwap client
			</desc>
			<log-file>coapwapoverhttp_function_14_check_capwap_1.log</log-file>
			<telnet target="ap1">
				-v "show capwap client"
			</telnet>
			<log-match>-c -i "CAPWAP transport mode: *HTTP on TCP"</log-match>
			<log-match>-c -i "RUN state: Connected securely to the CAPWAP server"</log-match>
		</step>

		<step no="2">
			<desc>
				Enter into shell and killall -9 capwap
			</desc>
			<console target="ap1" prompt="AH.*#|$" slow="true" timeout="400">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v ""
				-v ""
				-v "killall -9 capwap"
				-v "ps"
				-v "exit"
			</console>
		</step>

		<step no="3" delay="60">
			<desc>
				show system process | include capwap
			</desc>
			<log-file>coapwapoverhttp_function_14__check_process.log</log-file>
			<telnet target="ap1">
				-v "show system process"
			</telnet>
			<log-match>-c -i "capwap$"</log-match>
		</step>

		<step no="4">
			<desc>
				show running_config
			</desc>
			<log-file>coapwapoverhttp_function_14_check_run.log</log-file>
			<telnet target="ap1">
				-v "show running-config"
			</telnet>
		</step>

		<step no="5">
			<desc>
				no capwap client enable
			</desc>
			<telnet target="ap1">
				-v "no capwap client enable"
			</telnet>
		</step>

		<step no="5.1">
			<desc>
				capwap client enable
			</desc>
			<telnet target="ap1">
				-v "capwap client enable"
			</telnet>
		</step>

		<step no="5.2" delay="60">
			<desc>
				show capwap client
			</desc>
			<log-file>coapwapoverhttp_function_14_check_capwap_2.log</log-file>
			<telnet target="ap1">
				-v "show capwap client"
			</telnet>
			<log-match>-c -i "RUN state: Connected securely to the CAPWAP server"</log-match>
			<log-match>-c -i "CAPWAP transport mode: *HTTP on TCP"</log-match>
			<log-match>-c -i "CAPWAP HTTP proxy name:${pub.proxy2.ip}"</log-match>
			<log-match>-c -i "CAPWAP HTTP proxy port:${pub.proxy2.port}"</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<include prefix="stop_selenium_server" file="subs/stop_selenium_server.xml" args="${sta1.mif.ip}, ${job_selenium_workload}" />
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>
