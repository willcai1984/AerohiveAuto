<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Forward packet from a BR to LANs</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		-config a remote CVG, there are several LANs behind it
		-there are some services in CVG's LANs
		-BR setup VPN connection with CVG
		-setup all wifi radio and eth interfaces as access mode
		-BR have several LANs behind it

		Test Procedure:

		-STA1 and STA2 are in different LANs under BR
		-ping from STA1 to STA2
		-ping from STA2 to STA1
	</description>
	<numofcvg>1</numofcvg>
	<numofbr>1</numofbr>
	<cvg-opt-arm>two</cvg-opt-arm>
	<cvg-opt-fw>yes</cvg-opt-fw>
	<tbtype>linux</tbtype>
	
	<property name="br.route.netmask" value="255.255.255.0" />

	<stage>

		<include prefix="1" file="subs/vpn_setup_one.xml" obj-args="cvg1, br1" />
		
		<!--<include prefix="pre2.1" file="subs/br_eth2_l2swcfg.xml" obj-args="br1" args="${br1.vpc2.vlan},${br1.vpc2.vlan},access" />-->

		<step no="2.1">
			<desc>config mgt0.1 with dhcp service enable</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface mgt0.1 dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "interface mgt0.1 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.1 dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface mgt0.1 dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface mgt0.1 dhcp-server enable"
			</telnet>
		</step>

		<step no="2.2">
			<desc>config mgt0.2 with dhcp service enable</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "interface mgt0.2 dhcp-server ip-pool ${br1.br.mgt0.2.ip_pool_start} ${br1.br.mgt0.2.ip_pool_end}"
				-v "interface mgt0.2 dhcp-server options netmask 255.255.255.0"
				-v "interface mgt0.2 dhcp-server options default-gateway ${br1.br.mgt0.2.ip}"
				-v "interface mgt0.2 dhcp-server options dns1 ${pub.dns1.ip}"
				-v "interface mgt0.2 dhcp-server enable"
			</telnet>
		</step>

		<step no="set_lan_info">
			<multi-setvar>
				echo "br1.br.mgt0.1.route=$(echo ${br1.br.mgt0.1.ip} | cut -d. -f1,2,3).0"
				echo "br1.br.mgt0.2.route=$(echo ${br1.br.mgt0.2.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.dns1.route=$(echo ${cvg1.dns1.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.dns2.route=$(echo ${cvg1.dns2.ip} | cut -d. -f1,2,3).0"
				echo "cvg1.vpc1.route=$(echo ${cvg1.vpc1.tif.ip} | cut -d. -f1,2,3).0"
			</multi-setvar>
		</step>

		<step no="3">
			<desc>Check route distribution is correct</desc>
		</step>

		<step no="3.1" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>On GW, will add the tunnel routes according to BR's modification </desc>
			<log-file>3.1.show_route_cvg_${loop_check.idx}.log</log-file>
			<telnet target="${cvg1.cvg.cons_ip}" port="${cvg1.cvg.cons_port}" timeout="10">
				-v "show ip route"
			</telnet>
			<log-match>-p 1 -i "${br1.br.mgt0.1.route}" -p 8 -i "${cvg1.tunnel.id}"</log-match>
			<log-match>-p 1 -i "${br1.br.mgt0.2.route}" -p 8 -i "${cvg1.tunnel.id}"</log-match>
		</step>

		<step no="3.2" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>-check the ip route tablelist</desc>
			<log-file>3.2_show_l3_ip_route_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show ip route"
			</telnet>
			<log-match>-p 1 -i "${cvg1.dns1.route}" -p 3 -i "${br.route.netmask}" -p 8 -i "${br1.tunnel.id}"</log-match>
			<log-match>-p 1 -i "${cvg1.dns2.route}" -p 3 -i "${br.route.netmask}" -p 8 -i "${br1.tunnel.id}"</log-match>
			<log-match>-p 1 -i "${cvg1.vpc1.route}" -p 3 -i "${br.route.netmask}" -p 8 -i "${br1.tunnel.id}"</log-match>
		</step>

		<step no="4">
			<desc>
				setup all wifi radio and eth interface as access mode
				connect STA1 under wifi, connect a STA2 under eth1
			</desc>
		</step>

		<step no="4.1">
			<desc>
				set all wired interface as access mode
				eth1 access br1.vpc1.vlan, eth4 access  br1.vpc2.vlan
			</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "security-object lan1"
				-v "security-object lan1 default-user-profile-attr 1"
				-v "security-object lan2"
				-v "security-object lan2 default-user-profile-attr 2"
				-v "user-profile lan1 qos-policy def-user-qos vlan-id ${br1.vpc1.vlan} attribute 1"
				-v "user-profile lan2 qos-policy def-user-qos vlan-id ${br1.vpc2.vlan} attribute 2"
				-v "interface eth1 mode bridge-access user-profile-attribute 1"
				-v "interface eth4 mode bridge-access user-profile-attribute 2"
				-v "int eth1 mac-learning enable"
				-v "int eth4 mac-learning enable"
				-v "interface eth1 security-object lan1"
				-v "interface eth4 security-object lan2"
				-v "show interface eth4"
			</telnet>
		</step>

		<step no="4.2">
			<desc>br1.vpc4 get ip addr from dhcp server of mgt0.1</desc>
			<log-file>ifconfig_vpc4_.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
			 	-v "dhclient ${br1.vpc4.tif.name} -r"
				-v "dhclient ${br1.vpc4.tif.name}"
				-v "ifconfig ${br1.vpc4.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="4.2b">
			<desc>set br1.vpc4.tif.ip var for vpc4 on BR side</desc>
			<setvar name="br1.vpc4.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc4.mif.ip} -u ${br1.vpc4.user} -p ${br1.vpc4.passwd} -i ${br1.vpc4.tif.name} -nomask
			</setvar>
		</step>
		
		<step no="4.3">
			<desc>br1.vpc1 get ip addr from dhcp server of mgt0.1</desc>
			<log-file>ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name} -r"
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="4.3b">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>		

		<step no="5">
			<desc>
				Enable debug, Check BR connectivities
			</desc>
		</step>

		<step no="5.1" type="loop-check" loop-max-times="30" loop-interval="10">
			<desc>BR ping br1.vpc1</desc>
			<log-file>5.1.log_br_to_sta1_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "ping ${br1.vpc1.tif.ip}"
			</telnet>
			<log-match>-c -i "from ${br1.vpc1.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="5.2" type="loop-check" loop-max-times="30" loop-interval="10">
			<desc>BR ping br1.vpc4</desc>
			<log-file>5.2.log_br_to_vpc4_${loop_check.idx}.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "ping ${br1.vpc4.tif.ip}"
			</telnet>
			<log-match>-c -i "from ${br1.vpc4.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="5.3">
			<desc>enable debug on BR</desc>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v "clear log buffered"
				-v "_ff id 1 src-ip ${br1.vpc1.tif.ip}"
				-v "_ff id 2 src-ip ${br1.vpc4.tif.ip}"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</telnet>
		</step>

		<step no="4.3">
			<desc>br1.vpc1 ping vpc4</desc>
			<log-file>ping_vpc4.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${br1.vpc4.tif.ip} -c 4"				
			</ssh>
			<log-match>-c -i "from ${br1.vpc4.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="6.1">
			<desc>show log buffer</desc>
			<log-file>setp6.1_show_log_buf.log</log-file>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v ""
				-v ""
				-v "show log buff"
				-v ""
				-v ""
				-v "clear log buff"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "create routing cache:${br1.vpc1.tif.ip}[\t\>\- ]+${br1.vpc4.tif.ip} fwmark \d+ dev ${br1.tunnel.id}" -c 0 -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="7">
			<desc>br1.vpc4 ping vpc1</desc>
			<log-file>ping_vpc1.log</log-file>
			<ssh target="br1.vpc4" timeout="120">
				-v "ping ${br1.vpc1.tif.ip} -c 4"				
			</ssh>
			<log-match>-c -i "from ${br1.vpc1.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="7.1">
			<desc>show log buffer</desc>
			<log-file>setp7.1_show_log_buf.log</log-file>
			<telnet target="${br1.br.wan.ip}" slow="yes">
				-v ""
				-v ""
				-v "show log buff"
				-v ""
				-v ""
				-v "clear log buff"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "create routing cache:${br1.vpc4.tif.ip}[\t\>\- ]+${br1.vpc1.tif.ip} fwmark \d+ dev ${br1.tunnel.id}" -c 0 -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
		
	</stage>
	
	<post-process>
		<stage>
			<!--<include prefix="post_br1_eth2_l2swcfg" file="subs/br_eth2_l2swcfg.xml" obj-args="br1" args="999, ${br1.vlan2}\,${br1.vlan3}" />-->
	   </stage>

		<include file="include/br_default_post_process.xml" />
	</post-process>

</testcase>
