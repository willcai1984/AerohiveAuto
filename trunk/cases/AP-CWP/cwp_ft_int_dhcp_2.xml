<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Renewal-response default mode test</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1:Configure internal CWP on ap, client links to ap but not passes cwp
		2:Check the default renewal-response, result 1
		3:Client passes cwp, check the default renewal-response, result 2
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	<property name="url" value="http://www.google.com.hk" />
	<property name="selenium_path" value="/root/selenium-server-standalone-2.42.2.jar" />

	<property name="conn1.ssid" value="${ssid.name}" />

	<stage>
		<step no="0.1">
			<desc>
				start selenium server
			</desc>
			<ssh target="sta1">
				-v "export DISPLAY=:1"
				-v "nohup java -jar ${selenium_path} 1>logfile.log 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="0.2">
			<desc>
				start selenium server
			</desc>
			<ssh target="sta1">
				-v "printenv"
			</ssh>
		</step>
		<step no="1">
			<desc>
				1:Configure internal CWP on ap
			</desc>
			<ssh target="ap1">
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret} acct-port ${pub.radius1.acctport}"
				-v "security-object ${ssid.name} security additional-auth-method captive-web-portal auth-user-profile-attr 1 timer-display"
				-v "security-object ${ssid.name} default-user-profile-attr 1"
				-v "security-object ${ssid.name} security protocol-suite open"
				-v "security-object ${ssid.name} web-server"
				-v "security-object ${ssid.name} security additional-auth-method captive-web-portal timer-display alert 10"
				-v "security-object ${ssid.name} security additional-auth-method captive-web-portal internal-servers"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "user-profile ttt qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi0 radio channel 1"
			<!--	-v "interface eth1 shutdown"-->
			</ssh>
		</step>

		<include prefix="2" file="${case.dir}/subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="3" delay="10">
			<desc>
				show auth
			</desc>
			<log-file>step3_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *wifi0.1 *01"</log-match>
		</step>

		<step no="4">
			<desc>
				show roam cache
			</desc>
			<log-file>step4_show_roam.log</log-file>
			<ssh target="ap1">
				-v "show roam cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "YNNN"</log-match>
		</step>

		<step no="5">
			<desc>
				show security-object xxx dhcp-server
			</desc>
			<log-file>step5_show_dhcp.log</log-file>
			<ssh target="ap1">
				-v "show security-object ${ssid.name} dhcp-server"
			</ssh>
			<log-match>-c -i "Renew-miss-action: *NAK-broadcast"</log-match>
		</step>

		<step no="5.1">
			<desc>
				open debug mode and clear log all
			</desc>
			<ssh target="ap1">
			<!--	-v "_debug dhcpd all"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_ff dst-port 67 bidirectional"-->
				-v "_debug cgic all"
				-v "_debug auth all"
				-v "clear log all"
			</ssh>
		</step>

		<step no="6">
			<desc>
				access public HM through CWP
			</desc>
			<log-file>cwp_ft_int_dhcp_2_login_in.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/AerohiveGUI/scripts/cwp/cwp_login.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters login.mode=normal visit.url=${url} login.username=${pub.radius1.username} login.password=${pub.radius1.passwd} -t ff -l info -f ${log.dir}/${log.file}
			</script>
		</step>
		<step no="7">
			<desc>Show interface on laptop after authentication</desc>
			<log-file>step7_show_ip.log</log-file>
			<ssh target="sta1">
				-v "ifconfig wlan0"
			</ssh>
		</step>

		<step no="7.1">
			<desc>Get laptop1's ip after authentication</desc>
			<setvar name="sta1.tif.ip.second">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step7_show_ip.log -p 'inet addr:(\d+.\d+.\d+.\d+)' -t str
			</setvar>
		</step>
		<step no="8">
			<desc>
				show roam cache
			</desc>
			<log-file>step9_show_roam.log</log-file>
			<ssh target="ap1" delay="20">
				-v "show sta"
			</ssh>
		</step>
		<step no="8.1">
			<desc>
				show roam cache
			</desc>
			<log-file>step9_show_sta.log</log-file>
			<ssh target="ap1">
				-v "show roam cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "YYNN"</log-match>
		</step>
		<step no="8.2">
			<desc>this step is for reproduce bug,check log</desc>
			<ssh target="ap1">
				-v "show log b"
			</ssh>
		</step>
		<step no="9" delay="10">
			<desc>
				show auth
			</desc>
			<log-file>step8_show_auth.log</log-file>
			<ssh target="ap1">
				-v "show auth"
			</ssh>
			 <log-match>-c -e "${sta1.tif.mac}\s*${ssid_bind_interface}.*\s*\d*04\s*" -re</log-match>
		</step>
		<step no="10">
			<desc>
				show logging buffered
			</desc>
			<log-file>step10_show_logging_buffered.log</log-file>
			<ssh target="ap1" timeout="500">
				-v "show logging buffered"
			</ssh>
			<no-error-check />
		<!--	<log-match>-c -i "broadcasting packet to client(${sta1.tif.mac}) (NAK)"</log-match>
			<log-match>-c -i "sending broadcast DHCP NAK for ${sta1.tif.mac} RENEW"</log-match>-->
			<log-match>-c -i "received DHCP REQUEST from client ${sta1.tif.mac} thro wifi0.1"</log-match>
		</step>
	</stage>
</testcase>