<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Configure different type items with all services in walled garden </brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-Walled garden is supported by e-cwp currently

		Test Procedure:
		1:Configure many type services items with all services in walled garden,
		and configure other relative e-CWP on ap, result 1
		2:Client accesses different ip which are mapped to different type and
		different services that configured in walled garden, result 2
		3:Client passes authentication, then accesses different ip which are
		mapped to different type and different services that configured in
		walled garden, result 2
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="conn1.ssid" value="${ssid.name}" />
	<property name="temp.file.dir" value="/tmp" />
	<property name="tftp.file.dir" value="/tftpboot" />
	<property name="tb.ftp" value="10.155.81.221" />
	<property name="pub.tftp1.tip" value="10.155.81.221" /><!--set tb.ftp and pub.tftp1.tip same here,because we can't forbid others delete all the file we build  on tb.ftp-->
	<stage>
		<step no="0">
			<desc>
				Copy a file to directory tftpboot in tb.ftp server
			</desc>
			<ssh host="${tb.ftp}">
				-v "chmod 777 ${tftp.file.dir}/${tb.ftp.file3_small}"
			</ssh>
		</step>

		<step no="0.1">
			<desc>
				Copy a file to directory tftpboot in pub tftp server
			</desc>
			<ssh host="${pub.tftp1.tip}">
				-v "chmod 777 ${tftp.file.dir}/default.zip"
			</ssh>
		</step>

		<step no="0.2">
			<desc>
				- creat a directory and create a file on dns server
			</desc>
			<ssh host="${pub.dns1.domain1}">
				-v "rm -rf tftpboot"
				-v "mkdir ${tftp.file.dir}"
				-v "touch ${tftp.file.dir}/${job.id}test"
				-v "echo \"This is a test.\" &gt; ${tftp.file.dir}/${job.id}test"
				-v "chmod 777 ${tftp.file.dir}/${job.id}test"
			</ssh>
		</step>

		<step no="0.3">
			<desc>
				- creat file on hm2
			</desc>
			<ssh host="${pub.hm2.ip}" user="${pub.hm2.username}" password="${pub.hm2.passwd}">
				-v "rm -f ${tftp.file.dir}/${job.sid}newfile"
				-v "touch ${tftp.file.dir}/${job.sid}newfile"
				-v "echo \"This is a test.\" &gt; ${tftp.file.dir}/${job.sid}newfile"
				-v "chmod 777 ${tftp.file.dir}/${job.sid}newfile"
			</ssh>
		</step>

		<step no="0.4">
			<desc>
				-delete dir then create a dir like tftpboot and delete local files
			</desc>
			<ssh target="sta1">
				-v "rm -rf ${tftp.file.dir}"
				-v "mkdir ${tftp.file.dir}"
				-v "chmod 777 ${tftp.file.dir}"
				-v "rm -f ${temp.file.dir}/ssh_pub_tftp.log"
				-v "rm -f ${temp.file.dir}/ssh_tb_ftp.log"
				-v "rm -f ${temp.file.dir}/ssh_hm2_domain.log"
				-v "rm -f ${temp.file.dir}/after_auth_ssh_pub_tftp.log"
				-v "rm -f ${temp.file.dir}/after_auth_ssh_tb_ftp.log"
				-v "rm -f ${temp.file.dir}/after_auth_ssh_hm2_domain.log"
			</ssh>
		</step>

		<step no="1">
			<desc>
				-Walled garden is supported by e-cwp currently
			</desc>
			<ssh target="ap1">
				-v "security-object in_cwp"
				-v "security-object in_cwp security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret} acct-port ${pub.radius1.acctport}"
				-v "security-object in_cwp security additional-auth-method captive-web-portal auth-user-profile-attr 1 timer-display"
				-v "security-object in_cwp default-user-profile-attr 1"
				-v "security-object in_cwp security additional-auth-method captive-web-portal external-server primary login-page http://${pub.ecwp1.ip}/weblogin.php/7"
				-v "security-object in_cwp walled-garden ip-address ${pub.ecwp1.ip}"
				-v "security-object in_cwp walled-garden ip-address ${tb.ftp} service all"
				-v "security-object in_cwp walled-garden ip-address ${pub.tftp1.tip}/31 service all"
				-v "security-object in_cwp walled-garden hostname ${pub.hm2.domain} service all"
			</ssh>
		</step>

		<step no="1.1">
			<desc>
				-config a ssid and bind it to interface
			</desc>
			<ssh target="ap1">
				-v "security-object in_cwp security additional-auth-method captive-web-portal failure-redirect login-page"
				-v "security-object in_cwp web-server"
				-v "security-object in_cwp security additional-auth-method captive-web-portal timer-display alert 10"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object in_cwp"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "user-profile auto qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "interface eth0 manage all"
			</ssh>
		</step>

		<step no="1.2">
			<desc>
				show interface wifi0
			</desc>
			<log-file>step1.2_show_interface.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi0"
			</ssh>
		</step>

		<step no="1.3">
			<desc>Get wifi0 mac</desc>
			<setvar name="ap1.wifi0.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step1.2_show_interface.log -i wifi0 -o aero -m -width
			</setvar>
		</step>

		<include prefix="2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="3">
			<desc>
				Show roaming cache
			</desc>
			<log-file>step3_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "YNNN"</log-match>
		</step>

		<step no="4">
			<desc>
				-download a file to tb's ftp which config in walled garden
			</desc>
			<log-file>step4_download_from_tbftp.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "tftp -v ${tb.ftp} -c get ${tb.ftp.file3_small} ${tftp.file.dir}/${tb.ftp.file3_small}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Received \d+ bytes in \W*\d+.\d+ seconds" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.1">
			<desc>
				-download a file to pub's tftp which config in walled garden
			</desc>
			<log-file>step4.1_upload_to_pubtftp.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "tftp -v ${pub.tftp1.tip} -c get default.zip ${tftp.file.dir}/default.zip"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Received \d+ bytes in \W*\d+.\d+ seconds" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.2">
			<desc>
				-download a file to dns1 which isn't config in walled garden
			</desc>
			<log-file>step4.2_download_from_hm1.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "tftp -v ${pub.dns1.ip} -c get ${job.id}test ${tftp.file.dir}/${job.id}test"
			</ssh>
			<log-match>-c -i "Transfer timed out"</log-match>
		</step>

		<step no="4.3">
			<desc>
				-download a file to hm2's domain which config in walled garden
			</desc>
			<log-file>step4.3_download_from_hm2_domain.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "tftp -v ${pub.hm2.domain} -c get ${job.sid}newfile ${tftp.file.dir}/${job.sid}newfile"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Received \d+ bytes in \W*\d+.\d+ seconds" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="4.4">
			<desc>
				-download a file to dns1's domain which isn't config in walled garden
			</desc>
			<log-file>step4.4_download_from_dns1_domain.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "tftp -v ${pub.dns1.domain1} -c get ${job.id}test ${tftp.file.dir}/${job.id}test"
			</ssh>
			<log-match>-c -i "Transfer timed out"</log-match>
		</step>

		<step no="4.5">
			<desc>
				-check the result of download (ps:p 5 means the large of file)
			</desc>
			<log-file>step4.5_check_files.log</log-file>
			<ssh target="sta1">
				-v "ll -n ${tftp.file.dir}/"
			</ssh>
			<log-match>-i "${tb.ftp.file3_small}"</log-match>
			<log-match>-n -i "${tb.ftp.file3_small}" -p 5 -i "0"</log-match>
			<log-match>-i "default.zip"</log-match>
			<log-match>-n -i "default.zip" -p 5 -i "0"</log-match>
			<log-match>-i "${job.sid}newfile"</log-match>
			<log-match>-n -i "${job.sid}newfile" -p 5 -i "0"</log-match>
			<log-match>-i "${job.id}test" -p 5 -i "0"</log-match>
		</step>

		<step no="4.6">
			<desc>
				-delete local files(download files)
			</desc>
			<ssh target="sta1">
				-v "rm -f ${tftp.file.dir}/${tb.ftp.file3_small}"
				-v "rm -f ${tftp.file.dir}/default.zip"
				-v "rm -f ${tftp.file.dir}/${job.sid}newfile"
				-v "rm -f ${tftp.file.dir}/${job.id}test"
			</ssh>
		</step>

		<step no="5">
			<desc>
				-ssh the ip (pub tftp server) which is configured in walled garden
			</desc>
			<log-file>step5_ssh_tftp1.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "clicfg.pl -i 22 -o 600 -d ${pub.tftp1.tip} -u ${pub.tftp1.username} -p ${pub.tftp1.passwd} -m \".*#\" -n -z ssh_pub_tftp.log -l ${temp.file.dir}/ -v \"ls\""; exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="5.1">
			<desc>
				-check the result of ssh.
			</desc>
			<log-file>step5.1_check_result.log</log-file>
			<ssh target="sta1">
				-v "cat ${temp.file.dir}/ssh_pub_tftp.log"
			</ssh>
			<log-match>-i "${pub.tftp1.username}@${pub.tftp1.tip}'s password:"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "${pub.tftp1.username}@${pub.tftp1.tip}'s password:" -ps p1 "Last login:" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Last login:" -ps p1 "ls" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.2">
			<desc>
				-ssh the ip (tb ftp server) which is configured in walled garden
			</desc>
			<log-file>step5.2_ssh_tb_ftp.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "clicfg.pl -i 22 -o 600 -d ${tb.ftp} -u ${tb.ftp.user} -p ${tb.ftp.passwd} -m \".*#\" -n -z ssh_tb_ftp.log -l ${temp.file.dir}/ -v \"ls\""; exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="5.3">
			<desc>
				-check the result of ssh.
			</desc>
			<log-file>step5.3_check_result.log</log-file>
			<ssh target="sta1">
				-v "cat ${temp.file.dir}/ssh_tb_ftp.log"
			</ssh>
			<log-match>-i "${tb.ftp.user}@${tb.ftp}'s password:"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "${tb.ftp.user}@${tb.ftp}'s password:" -ps p1 "Last login:" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Last login:" -ps p1 "ls" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.4">
			<desc>
				-ssh the ip (pub dns server) which isn't configured in walled garden
			</desc>
			<log-file>step5.4_ssh_hm1.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "ssh ${pub.dns1.ip}"
			</ssh>
			<log-match>-i "ssh: connect to host ${pub.dns1.ip} port 22: Connection timed out"</log-match>
		</step>

		<step no="5.5">
			<desc>
				-ssh the hostname (hm2) which is configured in walled garden
			</desc>
			<log-file>step5.5_ssh_hm2domain.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "clicfg.pl -i 22 -o 600 -d ${pub.hm2.domain} -u ${pub.hm2.username} -p ${pub.hm2.passwd} -m \".*#\" -n -z ssh_hm2_domain.log -l ${temp.file.dir}/ -v \"ls ${tftp.file.dir}/\""; exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="5.6">
			<desc>
				-check the result of ssh
			</desc>
			<log-file>step5.6_check_result.log</log-file>
			<ssh target="sta1">
				-v "cat ${temp.file.dir}/ssh_hm2_domain.log"
			</ssh>
			<log-match>-i "${pub.hm2.username}@${pub.hm2.domain}'s password:"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "${pub.hm2.username}@${pub.hm2.domain}'s password:" -ps p1 "Last login:" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Last login:" -ps p1 "ls" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="5.7">
			<desc>
				-ssh the hostname (pub dns server's domain)which isn't configured in walled garden
			</desc>
			<log-file>step5.7_ssh_dns1domain.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "ssh ${pub.dns1.domain1}"
			</ssh>
			<log-match>-i "ssh: connect to host ${pub.dns1.domain1} port 22: Connection timed out"</log-match>
		</step>

		<include prefix="6" file="subs/ldap_add.xml" args="${sta1.tif.mac}, ${sta1.tif.mac}" />

		<step no="6.1">
			<desc>
				-open debug mode and clear log all
				-config the format of aaa
			</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log all"
				-v "security-object in_cwp security additional-auth-method mac-based-auth"
				-v "aaa mac-format case-sensitivity lower-case"
				-v "aaa mac-format delimiter colon"
				-v "aaa mac-format style two-delimiter"
			</ssh>
		</step>

		<step no="7" delay="10" type="loop-check" loop-max-times="15" loop-interval="5">
			<desc>
				show logging buffered
			</desc>
			<log-file>step7_logging_buffered.log</log-file>
			<ssh target="ap1" timeout="500">
				-v "show logging buffered | include authentica"
			</ssh>
			<no-error-check />
			<log-match>-c -i "ah_auth: Station ${sta1.tif.mac} is authenticated to ${ap1.wifi0.mac} thru SSID ${ssid.name}"</log-match>
			<log-match>-c -i "ah_auth: authentication OK, username ${sta1.tif.mac}, service (unknown)"</log-match>
		</step>

		<step no="8">
			<desc>
				-download a file from tb's ftp which config in walled garden
			</desc>
			<log-file>step8_download_from_tbftp.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "tftp -v ${tb.ftp} -c get ${tb.ftp.file3_small} ${tftp.file.dir}/${tb.ftp.file3_small}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Received \d+ bytes in \d+.\d+ seconds" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="8.1">
			<desc>
				-download a file from pub's tftp which config in walled garden
			</desc>
			<log-file>step8.1_download_from_pubtftp.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "tftp -v ${pub.tftp1.tip} -c get default.zip ${tftp.file.dir}/default.zip"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Received \d+ bytes in \d+.\d+ seconds" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="8.2">
			<desc>
				-download a file from hm2's domain which config in walled garden
			</desc>
			<log-file>step8.2_download_from_hm2_domain.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "tftp -v ${pub.hm2.domain} -c get ${job.sid}newfile ${tftp.file.dir}/${job.sid}newfile"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Received \d+ bytes in \d+.\d+ seconds" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="8.3">
			<desc>
				-check the result of download
			</desc>
			<log-file>step8.3_check_files.log</log-file>
			<ssh target="sta1">
				-v "ll -n ${tftp.file.dir}/"
			</ssh>
			<log-match>-i "${tb.ftp.file3_small}"</log-match>
			<log-match>-n -i "${tb.ftp.file3_small}" -p 5 -i "0"</log-match>
			<log-match>-i "default.zip"</log-match>
			<log-match>-n -i "default.zip" -p 5 -i "0"</log-match>
			<log-match>-i "${job.sid}newfile"</log-match>
			<log-match>-n -i "${job.sid}newfile" -p 5 -i "0"</log-match>
		</step>

		<step no="9">
			<desc>
				-ssh the ip (pub tftp server) which is configured in walled garden
			</desc>
			<log-file>step9_ssh_tftp1.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "clicfg.pl -i 22 -o 600 -d ${pub.tftp1.tip} -u ${pub.tftp1.username} -p ${pub.tftp1.passwd} -m \".*#\" -n -z after_auth_ssh_pub_tftp.log -l ${temp.file.dir}/ -v \"ls\""; exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="9.1">
			<desc>
				-check the result of ssh
			</desc>
			<log-file>step9.1_check_result.log</log-file>
			<ssh target="sta1">
				-v "cat ${temp.file.dir}/after_auth_ssh_pub_tftp.log"
			</ssh>
			<log-match>-i "${pub.tftp1.username}@${pub.tftp1.tip}'s password:"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "${pub.tftp1.username}@${pub.tftp1.tip}'s password:" -ps p1 "Last login:" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Last login:" -ps p1 "ls" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="9.2">
			<desc>
				-ssh the ip (tb ftp server) which is configured in walled garden
			</desc>
			<log-file>step9.2_ssh_tb_ftp.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "clicfg.pl -i 22 -o 600 -d ${tb.ftp} -u ${tb.ftp.user} -p ${tb.ftp.passwd} -m \".*#\" -n -z after_auth_ssh_tb_ftp.log -l ${temp.file.dir}/ -v \"ls\""; exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="9.3">
			<desc>
				-check the result of ssh
			</desc>
			<log-file>step9.3_check_result.log</log-file>
			<ssh target="sta1">
				-v "cat ${temp.file.dir}/after_auth_ssh_tb_ftp.log"
			</ssh>
			<log-match>-i "${tb.ftp.user}@${tb.ftp}'s password:"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "${tb.ftp.user}@${tb.ftp}'s password:" -ps p1 "Last login:" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Last login:" -ps p1 "ls" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="9.4">
			<desc>
				-ssh the hostname (hm2's domain) which is configured in walled garden
			</desc>
			<log-file>step9.4_ssh_hm2domain.log</log-file>
			<ssh target="sta1" timeout="500">
				-v "clicfg.pl -i 22 -o 600 -d ${pub.hm2.domain} -u ${pub.hm2.username} -p ${pub.hm2.passwd} -m \".*#\" -n -z after_auth_ssh_hm2_domain.log -l ${temp.file.dir}/ -v \"ls ${tftp.file.dir}/\""; exit 0
			</ssh>
			<no-error-check />
		</step>

		<step no="9.5">
			<desc>
				-check the result of ssh
			</desc>
			<log-file>step9.5_check_result.log</log-file>
			<ssh target="sta1">
				-v "cat ${temp.file.dir}/after_auth_ssh_hm2_domain.log"
			</ssh>
			<log-match>-i "${pub.hm2.username}@${pub.hm2.domain}'s password:"</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "${pub.hm2.username}@${pub.hm2.domain}'s password:" -ps p1 "Last login:" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchblocks.py">-b "Last login:" -ps p1 "ls" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>

	<post-process>
		<stage>

			<include prefix="1.1" file="subs/ldap_delete.xml" args="${sta1.tif.mac}" />

			<step no="1.2">
				<desc>
					-delete remote dir
				</desc>
				<ssh host="${pub.dns1.domain1}">
					-v "rm -rf ${tftp.file.dir}"
				</ssh>
			</step>

			<step no="1.3">
				<desc>
					-delete remote file
				</desc>
				<ssh host="${pub.hm2.ip}" user="${pub.hm2.username}" password="${pub.hm2.passwd}">
					-v "rm -f ${tftp.file.dir}/${job.sid}newfile"
				</ssh>
			</step>

			<step no="1.4">
				<desc>
					-delete dir and delete local files
				</desc>
				<ssh target="sta1">
					-v "rm -f ${temp.file.dir}/ssh_pub_tftp.log"
					-v "rm -f ${temp.file.dir}/ssh_tb_ftp.log"
					-v "rm -f ${temp.file.dir}/ssh_hm2_domain.log"
					-v "rm -f ${temp.file.dir}/after_auth_ssh_pub_tftp.log"
					-v "rm -f ${temp.file.dir}/after_auth_ssh_tb_ftp.log"
					-v "rm -f ${temp.file.dir}/after_auth_ssh_hm2_domain.log"
					-v "rm -f ${tftp.file.dir}/${tb.ftp.file3_small}"
					-v "rm -f ${tftp.file.dir}/default.zip"
					-v "rm -f ${tftp.file.dir}/${job.sid}newfile"
					-v "rm -f ${tftp.file.dir}/${job.id}test"
					-v "rm -rf ${tftp.file.dir}"
				</ssh>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>