<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>MAC bypass-cwp successfully, then station roams from AP1 to AP2</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
	1.	Configure MAC Based Auth  and Passthrough CWP auth methods on AP1 and AP2
	2.	Bind the mac-object to security-object’s mac-white-list, and enable the bypass-cwp function on AP1 and AP2
	3.	STA1 connects to AP1’s wifi interface, result 1 
	4.	STA1 roams to AP2, result 2 


	Expect result:
	1.	STA1 associate to AP1. After pass MBA successfully, the station could access the internet, which have bypassed the CWP auth method.
	2.	Check the roaming process is correct on AP1 and AP2.

	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	
	<property name="url" value="http://www.google.com.hk" />
	<property name="selenium_path" value="/root/selenium-server-standalone-2.42.2.jar" />
	
	<property name="UPID_X" value="1000" />
	<property name="VLANID_X" value="${tb.vlan2}" />
	
	<property name="Web_Page" value="https://10.155.39.202" />
	
	
	<stage>	
	
		<step no="0.1">
			<desc>get sta1's mac </desc>
			<setvar name="sta1.auth_mac">
				echo "${sta1.tif.smac}" | tr '[A-Z]' '[a-z]'
			</setvar>
		</step>
		
		<!-- config account(username and password) on radius server -->
		<include prefix="0.2" file="subs/ldap_add.xml" args="${sta1.auth_mac}, ${sta1.auth_mac}" />
		
	
	    <!--   *************  configure  on    AP1   ***************   -->
		
		<step no="1">
			<desc>config mac-auth , cwp , user-profile and ssid on AP1</desc>
			<ssh target="ap1">
					-v "security-object auto-cwp"
					-v "security-object auto-cwp security additional-auth-method mac-based-auth"
					-v "security-object auto-cwp security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
					-v "security-object auto-cwp security aaa radius-server accounting primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
					
					
					-v "web-directory open+cwp"
					-v "save web-page web-directory open+cwp tftp://10.155.81.20:zyj-cwp/cwp_use_policy.tar.gz"
					-v "security-object auto-cwp security additional-auth-method captive-web-portal reg-user-profile-attr ${UPID_X}"
					-v "security-object auto-cwp security additional-auth-method captive-web-portal default-language english"
					-v "security-object auto-cwp web-server web-page mandatory-field 0 optional-field 0"
					-v "security-object auto-cwp web-directory open+cwp"
					-v "security-object auto-cwp web-server index-file eula.html"
			        
			        -v "security-object auto-cwp default-user-profile-attr ${UPID_X} "
			        -v "user-profile auto-cwp qos-policy def-user-qos vlan-id ${VLANID_X} attribute ${UPID_X}"
					
					-v "ssid ${ssid.name}"
					-v "ssid ${ssid.name} security-object auto-cwp"
					-v "int wifi0 ssid ${ssid.name}"
					-v "no interface wifi0 ssid ${ssid.name} shut"
					-v "interface wifi0 radio channel 11" 
					
					-v "hive ${hive.name}"
					-v "interface mgt0 hive ${hive.name}"
				
					-v "save config"
			</ssh>
		</step>
		
		<step no="2">
			<desc>enable mac-white-list bypass-cwp on AP1</desc>
			<ssh target="ap1">
				-v "mac-object auto-cwp mac-range ${sta1.tif.smac} - ${sta1.tif.smac}"
				-v "security-object auto-cwp security mac-white-list mac-object auto-cwp"
				-v "security-object auto-cwp security mac-white-list bypass-cwp"
			</ssh>
		</step>
		
		
		<step no="3">
			<desc>show security-object to make sure cwp and mac bypass-cwp is enable.</desc>
			<log-file>show_security-object_ap1.log</log-file>
			<ssh target="ap1">
				-v "show security-object auto-cwp"
			</ssh>
			<log-match>-c -i "Protocol suite:\s+open" -re</log-match>
			<log-match>-c -i "MAC-based auth:\s+Enabled" -re</log-match>
			<log-match>-c -i "Captive Web Portal:\s+Enabled" -re</log-match>
			<log-match>-c -i "Mac bypass for CWP:\s+Enabled" -re</log-match>
		</step>
		
		
		    <!--   *************  configure  on    AP2   ***************   -->
		
		<step no="4">
			<desc>config mac-auth , cwp , user-profile and ssid on AP1</desc>
			<ssh target="ap2">
					-v "security-object auto-cwp"
					-v "security-object auto-cwp security additional-auth-method mac-based-auth"
					-v "security-object auto-cwp security aaa radius primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
					-v "security-object auto-cwp security aaa radius-server accounting primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
					
					
					-v "web-directory open+cwp"
					-v "save web-page web-directory open+cwp tftp://10.155.81.20:zyj-cwp/cwp_use_policy.tar.gz"
					-v "security-object auto-cwp security additional-auth-method captive-web-portal reg-user-profile-attr ${UPID_X}"
					-v "security-object auto-cwp security additional-auth-method captive-web-portal default-language english"
					-v "security-object auto-cwp web-server web-page mandatory-field 0 optional-field 0"
					-v "security-object auto-cwp web-directory open+cwp"
					-v "security-object auto-cwp web-server index-file eula.html"
			        
			        -v "security-object auto-cwp default-user-profile-attr ${UPID_X} "
			        -v "user-profile auto-cwp qos-policy def-user-qos vlan-id ${VLANID_X} attribute ${UPID_X}"
					
					-v "ssid ${ssid.name}"
					-v "ssid ${ssid.name} security-object auto-cwp"
					-v "int wifi0 ssid ${ssid.name}"
					-v "no interface wifi0 ssid ${ssid.name} shut"
					-v "interface wifi0 radio channel 11" 
					
					-v "hive ${hive.name}"
					-v "interface mgt0 hive ${hive.name}"
				
					-v "save config"
			</ssh>
		</step>
		
		<step no="5">
			<desc>enable mac-white-list bypass-cwp on AP1</desc>
			<ssh target="ap2">
				-v "mac-object auto-cwp mac-range ${sta1.tif.smac} - ${sta1.tif.smac}"
				-v "security-object auto-cwp security mac-white-list mac-object auto-cwp"
				-v "security-object auto-cwp security mac-white-list bypass-cwp"
			</ssh>
		</step>
		
		
		<step no="6">
			<desc>show security-object to make sure cwp and mac bypass-cwp is enable.</desc>
			<log-file>show_security-object_ap2.log</log-file>
			<ssh target="ap2">
				-v "show security-object auto-cwp"
			</ssh>
			<log-match>-c -i "Protocol suite:\s+open" -re</log-match>
			<log-match>-c -i "MAC-based auth:\s+Enabled" -re</log-match>
			<log-match>-c -i "Captive Web Portal:\s+Enabled" -re</log-match>
			<log-match>-c -i "Mac bypass for CWP:\s+Enabled" -re</log-match>
		</step>
		
		
		<step no="CheckAP1RoamingNeighbor1" loop-interval="10" loop-max-times="3" type="loop-check">
			<desc>show roaming neighbor on ap1</desc>
			<log-file>show_roaming_neighbor1_ap1_${loop_check.idx}.log</log-file>
			<ssh target="ap1" timeout="180"> 
				-v "show roaming neighbor"
			</ssh>
			<log-match>-i "${ap2.mgt0.ip}" -i "${ap2.mgt0.mac}" -p 4 -i "D" -c </log-match>
		</step>
		
		<step no="CheckAP2RoamingNeighbor2" loop-interval="10" loop-max-times="3" type="loop-check">
			<desc>show roaming neighbor on ap2</desc>
			<log-file>show_roaming_neighbor2_ap2_${loop_check.idx}.log</log-file>
			<ssh target="ap2" timeout="180"> 
				-v "show roaming neighbor"
			</ssh>
			<log-match>-i "${ap1.mgt0.ip}" -i "${ap1.mgt0.mac}" -p 4 -i "D" -c </log-match>
		</step>
		
		
		
		
		<!-- *********************************** sta1 connect to AP1 ******************************************** -->
		
		<step no="int wifi0 ssid XXX shut on AP2">
			<ssh target="ap2" timeout="180"> 
				-v "interface wifi0 ssid ${ssid.name} shut"
			</ssh>
		</step>
		
			
		<step no="7">
			<desc>open debug on AP1</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log buffer"
			</ssh>
		</step>
		
		<step no="8">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=open"
				echo "conn1.pif=wifi0"
			</multi-setvar>
		</step>
		
		<include prefix="9" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
		<step no="show station and roaming cache">
			<desc>show station and check the client's UPID is UPID_X</desc>
			<log-file>show_station_ap1.log</log-file>		
			<ssh target="ap1">
				-v "show ssid ${ssid.name} station"
				-v "show roaming  cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${UPID_X}" -re</log-match>
			<log-match>-c -i "${sta1.tif.mac}" -i "YNNN" -re</log-match>
		</step>
		
		

		<!-- ************* check 1 :  mac bypass-cwp is successful *******************-->
		<step no="10">
			<desc>show log buffer to check</desc>
			<log-file>step10_show_log.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<log-match>-c -i "match station's mac ${sta1.tif.mac} in mac-white-list successfully" -re</log-match>
			<log-match>-c -i "Notify FE Completed\(4\) ${sta1.tif.mac}" -re</log-match>
		</step>
		
		
		
		<!-- **************************** check 2 :  STA roams to AP2 , Check the roaming is correct *************************  -->
		
		<step no="11">
			<desc>open debug on AP1</desc>
			<ssh target="ap2">
				-v "_debug auth all"
				-v "clear log buffer"
			</ssh>
		</step>
		
		<step no="no int wifi0 ssid XXX shut on AP2">
			<ssh target="ap2"> 
				-v "no interface wifi0 ssid ${ssid.name} shut"
			</ssh>
		</step>
		
		<step no="12" delay="5">
			<desc>STA roams to AP2</desc>
			<ssh target="ap1">
				-v "interface  wifi0 ssid ${ssid.name} shut"
			</ssh>
		</step>
		
		<step no="13" delay="5">
			<desc>show station and check  on AP2</desc>
			<log-file>show_station_ap2.log</log-file>		
			<ssh target="ap2">
				-v "show ssid ${ssid.name} station"
				-v "show roaming  cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac} *${sta1.tif.ip}" -i "${UPID_X}"</log-match>
			<log-match>-c -i "${sta1.tif.mac}" -i "0" -i "YNNN"</log-match>
		</step>
		
		
		<step no="14">
			<desc>show log buffer to check</desc>
			<log-file>step14_show_log.log</log-file>
			<ssh target="ap2">
				-v "show log buffer"
			</ssh>
			<log-match>-c -i "station ${sta1.tif.mac} passed MAC bypass before" -re</log-match>

		</step>
		
		
			
		<!-- **************check 3 :  When user try to open a page, the station bypass CWP auth method and could access the internet successfully.*****-->
		<step no="15">
			<desc>When user try to open a page, the station bypass CWP auth method and could access the internet successfully.</desc>
			<log-file>station_webpage.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "route add 10.155.39.202/32 gw ${tb.vlan2.gw} dev ${sta1.tif.name}"
				-v "curl -k -v -L ${Web_Page}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Host: 10.155.39.202" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Accept: */*" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Connection #0 to host .* left intact" -f ${log.dir}/${log.file}</log-match>
		</step>	
		
		
		
		<!--*********************  clear configuration ***********************-->
		<step no="16">
			<desc>clear configuration</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "route del 10.155.39.202/32 gw ${tb.vlan2.gw} dev ${sta1.tif.name}"
				
			</ssh>
		</step>	
		
	</stage>
</testcase>
		
		
		
	