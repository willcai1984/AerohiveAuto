<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Auth user accesses successfully through http in topo5</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1:Configure passthrough(authentication type) CWP on ap
		2:Client requests a web page, result 1
		3:Client enters a valid username and password, result 2

	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="hostname" value="hztb-ip2" />
	<property name="hostname_ip" value="192.168.10.254" />

	<stage>
	  <step no="0.1">
             <desc>
                    start selenium server
             </desc>
             <ssh target="sta1">
                    -v "export DISPLAY=:1"
                    -v "nohup java -jar selenium-server-standalone-2.42.2.jar 1>logfile.log 2>&amp;1 &amp;"
             </ssh>
       </step>

       <step no="0.2">
             <desc>
                     start selenium server
             </desc>
             <ssh target="sta1">
                     -v "printenv"
             </ssh>
        </step>
	
		<step no="1">
			<desc>
				1: Configure authentication type CWP (passthrough/e-cwp) on ap
			</desc>
			<telnet target="ap1">
				-v "security-object auto-cwp"
				-v "security-object auto-cwp security aaa radius-server primary ${pub.radius2.ip} shared-secret ${pub.radius1.sharesecret}" 
				-v "security-object auto-cwp security aaa radius-server accounting primary ${pub.radius2.ip} shared-secret ${pub.radius1.sharesecret}" 
				-v "security-object auto-cwp security additional-auth-method captive-web-portal auth-user-profile-attr  1" 
				-v "security-object auto-cwp web-server" 
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object auto-cwp"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "interface wifi1 ssid ${ssid.name}"
				-v "user-profile 1 qos-policy def-user-qos vlan-id 1 attribute 1"
			</telnet>
		</step>

  <step no="1.1">
                            <desc>
                                     show interface wifi0 info
                            </desc>
                            <log-file>step1.1_show_interface_wifi0_info.log</log-file>
                            <ssh target="ap1" timeout="180">
                                     -v "show interface wifi0"
                            </ssh>
                   </step>

                   <step no="1.2">
                            <desc>Get ap1's wifi0â€˜s mac</desc>
                            <setvar name="ap1.wifi0.mac">
                                     perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step1.1_show_interface_wifi0_info.log -i wifi0 -o aero -m -width
                            </setvar>
                   </step>

                   <step no="1.3">
                            <desc>
                                     open debug mode and clear log all
                            </desc>
                            <ssh target="ap1">
                                     -v "_debug cgic basic"
                                     -v "clear log all"
                            </ssh>
                   </step>


                   <step no="2.1">
                            <multi-setvar>
                                     echo "conn1.ssid=${ssid.name}"
                                     echo "conn1.proto=open"
                                     echo "conn1.pif=${ssid_bind_interface}"
                            </multi-setvar>
                   </step>
                   <include prefix="2.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />

		<step no="6">
			<desc>
				client request a web page and get login page,input correct username and password
			</desc>
			<log-file>cwp_ft_pass_1_log_in.html</log-file>
			<script> export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/webui/scripts/cwp/cwp_login_positive.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters visit.url=${pub.hm2.ip} login.username=${pub.radius1.username} login.password=${pub.radius1.passwd} -t ff -f ${log.dir}/${log.file} -l info --preserve-session > ${log.dir}/session_id.log </script>
		</step>
		<step no="7">
			<desc>Show interface on laptop after authentication</desc>
			<log-file>step7_show_ip.log</log-file>
			<staf target="sta1">
				-v "ipconfig /all"
			</staf>
		</step>

		<step no="7.1">
			<desc>Get laptop1's ip after authentication</desc>
			<setvar name="sta1.tif.ip.auth">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step7_show_ip.log -i ${sta1.tif.name} -o win -nomask
			</setvar>
		</step>

		<step no="8">
			<desc>
				show auth
			</desc>
			<log-file>step8_show_auth.log</log-file>
			<telnet target="ap1">
				-v "show auth"
			</telnet>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}\s*wifi0.1\s*04\s*${sta1.tif.ip.auth}"</log-match>
		</step>

		<step no="9">
			<desc>
				show roam cache
			</desc>
			<log-file>step9_show_roam.log</log-file>
			<telnet target="ap1">
				-v "show roam cache"
			</telnet>
			<no-error-check />
			<log-match>-c -i "${sta1.tif.mac}" -i "YYNN"</log-match>
		</step>

		<step no="9.1">
			<desc>
				show logging buffered
			</desc>
			<log-file>step9.1_show_logging_buffered.log</log-file>
			<telnet target="ap1" timeout="500">
				-v "show logging buffered" ; exit 0
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-b "User Type=Employee User Name=${pub.radius1.username} Password=" -p "authentication OK, username ${pub.radius1.username}, service \(unknown\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-b "User Type=Employee User Name=${pub.radius1.username} Password=" -p "(?i)A CWP user registered from interface wifi0.1: MAC=${sta1.tif.mac}, IP=${sta1.tif.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-b "User Type=Employee User Name=${pub.radius1.username} Password=" -p "(?i)DHCP: Sent a DHCP ACK message assigning IP address ${sta1.tif.ip} to client ${sta1.tif.mac}" -f ${log.dir}/${log.file}</log-match>
		</step>

	</stage>
</testcase>
