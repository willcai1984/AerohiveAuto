<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>MAC bypass Passthrough CWP successfully</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
	1.	Configure open auth method  and Passthrough CWP on AP1.
	2.	Creat a mac-object, STA1’s mac is included in.
	3.	Bind the mac-object to security-object’s mac-white-list, and enable the bypass-cwp function
	4.	STA1 connects to AP1’s wifi interface, result 1 
	5.  Add mac-arrange about the same mac-object,result 2 
	
	Expect result:
	1.	STA1 associate to AP1. When user try to open a page, the station bypass CWP auth method and could access the internet successfully.
	2.	STA1 will not be disconnected by AP1. 
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	
	<property name="url" value="http://www.google.com.hk" />
	<property name="selenium_path" value="/root/selenium-server-standalone-2.42.2.jar" />
	
	<property name="UPID_X" value="1000" />
	<property name="UPID_Y" value="2000" />
	<property name="VLANID_X" value="${tb.vlan2}" />
	<property name="VLANID_Y" value="${tb.vlan3}" />
	
	<property name="Web_Page" value="https://10.155.39.202" />
	
	

	<stage>	
		<step no="1">
			<desc>config open-auth , cwp , user-profile and ssid on AP1</desc>
			<ssh target="ap1">
					-v "security-object auto-cwp"
					-v "web-directory open+cwp"
					-v "save web-page web-directory open+cwp tftp://10.155.81.20:zyj-cwp/cwp_use_policy.tar.gz"
					-v "security-object auto-cwp security additional-auth-method captive-web-portal reg-user-profile-attr 1"
					-v "security-object auto-cwp security additional-auth-method captive-web-portal default-language english"
					-v "security-object auto-cwp web-server web-page mandatory-field 0 optional-field 0"
					-v "security-object auto-cwp web-directory open+cwp"
					-v "security-object auto-cwp web-server index-file eula.html"
			        
			        -v "security-object auto-cwp default-user-profile-attr ${UPID_X} "
			        -v "user-profile auto-cwp qos-policy def-user-qos vlan-id ${VLANID_X} attribute ${UPID_X}"
					
					-v "ssid ${ssid.name}"
					-v "ssid ${ssid.name} security-object auto-cwp"
					-v "int wifi0 ssid ${ssid.name}"
					
					-v "hive ${hive.name}"
					-v "interface mgt0 hive ${hive.name}"
				
					-v "save config"
			</ssh>
		</step>
		
		<step no="2">
			<desc>enable mac-white-list bypass-cwp on AP1</desc>
			<ssh target="ap1">
				-v "mac-object auto-cwp mac-range ${sta1.tif.smac} - ${sta1.tif.smac}"
				-v "security-object auto-cwp security mac-white-list mac-object auto-cwp"
				-v "security-object auto-cwp security mac-white-list bypass-cwp"
			</ssh>
		</step>
		
		
		<step no="3">
			<desc>show security-object to make sure cwp and mac bypass-cwp is enable.</desc>
			<log-file>show_security-object.log</log-file>
			<ssh target="ap1">
				-v "show security-object auto-cwp"
			</ssh>
			<log-match>-c -i "Protocol suite:\s+open" -re</log-match>
			<log-match>-c -i "Captive Web Portal:\s+Enabled" -re</log-match>
			<log-match>-c -i "Mac bypass for CWP:\s+Enabled" -re</log-match>
		</step>
		
		<step no="4">
			<desc>open debug on AP1</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear auth roaming-cache "
				-v "clear log buffer"
			</ssh>
		</step>
		
		<step no="5">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=open"
				echo "conn1.pif=wifi0"
			</multi-setvar>
		</step>
		
		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
		
		<step no="7">
			<desc>show roaming cache to check</desc>
			<log-file>step7_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "YNNN" -re</log-match>
		</step>
		
		
		<!-- ************* check 1 :  mac bypass-cwp is successful *******************-->
		<step no="8">
			<desc>show log buffer to check</desc>
			<log-file>step8_show_log.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<log-match>-c -i "match station's mac ${sta1.tif.mac} in mac-white-list successfully" -re</log-match>
			<log-match>-c -i "Notify FE Completed\(4\) ${sta1.tif.mac}" -re</log-match>
		</step>

	
		
		<!-- **************check 2 :  When user try to open a page, the station bypass CWP auth method and could access the internet successfully.*****-->
		<step no="9">
			<desc>When user try to open a page, the station bypass CWP auth method and could access the internet successfully.</desc>
			<log-file>station_webpage.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "route add 10.155.39.202/32 gw ${tb.vlan2.gw} dev ${sta1.tif.name}"
				-v "curl -k -v -L ${Web_Page}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Host: 10.155.39.202" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Accept: */*" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Connection #0 to host .* left intact" -f ${log.dir}/${log.file}</log-match>
		</step>	
		
	
	
	
		<!-- *************check 3 :  Add mac-arrange about the same mac-object, STA1 will not be disconnected by AP1. ****-->
		<step no="show intface on wifi0">
			<desc>show intface on wifi0</desc>
			<log-file>show_interface.log</log-file>
			<telnet target="ap1">
				-v "show interface wifi0.1"
			</telnet>
		</step>
		
		<step no="get mac from bssid of wifi0.1">
			<desc>get mac from bssid of wifi0.1</desc>
			<setvar name="ap.wifi0.bssid">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_interface.log -o aero -i wifi0.1 -m -width
			</setvar>
		</step>
		
		<step no="10">
			<desc>open debug on AP1</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log buffer"
			</ssh>
		</step>
	
				
		<step no="11">
			<desc>Add mac-arrange about the same mac-object</desc>
			<ssh target="ap1">
				-v "mac-object auto-cwp mac-range 0000:0000:0001 - 0000:0000:000a"
			</ssh>
		</step>
		
		<step no="12">
			<desc>show log buffer to check</desc>
			<log-file>step12_show_log.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<log-match>-c -n -i "Try to deauth all stations from ${ap.wifi0.bssid}.* for ssid ${ssid.name}" -re</log-match>
		</step>
		
		
	
		<!--*********************  clear configuration ***********************-->
		<step no="13">
			<desc>clear configuration</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "route del 10.155.39.202/32 gw ${tb.vlan2.gw} dev ${sta1.tif.name}"
				
			</ssh>
		</step>	
		
	</stage>	
</testcase>
		
		
		