<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>PPSK + CWP,Then MAC bypass-cwp successfully</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		1.	Configure ppsk auth method  and Passthrough CWP on AP1.
		2.	Creat a mac-object, STA1’s mac is included in.
		3.	Bind the mac-object to security-object’s mac-white-list, and enable the bypass-cwp function
		4.	STA1 connects to AP1’s wifi interface, result 1 
		5.  delete  mac-arrange about the same mac-object,result 2 
	
		Expect result:
		1.	STA1 associate to AP1. When user try to open a page, the station bypass CWP auth method and could access the internet successfully.
		2.	STA1 will be disconnected by AP1. The next authentication needs pass CWP auth method.
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	
	<property name="url" value="http://www.google.com.hk" />
	<property name="selenium_path" value="/root/selenium-server-standalone-2.42.2.jar" />
	
	<property name="UPID_X" value="1000" />
	<property name="VLANID_X" value="${tb.vlan2}" />
	
	<property name="Web_Page" value="https://10.155.39.202" />
	<property name="ppsk_pwd" value="Aerohive123" />
	
	<stage>	
	
		<step no="0.1">
			<desc>start selenium server</desc>
			<ssh target="sta1">
				-v "export DISPLAY=:1"
				-v "nohup java -jar ${selenium_path} 1>logfile.log 2>&amp;1 &amp;"
			</ssh>
		</step>
		
		<step no="0.2">
			<desc>start selenium server</desc>
			<ssh target="sta1">
				-v "printenv"
			</ssh>
		</step>
		
		<step no="1.1">
			<desc>config open-auth , cwp , user-profile and ssid on AP1</desc>
			<ssh target="ap1">
					
					-v "security-object auto-cwp"
					-v "web-directory ppsk-cwp"
					-v "save web-page web-directory ppsk-cwp tftp://10.155.81.20:zyj-cwp/cwp_use_policy.tar.gz"
				
					-v "security-object auto-cwp security protocol-suite wpa2-aes-psk ascii-key aerohive"
					-v "security-object auto-cwp security additional-auth-method captive-web-portal reg-user-profile-attr ${UPID_X} "
					-v "security-object auto-cwp security private-psk"
					-v "no security-object auto-cwp security private-psk self-reg-enable"
					-v "no security-object auto-cwp security private-psk default-psk-disabled"
					-v "security-object auto-cwp default-user-profile-attr ${UPID_X}"
					-v "security-object auto-cwp security additional-auth-method captive-web-portal default-language english"
					-v "security-object auto-cwp web-server web-page mandatory-field 0 optional-field 0"
					-v "security-object auto-cwp web-server index-file eula.html "
					-v "security-object auto-cwp web-directory ppsk-cwp"
					
			        -v "user-profile auto-cwp qos-policy def-user-qos vlan-id ${VLANID_X} attribute ${UPID_X}"
					
					-v "ssid ${ssid.name}"
					-v "ssid ${ssid.name} security-object auto-cwp"
					-v "int wifi0 ssid ${ssid.name}"
					
					-v "hive ${hive.name}"
					-v "interface mgt0 hive ${hive.name}"
				
			</ssh>
		</step>
		
		<step no="1.2">
            <desc>config  user group on AP1</desc>
            <ssh target="ap1">
            	-v "user-group group-cwp"
				-v "user-group group-cwp password-generation-method  manual "
				<!-- -v "user-profile ttt vlan-id 1 attribute 1" -->	
				-v "user test_01"
				-v "user test_01 password ${ppsk_pwd}"
				-v "user test_01 group  group-cwp"
				-v "ssid ${ssid.name} user-group group-cwp"
				-v "save config"
            </ssh>
        </step>
        
        <step no="1.3">
        	<desc>check users generate</desc>
        	<log-file>show_user.log</log-file>
        	<ssh target="ap1">
        		-v "show user"
        	</ssh>
        	<log-match>-c -i "test_01"</log-match>
        </step>
		
		
		<step no="2">
			<desc>enable mac-white-list bypass-cwp on AP1</desc>
			<ssh target="ap1">
				-v "mac-object auto-cwp mac-range ${sta1.tif.smac} - ${sta1.tif.smac}"
				-v "security-object auto-cwp security mac-white-list mac-object auto-cwp"
				-v "security-object auto-cwp security mac-white-list bypass-cwp"
			</ssh>
		</step>
		
		
		<step no="3">
			<desc>show security-object to make sure cwp and mac bypass-cwp is enable.</desc>
			<log-file>step3_show_security-object.log</log-file>
			<ssh target="ap1">
				-v "show security-object auto-cwp"
			</ssh>
			<log-match>-c -i "Protocol suite:\s+wpa2-aes-psk" -re</log-match>
			<log-match>-c -i "Captive Web Portal:\s+Enabled" -re</log-match>
			<log-match>-c -i "Private-PSK:\s+Enabled" -re</log-match>
			<log-match>-c -i "Mac bypass for CWP:\s+Enabled" -re</log-match>
		</step>
		
		<step no="4">
			<desc>open debug on AP1</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log buffer"
			</ssh>
		</step>
		
		<step no="5">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=wpa2-aes-psk"
				echo "conn1.psk.keytype=ascii"
				echo "conn1.psk=${ppsk_pwd}"
				echo "conn1.pif=wifi0"
								
			</multi-setvar>
		</step>
		
		<include prefix="6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
		
		<step no="7">
			<desc>show roaming cache to check</desc>
			<log-file>step7_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "YNNN" -re</log-match>
		</step>
		
		
		<!-- ************* check 1 :  mac bypass-cwp is successful *******************-->
		<step no="8">
			<desc>show log buffer to check</desc>
			<log-file>step8_show_log.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<log-match>-c -i "match station's mac ${sta1.tif.mac} in mac-white-list successfully" -re</log-match>
			<log-match>-c -i "Notify FE Completed\(4\) ${sta1.tif.mac}" -re</log-match>
		</step>
		
		
		
		
		<!-- **************check 2 :  When user try to open a page, the station bypass CWP auth method and could access the internet successfully.*****-->
		<step no="9">
			<desc>When user try to open a page, the station bypass CWP auth method and could access the internet successfully.</desc>
			<log-file>station_webpage.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "route add 10.155.39.202/32 gw ${tb.vlan2.gw} dev ${sta1.tif.name}"
				-v "curl -k -v -L ${Web_Page}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Host: 10.155.39.202" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Accept: */*" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)Connection #0 to host .* left intact" -f ${log.dir}/${log.file}</log-match>
		</step>	
		
			
		<!-- *************check 3 :  Del the  mac-arrange about the same mac-object, STA1 will be disconnected by AP1. ****-->
		<step no="show intface on wifi0">
			<desc>show intface on wifi0</desc>
			<log-file>show_interface.log</log-file>
			<ssh target="ap1">
				-v "show interface wifi0.1"
			</ssh>
		</step>
		
		<step no="get mac from bssid of wifi0.1">
			<desc>get mac from bssid of wifi0.1</desc>
			<setvar name="ap.wifi0.bssid">
				${bin.dir}/getrmtip.pl -f ${log.dir}/show_interface.log -o aero -i wifi0.1 -m -width
			</setvar>
		</step>
		
		<step no="10">
			<desc>open debug on AP1</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log buffer"
			</ssh>
		</step>
	
				
		<step no="11">
			<desc>delete the  mac-arrange about the same mac-object</desc>
			<ssh target="ap1">
				-v "no mac-object auto-cwp mac-range ${sta1.tif.smac} - ${sta1.tif.smac}"
			</ssh>
		</step>
		
		<step no="12">
			<desc>show log buffer to check</desc>
			<log-file>step12_show_log.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<log-match>-c -i "Try to deauth all stations from ${ap.wifi0.bssid}.* for ssid ${ssid.name}" -re</log-match>
		</step>
		
		
		<!-- *************check 4 :  next authentication needs pass CWP auth method.***************-->
				
		<step no="13">
			<desc>open debug on AP1</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log buffer"
			</ssh>
		</step>
		
		<include prefix="14" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
		<step no="15">
			<desc>show roaming cache to check</desc>
			<log-file>step15_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "YNNN" -re</log-match>
		</step>
		
		<step no="16">
			<desc>show log buffer to check</desc>
			<log-file>step16_show_log.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<log-match>-c -i "Can't find station's mac ${sta1.tif.mac} from mac-white-list" -re</log-match>
			<log-match>-c -i "Notify FE Completed\(1\) ${sta1.tif.mac}" -re</log-match>
		</step>
		
		
		<!-- ******************** check 5 : cwp is fuctional ***********************-->
					
		<step no="17">
			<desc>open debug on AP1</desc>
			<ssh target="ap1">
				-v "_debug auth all"
				-v "clear log buffer"
			</ssh>
		</step>
		
		
		
		<step no="18">
			<desc>access public HM through CWP</desc>
			<log-file>cwp_login_in.html</log-file>
			<script>
				export PYTHONPATH=${auto.root.dir}; python ${auto.root.dir}/AerohiveGUI/scripts/cwp/cwp_login.py -r http://${sta1.mif.ip}:4444/wd/hub --parameters login.mode=accept visit.url=${url}  -t ff -l info -f ${log.dir}/${log.file}
			</script>
		</step>
		
		<step no="19">
			<desc>show log buffer to check</desc>
			<log-file>step19_show_log.log</log-file>
			<ssh target="ap1">
				-v "show log buffer"
			</ssh>
			<log-match>-c -i "CWP passed, .* notify FE Completed.* ${sta1.tif.mac}" -re</log-match>
		</step>
		
		<step no="20">
			<desc>show roaming cache</desc>
			<log-file>step20_show_roaming_cache.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache"
			</ssh>
			<log-match>-c -i "${sta1.tif.mac}" -i "YYNN" -re</log-match>
		</step>
		
		<step no="21">			
			<desc>show roaming cache mac xxx</desc>
			<log-file>step21_show_roaming_cache_mac.log</log-file>
			<ssh target="ap1">
				-v "show roaming cache mac ${sta1.tif.mac}"
			</ssh>
			<log-match>-c -i "CWP flag: set"</log-match>
		</step>
		
		<step no="22">
			<desc>Ping from station to master Server </desc>
			<log-file>pingmaster_${mpc.tif.ip}.log</log-file>
			<ssh target="sta1">
				-v "ping ${mpc.tif.ip} -I wlan0 -c 4"
			</ssh>
			<log-match>-i "from ${mpc.tif.ip}" -i "ttl="</log-match>
		</step>
		
		
		<!--****************************  clear configuration ***********************************-->
		<step no="23">
			<desc>clear configuration</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "route del 10.155.39.202/32 gw ${tb.vlan2.gw} dev ${sta1.tif.name}"
				
			</ssh>
		</step>	
		
	</stage>
</testcase>
		
		
		
	
