<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that the relation between DHCP server and Tunnel.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Test procedure
		1. Broadcast DHCP packets can be passed by tunnel and DHCP
		server will distribute the ip-address for the client when reply packet
		is broadcast and dhcp server is in mgt0.(notice FE deal with).
		2. Repeat the 1 step but the dhcp server is in mgt0.x
		3. DHCP Request packets that are broadcast can be passed by tunnel
		and DHCP server will distribute the ip-address for the client when
		reply packet is unicast and dhcp server is in mgt0.(notice FE deal
		with).
		4. Repeat the 3 step but the dhcp server is in mgt0.x
		5. DHCP Request packets that are unicast can be passed by tunnel
		and DHCP server will distribute the ip-address for the client when
		reply packet is unicast and dhcp server is in mgt0.(notice FE deal
		with).
		6. Repeat the 5 step but the dhcp server is in mgt0.x
		7. Verify that when dhcp reply packet can be transmitted by tunnel
		correctly.

		Test Procedure:
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<property name="dhcp_start_1" value="192.168.${tb.vlan4}.10" />
	<property name="dhcp_end_1" value="192.168.${tb.vlan4}.15" />
	<property name="def_gw_1" value="192.168.${tb.vlan4}.254" />

	<stage>
		<include prefix="0" file="subs/l2swcfg_port_newvlan.xml" args="${ap1.eth0.swport}, ${tb.vlan4}" />
		<include prefix="0.1" file="subs/l2swcfg_port_newvlan.xml" args="${ap2.eth0.swport}, ${tb.vlan4}" />

		<step no="1">
			<desc>
				Broadcast DHCP packets can be passed by tunnel and DHCP
				server will distribute the ip-address for the client when reply packet
				is broadcast and dhcp server is in mgt0.(notice FE deal with).
			</desc>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "ip route default gateway ${ap1.mgt0.gw}"
				-v "interface mgt0 ip ${tb.vlan1.dhcp_start}/24"
				-v "interface mgt0 dhcp-server ip-pool ${tb.vlan1.dhcp_start} ${tb.vlan1.dhcp_end}"
				-v "interface mgt0 dhcp-server options lease-time 120"
				-v "interface mgt0 dhcp-server enable"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</console>
		</step>

		<step no="1.1">
			<desc>
				set ap mgt0 ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				echo ${tb.vlan1.dhcp_start}
			</setvar>
		</step>

		<step no="1.2">
			<desc>
				set ap2 mgt0 vlan
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan2}"
			</console>
		</step>

		<step no="1.3" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check the ap2 mgt0 ip address
			</desc>
			<log-file>step1.3_show_interface_mgt0.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
			<log-match>-c -e "IP addr=192.168.${tb.vlan2}"</log-match>
		</step>

		<step no="1.4">
			<desc>
				Get ap2 mgt0 ip address
			</desc>
			<setvar name="ap2_ip_1">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(\S+);" -f ${log.dir}/step1.3_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="1.5">
			<desc>
				set ap mgt0 ip
			</desc>
			<setvar name="ap2.mgt0.ip">
				echo ${ap2_ip_1}
			</setvar>
		</step>

		<step no="1.6">
			<desc>
				set ap1 tunnel
			</desc>
			<telnet target="ap1">
				-v "mobility-policy 11 inxp gre-tunnel from ${ap2_ip_1}/24 password aerohive"
				-v "user-profile aaa qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy 11 attribute 2"
			</telnet>
		</step>

		<step no="1.7">
			<desc>
				config ap2
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "security-object ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 2"
				-v "mobility-policy 11 inxp gre-tunnel to ${tb.vlan1.dhcp_start} password aerohive"
				-v "user-profile aaa qos-policy def-user-qos vlan-id ${tb.vlan1} mobility-policy 11 attribute 2"
			</telnet>
		</step>

		<step no="1.8">
			<desc>
				AP1
				clear log all
				_ff id 1 dst-port 67 bidirectional
				_kdebug fe basic
				_kdebug fe detail
			</desc>
			<telnet target="ap1">
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</telnet>
		</step>

		<step no="1.9">
			<desc>
				AP2
				clear log all
				_ff id 1 dst-port 67 bidirectional
				_kdebug fe basic
				_kdebug fe detail
			</desc>
			<telnet target="ap2">
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</telnet>
		</step>

		<include prefix="1.10" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<step no="1.11">
			<desc>
				config the laptop to apply the ssid profile,then start to associate
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="1.12" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check if the client was associated successfully
			</desc>
			<log-file>step1.12_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="1.13">
			<desc>
				dhclient wlan0
			</desc>
			<ssh target="sta1" timeout="100">
				-v "dhclient ${sta1.tif.name}"
				-v "dhclient ${sta1.tif.name} -r"
			</ssh>
		</step>

		<step no="1.14" delay="10">
			<desc>
				ifconfig to show the ip add
			</desc>
			<log-file>step1.14_ifconfig_wlan0.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "dhclient ${sta1.tif.name}"
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr:"</log-match>
		</step>

		<step no="1.15">
			<desc>
				Get laptop1's ip
			</desc>
			<setvar name="sta1_ip_1">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step1.14_ifconfig_wlan0.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="1.16" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				AP1 show logging buffered
			</desc>
			<log-file>step1.16_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(r\) mgt0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(u\) mgt0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0 ${tb.vlan1.dhcp_start}-&gt;${sta1_ip_1}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(r\) mgt0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(u\) mgt0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0 ${tb.vlan1.dhcp_start}-&gt;${sta1_ip_1}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack " -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="1.17" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				AP2 show logging buffered
			</desc>
			<log-file>step1.17_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) wifi0.1 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0 ${ap2_ip_1}-&gt;${tb.vlan1.dhcp_start}\(\d+\) ttl\(\d+\) proto\(\d+\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 ${ap2_ip_1}-&gt;${tb.vlan1.dhcp_start}\(\d+\) ttl\(\d+\) proto\(\d+\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(r\) mgt0 ${tb.vlan1.dhcp_start}-&gt;${sta1_ip_1}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) wifi0.1 ${tb.vlan1.dhcp_start}-&gt;${sta1_ip_1}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) wifi0.1 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(r\) mgt0 ${tb.vlan1.dhcp_start}-&gt;${sta1_ip_1}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) wifi0.1 ${tb.vlan1.dhcp_start}-&gt;${sta1_ip_1}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="reset.config.AP1">
			<desc>
				reset config AP1
			</desc>
			<console target="ap1">
				-v "reset config"
			</console>
		</step>

		<step no="telnet.connect.AP1">
			<desc>
				interface eth0 manage Telnet
			</desc>
			<console target="ap1">
				-v "interface eth0 manage all"
			</console>
		</step>

		<step no="reset.config.AP2">
			<desc>
				reset config AP2
			</desc>
			<console target="ap2">
				-v "reset config"
			</console>
		</step>

		<step no="telnet.connect.AP2">
			<desc>
				interface eth0 manage Telnet
			</desc>
			<console target="ap2">
				-v "interface eth0 manage all"
			</console>
		</step>

		<step no="reboot.station1">
			<desc>
				Reboot station1
			</desc>
			<script>
				${bin.dir}/sshcli.pl -d ${sta1.mif.ip} -u ${pc.def.user} -p ${pc.def.passwd} -v "reboot" -l ${log.dir}
			</script>
		</step>

		<step no="2">
			<desc>
				check the ap1 mgt0 ip address
			</desc>
			<log-file>step2_ap1_show_interface_mgt0.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>

		<step no="2.1">
			<desc>
				Get ap2 mgt0 ip address
			</desc>
			<setvar name="ap1_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(\S+);" -f ${log.dir}/step2_ap1_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="2.2">
			<desc>
				set ap mgt0 ip
			</desc>
			<setvar name="ap1.mgt0.ip">
				echo ${ap1_ip_2}
			</setvar>
		</step>

		<step no="2.3">
			<desc>
				config AP1 interface mgt0.1
			</desc>
			<log-file>step2.3_use_laptop_connect_ssid.log</log-file>
			<telnet target="ap1">
				-v "interface mgt0.1 vlan ${tb.vlan4}"
				-v "interface mgt0.1 ip ${dhcp_start_1}/24"
				-v "interface mgt0.1 dhcp-server ip-pool ${dhcp_start_1} ${dhcp_end_1}"
				-v "interface mgt0.1 dhcp-server options default-gateway ${def_gw_1}"
				-v "interface mgt0.1 dhcp-server enable"
				-v "interface mgt0.1 dhcp-server options lease-time 120"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
			</telnet>
		</step>

		<step no="2.4">
			<desc>
				set ap2 mgt0 vlan
			</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan2}"
			</console>
		</step>

		<step no="2.5" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check the ap2 mgt0 ip address
			</desc>
			<log-file>step2.5_show_interface_mgt0.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
			<log-match>-c -e "IP addr=192.168.${tb.vlan2}"</log-match>
		</step>

		<step no="2.6">
			<desc>
				Get ap2 mgt0 ip address
			</desc>
			<setvar name="ap2_ip_2">
				${bin.dir}/getbyrexp.py -p "(?i)IP addr=(\S+);" -f ${log.dir}/step2.5_show_interface_mgt0.log -t str
			</setvar>
		</step>

		<step no="2.7">
			<desc>
				set ap mgt0 ip
			</desc>
			<setvar name="ap2.mgt0.ip">
				echo ${ap2_ip_2}
			</setvar>
		</step>

		<step no="2.8">
			<desc>
				set ap1 tunnel
			</desc>
			<telnet target="ap1">
				-v "mobility-policy 11 inxp gre-tunnel from ${ap2_ip_2}/24 password aerohive"
				-v "user-profile aaa qos-policy def-user-qos vlan-id ${tb.vlan4} mobility-policy 11 attribute 2"
			</telnet>
		</step>

		<step no="2.9">
			<desc>
				config ap2
			</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "ssid ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "security-object ${ssid.name}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "security-object ${ssid.name} default-user-profile-attr 2"
				-v "mobility-policy 11 inxp gre-tunnel to ${ap1_ip_2} password aerohive"
				-v "user-profile aaa qos-policy def-user-qos vlan-id ${tb.vlan4} mobility-policy 11 attribute 2"
			</telnet>
		</step>

		<step no="2.10">
			<desc>
				AP1
				clear log all
				_ff id 1 dst-port 67 bidirectional
				_kdebug fe basic
				_kdebug fe detail
			</desc>
			<telnet target="ap1">
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</telnet>
		</step>

		<step no="2.11">
			<desc>
				AP2
				clear log all
				_ff id 1 dst-port 67 bidirectional
				_kdebug fe basic
				_kdebug fe detail
			</desc>
			<telnet target="ap2">
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</telnet>
		</step>

		<include prefix="2.12" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<step no="2.13">
			<desc>
				config the laptop to apply the ssid profile,then start to associate
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "reas"
				-v "quit"
			</ssh>
		</step>

		<step no="2.14" type="loop-check" loop-max-times="20" loop-interval="5">
			<desc>
				check if the client was associated successfully
			</desc>
			<log-file>step2.14_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="2.15" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				ifconfig to show the ip add
			</desc>
			<log-file>step2.15_ifconfig_wlan0.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "dhclient ${sta1.tif.name} -r"
				-v "dhclient ${sta1.tif.name}"
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr:192.168.${tb.vlan4}"</log-match>
		</step>

		<step no="2.16">
			<desc>
				Get laptop1's ip
			</desc>
			<setvar name="sta1_ip_2">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.15_ifconfig_wlan0.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="2.17" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				AP1 show logging buffered
			</desc>
			<log-file>step2.17_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(r\) mgt0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(u\) mgt0.1 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0.1 ${dhcp_start_1}-&gt;${sta1_ip_2}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(r\) mgt0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(u\) mgt0.1 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0.1 ${dhcp_start_1}-&gt;${sta1_ip_2}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack " -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="2.18" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				AP2 show logging buffered
			</desc>
			<log-file>step2.18_show_logging_buffered_${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show logging buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) wifi0.1 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0 ${ap2_ip_2}-&gt;${ap1_ip_2}\(\d+\) ttl\(\d+\) proto\(\d+\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 ${ap2_ip_2}-&gt;${ap1_ip_2}\(\d+\) ttl\(\d+\) proto\(\d+\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(r\) mgt0 ${dhcp_start_1}-&gt;${sta1_ip_2}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) wifi0.1 ${dhcp_start_1}-&gt;${sta1_ip_2}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) wifi0.1 0.0.0.0-&gt;255.255.255.255\(\d+\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(r\) mgt0 ${dhcp_start_1}-&gt;${sta1_ip_2}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) wifi0.1 ${dhcp_start_1}-&gt;${sta1_ip_2}\(\d+\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
	</stage>

	<post-process>
		<include file="include/default_post_process.xml" />

		<stage>
			<step no="0">
				<desc>
					cancel new vlan
				</desc>
				<telnet host="${tb.l2sw}" prompt=".*[>|#]">
					-v "enable"
					-v "config"
					-v "vlan database"
					-v "no vlan ${tb.vlan4}"
					-v "end"
					-v "show vlan"
				</telnet>
			</step>
		</stage>
	</post-process>
</testcase>