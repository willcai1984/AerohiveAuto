<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that dhcp packet can be deal with correctly from different interface.</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1. Verify that dhcp packet can be deal with from all interface such as:
		Eth0/eth1/red0/agg0/wifi0.x/wifi1.x(access)/wifi0(backhual)/wifi1/bridge
		Eth0:
		Two AP as neighbor via eth0(shutdown eth1)
		1) Set mgt0.1 as DHCP server with vlan 100 on AP1
		2) Set a SSID and bind it to interface wifi0 on AP2
		3) Set a user-profile with vlan 100 and attribute 100 on AP2, assign
		attribute 100 to SSID on AP2
		4) Use a laptop to connect to SSID, verify laptop can obtain IP address
		of vlan 100 from mgt0.1 of AP1
		Eth1:
		Two AP as neighbor via eth1(shutdown eth0)
		1) Set mgt0.1 as DHCP server with vlan 100 on AP1
		2) Set a SSID and bind it to interface wifi0 on AP2
		3) Set a user-profile with vlan 100 and attribute 100 on AP2, assign
		attribute 100 to SSID on AP2
		4) Use a laptop to connect to SSID, verify laptop can obtain IP address
		of vlan 100 from mgt0.1 of AP1
		Wifi0.1:
		Use a AP
		1) Set mgt0.1 as DHCP server with vlan 100
		2) Create a SSID and bind it to interface wifi0
		3) Set a
		user-profile with vlan 100 and attribute 100, assign attribute 100
		to SSID
		4) Use a lapop to connect to SSID, verify laptop can obtain ip address
		from dhcp server mgt0.1
		Wifi1.1:
		Two AP as neighbor via wireless(a portal and a MP)
		1) Set mgt0.1 as DHCP server with vlan 100 on portal
		2) Set a SSID and bind it to interface wifi0 on MP
		3) Set a user-profile with vlan 100 and attribute 100 on MP, assign
		attribute 100 to SSID on MP
		5) Use a laptop to connect to SSID, verify laptop can obtain IP address
		of vlan 100 from mgt0.1 of portal
	</description>
	<numofap>2</numofap>
	<numofsta>2</numofsta>
	<tbtype>linux</tbtype>

	<property name="dhcp.server.start" value="192.168.${tb.vlan4}.200" />
	<property name="dhcp.server.end" value="192.168.${tb.vlan4}.204" />
	<property name="mgt0.1.ip" value="192.168.${tb.vlan4}.100" />
	
	<stage>
		
		<include prefix="0" file="subs/l2swcfg_port_newvlan.xml" args="${ap1.eth0.swport}, ${tb.vlan4}" />
		<include prefix="0.1" file="subs/l2swcfg_port_newvlan.xml" args="${ap2.eth0.swport}, ${tb.vlan4}" />
		
		<step no="1">
			<desc>
				config ap1,shutdown eth1
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap1">
				-v "hive ${hive.name}_type"
				-v "interface mgt0 hive ${hive.name}_type"
				-v "interface wifi1 radio channel 36"
			</console>
		</step>
		
		<step no="1_0">
			<desc>
				config ap1,shutdown eth1
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap1">
				-v "hive ${hive.name}_type"
				-v "interface mgt0 hive ${hive.name}_type"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable" 
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
			</console>
		</step>
		
		<step no="1.0">
			<desc>
				config ap1,shutdown eth1
			</desc>
			<if>"${ap1.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="1.1">
			<desc>
				config ap2,shutdown eth1
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap2">
				-v "hive ${hive.name}_type"
				-v "interface mgt0 hive ${hive.name}_type"
				-v "interface wifi1 radio channel 48"
			</console>
		</step>
		
		<step no="1.1_0">
			<desc>
				config ap2,shutdown eth1
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap2">
				-v "hive ${hive.name}_type"
				-v "interface mgt0 hive ${hive.name}_type"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable" 
				-v "interface wifi0 mode dual"
				-v "interface wifi0 radio channel 6"
			</console>
		</step>
		
		<step no="1.1.0">
			<desc>
				config ap2,shutdown eth1
			</desc>
			<if>"${ap2.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="2">
			<desc>
				1) Set mgt0.1 as DHCP server with vlan 100 on AP1
			</desc>
			<console target="ap1">
				-v "interface mgt0.1 vlan ${tb.vlan4}"
				-v "interface mgt0.1 ip ${mgt0.1.ip}/24"
				-v "interface mgt0.1 dhcp-server enable"
				-v "interface mgt0.1 dhcp-server ip-pool ${dhcp.server.start} ${dhcp.server.end}"
			</console>
		</step>

		<step no="2.1">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step2.1_show_amrp_neighbor.log</log-file>
			<console target="ap1">
				-v "show amrp neighbor"
			</console>
		</step>

		<step no="3">
			<desc>
				2) Set a SSID and bind it to interface wifi0 on AP2
			</desc>
			<console target="ap2">
				-v "security-object FWtest"
				-v "security-object FWtest default-user-profile-attr 100"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object FWtest"
				-v "interface wifi0 ssid ${ssid.name}"
			</console>
		</step>

		<step no="4">
			<desc>
				3) Set a user-profile with vlan 100 and attribute 100 on AP2, assign attribute 100 to SSID on AP2
			</desc>
			<console target="ap2">
				-v "user-profile ttt qos-policy def-user-qos vlan-id ${tb.vlan4} attribute 100"
			</console>
		</step>

		<include prefix="5" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<step no="5.1">
			<desc>
				pc connect ap
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="5.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check if the client was associated successfully
			</desc>
			<log-file>wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>
		
		<step no="5.3.0">
			<desc>
				down/up dhcp server
			</desc>
			<console target="ap1">
				-v "no interface mgt0.1 dhcp-server enable"
				-v "interface mgt0.1 dhcp-server enable"
			</console>
		</step>

		<step no="5.3">
			<desc>
				open debug mode "_ff id 1 dst-port 67 bidirectional"
				"_kdebug fe basic"
				"_kdebug fe detail"
			</desc>
			<console target="ap1">
				-v "_ff dst-port 67 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
			</console>
		</step>

		<step no="5.4">
			<desc>
				"clear log all"
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="5.5">
			<desc>
				get ip address for sta1
			</desc>
			<log-file>ifconfig_sta1.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "dhclient ${sta1.tif.name}"
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr:192.168.${tb.vlan4}.20"</log-match>
		</step>

		<step no="6">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig_sta1.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="6.1">
			<desc>Get laptop1's mac</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -width
			</setvar>
		</step>

		<step no="6.2" delay="30">
			<desc>
				-check the log info on AP1
			</desc>
			<log-file>step6.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-c -e "Sent a DHCP ACK message assigning IP address ${sta1.tif.ip} to client ${sta1.tif.mac}"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(u\) mgt0.1 0.0.0.0-&gt;255.255.255.255\(0\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) mgt0.1 ${mgt0.1.ip}-&gt;${sta1.tif.ip}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\) eth0 ${mgt0.1.ip}-&gt;${sta1.tif.ip}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\) eth0 ${mgt0.1.ip}-&gt;${sta1.tif.ip}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) mgt0.1 ${mgt0.1.ip}-&gt;${sta1.tif.ip}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack " -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) eth0 0.0.0.0-&gt;255.255.255.255\(0\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>
	
	<stage>
		<if>("${ap1.eth1.existed}" == "true") &amp;&amp; ("${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true")</if>
		<include prefix="7.0" file="subs/l2swcfg_port_newvlan.xml" args="${ap1.eth1.swport}, ${tb.vlan4}" />
		<include prefix="7.1" file="subs/l2swcfg_port_newvlan.xml" args="${ap2.eth1.swport}, ${tb.vlan4}" />
		
		<step no="7">
			<desc>
				config ap1,up eth1 and make eth1 manage console.
			</desc>
			<console target="ap1">
				-v "interface eth0 shutdown"
				-v "no interface eth1 shutdown"
				-v "interface eth1 manage all"
			</console>
		</step>

		<step no="7.2">
			<desc>release IP by "dhclient xxx -r" </desc>
			<ssh target="sta1" slow="true">
				-v "dhclient ${sta.tif.name} -r"
			</ssh>
		</step>

		<step no="8">
			<desc>
				config ap2,up eth1 and make eth1 manage console.
			</desc>
			<console target="ap2">
				-v "interface eth0 shutdown"
				-v "no interface eth1 shutdown"
				-v "interface eth1 manage all"
			</console>
		</step>

		<step no="8.2">
			<desc>
				"clear log all"
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="9">
			<desc>client gets IP by dhclient</desc>
			<log-file>step9_ifconfig_sta1.log</log-file>
			<ssh target="sta1" slow="true">
				-v "dhclient ${sta1.tif.name}"
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr:192.168.${tb.vlan4}.20"</log-match>
		</step>

		<step no="10">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip.second">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step9_ifconfig_sta1.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="10.1" delay="30">
			<desc>
				-check the log info on AP
			</desc>
			<log-file>step10.1_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-c -e "Sent a DHCP ACK message assigning IP address ${sta1.tif.ip.second} to client ${sta1.tif.mac}"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(u\) mgt0.1 0.0.0.0-&gt;255.255.255.255\(0\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) mgt0.1 ${mgt0.1.ip}-&gt;${sta1.tif.ip.second}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\) eth1 ${mgt0.1.ip}-&gt;${sta1.tif.ip.second}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\) eth1 ${mgt0.1.ip}-&gt;${sta1.tif.ip.second}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) mgt0.1 ${mgt0.1.ip}-&gt;${sta1.tif.ip.second}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack " -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) eth1 0.0.0.0-&gt;255.255.255.255\(0\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="11">
			<desc>
				2) Set a SSID and bind it to interface wifi0 on AP1
			</desc>
			<console target="ap1">
				-v "security-object FWtest1"
				-v "security-object FWtest1 default-user-profile-attr 10"
				-v "ssid ${ssid.name}_1"
				-v "ssid ${ssid.name}_1 security-object FWtest1"
				-v "interface wifi0 ssid ${ssid.name}_1"
			</console>
		</step>

		<step no="12">
			<desc>
				3) Set a user-profile with vlan 100 and attribute 10 on AP1, assign attribute 10 to SSID on AP1
			</desc>
			<console target="ap1">
				-v "user-profile sss qos-policy def-user-qos vlan-id ${tb.vlan4} attribute 10"
			</console>
		</step>

		<include prefix="13" file="subs/wpa_supplicant_start.xml" args="sta2" />

		<step no="13.1">
			<desc>
				pc connect ap
			</desc>
			<ssh target="sta2" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}_1\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="13.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check if the client was associated successfully
			</desc>
			<log-file>step13.2_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta2" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="13.3">
			<desc>
				"clear log all"
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="13.4">
			<desc>
				get ip address for sta2.
			</desc>
			<log-file>step13.4_ifconfig_sta2.log</log-file>
			<ssh target="sta2" timeout="30">
				-v "dhclient ${sta2.tif.name}"
				-v "ifconfig ${sta2.tif.name}"
			</ssh>
			<log-match>-e "inet addr:192.168.${tb.vlan4}.20"</log-match>
		</step>

		<step no="14">
			<desc>Get laptop2's ip</desc>
			<setvar name="sta2.tif.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step13.4_ifconfig_sta2.log -i ${sta2.tif.name} -nomask
			</setvar>
		</step>

		<step no="14.1">
			<desc>Get laptop1's mac</desc>
			<setvar name="sta2.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta2.mif.ip} -u ${sta2.user} -p ${sta2.passwd} -i ${sta2.tif.name} -m -width
			</setvar>
		</step>

		<step no="14.2" delay="30">
			<desc>
				-check the log info on AP
			</desc>
			<log-file>step14.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-c -e "Sent a DHCP ACK message assigning IP address ${sta2.tif.ip} to client ${sta2.tif.mac}"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(u\) mgt0.1 0.0.0.0-&gt;255.255.255.255\(0\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) mgt0.1 ${mgt0.1.ip}-&gt;${sta2.tif.ip}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\) wifi0.1 ${mgt0.1.ip}-&gt;${sta2.tif.ip}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\) wifi0.1 ${mgt0.1.ip}-&gt;${sta2.tif.ip}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) mgt0.1 ${mgt0.1.ip}-&gt;${sta2.tif.ip}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack " -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) wifi0.1 0.0.0.0-&gt;255.255.255.255\(0\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="15">
			<desc>
				ap1:"no interface eth0 shutdown"
			</desc>
			<console target="ap1">
				-v "no interface eth0 shutdown"
				-v "interface eth1 shutdown"
			</console>
		</step>
		
		<step no="15.1">
			<desc>
				shutdown eth1
			</desc>
			<console target="ap2">
				-v "no interface eth0 shutdown"
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="15.2">
			<desc>
				killall wpa_supplicant on sta1
			</desc>
			<if>"${ap1.wifi1.existed}" == "true"</if>
			<ssh target="sta1">
				-v "killall wpa_supplicant"
				-v "dhclient ${sta1.tif.name} -r"
			</ssh>
		</step>
	</stage>
	
	<stage>
		<if>"${ap1.wifi1.existed}" == "true"</if>
		<include prefix="0" file="subs/l2swcfg_port_newvlan.xml" args="${ap1.eth0.swport}, ${tb.vlan4}" />
		<include prefix="0.1" file="subs/l2swcfg_port_newvlan.xml" args="${ap2.eth0.swport}, ${tb.vlan4}" />

		<step no="16.0">
			<desc>
				ap1:"no interface eth0 shutdown"
			</desc>
			<console target="ap1">
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 36"
			</console>
		</step>
		
		<step no="16.1">
			<desc>
				shutdown eth1
			</desc>
			<console target="ap2">
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 36"
				-v "interface eth0 shutdown"
			</console>
		</step>

		<step no="16.1">
			<desc>
				show interface on ap2
			</desc>
			<log-file>step16.1_show_interface.log</log-file>
			<console target="ap2">
				-v "show interface"
			</console>
		</step>

		<step no="16.2">
			<desc>
				get wifi1.1's mac address of ap2(format: xxxx:xxxx:xxxx)
			</desc>
			<setvar name="ap2_wifi1_mac">
				${bin.dir}/getbyrexp.py -p "Wifi1\s*(\S{4}):(\S{4}):(\S{4})" -f ${log.dir}/step16.1_show_interface.log -t str --script "':'.join(m.groups())"
			</setvar>
		</step>

		<step no="17" type="loop-check" loop-max-times="15" loop-interval="10">
			<desc>
				-check if ap1 and ap2 are acsp neighbor if ap2's wifi1's acsp neighbor list less than 128.
			</desc>
			<log-file>step17_show_acsp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1">
				-v "show acsp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+Backhaul\s+${hive.name}_type" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		<step no="17.1" type="loop-check" loop-max-times="15" loop-interval="10">
			<desc>
				show amrp neighbor
			</desc>
			<log-file>step17.1_show_amrp_neighbor_${loop_check.idx}.log</log-file>
			<console target="ap1" timeout="180">
				-v "show amrp neighbor"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${ap2_wifi1_mac}\s+${ap2.mgt0.ip}\s+TWO-WAY" -c 1 -f ${log.dir}/${log.file}</log-match>
		</step>

		
		<include prefix="18" file="subs/wpa_supplicant_start.xml" args="sta1" />

		<step no="18.1">
			<desc>
				pc connect ap
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="18.2" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>
				check if the client was associated successfully
			</desc>
			<log-file>step18.2_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="18.3">
			<desc>
				"clear log all"
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="18.4">
			<desc>
				get ip address for sta1
			</desc>
			<log-file>step18.4_ifconfig_sta1.log</log-file>
			<ssh target="sta1" timeout="180">
				-v "dhclient ${sta1.tif.name}"
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match>-e "inet addr:192.168.${tb.vlan4}.20"</log-match>
		</step>

		<step no="19">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip.third">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step18.4_ifconfig_sta1.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="20" delay="30">
			<desc>
				show logging buffered
			</desc>
			<log-file>step20_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered" ; exit 0
			</console>
			<no-error-check />
			<log-match>-c -e "Sent a DHCP ACK message assigning IP address ${sta1.tif.ip.third} to client ${sta1.tif.mac}"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(u\) mgt0.1 0.0.0.0-&gt;255.255.255.255\(0\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) mgt0.1 ${mgt0.1.ip}-&gt;${sta1.tif.ip.third}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\) wifi1.1 ${mgt0.1.ip}-&gt;${sta1.tif.ip.third}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(o\) wifi1.1 ${mgt0.1.ip}-&gt;${sta1.tif.ip.third}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) mgt0.1 ${mgt0.1.ip}-&gt;${sta1.tif.ip.third}\(0\) ttl\(\d+\) UDP 67-&gt;68 DHCP Ack " -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\(i\) wifi1.1 0.0.0.0-&gt;255.255.255.255\(0\) ttl\(\d+\) UDP 68-&gt;67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>

	<post-process>
		<stage>
			<if>"${img.prodtype}" != "AP120"</if>
			<step no="0">
				<desc>
					cancel new vlan
				</desc>
				<console host="${tb.l2sw}" prompt=".*[>|#]">
					-v "enable"
					-v "config"
					-v "vlan database"
					-v "no vlan ${tb.vlan4}"
					-v "end"
					-v "show vlan"
				</console>
			</step>
		</stage>

		<include file="include/default_post_process.xml" />
	</post-process>
</testcase>