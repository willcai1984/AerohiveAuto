<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>
		Single VLAN Multiple MACs, 
		When Auth is not enabled on the port, port can be accessed
		When 802.1X Auth is enabled, port can’t be accessed before authenticated
		When 802.1X Auth is succeeded, port VLAN will use Radius Server returned VLAN
		When 802.1X auth is succeeded for some hosts, the other hosts still need to be authenticated, and the Radius returned VLAN must be same with the already authenticated one.
	</brief>
	<priority>Accept</priority>
	<automated>yes</automated>

	<description>
		Topology to use	       Switch----Hub----PC1
		|
		PC2
		Description	Single VLAN Multiple MACs, 
		When Auth is not enabled on the port, port can be accessed
		When 802.1X Auth is enabled, port can’t be accessed before authenticated
		When 802.1X Auth is succeeded, port VLAN will use Radius Server returned VLAN
		When 802.1X auth is succeeded for some hosts, the other hosts still need to be authenticated, and the Radius returned VLAN must be same with the already authenticated one.
		Platform Dependence	SR2024
		Pre-condition	Auth is host based and single domain, 802.1X not enabled in the port,
		Port configured VLAN 10, 
		Radius server response user1 return VLAN 20, user2 return VLAN 30, user3 return VLAN20

		Radius users configure(free radius)
		a.	Return vlan id directly
		user1   User-Password := password
		Tunnel-Type = 13,
		Tunnel-Medium-Type = 6,
		Tunnel-Private-Group-ID = 20

		user2   User-Password := password
		Tunnel-Type = 13,
		Tunnel-Medium-Type = 6,
		Tunnel-Private-Group-ID = 30

		user3   User-Password := password
		Tunnel-Type = 13,
		Tunnel-Medium-Type = 6,
		Tunnel-Private-Group-ID = 20

		b.	Return upid
		user1   User-Password := password
		Tunnel-Type = 10,
		Tunnel-Medium-Type = 1,
		Tunnel-Private-Group-ID = 20

		user2   User-Password := password
		Tunnel-Type = 10,
		Tunnel-Medium-Type = 1,
		Tunnel-Private-Group-ID = 30

		user3   User-Password := password
		Tunnel-Type = 10,
		Tunnel-Medium-Type = 1,
		Tunnel-Private-Group-ID = 20
		In this case, we need configure user profile in switch, the clis is:
		user-profile upid20 qos-policy def-user-qos vlan-id 20 attribute 20

		user-profile upid30 qos-policy def-user-qos vlan-id 30 attribute 30

		Test procedure	1.	Check port access, result 1

		2.	Enable 802.1X authentication, result 2
		security-object security-object name

		security-object security-object name security aaa radius-server primary ip address of radius server shared-secret share-key

		security-object security-object name security aaa radius-server accounting primary ip address of radius server shared-secret share-key

		security-object security-object name security protocol-suite 802.1x

		security-object security-object name security auth-mode host-based

		interface ethx/y switchport mode access

		interface ethx/y security-object security-object name

		vlan 10

		vlan 20

		vlan 30

		3.	Check port access, result 3
		4.	PC1 do 802.1X auth with user1, check port access, result 4
		5.	PC2 do 802.1X auth with user2, check port access, result 5
		6.	PC2 do 802.1X auth with user1, check port access, result 6
		7.	PC2 deauth, check port access, result 7
		8.	PC2 do 802.1X auth with user3, check port access, result 8
		9.	PC!, PC2 deauth, check port access, result 9
		Expect result	Result 1: PC1 and PC2 can access the port
		Result 2: 802.1X enabled successfully
		Result 3: PC1 and PC2 can’t access the port
		Result 4: PC1 can access, port VLAN is 20, PC2 can’t
		Result 5: PC1 can access, PC2 can’t
		Result 6: PC1 and PC2 can access, port VLAN 20
		Result 7: PC1 can access, PC2 can’t
		Result 8: PC1 and PC2 can access, port VLAN 20
		Result 9: PC1 and PC2 can’t access.
	</description>

	<numofsw>1</numofsw>
	<tbtype>winlin</tbtype>

	<property name="sw1.port1.ixia_port.mac1" value="0000.0000.0011"/>
	<property name="sw1.port1.ixia_port.mac2" value="0000.0000.0012"/>
	<property name="user1" value="auto${job.sid}-1"/>
	<property name="user2" value="auto${job.sid}-2"/>
	<property name="passwd" value="aerohive"/>
	<stage>
		<step no="1.1">
			<desc>
				configure switch to 802.1x auth, port-based 
			</desc>
			<telnet target="sw1">
				-v "vlan ${tb.vlan1}"
				-v "vlan ${tb.vlan2}"
				-v "vlan ${tb.vlan3}"
				-v "interface vlan ${tb.vlan1}"
				-v "interface vlan ${tb.vlan2}"
				-v "interface vlan${tb.vlan1} ip ${tb.vlan1.ip}/${tb.subnet_prefix}"
				-v "interface vlan${tb.vlan2} ip ${tb.vlan2.ip}/${tb.subnet_prefix}"
				-v "user-profile vlan${tb.vlan1} vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "user-profile vlan${tb.vlan2} vlan-id ${tb.vlan2} attribute ${tb.vlan2}"
				-v "security-object autoap"
				-v "security-object autoap security protocol-suite 802.1x"
				-v "interface ${sw1.port1} switchport mode trunk"
				-v "int ${sw1.port1} switchport trunk allow vlan ${tb.vlan1} - ${tb.vlan3}"
				-v "interface ${sw1.port1} switchport trunk voice-vlan ${tb.vlan3}"
				-v "security-object autoap security aaa radius-server primary ${pub.radius1.ip} shared-secret ${pub.radius1.sharesecret}"
				-v "security-object autoap security auth-mode host-based multiple-domain"
				-v "interface ${sw1.port1} security-object autoap"
			</telnet>
		</step>

		<step no="1.2">
			<multi-setvar>
				echo sw1.port1.ixia_port.mac1_1=$(echo "${sw1.port1.ixia_port.mac1}" | sed 's/\./:/g')
				echo sw1.port1.ixia_port.mac2_1=$(echo "${sw1.port1.ixia_port.mac2}" | sed 's/\./:/g')
				echo tb.sub_netmask=$(ipcalc -4 -m ${tb.vlan1.ip}/${tb.subnet_prefix}|cut -d= -f2)
				echo tb.vlan1.ip_end=$(echo `echo ${tb.vlan1.ip_start} |cut -d\. -f1,2,3`\.$(expr `echo ${tb.vlan1.ip_start} | cut -d\. -f4` + 5))
				echo tb.vlan2.ip_end=$(echo `echo ${tb.vlan2.ip_start} |cut -d\. -f1,2,3`\.$(expr `echo ${tb.vlan2.ip_start} | cut -d\. -f4` + 5))
			</multi-setvar>
		</step>
		<step no="1.3">
			<desc>
				configure switch to enable dhcp server 
			</desc>
			<telnet target="sw1">
				-v "interface vlan${tb.vlan1} dhcp-server ip-pool ${tb.vlan1.ip_start} ${tb.vlan1.ip_end}"
				-v "interface vlan${tb.vlan2} dhcp-server ip-pool ${tb.vlan2.ip_start} ${tb.vlan2.ip_end}"
				-v "interface vlan${tb.vlan1} dhcp-server options default-gateway ${tb.vlan1.ip}"
				-v "interface vlan${tb.vlan2} dhcp-server options default-gateway ${tb.vlan2.ip}"
				-v "interface vlan${tb.vlan1} dhcp-server options netmask ${tb.sub_netmask}"
				-v "interface vlan${tb.vlan2} dhcp-server options netmask ${tb.sub_netmask}"
				-v "interface vlan${tb.vlan1} dhcp-server enable"
				-v "interface vlan${tb.vlan2} dhcp-server enable"
			</telnet>
		</step>
		<step no="1.4">
			<desc>check auth status</desc>
			<telnet target="sw1">
				-v "show aaa"
				-v "show auth interface ${sw1.port1}"
				-v "_debug auth all"
			</telnet>
		</step>
		<property name="acct1.uid" value="${tb.vlan1}" />
		<include prefix="add_account1" file="subs/ldap_add.xml" args="${user1}, ${passwd}" obj-args="acct1" />

		<property name="acct2.uid" value="${tb.vlan2}" />
		<property name="acct2.voice" value="1" />
		<include prefix="add_account2" file="subs/ldap_add.xml" args="${user2}, ${passwd}" obj-args="acct2" />

		<step no="3">
			<desc>
				config eap protocol, start eap auth	
			</desc>
			<log-file>ixia_config1.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-new="${job.user}-${job.sid}-1">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixn_connect -def enable -chassisIP ${pub.chassis1.ip} -ixn_tcl_server ${sw1.ixn_tcl_server} -userName ${job.user} -portList ${sw1.port1.ixia_port} -phyList ${sw1.port1.phytype}"
				-v ""

				-v "ixn_emulation_8021x_config -portList ${sw1.port1.ixia_port} \
				-mac_address ${sw1.port1.ixia_port.mac1} \
				-mac_addr_increment 0.0.0.0.0.1 \
				-mac_addr_count 1 \
				-protocol MD5 \
				-username ${user1} \
				-password ${passwd} \
				-ca_path ${ixn.cert_dir} \
				-key_path ${ixn.cert_dir}"

				-v "ixn_emulation_8021x_config -portList ${sw1.port1.ixia_port} \
				-mac_address ${sw1.port1.ixia_port.mac2} \
				-mac_addr_increment 0.0.0.0.0.1 \
				-mac_addr_count 1 \
				-mac_protocol MD5 \
				-username ${user2} \
				-password ${passwd} \
				-ca_path ${ixn.cert_dir} \
				-key_path ${ixn.cert_dir}"
				-v "ixn_allprotocols_control -action start"
				-v "sleep 5"
				-v "ixn_emulation_8021x_stats -protocol md5"
			</ssh>
			<log-match>-re -i "{MD5 Success} 2"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>

		<step no="4.1">
			<desc>
				create protocol interface, get dhcp and ping
			</desc>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="200" session-get="${job.user}-${job.sid}-1">
				-v "ixn_interface_create -portList ${sw1.port1.ixia_port} -mac_src ${sw1.port1.ixia_port.mac1}"
				-v "ixn_interface_create \
				-portList ${sw1.port1.ixia_port} \
				-vlan 1\
				-vlan_id ${tb.vlan2}\
				-mac_src ${sw1.port1.ixia_port.mac2}"
				-v "ixn_interface_dhcp_config -portList ${sw1.port1.ixia_port} -enable true"
				-v "sleep 30"
				-v "ixn_interface_dhcp_info -portList ${sw1.port1.ixia_port}"
				-v "ixn_interface_ping_control -intf_handleList [keylget allIntfH port.${sw1.port1.ixia_port}.interface_handle.${sw1.port1.ixia_port.mac1}] -destination_ip ${tb.vlan1.ip} -count 4"
				-v "ixn_interface_ping_control -intf_handleList [keylget allIntfH port.${sw1.port1.ixia_port}.interface_handle.${sw1.port1.ixia_port.mac2}] -destination_ip ${tb.vlan2.ip} -count 4"
				-v ""
			</ssh>
			<log-match>-re -i "Response received from ${tb.vlan1.ip}\. Sequence Number [0-9]+"</log-match>
			<log-match>-re -i "Response received from ${tb.vlan2.ip}\. Sequence Number [0-9]+"</log-match>
			<no-error-check />
			<failed>next</failed>
		</step>
		<step no="4.2">
			<desc>show log buf</desc>
			<log-file>check_macauth1.log</log-file>
			<telnet target="sw1">
				-v "show log buffered"
				-v "clear log buffered"
			</telnet>
			<failed>next</failed>
			<no-error-check />
		</step>
		<step no="5">
			<desc>check auth entries</desc>
			<telnet target="sw1">
				-v "show auth interface ${sw1.port1}"
			</telnet>
			<log-match>-re -i "${sw1.port1.ixia_port.mac1_1}[ \t]+${tb.vlan1}[ \t]+-1[ \t]+done[ \t]+data[ \t]+${user1}[ \t]+000b"</log-match>
			<log-match>-re -i "${sw1.port1.ixia_port.mac2_1}[ \t]+${tb.vlan2}[ \t]+-1[ \t]+done[ \t]+voice[ \t]+${user2}[ \t]+002b"</log-match>
			<failed>next</failed>
		</step>
		<step no="6">
			<desc>check FDB,make sure the mac entries aren't changed</desc>
			<telnet target="sw1">
				-v "show mac-address-table all"
			</telnet>
			<log-match>-re -i "${tb.vlan1}[ \t]+${sw1.port1.ixia_port.mac1_1}[ \t]+${sw1.port1}"</log-match>
			<log-match>-re -i "${tb.vlan2}[ \t]+${sw1.port1.ixia_port.mac2_1}[ \t]+${sw1.port1}"</log-match>
			<failed>next</failed>
		</step>
		<step no="7">
			<desc>check vlan and roaming cache</desc>
			<telnet target="sw1">
				-v "show roaming cache"
				-v "show interface ${sw1.port1} switchport"
			</telnet>
			<log-match>-e "Static Voice VLAN: ${tb.vlan3}"</log-match>
			<log-match>-e "Dynamic Voice VLAN: ${tb.vlan2}"</log-match>
			<log-match>-e "Dynamic Auth VLAN: ${tb.vlan1}"</log-match>
		</step>
		<step no="8.1">
			<desc>check roaming cache one by one</desc>
			<telnet target="sw1">
				-v "show roaming cache mac ${sw1.port1.ixia_port.mac1_1}"
			</telnet>
		</step>
		<step no="8.2">
			<desc>check roaming cache one by one</desc>
			<telnet target="sw1">
				-v "show roaming cache mac ${sw1.port1.ixia_port.mac2_1}"
			</telnet>
		</step>
	</stage>
	<post-process>
		<stage>
			<include prefix="delete.mac.account1" file="subs/ldap_delete.xml" args="${user1}" />
			<include prefix="delete.mac.account2" file="subs/ldap_delete.xml" args="${user2}" />
			<step no="post1">
				<ssh timeout="180" host="${pub.tclclient1.ip}" prompt="%.*|root@.*#" session-close="${job.user}-${job.sid}-1">
					-v ""
					-v "ixn_allprotocols_control -action stop"
				</ssh>
			</step>
			<!-- self defined steps, no need script now -->
		</stage>
		<include file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>
