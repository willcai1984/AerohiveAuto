<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify the unicast packet(ping, scp, tftp) from remote ap to other</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1. Verify that unicast packet from remote ap to server ap can be send to
		tunnel.
		2. Verify that unicast packet from remote ap to laptops (vpn server side)
		whose subnet are same with tunnel can be send to tunnel.
		3. Verify that unicast packet from remote ap to laptops (vpn server side)
		whose subnet are same with tunnel can be send to tunnel.
		4. Verify that unicast packet from remote ap to local client (access side) is
		not be send to tunnel.
		5. Verify that unicast packet from server ap to client where is in server ap
		side is not be send to tunnel
	</description>
	<numofap>2</numofap>
	<numofsta>2</numofsta>
	<tbtype>winlin</tbtype>
	
	<property name="sta1.ssid" value="${ssid.name}-client" />
	<property name="sta1.proto" value="open" />
	<property name="sta2.ssid" value="${ssid.name}-server" />
	<property name="sta2.proto" value="open" />
	<property name="ap1.invalid.ip" value="2.2.2.2" />

	<stage>

		<step no="1">
			<desc>move ap1 to vlan ${tb.vlan2}</desc>
			<console target="ap1">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "no interface mgt0 dhcp client"
				-v "interface mgt0 dhcp client"
			</console>
		</step>

		<step no="2" delay="20" type="loop-check" loop-max-times="5" loop-interval="10">
			<desc>recheck mgt0 ip</desc>
			<log-file>step2_show_mgt0.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
			<log-match>-i "IP addr=" -i "192.168.${tb.vlan2}"</log-match>
		</step>

		<step no="2.1">
			<desc>refresh ap1.mgt0.ip</desc>
			<setvar name="ap1.mgt0.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step2_show_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="3">
			<desc>setup ap1 as VPN server</desc>
			<telnet target="ap1">
				-v "save vpn ee-cert tftp://${pub.tftp1.tip}:${pub.cert.vpn.tftp}/server_cert.pem no-prompt"
				-v "save vpn private-key tftp://${pub.tftp1.tip}:${pub.cert.vpn.tftp}/server_key.pem no-prompt"
				-v "vpn xauth-client-list clientList local"
				-v "vpn xauth-client-list clientList client-name vpnclient1 password aerohive"
				-v "vpn client-ip-pool ipPool local ${tb.vlan3.dhcp_start} ${tb.vlan3.dhcp_end} netmask 255.255.255.0"
				-v "vpn server-ipsec-tunnel primaryServer"
				-v "vpn ipsec-tunnel primaryServer client-list clientList client-ip-pool ipPool dns-server ${pub.dns1.ip}"
				-v "vpn tunnel-policy vpn_tunnel_policy server ipsec-tunnel primaryServer"
				-v "no bonjour enable"
			</telnet>
		</step>

		<step no="3.1">
			<desc>setup ssid on vpn server</desc>
			<telnet target="ap1">
				-v "user-profile Tunnel${tb.vlan2} qos-policy def-user-qos vlan-id ${tb.vlan2} attribute ${tb.vlan2}"
				-v "security-object ${ssid.name}-server"
				-v "security-object ${ssid.name}-server default-user-profile-attr ${tb.vlan2}"
				-v "security-object ${ssid.name}-server security protocol-suite open"
				-v "ssid ${ssid.name}-server"
				-v "ssid ${ssid.name}-server security-object ${ssid.name}-server"
				-v "interface wifi0 ssid ${ssid.name}-server"
				-v "interface wifi1 ssid ${ssid.name}-server"
			</telnet>
		</step>

		<step no="3.2">
			<desc>change mgt0 vlan of AP2</desc>
			<console target="ap2">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
			</console>
		</step>

		<step no="3.3" delay="20" type="loop-check" loop-max-times="5" loop-interval="10">
			<desc>recheck mgt0 ip</desc>
			<log-file>step3.3_show_mgt0.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
			<log-match>-i "IP addr=" -i "192.168.${tb.vlan1}"</log-match>
		</step>

		<step no="3.4">
			<desc>refresh ap2.mgt0.ip</desc>
			<setvar name="ap2.mgt0.ip">
				${bin.dir}/getrmtip.pl -f ${log.dir}/step3.3_show_mgt0.log -i mgt0 -o aero -nomask
			</setvar>
		</step>

		<step no="4">
			<desc>setup ap2 as VPN client</desc>
			<telnet target="ap2">
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "save vpn ca-cert tftp://${pub.tftp1.tip}:${pub.cert.vpn.tftp}/cacert.pem no-prompt"
				-v "vpn client-ipsec-tunnel vpn_server_1"
				-v "vpn ipsec-tunnel vpn_server_1 gateway ${ap1.mgt0.ip} client-name vpnclient1 password aerohive"
				-v "vpn tunnel-policy vpn_tunnel_policy client ipsec-tunnel vpn_server_1 primary"
				-v "no bonjour enable"
			</telnet>
		</step>

		<step no="4.1">
			<desc>setup ssid on VPN client</desc>
			<telnet target="ap2">
				-v "user-profile Tunnel${tb.vlan1} qos-policy def-user-qos vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "user-profile Tunnel${tb.vlan1} tunnel-policy vpn_tunnel_policy"
				-v "security-object ${ssid.name}-client"
				-v "security-object ${ssid.name}-client default-user-profile-attr ${tb.vlan1}"
				-v "security-object ${ssid.name}-client security protocol-suite open"
				-v "ssid ${ssid.name}-client"
				-v "ssid ${ssid.name}-client security-object ${ssid.name}-client"
				-v "interface wifi0 ssid ${ssid.name}-client"
				-v "interface wifi1 ssid ${ssid.name}-client"
			</telnet>
		</step>

		<step no="4.2" delay="30" type="loop-check" loop-max-times="10" loop-interval="15">
			<desc>check vpn ike sa on vpn client side</desc>
			<log-file>step4.2_ike_sa_client${loop_check.idx}.log</log-file>
			<telnet target="ap2">
				-v "show vpn ike sa"
			</telnet>
			<log-match>-i "${ap1.mgt0.ip}\[500\]" -p 3 -i "9" -p 4 -i "I"</log-match>
		</step>

		<step no="4.3">
			<desc>check vpn ike sa on vpn server side</desc>
			<log-file>step4.3_ike_sa_server.log</log-file>
			<telnet target="ap1">
				-v "show vpn ike sa"
			</telnet>
			<log-match>-i "${ap2.mgt0.ip}\[500\]" -p 3 -i "9" -p 4 -i "R"</log-match>
		</step>

		<step no="4.4">
			<desc>multi show on VPN server</desc>
			<log-file>step4.4_multi_show_server.log</log-file>
			<telnet target="ap1">
				-v "show vpn tunnel-id"
				-v "show vpn ike sp"
				-v "show vpn ipsec-tunnel"
			</telnet>
		</step>

		<step no="4.5">
			<desc>multi show on VPN client</desc>
			<log-file>step4.5_multi_show_client.log</log-file>
			<telnet target="ap2">
				-v "show vpn tunnel-id"
				-v "show vpn ike sp"
				-v "show vpn ipsec-tunnel"
			</telnet>
		</step>

		<step no="5">
			<desc>show interface tunnel0 on vpn client</desc>
			<log-file>step5_show_tunnel0_ap2.log</log-file>
			<telnet target="ap2">
				-v "show interface tunnel0"
			</telnet>
		</step>

		<step no="5.1">
			<desc>get ip of tunnel0 on ap2</desc>
			<setvar name="ap2.tunnel0.ip">
				grep "IP addr" ${log.dir}/step5_show_tunnel0_ap2.log| cut -d\; -f1 | cut -d= -f2
			</setvar>
		</step>

		<!--<include prefix="6" file="subs/sta_connect_${tb.os}.xml" rargs="sta1" />
		
		<include prefix="7" file="subs/sta_connect_${tb.os}_next.xml" rargs="sta2" />-->
		
		
		
		<step no="6.1">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}-client"
				echo "conn1.proto=open"
				echo "conn1.pif=${ssid_bind_interface}"
			</multi-setvar>
		</step>
		<include prefix="6.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap2" />
		
				
		<step no="7.1">
			<multi-setvar>
				echo "conn2.ssid=${ssid.name}-server"
				echo "conn2.proto=open"
				echo "conn2.pif=${ssid_bind_interface}"
			</multi-setvar>
		</step>
		<include prefix="7.2" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn2, sta2, ap1" />
			
	

		<step no="8">
			<desc>check show station on ssid ${ssid.name}-client</desc>
			<log-file>step8_show_station_sta1.log</log-file>
			<telnet target="ap2">
				-v "show ssid ${ssid.name}-client station"
			</telnet>
			<log-match> -i "${sta1.tif.mac}" -i "${sta1.tif.ip}" -i "${tb.vlan1}" -c</log-match>
		</step>
		
 		
		<step no="8.1">
			<desc>check show station on vpn server</desc>
			<log-file>step8.1_show_station_sta2.log</log-file>
			<telnet target="ap1">
				-v "show ssid ${ssid.name}-server station"
			</telnet>
			<log-match> -i "${sta2.tif.mac}" -i "${sta2.tif.ip}" -i "${tb.vlan2}" -c</log-match>
		</step>

		<step no="8.2">
			<desc>check route of sta1 on vpn client</desc>
			<log-file>step8.2_check_vpn_client_route.log</log-file>
			<telnet target="ap2">
				-v "show route"
			</telnet>
			<log-match>-i "${sta1.tif.mac}" -i "LTO" -c</log-match>
		</step>

		<step no="8.3">
			<desc>check route of sta1 on vpn client</desc>
			<log-file>step8.3_check_vpn_client_route.log</log-file>
			<telnet target="ap1">
				-v "show route"
			</telnet>
			<log-match>-i "${sta2.tif.mac}" -i "L" -c</log-match>
		</step>

		<step no="9">
			<desc>enable debug on VPN client</desc>
			<telnet target="ap2">
				-v "_ff id 1 src-ip ${ap2.mgt0.ip} protocol 1 bidirectional"
				-v "_ff id 2 src-ip ${ap2.mgt0.ip} protocol 47 bidirectional"
				-v "_ff id 3 src-ip ${ap2.mgt0.ip} protocol 50 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log buff"
			</telnet>
		</step>

		<step no="10">
			<desc>
				Verify that unicast packet from remote ap to server ap can be send to tunnel.
			</desc>
			<telnet target="ap2">
				-v "ping ${ap1.mgt0.ip}"
			</telnet>
		</step>

		<step no="10.1">
			<desc>check log buf</desc>
			<log-file>step10.1_show_log_buff.log</log-file>
			<telnet target="ap2" timeout="300">
				-v "show log buffered"
				-v ""
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)iptables PRE_ROUTING pkt ${ap1.mgt0.ip}\(mgt0\)->${ap2.mgt0.ip}\(&lt;NULL&gt;\)" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="11">
			<desc>
				Verify that unicast packet from remote ap to laptops (vpn server side) whose subnet are same with tunnel can be send to tunnel.
			</desc>
			<telnet target="ap2">
				-v "ping ${tb.vlan2.gw}"
			</telnet>
		</step>

		<step no="11.1">
			<desc>check log buf</desc>
			<log-file>step11.1_show_log_buff.log</log-file>
			<telnet target="ap2" timeout="300">
				-v "show log buffered"
				-v ""
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)iptables PRE_ROUTING pkt ${tb.vlan2.gw}\(mgt0\)->${ap2.mgt0.ip}\(&lt;NULL&gt;\)" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0 ${ap2.mgt0.ip}->${tb.vlan2.gw}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(u\) mgt0 ${tb.vlan2.gw}->${ap2.mgt0.ip}\(\d+\) ttl\(\d+\) icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 ${ap2.mgt0.ip}->${tb.vlan2.gw}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth0 ${tb.vlan2.gw}->${ap2.mgt0.ip}\(\d+\) ttl\(\d+\) icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="12">
			<desc>
				Verify that unicast packet from remote ap to laptops (vpn server side) whose subnet are different from tunnel can be send to tunnel.
			</desc>
			<telnet target="ap2">
				-v "ping ${sta2.tif.ip}"
			</telnet>
		</step>

		<step no="12.1">
			<desc>check log buf</desc>
			<log-file>step12.1_show_log_buff.log</log-file>
			<telnet target="ap2" timeout="300">
				-v "show log buffered"
				-v ""
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0 ${ap2.mgt0.ip}->${sta2.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(u\) mgt0 ${sta2.tif.ip}->${ap2.mgt0.ip}\(\d+\) ttl\(\d+\) icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) eth0 ${ap2.mgt0.ip}->${sta2.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) eth0 ${sta2.tif.ip}->${ap2.mgt0.ip}\(\d+\) ttl\(\d+\) icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="13">
			<desc>
				Verify that unicast packet from remote ap to local client (access side) is not be send to tunnel.
			</desc>
			<telnet target="ap2">
				-v "ping ${sta1.tif.ip}"
			</telnet>
		</step>

		<step no="13.1">
			<desc>check log buf</desc>
			<log-file>step13.1_show_log_buff.log</log-file>
			<telnet target="ap2" timeout="300">
				-v "show log buffered"
				-v ""
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0 ${ap2.mgt0.ip}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(u\) mgt0 ${sta1.tif.ip}->${ap2.mgt0.ip}\(\d+\) ttl\(\d+\) icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="14">
			<desc>enable debug on VPN client</desc>
			<telnet target="ap1">
				-v "_ff id 1 src-ip ${ap1.mgt0.ip} protocol 1 bidirectional"
				-v "_ff id 2 src-ip ${ap1.mgt0.ip} protocol 47 bidirectional"
				-v "_ff id 3 src-ip ${ap1.mgt0.ip} protocol 50 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log buff"
			</telnet>
		</step>

		<step no="15">
			<desc>
				Verify that unicast packet from server ap to client where is in server ap side is not be send to tunnel
			</desc>
			<telnet target="ap1">
				-v "ping ${sta2.tif.ip}"
			</telnet>
		</step>

		<step no="15.1">
			<desc>check log buf</desc>
			<log-file>step15.1_show_log_buff.log</log-file>
			<telnet target="ap1" timeout="300">
				-v "show log buffered"
				-v ""
				-v ""
				-v "clear log buffered"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) mgt0 ${ap1.mgt0.ip}->${sta2.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(i\) wifi.* ${sta2.tif.ip}->${ap1.mgt0.ip}\(\d+\) ttl\(\d+\) icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "(?i)\(o\) wifi.* ${ap1.mgt0.ip}->${sta2.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="16">
			<desc>
				ap2 ping unreachable Dst-IP
			</desc>
			<telnet target="ap2">
				-v "ping ${ap1.invalid.ip}"
			</telnet>
		</step>

		<include prefix="17" file="subs/save_ap_log.xml" args="show logging buffered, ap2, step17_show_logging_buffered.log" />

		<step no="18">
			<desc>
				ap1 ping unreachable Dst-IP
			</desc>
			<telnet target="ap1">
				-v "ping ${ap1.invalid.ip}"
			</telnet>
		</step>

		<include prefix="19" file="subs/save_ap_log.xml" args="show logging buffered, ap1, step19_show_logging_buffered.log" />

	</stage>
</testcase>
