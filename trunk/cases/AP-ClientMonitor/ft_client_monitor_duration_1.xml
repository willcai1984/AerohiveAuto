<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Monitor several STAs for a long time</brief>
	<priority>Middle</priority>
	<automated>yes</automated>
	<description></description>
	<numofap>1</numofap>
	<numofsta>2</numofsta>
	<tbtype>linux</tbtype>
	
	<property name="ref.cpu" value="0.7" />
	<property name="ref.memory" value="0.7" />
	
	<stage>
		<step no="1">
			<desc>setup ap</desc>
			<telnet target="ap1">
				-v "capwap client server name ${pub.hm1.ip}"
				-v "capwap client enable"
				-v "security-object ${ssid.name}-1"
				-v "security-object ${ssid.name}-1 security protocol-suite wpa2-aes-psk ascii-key aerohive"
				-v "ssid ${ssid.name}-1"
				-v "ssid ${ssid.name}-1 security-object ${ssid.name}-1"
				-v "interface wifi0 ssid ${ssid.name}-1"
				-v "ssid ${ssid.name}-2"
				-v "interface wifi0 ssid ${ssid.name}-2"
			</telnet>
		</step>
		
		<step no="2" delay="30" type="loop-check" loop-max-times="10" loop-interval="15">
			<desc>check the capwap connection is success</desc>
			<log-file>capwap_conn_check_${loop_check.idx}.log</log-file>
			<telnet target="ap1">
				-v "show capwap client"
			</telnet>
			<log-match>-e "RUN state: Connected securely to the CAPWAP server"</log-match>
		</step>
		
		<step no="3.1">
			<desc>get mac of sta1's ${sta1.tif.name}</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta1.mif.ip} -u ${sta1.user} -p ${sta1.passwd} -i ${sta1.tif.name} -m -width 2 | tr '[A-F]' '[a-f]'
			</setvar>
		</step>
		
		<step no="3.2">
			<desc>get mac of sta2's ${sta2.tif.name}</desc>
			<setvar name="sta2.tif.mac">
				${bin.dir}/getrmtip.pl -d ${sta2.mif.ip} -u ${sta2.user} -p ${sta2.passwd} -i ${sta2.tif.name} -m -width 2 | tr '[A-F]' '[a-f]'
			</setvar>
		</step>
		
		<step no="4">
			<desc>add STA1 to monitor</desc>
			<telnet target="ap1">
				-v "exec client-monitor ${sta1.tif.mac}"
				-v "exec client-monitor ${sta2.tif.mac}"
			</telnet>
		</step>
		
		<step no="5">
			<desc>check the Client Trace Table</desc>
			<log-file>check_client_trace_table.log</log-file>
			<telnet target="ap1">
				-v "_show client-monitor"
			</telnet>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Entry\(${sta1.tif.mac}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "Entry\(${sta2.tif.mac}" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		<step no="6">
			<desc>enable debug on AP trace the client</desc>
			<telnet target="ap1">
				-v "_debug capwap itk"
			</telnet>
		</step>
		
		<step no="6.1">
			<desc>STA up wifi interface</desc>
			<ssh target="sta1" prompt=">|.*#">
			-v "ifconfig ${sta1.tif.name} down"
			-v "ifconfig ${sta1.tif.name} up"
			</ssh>
		</step>		
		
		<step no="6.2">
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}-1"
				echo "conn1.proto=wpa2-aes-psk"
				echo "conn1.psk=aerohive"
				echo "conn1.pif=wifi0"
				echo "ssid_bind_interface=wifi0"
			</multi-setvar>
		</step>
		
		<include prefix="7" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn1, sta1, ap1" />

		<step no="8">
			<desc>check the STA connection process</desc>
			<log-file>trace_client.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered | in capwap_itk"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta1.tif.mac}\).*?Rx auth &lt;open&gt; \(frame 1.*?step\(3\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta1.tif.mac}\).*?Tx auth &lt;open&gt; \(frame 2.*?step\(4\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta1.tif.mac}\).*?Rx assoc req.*?step\(5\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta1.tif.mac}\).*?Tx assoc resp &lt;accept&gt;.*?step\(6\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta1.tif.mac}\).*?WPA-PSK auth is starting.*?step\(1\/8\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta1.tif.mac}\).*?Sending 1/4 msg of 4-Way Handshake.*?step\(3\/8\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta1.tif.mac}\).*?Received 2/4 msg of 4-Way Handshake.*?step\(4\/8\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta1.tif.mac}\).*?Sending 3/4 msg of 4-Way Handshake.*?step\(5\/8\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta1.tif.mac}\).*?Received 4/4 msg of 4-Way Handshake.*?step\(6\/8\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta1.tif.mac}\).*?PTK is set.*?step\(7\/8\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta1.tif.mac}\).*?Authentication is successfully finished.*?step\(0\/0\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(DHCP\).*?report sta\(${sta1.tif.mac}\).*?DHCP session completed for station.*?step\(0\/0\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		<step no="9.1">
			<desc>STA up wifi interface</desc>
			<ssh target="sta1" prompt=">|.*#">
			-v "ifconfig ${sta2.tif.name} down"
			-v "ifconfig ${sta2.tif.name} up"
			</ssh>
		</step>

		<step no="9.2">
			<multi-setvar>
				echo "conn2.ssid=${ssid.name}-2"
				echo "conn2.proto=open"
				echo "conn2.pif=wifi0"
				echo "ssid_bind_interface=wifi0"
			</multi-setvar>
		</step>

		<include prefix="10" file="subs/sta_wifi_connect_${tb.os}_new.xml" obj-args="conn2, sta2, ap1"/>

		<step no="11">
			<desc>check the STA connection process</desc>
			<log-file>trace_open.log</log-file>
			<telnet target="ap1">
				-v "show logging buffered | in capwap_itk"
			</telnet>
			<no-error-check />
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta2.tif.mac}\).*?Rx.*?probe req.*?step\(1\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta2.tif.mac}\).*?Tx probe resp.*?step\(2\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta2.tif.mac}\).*?Rx auth &lt;open&gt; \(frame 1.*?step\(3\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta2.tif.mac}\).*?Tx auth &lt;open&gt; \(frame 2.*?step\(4\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta2.tif.mac}\).*?Rx assoc req.*?step\(5\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(802.11\).*?report sta\(${sta2.tif.mac}\).*?Tx assoc resp &lt;accept&gt;.*?step\(6\/6\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta2.tif.mac}\).*?Open auth is starting.*?step\(1\/2\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(AUTH\).*?report sta\(${sta2.tif.mac}\).*?Authentication is successfully finished.*?step\(0\/0\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(DHCP\).*?report sta\(${sta2.tif.mac}\).*?DHCP DISCOVER.*?step\(1\/4\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(DHCP\).*?report sta\(${sta2.tif.mac}\).*?DHCP OFFER.*?step\(2\/4\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(DHCP\).*?report sta\(${sta2.tif.mac}\).*?DHCP REQUEST.*?step\(3\/4\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(DHCP\).*?report sta\(${sta2.tif.mac}\).*?DHCP ACKNOWLEDGE.*?step\(4\/4\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "module\(DHCP\).*?report sta\(${sta2.tif.mac}\).*?DHCP session completed for station.*?step\(0\/0\) SUCCESS" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		<step no="12.1">
			<desc>show system cpu</desc>
			<log-file>step12.1.log</log-file>
			<telnet target="ap1">
				-v "show cpu"
			</telnet>
		</step>
		
		<step no="12.2">
			<desc>
				get cpu utilization
			</desc>
			<setvar name="cpu.usage.1">
				cat ${log.dir}/step12.1.log | grep -i total | awk '{print $4}' | cut -d'%' -f1
			</setvar>
		</step>
		
		<step no="13.1">
			<desc>show system memory</desc>
			<log-file>step13.1.log</log-file>
			<telnet target="ap1">
				-v "show memo"
			</telnet>
		</step>
		
		<step no="13.2">
			<desc>
				get total memo
			</desc>
			<setvar name="memo.total.1">
				cat ${log.dir}/step13.1.log | grep -i total | awk '{print $3}'
			</setvar>
		</step>
		
		<step no="13.3">
			<desc>
				get used memo
			</desc>
			<setvar name="memo.used.1">
				cat ${log.dir}/step13.1.log | grep -i used | awk '{print $3}'
			</setvar>
		</step>
		
		<step no="14.1">
			<desc>
				check if cpu usage is reasonable
			</desc>
			<script>
				echo ${ref.cpu} ${cpu.usage.1} | awk '{
				 if ( $1 &gt; ($2/100) )  
				 	{exit (0);} 
				 else 
				 	{exit (1);} 
				 }' 
			</script>
		</step>
		
		<step no="14.2">
			<desc>
				check if memo usage is reasonable
			</desc>
			<script>
				echo ${ref.memory} ${memo.total.1} ${memo.used.1} | awk '{
				 if ( $1 &gt; ($3/$2) )  
				 	{exit (0);} 
				 else 
				 	{exit (1);} 
				 }' 
			</script>
		</step>
		
		<step no="delay" delay="300">
			<desc>
				after 300 seconds
			</desc>
			<script>
				pwd
			</script>
		</step>	

		<step no="15.1">
			<desc>show system cpu</desc>
			<log-file>step15.1.log</log-file>
			<telnet target="ap1">
				-v "show cpu"
			</telnet>
		</step>
		
		<step no="15.2">
			<desc>
				get cpu utilization
			</desc>
			<setvar name="cpu.usage.2">
				cat ${log.dir}/step15.1.log | grep -i total | awk '{print $4}' | cut -d'%' -f1
			</setvar>
		</step>		
		
		<step no="16.1">
			<desc>show system memory</desc>
			<log-file>step16.1.log</log-file>
			<telnet target="ap1">
				-v "show memo"
			</telnet>
		</step>
		
		<step no="16.2">
			<desc>
				get total memo
			</desc>
			<setvar name="memo.total.2">
				cat ${log.dir}/step16.1.log | grep -i total | awk '{print $3}'
			</setvar>
		</step>
		
		<step no="16.3">
			<desc>
				get used memo
			</desc>
			<setvar name="memo.used.2">
				cat ${log.dir}/step16.1.log | grep -i used | awk '{print $3}'
			</setvar>
		</step>
		
		<step no="17.1">
			<desc>
				check if cpu usage is reasonable
			</desc>
			<script>
				echo ${ref.cpu} ${cpu.usage.2} | awk '{
				 if ( $1 &gt; ($2/100) )  
				 	{exit (0);} 
				 else 
				 	{exit (1);} 
				 }' 
			</script>
		</step>
		
		<step no="17.2">
			<desc>
				check if memo usage is reasonable
			</desc>
			<script>
				echo ${ref.memory} ${memo.total.2} ${memo.used.2} | awk '{
				 if ( $1 &gt; ($3/$2) )  
				 	{exit (0);} 
				 else 
				 	{exit (1);} 
				 }' 
			</script>
		</step>			
		
	</stage>
	
			 <failed-process>
	 <stage>
        <step no="fp_1">
			<desc>
				shutdown wlan interface on sta
			</desc>
			<log-file>fp_1.log</log-file>
			<ssh target="sta1" prompt=".*#">
            -v "ifconfig ${sta1.tif.name} down"
			</ssh>
		</step>
		
		<step no="fp_2">
			<desc>
				shutdown wlan interface on sta
			</desc>
			<log-file>fp_2.log</log-file>
			<ssh target="sta2" prompt=".*#">
            -v "ifconfig ${sta2.tif.name} down"
			</ssh>
		</step>
		</stage>
    </failed-process>
</testcase>
