<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Fragments are sent disorder</brief>
	<priority>Middle</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		-Configure AP
		Enable 2 dhcp server（mgt0.1 mgt0.2）
		Mgt0.1 vlan10 IPaddr 10.1.10.1 gateway 10.1.10.1
		Mgt0.2 vlan20 IPaddr 10.1.20.1 gateway 10.1.20.1
		Laptop1 connect to Mgt0.1 IPaddr 10.1.10.2
		Laptop2 connect to Mgt0.2 IPaddr 10.1.20.2

		Test Procedure:
		1) Configure network firewall rule
		"network-firewall name 1001 from network 10.1.10.2 255.255.255.255 action
		permit logging off"
		"network-firewall name 1002 from any to any action deny logging off"
		2) Laptop1 sends fragments to Laptop2 in disorder
		3) Check the packets captured by Laptop2
		4) Delete network firewall configure
		"no network-firewall"
		5) Configure network firewall rule
		"network-firewall name 1001 from network 10.1.10.2 255.255.255.255 action
		deny logging on"
		"network-firewall name 1002 from any to any action deny logging off"
		6) Laptop1 sends fragments to Laptop2 in disorder
		7) Check the packets captured by Laptop2
	</description>
	<numofbr>1</numofbr>
	<numofcvg>0</numofcvg>
	<tbtype>linux</tbtype>

	<property name="br1.vpc.netmask" value="255.255.255.255" />
	<property name="file_dir" value="/tmp" />
	<property name="capture.packet" value="capture.packet.log" />

	<stage>
		<step no="0">
			<desc>
				-Configure AP
				Enable 2 dhcp server（mgt0.1 mgt0.2）
				Mgt0.1 vlan10 IPaddr 10.1.10.1 gateway 10.1.10.1
				Mgt0.2 vlan20 IPaddr 10.1.20.1 gateway 10.1.20.1
				Laptop1 connect to Mgt0.1 IPaddr 10.1.10.2
				Laptop2 connect to Mgt0.2 IPaddr 10.1.20.2
				Laptop3 connect to Mgt0.1 IPaddr 10.1.10.3
			</desc>
			<console target="br1.br">
				-v "interface ${br1.br.wan.int1} mode wan"
				-v "vlan ${br1.vpc1.vlan}"
				-v "interface vlan ${br1.vpc1.vlan}"
				-v "interface vlan${br1.vpc1.vlan} ip ${br1.br.mgt0.1.ip}/24"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server options default-gateway ${br1.br.mgt0.1.ip}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server ip-pool ${br1.br.mgt0.1.ip_pool_start} ${br1.br.mgt0.1.ip_pool_end}"
				-v "vlan ${br1.vpc2.vlan}"
				-v "interface vlan ${br1.vpc2.vlan}"
				-v "interface vlan${br1.vpc2.vlan} ip ${br1.br.mgt0.2.ip}/24"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server options default-gateway ${br1.br.mgt0.2.ip}"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server ip-pool ${br1.br.mgt0.2.ip_pool_start} ${br1.br.mgt0.2.ip_pool_end}"
				-v "interface vlan${br1.vpc1.vlan} dhcp-server enable"
				-v "interface vlan${br1.vpc2.vlan} dhcp-server enable"
			</console>
		</step>

		<step no="1">
			<desc>
				AP config user-profile
			</desc>
			<console target="br1.br">
				-v "user-profile lan1 qos-policy def-user-qos vlan-id ${br1.vpc1.vlan} attribute 1"
				-v "interface ${br1.br.lan.int1} switchport mode access"
 			    -v "interface ${br1.br.lan.int1} switchport access vlan ${br1.vpc1.vlan}"
   			    -v "interface ${br1.br.lan.int2} switchport mode trunk"
			</console>
		</step>

		<step no="1.1">
			<desc>br1.vpc1 get ip addr from dhcp server of mgt0.1</desc>
			<log-file>step1.1_ifconfig_vpc1_.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "dhclient ${br1.vpc1.tif.name}"
				-v "ifconfig ${br1.vpc1.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="1.2">
			<desc>set br1.vpc1.tif.ip var for vpc1 on BR side</desc>
			<setvar name="br1.vpc1.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc1.mif.ip} -u ${br1.vpc1.user} -p ${br1.vpc1.passwd} -i ${br1.vpc1.tif.name} -nomask
			</setvar>
		</step>

		<step no="1.3" type="loop-check" loop-max-times="10" loop-interval="10">
			<desc>br1.vpc2 get ip addr from dhcp server of mgt0.2</desc>
			<log-file>step1.3_ifconfig_vpc2_.log</log-file>
			<ssh target="br1.vpc2" timeout="120">
				-v "ifconfig ${br1.vpc2.tif.name} down"
				-v "ifconfig ${br1.vpc2.tif.name} up"
				-v "dhclient ${br1.vpc2.tif.name} -r"
				-v "dhclient ${br1.vpc2.tif.name}"
				-v "ifconfig ${br1.vpc2.tif.name}"
			</ssh>
			<log-match>-i "inet addr"</log-match>
		</step>

		<step no="1.4">
			<desc>set br1.vpc2.tif.ip var for vpc2 on BR side</desc>
			<setvar name="br1.vpc2.tif.ip">
				${bin.dir}/getrmtip.pl -d ${br1.vpc2.mif.ip} -u ${br1.vpc2.user} -p ${br1.vpc2.passwd} -i ${br1.vpc2.tif.name} -nomask
			</setvar>
		</step>

		<step no="1.5">
			<multi-setvar>
				echo "br1.vpc2.ip.range=$(echo ${br1.vpc2.tif.ip} | cut -d. -f1,2,3).254"
			</multi-setvar>
		</step>

		<step no="1.6" delay="10">
			<desc>show interface eth0 on BR</desc>
			<log-file>step1.6_show_br1.br_eth0.log</log-file>
			<console target="br1.br">
				-v "show interface ${br1.br.wan.int1} dhcp client"
			</console>
		</step>

		<step no="1.7">
			<desc>get eth0 ip of br</desc>
			<setvar name="br1.br.wan.ip">
				${bin.dir}/getbyrexp.py -p "Get IP address (\d+\.\d+\.\d+\.\d+) from" -f ${log.dir}/step1.6_show_br1.br_eth0.log -t str
			</setvar>
		</step>

		<step no="2">
			<desc>
				"_ff id 1 src-ip Laptop's IPaddr bidirectional"
				"_kdebug fe basic"
				"_kdebug fe detail"
				"clear log buffered"
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "_ff id 1 src-ip ${br1.vpc1.tif.ip} bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2.1">
			<desc>br1.vpc1 ping br1.vpc2</desc>
			<log-file>step2.1_vpc1_ping_vpc2.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "ping ${br1.vpc2.tif.ip} -c 4"
			</ssh>
			<log-match>-c -i "from ${br1.vpc2.tif.ip}: " -i "ttl="</log-match>
		</step>

		<step no="3">
			<desc>
				Configure network firewall rule
				“network-firewall name 1001 from network 10.1.10.2 255.255.255.255 action permit logging off”
				“network-firewall name 1002 from any to any action deny logging off”
			</desc>
			<telnet target="${br1.br.wan.ip}">
				-v "clear log all"
				-v "network-firewall name 1001 from network ${br1.vpc1.tif.ip} ${br1.vpc.netmask} action permit logging on"
				-v "network-firewall name 1002 from any to any action deny logging on"
			</telnet>
		</step>

		<step no="3.1">
			<desc>
				clear local file
			</desc>
			<ssh target="br1.vpc2">
				-v "rm -f ${file_dir}/${capture.packet}"
			</ssh>
		</step>

		<step no="3.2">
			<desc>
				start tshark to capture packet
			</desc>
			<log-file>step3.2_capture_packet.log</log-file>
			<ssh target="br1.vpc2">
				-v "nohup tshark -i ${br1.vpc2.tif.name} host ${br1.vpc1.tif.ip} &gt; ${file_dir}/${capture.packet} 2>&amp;1 &amp;"
			</ssh>
		</step>

		<step no="3.3">
			<desc>
				get pid of "tshark" on br1.vpc2
			</desc>
			<setvar name="br1.vpc2.tshark.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step3.2_capture_packet.log -p "\[\d+\]\s+(\d+)" -t str
			</setvar>
		</step>

		<step no="4">
			<desc>
				Laptop1 sends fragments to Laptop2 in disorder
			</desc>
			<log-file>step4_sends_fragments.log</log-file>
			<ssh target="br1.vpc1" timeout="120">
				-v "nohup hping ${br1.vpc2.tif.ip} -d 40 -N 5 -g 48 -1 &amp;"
				-v "nohup hping ${br1.vpc2.tif.ip} -d 40 -N 5 -g 0 -x1 -1 &amp;"
			</ssh>
		</step>

		<step no="4.1">
			<desc>
				get pid of "hping"
			</desc>
			<setvar name="first.hping.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4_sends_fragments.log -p "\[\d+\]\s+(\d+)" -g 0 -t str
			</setvar>
		</step>

		<step no="4.2">
			<desc>
				get pid of "hping"
			</desc>
			<setvar name="second.hping.pid">
				${bin.dir}/getbyrexp.py -f ${log.dir}/step4_sends_fragments.log -p "\[\d+\]\s+(\d+)" -g -1 -t str
			</setvar>
		</step>

		<step no="4.3" delay="10">
			<desc>
				kill process which run in background.
			</desc>
			<log-file>step4.3_kill_process.log</log-file>
			<ssh target="br1.vpc1">
				-v "kill ${first.hping.pid}"
				-v "kill ${second.hping.pid}"
			</ssh>
		</step>

		<include prefix="5" file="subs/save_ap_log.xml" args="show logging buffered, br1.br, step5_show_logging_buffered.log" />

		<step no="5.1">
			<desc>
				check log
			</desc>
			<log-file>step5_show_logging_buffered.log</log-file>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "ACCEPT PACKET: SRC=${br1.vpc1.tif.ip} DST=${br1.vpc2.tif.ip} PROTO=ICMP TYPE=\d+ CODE=\d+ \(RULE=1001\)" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>

		<step no="6">
			<desc>
				kill process which run in background.
			</desc>
			<log-file>step6_kill_process.log</log-file>
			<ssh target="br1.vpc2">
				-v "kill ${br1.vpc2.tshark.pid}"
			</ssh>
		</step>

		<step no="6.1">
			<desc>
				cat files.
			</desc>
			<log-file>step6.1_check_result.log</log-file>
			<ssh target="br1.vpc2" timeout="250">
				-v "cat ${file_dir}/${capture.packet}"
			</ssh>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.vpc1.tif.ip}\s+->\s+${br1.vpc2.tif.ip}\s+ICMP\s+Echo\s+\(ping\)\s+request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "${br1.vpc2.tif.ip}\s+->\s+${br1.vpc1.tif.ip}\s+ICMP\s+Echo\s+\(ping\)\s+reply" -f ${log.dir}/${log.file}</log-match>
			<no-error-check />
		</step>
	</stage>

	<!--  <post-process>
		<stage>
			<step no="1">
				<desc>
					kill process
				</desc>
				<ssh target="br1.vpc2">
					-v "kill ${br1.vpc2.tshark.pid}"
					-v "rm -f ${file_dir}/${capture.packet}"
				</ssh>
			</step>


			<step no="2">
				<desc>
					-kill process
				</desc>
				<ssh target="br1.vpc1">
					-v "kill ${first.hping.pid}"
					-v "kill ${second.hping.pid}"
				</ssh>
			</step>
		</stage>		
	</post-process>-->
</testcase>
