<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Under mesh state and mp also have mmp connected, check if mp will do BGscan.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Test Procedure:

		1.AP1 wifi1 and AP2 wifi1 AP3 wifi1 backhual mode.
    2.shutdown AP2 eth0.AP3 eth0.
    3.after AP2 mesh with AP1,AP2 mesh with AP1,enable bgscan on AP2 wifi1.
    4.set bgscan interval to 1 minute.open _kdebug wifi-driver w1.1 scan
    5.check if AP2 will do bgscan.

	</description>
	<numofap>3</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<stage>
		<step no="1">
			<desc>
				AP configure
			</desc>
			<log-file>ap1_config.log</log-file>
			<console target="ap1">
				-v "hive bgscan_test"
				-v "interface mgt0 hive bgscan_test"
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 48"
				-v "save config"
			</console>
		</step>
		
		<step no="2">
			<desc>
				AP configure
			</desc>
			<log-file>ap2_config.log</log-file>
			<console target="ap2">
				-v "hive bgscan_test"
				-v "interface mgt0 hive bgscan_test"
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 48"
				-v "save config"
			</console>
		</step>
		
		<step no="3">
			<desc>
				AP configure
			</desc>
			<log-file>ap3_config.log</log-file>
			<console target="ap3">
				-v "hive bgscan_test"
				-v "interface mgt0 hive bgscan_test"
				-v "interface wifi1 mode backhaul"
				-v "interface wifi1 radio channel 48"
				-v "save config"
			</console>
		</step>

    <step no="4.1">
			<desc>
				check the mac of AP1 wifi1.1
			</desc>
			<log-file>step4.1_AP1_wifi.1_MAC.log</log-file>
			<console target="ap1">
				-v "show interface wifi1.1"
			</console>
		</step>

		<step no="4.2">
			<desc>
				get the mac of AP1 wifi1.1
			</desc>
			<setvar name="ap1_wifi1_mac">
				${bin.dir}/getbyrexp.py -p "MAC Addr=(\w+\:\w+\:\w+);" -f ${log.dir}/step4.1_AP1_wifi.1_MAC.log -t str
			</setvar>
		</step>
		
    <step no="4.3">
			<desc>
				check the mac of AP2 wifi1.1
			</desc>
			<log-file>step4.3_AP2_wifi.1_MAC.log</log-file>
			<console target="ap2">
				-v "show interface wifi1.1"
			</console>
		</step>

		<step no="4.4">
			<desc>
				get the mac of AP2 wifi1.1
			</desc>
			<setvar name="ap2_wifi1_mac">
				${bin.dir}/getbyrexp.py -p "MAC Addr=(\w+\:\w+\:\w+);" -f ${log.dir}/step4.3_AP2_wifi.1_MAC.log -t str
			</setvar>
		</step>
   
   <step no="4.5">
			<desc>
				check the mac of AP3 wifi1.1
			</desc>
			<log-file>step4.5_AP3_wifi.1_MAC.log</log-file>
			<console target="ap3">
				-v "show interface wifi1.1"
			</console>
		</step>

		<step no="4.6">
			<desc>
				get the mac of AP3 wifi1.1
			</desc>
			<setvar name="ap3_wifi1_mac">
				${bin.dir}/getbyrexp.py -p "MAC Addr=(\w+\:\w+\:\w+);" -f ${log.dir}/step4.5_AP3_wifi.1_MAC.log -t str
			</setvar>
		</step>
		
	 	<step no="5.1">
			<desc>
			Set mac filter for ap1
			</desc>
			<log-file>ap1_mac_filter.log</log-file>
			<console target="ap1">
				-v "security mac-filter test default deny"
				-v "security mac-filter test address ${ap2_wifi1_mac} permit"
				-v "hive bgscan_test security mac-filter test"
				-v "save config"
			</console>
		</step>
		
    <step no="5.2">
			<desc>
			Set mac filter for ap2
			</desc>
			<log-file>ap2_mac_filter.log</log-file>
			<console target="ap2">
				-v "security mac-filter test default deny"
				-v "security mac-filter test address ${ap1_wifi1_mac} permit"
				-v "security mac-filter test address ${ap3_wifi1_mac} permit"
				-v "hive bgscan_test security mac-filter test"
				-v "save config"
			</console>
		</step>
		
		<step no="5.3">
			<desc>
			Set mac filter for ap3
			</desc>
			<log-file>ap3_mac_filter.log</log-file>
			<console target="ap3">
				-v "security mac-filter test default deny"
				-v "security mac-filter test address ${ap2_wifi1_mac} permit"
				-v "hive bgscan_test security mac-filter test"
				-v "save config"
			</console>
		</step>
		
		<step no="6.1" delay="120">
			<desc>
			check if the three ap establish mesh
			</desc>
			<log-file>check_ap1_mesh.log</log-file>
			<console target="ap1">
				-v "show amrp nei"
			</console>
			<log-match>-e "${ap2_wifi1_mac}"</log-match>
		</step>
		
		<step no="6.2">
			<desc>
			check if the three ap establish mesh
			</desc>
			<log-file>check_ap2_mesh.log</log-file>
			<console target="ap2">
				-v "show amrp nei"
			</console>
			<log-match>-e "${ap1_wifi1_mac}"</log-match>
			<log-match>-e "${ap3_wifi1_mac}"</log-match>
		</step>
		
		<step no="6.3">
			<desc>
			check if the three ap establish mesh
			</desc>
			<log-file>check_ap3_mesh.log</log-file>
			<console target="ap3">
				-v "show amrp nei"
			</console>
			<log-match>-e "${ap2_wifi1_mac}"</log-match>
		</step>
		
		<step no="7">
			<desc>
				7.set the background scan interval of wifi1 to 1 minute.
				"radio profile ng scan access interval 1"
			</desc>
			<log-file>ap2_config_interval.log</log-file>
			<console target="ap2">
			  -v "radio profile na phymode 11na"
				-v "radio profile na scan access interval 1"
				-v "interface wifi1 radio profile na"
			</console>
		</step>
		
		<step no="8">
			<desc>
				8.open debug mode.
				"_kdebug wifi-driver wifi1.1 scan"
			</desc>
			<log-file>add_debug_1_info.log</log-file>
			<console target="ap2">
				-v "_kdebug wifi-driver wifi1.1 scan"
			</console>
		</step>
		
		<step no="9" delay="180">
		  <if>"${img.prodtype}" != "AP230" &amp;&amp; "${img.prodtype}" != "AP1130"</if>
			<desc>
				9.wait about 4 minute,background scan function will work,it will scan wifi0's
				channel.the channel value is same with channel list {ch}.the channel information is
				in the logging buffer printed on screen.
				"show logging buffer | include self"
			</desc>
			<log-file>show_wifi1_bgscan.log</log-file>
			<console target="ap2">
				-v "show logging buffer | in self"
			</console>
		</step>
		
		<step no="10" delay="180">
		  <if>"${img.prodtype}" == "AP230" || "${img.prodtype}" == "AP1130"</if>
			<desc>
				10.wait about 4 minute,background scan function will work,it will scan wifi0's
				channel.the channel value is same with channel list {ch}.the channel information is
				in the logging buffer printed on screen.
				"show logging buffer | include self"
			</desc>
			<log-file>show_wifi1_bgscan.log</log-file>
			<console target="ap1">
				-v "show logging buffer | in \"wl1: wlc_scan: scan channels\""
			</console>
		</step>
		
		<step no="11">
			<desc>show log buffer	</desc>
			<log-file>show_wifi1_logbuffer.log</log-file>
			<telnet target="ap1">
				-v "show logging buffer"
			</telnet>
			<no-error-check />
		</step>
		
		<step no="12.1">
			<desc>show log buffer	</desc>
			<log-file>show_wifi1_logbuffer.log</log-file>
			<setvar name="jump-check">
				cat ${log.dir}/${log.file} |grep "Skip bg-scan due to high load" >/dev/null; 
				if [ $? -eq 0 ]; then echo true; else echo false; fi
			</setvar>
			<no-error-check />
		</step>
		
		<step no="13">
		  <if>"${jump-check}" != "true"</if>
			<desc>match all channel	</desc>
			<script>
				perl ${case.dir}/bin/check-scan-channel.pl ${log.dir}/show_wifi1_bgscan.log dfswifi165
			</script>
		</step>
		
	</stage>
</testcase>
