<testcase>
	<brief>test wrr scheduler on cascade port . stream of queue is 2 1 on cascade port and the ratio is 3:3.2 . fiber_or_copper,port count:4</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<numofsw>1</numofsw>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<description>
		QOSFORVOIP_Function_cascade_wrr_12
		test wrr scheduler on cascade port . stream of queue is 2 1 on cascade port and the ratio is 3:3.2 . 
	</description>
	<comment>
		sw1.port1=eth1/21;
		sw1.port1.phytype=fiber;
		sw1.port5=eth1/25;
		sw1.port1.ixia_port=1/2/1;
		sw1.port1.ixia_port.phytype=fiber;
		sw1.terminal.port=2016;
		tb.conserver.ip=localhost
		ap1.cons_name=tb1-SR2024-2
		pub.chassis1.ip=10.155.33.216;
		pub.tclserver1.ip=10.155.30.164;
		pub.tclclient1.ip=10.155.40.10;
		sw1.tclclient.ip=10.155.32.228;
		sw1.mgmtport=eth1/1;
		sw1.mgmtvlan=121;
		tb.conserver.ip=10.155.32.228;
		tb.conserver.user=root;
		tb.conserver.passwd=aerohive;
		sw1.cons_name=tb1-SR2024-2;
		sw1.user=admin;
		sw1.passwd=aerohive;
		sw1.prompt="AH-[a-z0-9A-Z_]*#";
	</comment>
	<property name="correct_vlan" value="101" />
	<property name="tx_port1" value="${sw1.port1.ixia_port}" />
	<property name="tx_port1.phytype" value="${sw1.port1.ixia_port.phytype}" />
	<property name="tx_port2" value="${sw1.port2.ixia_port}" />
	<property name="tx_port2.phytype" value="${sw1.port2.ixia_port.phytype}" />
	<property name="rx_port1" value="${sw1.port3.ixia_port}" />
	<property name="rx_port1.phytype" value="${sw1.port3.ixia_port.phytype}" />
	<property name="rx_port2" value="${sw1.port4.ixia_port}" />
	<property name="rx_port2.phytype" value="${sw1.port4.ixia_port.phytype}" />
	<property name="qos_name" value="aa" />
	<property name="frame_size" value="1000" />
	<property name="frame_rate" value="12500" />
	<property name="defineratio" value="0.9375" />
	<property name="error" value="0.05" />
	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include prefix="pre" file="include/sw_default_pre_process.xml" />
	</pre-process>

	<stage>
		 <if>  "sw1.port1.ixia_port1"=="1/10/1" || "sw1.port1.ixia_port1"=="1/10/2" ||"sw1.port1.ixia_port1"=="1/10/3" ||"sw1.port1.ixia_port1"=="1/10/4" </if>
		<step no="1.1">
			<desc>
				basic config. config port as trunk mode. 
				set qos class profile to ${sw1.port1} and ${sw1.port2}, qos marker profile to ${sw1.port3} and ${sw1.port4}, enable qos
			</desc>
			<telnet target="sw1">
				-v 'vlan ${correct_vlan}'
				-v 'no interface ${sw1.port1} shutdown'
				-v 'interface ${sw1.port1} switchport mode trunk'
				-v 'interface ${sw1.port1} switchport trunk allow vlan ${correct_vlan}'
				-v 'no interface ${sw1.port2} shutdown'
				-v 'interface ${sw1.port2} switchport mode trunk'
				-v 'interface ${sw1.port2} switchport trunk allow vlan ${correct_vlan}'
				-v 'no interface ${sw1.port3} shutdown'
				-v 'interface ${sw1.port3} switchport mode trunk'
				-v 'interface ${sw1.port3} switchport trunk allow vlan ${correct_vlan}'
				-v 'no interface ${sw1.port4} shutdown'
				-v 'interface ${sw1.port4} switchport mode trunk'
				-v 'interface ${sw1.port4} switchport trunk allow vlan ${correct_vlan}'
				-v 'qos classifier-profile ${qos_name} 8021p'
				-v 'qos marker-profile ${qos_name} 8021p'
				-v 'interface ${sw1.port1} qos-classifier ${qos_name}'
				-v 'interface ${sw1.port2} qos-classifier ${qos_name}'
				-v 'interface ${sw1.port3} qos-marker ${qos_name}'
				-v 'interface ${sw1.port4} qos-marker ${qos_name}'
				-v 'qos enable'
			</telnet>
		</step>

		<step no="1.2">
			<desc>
				Set qos classifier map of ordered(dot1p)
			</desc>
			<telnet target="sw1">
				-v 'qos classifier-map 8021p 0 0'
				-v 'qos classifier-map 8021p 1 1'
				-v 'qos classifier-map 8021p 2 2'
				-v 'qos classifier-map 8021p 3 3'
				-v 'qos classifier-map 8021p 4 4'
				-v 'qos classifier-map 8021p 5 5'
				-v 'qos classifier-map 8021p 6 6'
				-v 'qos classifier-map 8021p 7 7'
			</telnet>
		</step>

		<step no="1.3">
			<desc>
				show classifier map table to check(dot1p)
			</desc>
			<log-file>step1.3_show_classifier_map.log</log-file>
			<telnet target="sw1">
				-v 'show qos classifier-map 8021p'
			</telnet>
			<log-match>-e '^\d\s+0\s+0' -re</log-match>
			<log-match>-e '^\d\s+1\s+1' -re</log-match>
			<log-match>-e '^\d\s+2\s+2' -re</log-match>
			<log-match>-e '^\d\s+3\s+3' -re</log-match>
			<log-match>-e '^\d\s+4\s+4' -re</log-match>
			<log-match>-e '^\d\s+5\s+5' -re</log-match>
			<log-match>-e '^\d\s+6\s+6' -re</log-match>
			<log-match>-e '^\d\s+7\s+7' -re</log-match>
		</step>

		<step no="1.4">
			<desc>
				Set qos marker map ordered(dot1p)
			</desc>
			<telnet target="sw1">
				-v 'qos marker-map 8021p 0 0'
				-v 'qos marker-map 8021p 1 1'
				-v 'qos marker-map 8021p 2 2'
				-v 'qos marker-map 8021p 3 3'
				-v 'qos marker-map 8021p 4 4'
				-v 'qos marker-map 8021p 5 5'
				-v 'qos marker-map 8021p 6 6'
				-v 'qos marker-map 8021p 7 7'
			</telnet>
		</step>

		<step no="1.5">
			<desc>
				show marker map table to check(dot1p)
			</desc>
			<log-file>step1.5_show_marker_map.log</log-file>
			<telnet target="sw1">
				-v 'show qos marker-map 8021p'
			</telnet>
			<log-match>-e '^\d\s+0\s+0' -re</log-match>
			<log-match>-e '^\d\s+1\s+1' -re</log-match>
			<log-match>-e '^\d\s+2\s+2' -re</log-match>
			<log-match>-e '^\d\s+3\s+3' -re</log-match>
			<log-match>-e '^\d\s+4\s+4' -re</log-match>
			<log-match>-e '^\d\s+5\s+5' -re</log-match>
			<log-match>-e '^\d\s+6\s+6' -re</log-match>
			<log-match>-e '^\d\s+7\s+7' -re</log-match>
		</step>

		<step no="1.6">
			<desc>
				show running to confirm
			</desc>
			<log-file>step1.6_show_running.log</log-file>
			<telnet target="sw1">
				-v 'show running-config'
			</telnet>
		</step>
</stage>

<stage loop-values="80,90,100" var-name="streampercent">
		 <if>  "sw1.port1.ixia_port1"=="1/10/1" || "sw1.port1.ixia_port1"=="1/10/2" ||"sw1.port1.ixia_port1"=="1/10/3" ||"sw1.port1.ixia_port1"=="1/10/4" </if>
		<step no="2.1">
			<desc>
				connect to ixia, configure ${sw1.port1} with queue 2 and ${sw1.port2} with queue 1. and ${sw1.port3} ${sw1.port4} receive 
				
					switch---ixia
				${sw1.port1}----${tx_port1}
				${sw1.port2}----${tx_port2}
				${sw1.port3}----${rx_port1}
				${sw1.port4}----${rx_port2}
			</desc>
			<log-file>step2.1_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect -chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip} -userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1},${tx_port2},${rx_port2} -phyList ${tx_port1.phytype},${rx_port1.phytype},${tx_port2.phytype},${rx_port2.phytype}"
				-v ""
				<!-- configure stream 1 queue 2 and rate is 1G -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst 0000.0000.0011
				-mac_src 0000.0000.0022
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 3
				-rate_pps ${frame_rate}
				-frame_length ${frame_size}"
				-v ""
				-v"stream_percent_rate_set -portList ${tx_port1}
				-streamId 1
				-percentRate ${streampercent}"
				-v ""
				<!-- configure stream 2 queue 1 and rate is 1G -->
				-v "traffic_configure_eth2 -portListIn ${tx_port2}
				-mac_dst 0000.0000.0033
				-mac_src 0000.0000.0044
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 1
				-rate_pps ${frame_rate}
				-frame_length ${frame_size}"
				-v ""
				
				-v "traffic_configure_eth2 -portListIn ${tx_port2}
				-mac_dst 0000.0000.0033
				-mac_src 0000.0000.0044
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 1
				-rate_pps ${frame_rate}
				-frame_length ${frame_size}"
				-v ""
				
				<!-- configure stream 1 and stream 2 with 100% rate to generate stream -->
				<!--make two stream, disable stream id 1 ,for statistic  -->
				-v "stream_maintance -onePort ${tx_port2} -streamId 1 -maintanceOp disable"
				-v "stream_percent_rate_set -portList ${tx_port2}
				  -streamId 2
				  -percentRate ${streampercent}"
				 -v ""
					<!-- configure 2 stream make the tested stream is unicast -->
				-v "traffic_configure_eth2 -portListIn ${rx_port1}
				-mac_dst 0000.0000.0022
				-mac_src 0000.0000.0011
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 4
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
			
				-v "traffic_configure_eth2 -portListIn ${rx_port2}
				-mac_dst 0000.0000.0044
				-mac_src 0000.0000.0033
				-vlan enable
				-vlan_id ${correct_vlan}
				-vlan_dot1p 4
				-rate_pps 10
				-frame_length ${frame_size}"
				-v ""
			
						
				<!-- configure port 1 and 2 to multi -v "port_multi_stream_statistic_set -portList ${tx_port1},${rx_port1}" -v "" disable stream 1 and 2 firstly -v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp disable" -v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp disable" -v "" start send frames on port1 -v "stop_transmit -portList ${tx_port1}" -v "" -v "clear_statistic -portList ${tx_port1},${rx_port1}" -v "" -v "start_transmit -portList ${tx_port1}" -v "" -v "wait_time -second 10" enaable stream 2 -v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp enable" -v "" -v "wait_time -second 10" -v "" enaable stream 1 -v "stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp enable" -v "" -v "wait_time -second 10" -v "" -v "stop_transmit -portList ${tx_port1}" -v "" -v "get_stream_statistic -portList ${tx_port1},${rx_port1}" -->
			
				-v "port_multi_stream_statistic_set -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v "stop_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v "clear_statistic -portList ${tx_port1},${rx_port1},${tx_port2},${rx_port2}"
				-v "start_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"

				<!--get multi stream statistic -->
				-v "sleep 10"
				-v "get_stream_statistic -portList ${rx_port1},${rx_port2}"
				-v "stop_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2} "
				-v "ctrl-c"
			</ssh>
			<no-error-check />
		</step>

		
		<step no="2.2">
			<desc>
				get stream receive rate of framerate
			</desc>
			<log-file>step2.2_receivestream.log</log-file>
			<multi-setvar>
				echo stream1.receiverate=$(${bin.dir}/getbyrexp.py -f	${log.dir}/step2.1_ixia_send_traffic.log -p '0.rx.port.${rx_port1}.1.frameRate=(\d+)' -t str)
				echo stream2.receiverate=$(${bin.dir}/getbyrexp.py -f	${log.dir}/step2.1_ixia_send_traffic.log -p '0.rx.port.${rx_port2}.2.frameRate=(\d+)' -t str)
			</multi-setvar>
		</step>


		<step no="2.3">
			<desc>calc the ratio of queue 2 with queue 1</desc>
			<setvar name="ratio">
			echo "scale=5;${stream1.receiverate}/${stream2.receiverate} "|bc
				

			</setvar>
		</step>
		
		<step no="2.4">
			<desc>the offset between defineratio and test result of realratio of queue 2 and queue 1</desc>
			<setvar name="ratioffest">
				echo "scale=5;( ${defineratio} - ${ratio} ) / ${defineratio} "|bc
			</setvar>
		</step>
		
		
		<step no="2.5">
			<desc> ratioffest is ${ratioffest},|ratioffset|more than 5% then fail ,if |ratioffest|less than 5% then pass </desc>
				<script>
				   echo ${ratioffest} ${error} | awk '{
				if ( $1 &gt; $2 ||  $1 &lt; -$2 )
				{exit(1);}
				else
				{exit(0);}
				}'
				</script>
    	</step>

	</stage>

	<post-process>
		<stage>
				<step no="3">
		    <desc>
				close the IXIA
			</desc>
			<log-file>step5.5_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="180">
			    -v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "stop_transmit -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2} "
				 -v "stream_delete_all -portList ${tx_port1},${tx_port2},${rx_port1},${rx_port2}"
				-v ""
					</ssh>
		</step>
		</stage>
		<include prefix="post" file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>