<testcase>
	<brief>Test qos-shape on GE port .fiber_or_copper,port count:2</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<numofsw>1</numofsw>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>
	<description>
		QOSFORVOIP_Function_shape_13
		Test qos-shape on GE port .
	</description>
	<comment>
		sw1.port1=eth1/21;
		sw1.port1.phytype=copper;
		sw1.port5=eth1/25;
		sw1.port1.ixia_port=1/2/1;
		sw1.port1.ixia_port.phytype=copper;
		sw1.terminal.port=2016;
		tb.conserver.ip=localhost
		ap1.cons_name=tb1-SR2024-2
		pub.chassis1.ip=10.155.33.216;
		pub.tclserver1.ip=10.155.30.164;
		pub.tclclient1.ip=10.155.40.10;
		sw1.tclclient.ip=10.155.32.228;
		sw1.mgmtport=eth1/1;
		sw1.mgmtvlan=121;
		tb.conserver.ip=10.155.32.228;
		tb.conserver.user=root;
		tb.conserver.passwd=aerohive;
		sw1.cons_name=tb1-SR2024-2;
		sw1.user=admin;
		sw1.passwd=aerohive;
		sw1.prompt="AH-[a-z0-9A-Z_]*#";
	</comment>
	<property name="correct_vlan" value="101" />
	<property name="tx_port1" value="${sw1.port1.ixia_port}" />
	<property name="tx_port1.phytype" value="${sw1.port1.ixia_port.phytype}" />
	<property name="rx_port1" value="${sw1.port2.ixia_port}" />
	<property name="rx_port1.phytype" value="${sw1.port2.ixia_port}" />
	<property name="qos_name" value="aa" />
	<property name="frame_size" value="1000" />
	<property name="frame_rate" value="12500" />
	<property name="error" value="0.05" />
	<pre-process>
		<stage>
			<!-- self defined steps -->
		</stage>
		<include prefix="pre" file="include/sw_default_pre_process.xml" />
	</pre-process>

	<stage>
		<step no="1.1">
			<desc>
				config vlan , basic config and enable qos
			</desc>
			<telnet target="sw1">
				-v 'vlan ${correct_vlan}'
				-v 'no interface ${sw1.port1} shutdown'
				-v 'interface ${sw1.port1} switchport mode trunk'
				-v 'interface ${sw1.port1} switchport trunk allow vlan ${correct_vlan}'
				-v 'no interface ${sw1.port2} shutdown'
				-v 'interface ${sw1.port2} switchport mode trunk'
				-v 'interface ${sw1.port2} switchport trunk allow vlan ${correct_vlan}'
				-v 'qos classifier-profile ${qos_name} 8021p'
				-v 'qos marker-profile	${qos_name} 8021p'
				-v 'interface ${sw1.port1} qos-classifier ${qos_name}'
				-v 'interface ${sw1.port2} qos-marker ${qos_name}'
				-v 'qos enable'
			</telnet>
		</step>

	</stage>



	<stage loop-values="1,10,80,160,320,640,800,900" var-name="step">

		<step no="2.0">
			<desc>define parameter for loop of qos shape </desc>
			<multi-setvar>
				let "temp=${step}*1024"
				echo "shapevalue=`printf %d $temp`"

			</multi-setvar>
		</step>
		
		<step no="2.1">
			<desc>
				set qos shaper on ${sw1.port2},and the shaper valve is  ${shapevalue}
			</desc>
			<log-file>step2.1_set_qos_sharper.log</log-file>
			<telnet target="sw1">
				-v 'interface ${sw1.port2} qos-shaper ${shapevalue}'
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				connect to ixia, configure stream port1 send traffic;
			</desc>
			<log-file>step2.2_ixia_send_traffic.log</log-file>
			<ssh target="${pub.tclclient1.ip}" prompt="%.*|root@.*#" timeout="900">
				-v "tclsh8.5"
				-v "package req ixia"
				-v ""
				-v "ah_ixia_connect
				-chassisIP ${pub.chassis1.ip} -tclServerIP ${pub.tclserver1.ip}
				-userName ${job.user}${job.sid} -portList ${tx_port1},${rx_port1}
				-phyList ${tx_port1.phytype},${rx_port1.phytype}"
				-v ""
				<!-- configure stream 1 with rate is 1G -->
				-v "traffic_configure_eth2 -portListIn ${tx_port1}
				-mac_dst
				0000.0000.0015
				-mac_src 0000.0000.0016
				-vlan enable
				-vlan_id
				${correct_vlan}
				-vlan_dot1p 5
				-rate_pps ${frame_rate}
				-frame_length
				${frame_size}"

				-v"stream_percent_rate_set -portList ${tx_port1}
				-streamId 1
				-percentRate 100"
				-v ""

				<!-- configure port 1 and 2 to multi -v "port_multi_stream_statistic_set 
					-portList ${tx_port1},${rx_port1}" -v "" disable stream 1 and 2 firstly -v 
					"stream_maintance -onePort ${tx_port1} -streamId 1 -maintanceOp disable" 
					-v "stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp disable" 
					-v "" start send frames on port1 -v "stop_transmit -portList ${tx_port1}" 
					-v "" -v "clear_statistic -portList ${tx_port1},${rx_port1}" -v "" -v "start_transmit 
					-portList ${tx_port1}" -v "" -v "wait_time -second 10" enaable stream 2 -v 
					"stream_maintance -onePort ${tx_port1} -streamId 2 -maintanceOp enable" -v 
					"" -v "wait_time -second 10" -v "" enaable stream 1 -v "stream_maintance 
					-onePort ${tx_port1} -streamId 1 -maintanceOp enable" -v "" -v "wait_time 
					-second 10" -v "" -v "stop_transmit -portList ${tx_port1}" -v "" -v "get_stream_statistic 
					-portList ${tx_port1},${rx_port1}" -->
				<!-- -v "start_stream_trans_getstats -txPortList ${tx_port1} -rxPortList 
					${rx_port1} -duration 10 -firstTryFlag false" -->

				<!-- configure multi stream statistic -->
				-v 'sleep 4'
				-v "port_multi_stream_statistic_set -portList
				${tx_port1},${rx_port1}"
				-v "stop_transmit -portList ${tx_port1}"
				-v
				"clear_statistic -portList ${tx_port1},${rx_port1}"
				-v
				"start_transmit -portList ${tx_port1}"

				<!--get multi stream statistic -->
				-v " get_stream_statistic -portList ${rx_port1}"
				-v " stop_transmit
				-portList ${tx_port1} "
				-v "ctrl-c"
			</ssh>
			<no-error-check />
		</step>




		<step no="2.3">
			<desc>
				get stream receive rate of framerate
			</desc>
			<setvar name="stream1.receiverate">
				${bin.dir}/getbyrexp.py -f	${log.dir}/step2.2_ixia_send_traffic.log -p '0.rx.port.${rx_port1}.1.frameRate=(\d+)' -t str
			</setvar>
		</step>


		<step no="2.4">
			<desc>define parameter for qos shape as Kbps </desc>
			<setvar name="stream1.receofKbps">
				let "temp=${stream1.receiverate} * 8 "
				echo "`printf %d $temp`"

			</setvar>
		</step>
		
		<step no="2.5">
			<desc>define parameter for compare margin of error</desc>
			<setvar name="stream1.realerror">
				echo "scale=5;( ${stream1.receofKbps} - ${shapevalue} ) / ${shapevalue} "|bc
			</setvar>
		</step>
		
		
		<step no="2.6">
			<desc> stream1.realerror is ${stream1.realerror},|realerror|more than 1.5% then fail ,if |realerror|less than 1.5% then pass </desc>
				<script>
				   echo ${stream1.realerror} ${error} | awk '{
				if ( $1 &gt; $2 ||  $1 &lt; -$2 )
				{exit(1);}
				else
				{exit(0);}
				}'
				</script>
    	</step>
		
		
			
	</stage>


	<post-process>
		<stage>
			<!-- self defined steps, no need script now -->
		</stage>
		<include prefix="post" file="include/sw_default_post_process.xml" />
	</post-process>
</testcase>