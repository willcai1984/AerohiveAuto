<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that report communication between Arbitrator and detector aps</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		Configure many ap with idp profile in one Hive

		Test Procedure:
		1. Configure an IDP profile with default settings.
		2. Bind it to interface wifi0 on all aps
		3. Put one rogue ap which can be detected, result 1
	</description>
	<numofap>3</numofap>
	<numofsta>0</numofsta>
	<tbtype>winlin</tbtype>

	<stage>
		<step no="1.1">
			<desc>
				Configure an IDP profile with default settings: ap1
			</desc>
			<telnet target="ap1">
				-v "capwap client enable"
				-v "capwap client server name ${pub.hm2.ip}"
				-v "security-object idp"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object idp"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "hive ${hive.name} wlan-idp mitigation-mode automatic"
				-v "hive ${hive.name} wlan-idp in-net-ap"
				-v "interface eth0 manage telnet"
				-v "interface eth0 manage snmp"
				-v "interface wifi0 radio channel 1"
				-v "interface wifi0 ssid ${ssid.name}"
			</telnet>
		</step>

		<step no="1.2">
			<desc>
				Configure an IDP profile with default settings: ap1
			</desc>
			<telnet target="ap1">
				-v "security wlan-idp profile rogue"
				-v "security wlan-idp profile rogue ap-policy"
				-v "security wlan-idp profile rogue ap-policy ssid"
				-v "security wlan-idp profile rogue ap-policy ssid entry ${ssid.name}"
				-v "security wlan-idp profile rogue ap-policy ssid entry ${ssid.name} encryption"
				-v "security wlan-idp profile rogue ap-policy ssid entry ${ssid.name} encryption wep"
				-v "security wlan-idp profile rogue ap-detection connected"
				-v "interface wifi0 wlan-idp profile rogue"
				-v "interface wifi1 wlan-idp profile rogue"
				-v "user-profile 1 qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "_debug dcd idp"
				-v "_debug dcd idp_da"
				-v "_debug dcd idp_detect"
				-v "clear log all"
			</telnet>
		</step>

		<step no="1.3">
			<desc>
				Configure an IDP profile with default settings: ap2
			</desc>
			<telnet target="ap2">
				-v "capwap client enable"
				-v "capwap client server name ${pub.hm2.ip}"
				-v "security-object idp"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object idp"
				-v "hive ${hive.name}"
				-v "interface mgt0 hive ${hive.name}"
				-v "hive ${hive.name} wlan-idp mitigation-mode automatic"
				-v "hive ${hive.name} wlan-idp in-net-ap"
				-v "interface eth0 manage telnet"
				-v "interface eth0 manage snmp"
				-v "interface wifi0 radio channel 1"
				-v "interface wifi0 ssid ${ssid.name}"
			</telnet>
		</step>

		<step no="1.4">
			<desc>
				Configure an IDP profile with default settings: ap2
			</desc>
			<telnet target="ap2">
				-v "security wlan-idp profile rogue"
				-v "security wlan-idp profile rogue ap-policy"
				-v "security wlan-idp profile rogue ap-policy ssid"
				-v "security wlan-idp profile rogue ap-policy ssid entry ${ssid.name}"
				-v "security wlan-idp profile rogue ap-policy ssid entry ${ssid.name} encryption"
				-v "security wlan-idp profile rogue ap-policy ssid entry ${ssid.name} encryption wep"
				-v "security wlan-idp profile rogue ap-detection connected"
				-v "interface wifi0 wlan-idp profile rogue"
				-v "interface wifi1 wlan-idp profile rogue"
				-v "user-profile 1 qos-policy def-user-qos vlan-id 1 attribute 1"
				-v "_debug dcd idp"
				-v "_debug dcd idp_da"
				-v "_debug dcd idp_detect"
				-v "clear log all"
			</telnet>
		</step>

		<step no="1.5">
			<desc>
				Configure many ap with idp profile in one Hive: ap3-rogue ap
			</desc>
			<telnet target="ap3">
				-v "ssid ${ssid.name}_rogue"
				-v "interface wifi0 radio channel 1"
				-v "interface wifi0 ssid ${ssid.name}_rogue"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2.1">
			<desc>show mgt0's ip of ap1</desc>
			<log-file>ap1_info.log</log-file>
			<telnet target="ap1" timeout="80">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="2.2">
			<desc>Get ap1's mac</desc>
			<setvar name="ap1.mgt0.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ap1_info.log -i mgt0 -o aero -m -width
			</setvar>
		</step>

		<step no="3.1">
			<desc>show mgt0's ip of ap2</desc>
			<log-file>ap2_info.log</log-file>
			<telnet target="ap2" timeout="80">
				-v "show interface mgt0"
			</telnet>
		</step>

		<step no="3.2">
			<desc>Get ap2's mac</desc>
			<setvar name="ap2.mgt0.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ap2_info.log -i mgt0 -o aero -m -width
			</setvar>
		</step>

		<step no="4.1">
			<desc>show wifi0's ip of ap3</desc>
			<log-file>ap3_info.log</log-file>
			<telnet target="ap3" timeout="80">
				-v "show interface wifi0.1"
			</telnet>
		</step>

		<step no="4.2">
			<desc>Get ap3's ip</desc>
			<setvar name="ap3.wifi0.mac">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ap3_info.log -i wifi0.1 -o aero -m -width
			</setvar>
		</step>

		<step no="5">
			<desc>
				check the detected ap is arbitrator ap
			</desc>
			<log-file>step5_get_Arbitrator_AP.log</log-file>
			<telnet target="ap1">
				-v "show wlan-idp mitigate"
			</telnet>
		</step>

		<step no="5.1">
			<desc>Get arbitrator ap's ip</desc>
			<setvar name="arbi.ip">
				${bin.dir}/getbyrexp.py -p "Arbitrator AP:\s+(\d+.\d+.\d+.\d+)" -f ${log.dir}/step5_get_Arbitrator_AP.log -t str
			</setvar>
		</step>

		<step no="5.2">
			<desc>Get arbitrator ap's ip</desc>
			<setvar name="arbi.ap">
				if [ "${arbi.ip}" = "${ap1.mgt0.ip}" ]
				then
				echo "ap1"
				elif [ "${arbi.ip}" = "${ap2.mgt0.ip}" ]
				then
				echo "ap2"
				else
				exit 1
				fi
			</setvar>
		</step>

		<step no="5.3">
			<desc>Get detector ap's ip</desc>
			<setvar name="dete.ap">
				if [ "${arbi.ip}" = "${ap1.mgt0.ip}" ]
				then
				echo "ap2"
				elif [ "${arbi.ip}" = "${ap2.mgt0.ip}" ]
				then
				echo "ap1"
				else
				exit 1
				fi
			</setvar>
		</step>

		<step no="5.4">
			<desc>Get detector ap's mac</desc>
			<setvar name="dete.mac">
				if [ "${arbi.ip}" = "${ap1.mgt0.ip}" ]
				then
				echo "${ap2.mgt0.mac}"
				elif [ "${arbi.ip}" = "${ap2.mgt0.ip}" ]
				then
				echo "${ap1.mgt0.mac}"
				else
				exit 1
				fi
			</setvar>
		</step>

		<step no="5.5">
			<desc>Get detector ap's ip</desc>
			<setvar name="dete.ip">
				if [ "${arbi.ip}" = "${ap1.mgt0.ip}" ]
				then
				echo "${ap2.mgt0.ip}"
				elif [ "${arbi.ip}" = "${ap2.mgt0.ip}" ]
				then
				echo "${ap1.mgt0.ip}"
				else
				exit 1
				fi
			</setvar>
		</step>

		<step no="6">
			<desc>
				-show wlan-idp mitigate status on detected ap
			</desc>
			<log-file>step6_check_Arbitrator_AP.log</log-file>
			<telnet target="${arbi.ap}">
				-v "show wlan-idp mitigate"
			</telnet>
			<log-match>-i "Arbitrator AP: *${arbi.ip}(myself)"</log-match>
			<log-match>-i "${ap3.wifi0.mac}"</log-match>
		</step>

		<step no="7">
			<desc>
				-Show the selected rogue ap status
			</desc>
			<log-file>step7_check_rogue_ap.log</log-file>
			<telnet target="${arbi.ap}">
				-v "show wlan-idp mitigate ${ap3.wifi0.mac}"
			</telnet>
		</step>

		<step no="8">
			<desc>
				show logging buffered, every detector aps will report the rogue ap’s info to Arbitrator periodically through neighborcom
			</desc>
			<log-file>step8_show_logging_buffered.log</log-file>
			<telnet target="${arbi.ap}">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "IDP: AP ${ap3.wifi0.mac} detected"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "IDP: arbitrator ip is updated from \d+.\d+.\d+.\d+ to ${arbi.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match>-i "\[dcd_idp_da\]: add a new same channel reporter AP ${dete.mac} on ${ap3.wifi0.mac}"</log-match>
			<log-match>-e "\[dcd_idp_da\]: update rogue AP ${ap3.wifi0.mac} from ${dete.mac} (${dete.ip}) radio wifi0" -e "\[dcd_idp_da\]: add a new rogue AP ${ap3.wifi0.mac} from ${dete.mac} (${dete.ip}) radio wifi0"</log-match>
		</step>

		<step no="9">
			<desc>
				show logging buffered, every detector aps will report the rogue ap’s info to Arbitrator periodically through neighborcom
			</desc>
			<log-file>step9_show_logging_buffered.log</log-file>
			<telnet target="${dete.ap}">
				-v "show logging buffered"
			</telnet>
			<no-error-check />
			<log-match>-i "IDP: AP ${ap3.wifi0.mac} detected"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "IDP: arbitrator ip is updated from \d+.\d+.\d+.\d+ to ${arbi.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\[dcd_idp_detector\]: push \d+ rogue APs on radio wifi0 to ${arbi.ip}" -f ${log.dir}/${log.file}</log-match>
			<log-match>-i "\[dcd_idp_detector\]: PUSH rogue APs to arbitrator AP ${arbi.ip}"</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "\[dcd_idp_detector\]: report \d+ APs on radio wifi0 to ${arbi.ip}" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>
</testcase>