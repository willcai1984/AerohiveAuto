<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Test the port forwarding nat-policy capacity 5.1r5 : 32/br(include 1:1 NAT nat-policy and port forwarding nat-policy) 6.0r1 : 128/br(include 1:1 NAT nat-policy and port forwarding nat-policy) Platform Dependence BR100,BR200,BRAP330,BRAP350</brief>
	<priority>Middle</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:
		1. establish vpn tunnel between eth0 of BR and CVG

		Test Procedure:
		1. Configure 32 port forwarding nat-policy on br, check result 1
		2. Add another port forwarding nat-policy on br ,check result 2
		3. delete one of the port forwarding nat-policy on br, check result 3
		4. add another port forwarding nat-policy on Br ,check result 4
		5. delete one of the port forwarding nat-policy on br, check result 3
		6. add another 1:1 NAT nat-policy on Br ,check result 4
		7. save configuration and reboot the br, check the nat-policy, result 5
	</description>
	<numofbr>1</numofbr>
	<numofcvg>1</numofcvg>
	<cvg-opt-arm>two</cvg-opt-arm>
	<cvg-opt-fw>yes</cvg-opt-fw>
	<tbtype>winlin</tbtype>

	<property name="inside.test.ip" value="1.1.1.1" />
	<property name="inside.test.subnet" value="1.1.1.0" />
	<property name="outside.test.subnet" value="2.2.2.0" />
	<property name="loop.list1" value="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,25,26,27,28,29,30,31,32,33,34" />
	<property name="loop.list2" value="35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67" />
	<property name="loop.list3" value="68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100" />
	<property name="loop.list4" value="101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132" />

	<stage>

		<include prefix="0" file="subs/vpn_setup_one.xml" obj-args="cvg1, br1" />

	</stage>

	<stage loop-values="${loop.list1}" var-name="br_policy_no1">
		<step no="1.${br_policy_no1}">
			<desc>
				Configure 32 port forwarding nat-policy on br
			</desc>
			<log-file>step1.${br_policy_no1}_Add_nat_policy.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="300">
				-v "ip nat-policy ${loop.v} type virtual-host inside-host ${inside.test.ip} inside-port ${loop.v} outside-port ${loop.v} protocol tcp"
			</telnet>
			<log-match>-n -c -i "Nat policy table is full"</log-match>
			<log-match>-n -c -i "ERROR: Invalid parameter(s)"</log-match>
		</step>
	</stage>

	<stage loop-values="${loop.list2}" var-name="br_policy_no2">
		<step no="2.${br_policy_no2}">
			<desc>
				Configure 32 port forwarding nat-policy on br
			</desc>
			<log-file>step2.${br_policy_no2}_Add_nat_policy.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="300">
				-v "ip nat-policy ${loop.v} type virtual-host inside-host ${inside.test.ip} inside-port ${loop.v} outside-port ${loop.v} protocol tcp"
			</telnet>
			<log-match>-n -c -i "Nat policy table is full"</log-match>
			<log-match>-n -c -i "ERROR: Invalid parameter(s)"</log-match>
		</step>
	</stage>

	<stage loop-values="${loop.list3}" var-name="br_policy_no3">
		<step no="3.${br_policy_no3}">
			<desc>
				Configure 32 port forwarding nat-policy on br
			</desc>
			<log-file>step3.${br_policy_no3}_Add_nat_policy.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="300">
				-v "ip nat-policy ${loop.v} type virtual-host inside-host ${inside.test.ip} inside-port ${loop.v} outside-port ${loop.v} protocol tcp"
			</telnet>
			<log-match>-n -c -i "Nat policy table is full"</log-match>
			<log-match>-n -c -i "ERROR: Invalid parameter(s)"</log-match>
		</step>
	</stage>

	<stage loop-values="${loop.list4}" var-name="br_policy_no4">
		<step no="4.${br_policy_no4}">
			<desc>
				Configure 32 port forwarding nat-policy on br
			</desc>
			<log-file>step4.${br_policy_no4}_Add_nat_policy.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="300">
				-v "ip nat-policy ${loop.v} type virtual-host inside-host ${inside.test.ip} inside-port ${loop.v} outside-port ${loop.v} protocol tcp"
			</telnet>
			<log-match>-n -c -i "Nat policy table is full"</log-match>
			<log-match>-n -c -i "ERROR: Invalid parameter(s)"</log-match>
		</step>
	</stage>

	<stage>
		<step no="5">
			<desc>
				show running config
			</desc>
			<log-file>step5_show_config.log</log-file>
			<telnet target="${br1.br.wan.ip}" timeout="300">
				-v "show running-config"
			</telnet>
			<log-match loop-values="${loop.list1}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list2}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list3}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list4}">-c -i "ip nat-policy ${loop.v}"</log-match>
		</step>
	</stage>

	<stage>
		<step no="6">
			<desc>
				Add another port forwarding nat-policy on br
			</desc>
			<log-file>step6_Add_nat_policy.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "ip nat-policy 132 type virtual-host inside-host ${inside.test.ip} inside-port 1132 outside-port 132 protocol tcp"
			</telnet>
			<no-error-check />
			<log-match>-c -i "Nat policy table is full"</log-match>
			<log-match>-c -i "ERROR: Invalid parameter(s)"</log-match>
		</step>
	</stage>

	<stage>
		<step no="7">
			<desc>
				delete one of the port forwarding nat-policy on br
				add another port forwarding nat-policy on Br
			</desc>
			<log-file>step7_Add_port_policy.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "no ip nat-policy 33"
				-v "ip nat-policy 133 type virtual-host inside-host ${inside.test.ip} inside-port 1133 outside-port 133 protocol tcp"
			</telnet>
			<log-match>-n -c -i "Nat policy table is full"</log-match>
			<log-match>-n -c -i "ERROR: Invalid parameter(s)"</log-match>
		</step>

		<step no="8">
			<desc>
				delete one of the port forwarding nat-policy on br
				add another 1:1 NAT nat-policy on Br
			</desc>
			<log-file>step8_Add_nat_policy.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "no ip nat-policy 34"
				-v "ip nat-policy 134 type match-net inside ${inside.test.subnet}/${br.lan.netmask} outside ${outside.test.subnet}/${br.lan.netmask}"
			</telnet>
			<log-match>-n -c -i "Nat policy table is full"</log-match>
			<log-match>-n -c -i "ERROR: Invalid parameter(s)"</log-match>
		</step>

		<step no="9">
			<desc>
				show running config
			</desc>
			<log-file>step9_show_config.log</log-file>
			<telnet target="${br1.br.wan.ip}">
				-v "show running-config"
				-v ""
				-v "save config"
			</telnet>
			<log-match loop-values="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,25,26,27,28,29,30">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list2}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list3}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list4}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match>-n -c -i "ip nat-policy 33"</log-match>
			<log-match>-n -c -i "ip nat-policy 34"</log-match>
			<log-match>-c -i "ip nat-policy 133"</log-match>
			<log-match>-c -i "ip nat-policy 134"</log-match>
		</step>

		<step no="10">
			<desc>
				reboot BR
			</desc>
			<console target="br1.br">
				-v "reboot"
			</console>
		</step>
	</stage>

	<stage>
		<step no="11" delay="30">
			<desc>
				show running config
			</desc>
			<log-file>step11_check_config.log</log-file>
			<console target="br1.br" timeout="300">
				-v "show running-config"
			</console>
			<log-match loop-values="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,25,26,27,28,29,30">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list2}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list3}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match loop-values="${loop.list4}">-c -i "ip nat-policy ${loop.v}"</log-match>
			<log-match>-n -c -i "ip nat-policy 33"</log-match>
			<log-match>-n -c -i "ip nat-policy 34"</log-match>
			<log-match>-c -i "ip nat-policy 133"</log-match>
			<log-match>-c -i "ip nat-policy 134"</log-match>
		</step>
	</stage>
</testcase>