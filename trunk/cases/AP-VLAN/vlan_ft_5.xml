<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Mesh vlan test</brief>
	<priority>Accept</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Test Procedure:
		1: Configure mgt0 vlan different from native vlan on mp, assume 58 and
		56 result 1
		2:server ping laptop, result 2
		3:laptop ping server, result 3
	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<stage>
		<step no="1">
			<desc>
				Two ap establish amrp neighbor successfully
				config ap1
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap1">
				-v "interface eth0 shutdown"
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
			</console>
		</step>
		
		<step no="1_0">
			<desc>
				Two ap establish amrp neighbor successfully
				config ap1
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap1">
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface eth0 shutdown"
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface wifi0 mode dual"
			</console>
		</step>

		<step no="1.1">
			<desc>
				Two ap establish amrp neighbor successfully
				config ap2
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap2">
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
			</console>
		</step>
		
		<step no="1.1_0">
			<desc>
				Two ap establish amrp neighbor successfully
				config ap2
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap2">
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface wifi0 mode dual"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
			</console>
		</step>
	
		<step no="1.2">
			<desc>
				shutdown interface eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="1.3.1">
			<desc>
				1: Configure ssid and client links to ap with ssid
			</desc>
			<console target="ap1">
				-v "user-profile user attribute 1"
				-v "user-profile user vlan-id ${tb.vlan2}"
			</console>
		</step>
		
		<step no="1.3.2">
			<desc>
				1: Configure ssid and client links to ap with ssid
			</desc>
			<console target="ap1">
				-v "security-object aero"
				-v "security-object aero default-user-profile-attr 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object aero"
				-v "interface wifi0 ssid ${ssid.name}"
			</console>
		</step>		
		
		<include prefix="1.4" file="subs/ap_mesh_set.xml" obj-args="ap1, ap2"/>

		<step no="1.5">
			<desc>
				Configure sta connect parameters
			</desc>
			<multi-setvar>
				echo "conn1.ssid=${ssid.name}"
				echo "conn1.proto=open"
				echo "conn1.pif=wifi0"
			</multi-setvar>
		</step>

		<include prefix="1.6" file="subs/sta_wifi_connect_${tb.os}.xml" obj-args="conn1, sta1, ap1" />
		
<!--		
		<step no="1.4">
			<desc>
				create config file of wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "echo \"ctrl_interface=/var/run/wpa_supplicant\" > /tmp/wpa_supplicant.cfg"
				-v "ifconfig ${sta1.tif.name} down"
				-v "ifconfig ${sta1.tif.name} up"
			</ssh>
		</step>

		<step no="1.5" delay="5">
			<desc>
				start wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "killall wpa_supplicant"
				-v "wpa_supplicant -i ${sta1.tif.name} -c /tmp/wpa_supplicant.cfg -B"
			</ssh>
		</step>

		<step no="1.6">
			<desc>
				pc connect ap
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="1.7" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>step1.7_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="1.8" delay="10">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="1.9" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>step1.9_ifconfig.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match> -e "inet addr"</log-match>
		</step>
-->
		<step no="1.7">
			<desc>Get GW's mac</desc>
			<script>
				echo "aerohive${tb.vlan2.gw.mac}" > ${log.dir}/gw.log
			</script>
		</step>

		<step no="1.8">
			<desc>Get GW's mac</desc>
			<setvar name="tb.vlan2.gw.mac">
				${bin.dir}/getbyrexp.py -p "aerohive(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" -f ${log.dir}/gw.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>

		<step no="2.1a">
			<desc>
				1: Configure mgt0 vlan different from native vlan on mp, assume 58 and
				56 result 1
			</desc>
			<console target="ap1">
				-v "interface mgt0 native-vlan ${tb.vlan3}"
			</console>
		</step>

		<step no="2.1b">
			<desc>
				show interface m0
			</desc>
			<log-file>step2.1b_show_interface_mgt0.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
			<log-match>-e "VLAN id=${tb.vlan2};\ \ Native vlan id=${tb.vlan3}"</log-match>
		</step>
		
		<step no="2.2a">
			<desc>
				1: Configure mgt0 vlan different from native vlan on mp, assume 58 and
				56 result 1
			</desc>
			<console target="ap2">
				-v "interface mgt0 native-vlan ${tb.vlan3}"
			</console>
		</step>

		<step no="2.2b">
			<desc>
				show interface m0
			</desc>
			<log-file>step2.2b_show_interface_mgt0.log</log-file>
			<console target="ap2">
				-v "show interface mgt0"
			</console>
			<log-match>-e "VLAN id=${tb.vlan2};\ \ Native vlan id=${tb.vlan3}"</log-match>
		</step>		

		<step no="3.0a" delay="10">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name} -r"
				-v ""
				-v ""
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>		
		
		<step no="3.0b" delay="10">
			<desc>ifconfig to show the ip add</desc>
			<log-file>ifconfig.log</log-file>
			<ssh target="sta1" timeout="80">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="3.1">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="3.2">
			<desc>Get laptop1's mac</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getbyrexp.py -p "HWaddr (\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2})" -f ${log.dir}/ifconfig.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>

		<step no="3.3">
			<desc>
				setup debugger
			</desc>
			<console target="ap1">
				-v "clear log all"
				-v "_ff id 1 dst-ip ${sta1.tif.ip} protocol 1 bidirection"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_kdebug fe vlan"
				-v "_kdebug wifi-driver wifi0.1 extend vlan"
				-v "_kdebug wifi-driver wifi1.1 extend vlan"
			</console>
		</step>

		<step no="3.4">
			<desc>
				2:server ping laptop, result 2
			</desc>
			<log-file>step3.4_server_ping_laptop.log</log-file>
			<ssh host="${pub.tftp1.ip}" timeout="200">
				-v "ping ${sta1.tif.ip} -I eth1 -c 5";exit 0
			</ssh>
		</step>

		<step no="3.5" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step3.5_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1\s+${pub.tftp1.tip}->${sta1.tif.ip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${tb.vlan2.gw.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1\s+${sta1.tif.ip}->${pub.tftp1.tip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1: ${sta1.tif.mac}->${tb.vlan2.gw.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan3}, sta vlan 0" -f ${log.dir}/${log.file}</log-match>			
			<no-error-check/>
		</step>

		<step no="3.5_0">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>step3.5_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1\s+${pub.tftp1.tip}->${sta1.tif.ip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${tb.vlan2.gw.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1\s+${sta1.tif.ip}->${pub.tftp1.tip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1: ${sta1.tif.mac}->${tb.vlan2.gw.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan3}, sta vlan 0" -f ${log.dir}/${log.file}</log-match>			
			<no-error-check/>
		</step>		

		<step no="3.6">
			<desc>
				clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="4">
			<desc>
				3:laptop ping server, result 3
			</desc>
			<log-file>step4_laptop_ping_server.log</log-file>
			<ssh target="sta1" timeout="200">
				-v "ping ${pub.tftp1.tip} -c 5"; exit 0
			</ssh>
		</step>

		<step no="4.1">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step4.1_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1\s+${sta1.tif.ip}->${pub.tftp1.tip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1: ${sta1.tif.mac}->${tb.vlan2.gw.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan3}, sta vlan 0" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1\s+${pub.tftp1.tip}->${sta1.tif.ip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${tb.vlan2.gw.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
		</step>
		
		<step no="4.1_0">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<log-file>step4.1_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1\s+${sta1.tif.ip}->${pub.tftp1.tip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1: ${sta1.tif.mac}->${tb.vlan2.gw.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan3}, sta vlan 0" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1\s+${pub.tftp1.tip}->${sta1.tif.ip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${tb.vlan2.gw.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
		</step>
	</stage>
</testcase>