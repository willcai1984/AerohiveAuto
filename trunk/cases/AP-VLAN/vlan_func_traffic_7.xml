<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Mesh vlan test</brief>
	<priority>Middle</priority>
	<automated>yes</automated>
	<description>
		Pre-condition	
			1.	two ap establish  amrp neighbor  on wifi1 successfully
			2.	ap1 is the mp,ap2 is the portal
			3.	Configure a ssid on ap wifi and bind the user-profile,user-profile vlan id 2
		Test procedure	
			1.	Configure mgt0 vlan id different with native vlan on ap1, mgt0 vlan id 2,native vlan is  57 
			2.	Check the mgt0 interface,result 1
			3.	Check the wifi1.1 interface,result 2
			4.	Sta connect to ap1 ssid and enable dhcp client,result 3
			5.	Server ping sta ,result 4
			6.	Sta ping server,result 4
		Expect result	
			1.	The mgt0 vlan id is 2, native vlan is 57
			2.	Wifi1.1 native vlan is 57
			3.	the dhcp packet on the wifi0.1
				vlan: 2
				interface vlan :1
				sta vlan:0
				the dhcp packet on the wifi1.1
				vlan: 2
				interface vlan :57
				sta vlan:0
				and sta get ip address from dhcp server vlan2 

			4.	The icmp packet vlan info  on wifi0.1
				vlan: 2
				interface vlan :1
				sta vlan :2
				The icmp packet vlan info  on wifi1.1
				vlan: 2
				interface vlan :57
				sta vlan :0

	</description>
	<numofap>2</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<stage>
		<step no="pre_1">
			<desc>
				config ap1 to shutdown eth0 
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap1">
				-v "interface eth0 shutdown"
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
			</console>
		</step>
		
		<step no="pre_2">
			<desc>
				config ap1
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap1">
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
				-v "interface eth0 shutdown"
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface wifi0 mode dual"
			</console>
		</step>

		<step no="pre_3">
			<desc>
				config ap2
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<console target="ap2">
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
			</console>
		</step>
		
		<step no="pre_4">
			<desc>
				config ap2
			</desc>
			<if> "${ap.is_aptbbr}" == "true" || "${ap.is_br}" == "true" </if>
			<console target="ap2">
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "no interface mgt0 dhcp-server enable"
				-v "no interface mgt0 ip"
				-v "interface mgt0 dhcp client"
				-v "interface wifi0 mode dual"
				-v "interface eth0 mode backhaul"
				-v "interface eth0 mac-learning enable"
			</console>
		</step>
	
		<step no="pre_5">
			<desc>
				shutdown interface eth1 for AP1 eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="pre_6">
			<desc>
				config user-profile for ap1 ssid
			</desc>
			<console target="ap1">
				-v "user-profile user attribute 1"
				-v "user-profile user vlan-id ${tb.vlan2}"
			</console>
		</step>
		
		<step no="pre_7">
			<desc>
				config ssid for AP1 wifi0
			</desc>
			<console target="ap1">
				-v "security-object aero"
				-v "security-object aero default-user-profile-attr 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object aero"
				-v "interface wifi0 ssid ${ssid.name}"
			</console>
		</step>		
		
		<include prefix="pre_8" file="subs/ap_mesh_set.xml" obj-args="ap1, ap2"/>
		
		<step no="1.1_1">
			<desc>1. Configure mgt0 vlan id different with native vlan on ap1, mgt0 vlan id ${tb.vlan2}, native-vlan is ${tb.vlan3}</desc>
			<log-file>step1_mgt0_vlan.log</log-file>
			<console target="ap1">
				-v "interface mgt0 native-vlan ${tb.vlan3}"
				-v "no interface mgt0 dhcp client"
				-v ""
				-v ""
				-v "interface mgt0 dhcp client"
			</console>
		</step>
		
		<step no="1.1_2">
			<desc>change ap2 mgt0 native-vlan is ${tb.vlan3}</desc>
			<log-file>ap2_mgt0_vlan.log</log-file>
			<console target="ap2">
				-v "interface mgt0 native-vlan ${tb.vlan3}"
				-v "no interface mgt0 dhcp client"
				-v ""
				-v ""
				-v "interface mgt0 dhcp client"
			</console>
		</step>
		
		<step no="2">
			<desc>2. check the mgt0 interface</desc>
			<log-file>show_ap1_mgt0.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
			<log-match>-e "VLAN id=${tb.vlan2};\ \ Native vlan id=${tb.vlan3}"</log-match>
		</step>
		
		<step no="3">
			<desc>3. check the wifi1.1 interface</desc>
			<log-file>show_wifi1_mgt0.log</log-file>
			<console target="ap1">
				-v "show interface wifi1.1"
			</console>
			<log-match>-e "Native-vlan=${tb.vlan3}"</log-match>
		</step>
		

		<step no="4.1">
			<desc>
				create config file of wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "echo \"ctrl_interface=/var/run/wpa_supplicant\" > /tmp/wpa_supplicant.cfg"
				-v "ifconfig ${sta1.tif.name} down"
				-v "ifconfig ${sta1.tif.name} up"
			</ssh>
		</step>

		<step no="4.2" delay="5">
			<desc>
				start wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "killall wpa_supplicant"
				-v "wpa_supplicant -i ${sta1.tif.name} -c /tmp/wpa_supplicant.cfg -B"
			</ssh>
		</step>

		<step no="4.3">
			<desc>
				pc connect ap
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="4.4" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>step4.4_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="4.5" delay="10">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="4.6" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>step4.6_ifconfig.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match> -e "inet addr"</log-match>
		</step>

		<step no="4.7">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step4.6_ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>
		
		<step no="4.8">
			<desc>Get laptop1's mac</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getbyrexp.py -p "HWaddr (\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2})" -f ${log.dir}/step4.6_ifconfig.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>
		
		<step no="4.9">
			<desc>Get GW's mac</desc>
			<script>
				echo "aerohive${tb.vlan2.gw.mac}" > ${log.dir}/gw.log
			</script>
		</step>

		<step no="4.10">
			<desc>Get GW's mac</desc>
			<setvar name="tb.vlan2.gw.mac">
				${bin.dir}/getbyrexp.py -p "aerohive(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" -f ${log.dir}/gw.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>
		
		<step no="4.11">
			<desc>
				open debug on ap1 to check dhcp pkts for sta1
			</desc>
			<console target="ap1">
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirection"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_kdebug fe vlan"
				-v "_kdebug wifi-driver wifi0.1 extend vlan"
				-v "_kdebug wifi-driver wifi1.1 extend vlan"
			</console>
		</step>	

		<step no="4.12">
			<desc>renew ip on station</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name} -r"
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>
		
		<step no="4.13" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step4.13_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${tb.vlan2.gw.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1: ${sta1.tif.mac}->ff:ff:ff:ff:ff:ff, vlan ${tb.vlan2}, interface vlan ${tb.vlan3}, sta vlan 0" -f ${log.dir}/${log.file}</log-match>
			<no-error-check/>

		<step no="5.1">
			<desc>
				open debug for icmp
			</desc>
			<console target="ap1">
				-v "clear log all"
				-v "no _ff id 1"
				-v "_ff id 1 dst-ip ${sta1.tif.ip} protocol 1 bidirection"
			</console>
		</step>			
			
		<step no="5.2">
			<desc>
				5:server ping laptop
			</desc>
			<log-file>step5.2_server_ping_laptop.log</log-file>
			<ssh host="${pub.tftp1.ip}" timeout="200">
				-v "ping ${sta1.tif.ip} -I eth1 -c 5";exit 0
			</ssh>
		</step>

		<step no="5.3" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step5.3_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1\s+${pub.tftp1.tip}->${sta1.tif.ip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${tb.vlan2.gw.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1\s+${sta1.tif.ip}->${pub.tftp1.tip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1: ${sta1.tif.mac}->${tb.vlan2.gw.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan3}, sta vlan 0" -f ${log.dir}/${log.file}</log-match>			
			<no-error-check/>
		</step>			

		<step no="5.4">
			<desc>
				clear log all
			</desc>
			<console target="ap1">
				-v "clear log all"
			</console>
		</step>

		<step no="6.1">
			<desc>
				6:laptop ping server
			</desc>
			<log-file>step6.1_laptop_ping_server.log</log-file>
			<ssh target="sta1" timeout="200">
				-v "ping ${pub.tftp1.tip} -c 5"; exit 0
			</ssh>
		</step>

		<step no="6.2">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step6.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1\s+${sta1.tif.ip}->${pub.tftp1.tip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi1.1: ${sta1.tif.mac}->${tb.vlan2.gw.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan3}, sta vlan 0" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1\s+${pub.tftp1.tip}->${sta1.tif.ip}\(\d+\)\s+ttl\(\d+\)\s+icmp-echo-reply" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${tb.vlan2.gw.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
		</step>		
			
		</step>			
	</stage>
</testcase>