<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Wifi vlan test</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-condition	
			1.	There are the dhcp server on vlan1~10
			2.	the dhcp server interface native vlan is 1 and allow all the vlans
			3.	AP is the default configuration
			4.	Mgt0 native vlan and vlan id are both 1
			5.	Eth0 native vlan is 1,and allow all vlan
			6.	Configure a ssid on ap wifi and bind the user-profile, sta link to the ssid
		Test procedure	
			1.	Configure the ssid user-profile vlan id is 1
			2.	Sat connect to the ssid and enable dhcp get ip address,result 1
			3.	Ap ping sta,result 2
			4.	Modify the ssid user-profile vlan id is 2
			5.	Sat connect to the ssid and enable dhcp get ip address,result 3
			6.	Ap ping sta,result 4
			7.	Modify the eth0 native vlan is  57
			8.	Sat connect to the ssid and enable dhcp get ip address,result 5
			9.	Ap ping sta,result 6
		Expect result	
			1.	the  vlan info on the dhcp packet
				vlan: 1
				interface vlan :1
				and sta get ip address from dhcp server vlan1
			2.	ap can ping to sta and the vlan info of the icmp packet
				vlan: 1
				interface vlan :1
				sta vlan :1
			3.	the  vlan info on the dhcp packet
				vlan: 2
				interface vlan :1
				and sta get ip address from dhcp server vlan2
			4.	ap can ping to sta and the vlan info of the icmp packet
				vlan: 2
				interface vlan :1
				sta vlan :2
			5.	the  vlan info on the dhcp packet
				vlan: 2
				interface vlan :57
				and sta get ip address from dhcp server vlan2
			6.	ap can ping to sta and the vlan info of the icmp packet
				vlan: 2
				interface vlan :57
				sta vlan :2

	</description>
	
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>
	
	<stage>
		<step no="pre_1">
			<desc> show mgt0 interface</desc>
			<log-file>show_mgt0_mac.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
		</step>
		
		<step no="pre_2.1">
            <desc>get mac address of ap1</desc>
                <setvar name="ap1.mgt0.mac">
                    ${bin.dir}/getbyrexp.py -p "MAC addr=([\da-fA-F:]+)" -f ${log.dir}/show_mgt0_mac.log -t str
                </setvar>
        </step>
		
		<step no="pre_2.2">
			<desc>Get GW's mac</desc>
			<script>
				echo "aerohive${ap1.mgt0.mac}" > ${log.dir}/mac.log
			</script>
		</step>
		
		<step no="pre_2.3">
			<desc>Get GW's mac</desc>
			<script>
				echo "aerohive${tb.vlan2.gw.mac}" > ${log.dir}/vlan2_mac.log
			</script>
		</step>

		<step no="pre_2.3">
			<desc>Get GW's mac</desc>
			<setvar name="tb.vlan2.gw.mac">
				${bin.dir}/getbyrexp.py -p "aerohive(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" -f ${log.dir}/vlan2_mac.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>

		<step no="pre_2.3">
			<desc>Get GW's mac</desc>
			<setvar name="ap1.mgt0.mac">
				${bin.dir}/getbyrexp.py -p "aerohive(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" -f ${log.dir}/mac.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>
		
		<step no="pre_3">
			<desc>get prefix of vlan ${tb.vlan1}</desc>
			<multi-setvar>
				echo "vlan1_network_prefix=$(echo ${tb.vlan1.dhcp_start} | cut -d. -f1,2,3)"
			</multi-setvar>
		</step>
		
		<step no="pre_4">
			<desc> 
			1. configure the mgt0 vlan/native-vlan id ${tb.vlan1}, and check the mgt0 interface
			</desc>
			<log-file>step_4_mgt0_vlan.log</log-file>
			<console target="ap1">
				-v "interface mgt0 vlan ${tb.vlan1}"
				-v "interface mgt0 native-vlan ${tb.vlan1}"
				-v "show interface mgt0"
			</console>
			<log-match>-e "VLAN id=${tb.vlan1};\ \ Native vlan id=${tb.vlan1}"</log-match>
		</step>
		<step no="pre_5">
			<desc>
				enable dhcp client on mgt0 interface
			</desc>
			<log-file>step_5_mgt0_dhcp.log</log-file>
			<console target="ap1">
				-v "no interface mgt0 dhcp client"
				-v ""
				-v ""
				-v "interface mgt0 dhcp client"
			</console>
		</step>
		
		<step no="pre_6">
			<desc>
				show mgt0 ip address
			</desc>
			<log-file>step_6_mgt0_ip.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>			
		</step>
		
		<step no="pre_7.1">
            <desc>get ip address of ap1</desc>
                <setvar name="ap1.mgt0.ip">
                    ${bin.dir}/getbyrexp.py -p "IP addr=([\d.]+)" -f ${log.dir}/step_6_mgt0_ip.log -t str
                </setvar>
        </step>	
		
		<step no="pre_8">
			<desc>get prefix of mgt0 ip </desc>
			<multi-setvar>
				echo "ap1_mgt0_ip_prefix=$(echo ${ap1.mgt0.ip} | cut -d. -f1,2,3)"
			</multi-setvar>
		</step>
		
        <step no="pre_9">
            <desc>
                3.6 check if ap1 mgt0 get ip address from vlan ${tb1.vlan1} successfully
            </desc>
            <script>
                if [ "${vlan1_network_prefix}" == "${ap1_mgt0_ip_prefix}" ]; then exit 0; else exit 1; fi
            </script>
        </step>	

		
		<step no="pre_10">
			<desc>config user-profile for ${tb.vlan1},${tb.vlan2},${tb.vlan3}</desc>
			<log-file>step_10_profile.log</log-file>
			<console target="ap1">
				-v "user-profile ${tb.vlan1} qos-policy def-user-qos vlan-id ${tb.vlan1} attribute ${tb.vlan1}"
				-v "user-profile ${tb.vlan2} qos-policy def-user-qos vlan-id ${tb.vlan2} attribute ${tb.vlan2}"
				-v "user-profile ${tb.vlan3} qos-policy def-user-qos vlan-id ${tb.vlan3} attribute ${tb.vlan3}"
			</console>
		</step>
		
		<step no="pre_11">
			<desc>create ssid on ap</desc>
			<log-file>step_11_ap_ssid.log</log-file>
			<console target="ap1">
				-v "ssid ${ssid.name}"
				-v "security-object ${ssid.name}"
				-v "security-object ${ssid.name} security protocol-suite open"
				-v "security-object ${ssid.name} default-user-profile-attr ${tb.vlan2}"
				-v "ssid ${ssid.name} security-object ${ssid.name}"
				-v "interface wifi0 ssid ${ssid.name}"
				-v "save config"
				-v ""
				-v "show interface"
				-v ""
				-v ""			
			</console>
		</step>
		
		<step no="1.0">
			<desc> 
			1. Configure the ssid user-profile vlan id is ${tb.vlan1}
			</desc>
			<log-file>step1_mgt0_vlan.log</log-file>
			<console target="ap1">
				-v "security-object ${ssid.name} default-user-profile-attr ${tb.vlan1}"
			</console>
		</step>		
			
		<step no="2.1">
			<desc>				
				2.	Sat connect to the ssid and enable dhcp get ip address
				create config file of wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "echo \"ctrl_interface=/var/run/wpa_supplicant\" > /tmp/wpa_supplicant.cfg"
				-v "ifconfig ${sta1.tif.name} down"
				-v "ifconfig ${sta1.tif.name} up"
			</ssh>
		</step>

		<step no="2.2" delay="5">
			<desc>
				start wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "killall wpa_supplicant"
				-v "wpa_supplicant -i ${sta1.tif.name} -c /tmp/wpa_supplicant.cfg -B"
			</ssh>
		</step>

		<step no="2.3">
			<desc>
				station connect ap
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="2.4" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>step2.4_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="2.5">
			<desc>
				open debug to check sta1 dhcp pkts forwarding
			</desc>
			<console target="ap1">
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirectional"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_kdebug fe vlan"
				-v "_kdebug eth vlan"
				-v "_kdebug wifi-driver wifi0.1 extend vlan"
				-v "_kdebug wifi-driver wifi1.1 extend vlan"
			</console>
		</step>		
		
		<step no="2.6" delay="10">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name} -r"
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="2.7" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>step2.7_ifconfig.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match> -e "inet addr"</log-match>
		</step>
		
		<step no="2.8">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step2.7_ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>

		<step no="2.9">
			<desc>Get station's mac</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getbyrexp.py -p "HWaddr (\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2})" -f ${log.dir}/step2.7_ifconfig.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>
		
		<step no="2.10" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step2.10_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth0 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "packet vlan ${tb.vlan1}, interface vlan ${tb.vlan1}" -f ${log.dir}/${log.file}</log-match>
			<no-error-check/>
		</step>
		
		<step no="3.1">
			<desc>3. ap ping sta</desc>
			<log-file>step3.1_ping.log</log-file>
			<console target="ap1">
				-v "no _ff id 1"
				-v "clear log all"
				-v "_ff id 1 dst-ip ${sta1.tif.ip} protocol 1 bidirectional"
				-v ""
				-v ""
				-v "ping ${sta1.tif.ip} count 5"
			</console>
			<log-match>-c -i "from ${sta1.tif.ip}: icmp_seq" -i "ttl="</log-match>
		</step>
		
		<step no="3.2" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step3.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "mgt0 ${ap1.mgt0.ip}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 ${ap1.mgt0.ip}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${ap1.mgt0.mac}->${sta1.tif.mac}, vlan ${tb.vlan1}, interface vlan ${tb.vlan1}, sta vlan ${tb.vlan1}" -f ${log.dir}/${log.file}</log-match>
			<no-error-check/>
		</step>
		

		<step no="4.1">
			<desc>4.	Modify the ssid user-profile vlan id is ${tb.vlan2}</desc>
			<console target="ap1">
				-v "security-object ${ssid.name} default-user-profile-attr ${tb.vlan2}"
			</console>
		</step>

		<step no="5.1">
			<desc>
				5.	Sat connect to the ssid and enable dhcp get ip address
				create config file of wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "echo \"ctrl_interface=/var/run/wpa_supplicant\" > /tmp/wpa_supplicant.cfg"
				-v "ifconfig ${sta1.tif.name} down"
				-v "ifconfig ${sta1.tif.name} up"
			</ssh>
		</step>

		<step no="5.2" delay="5">
			<desc>
				start wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "killall wpa_supplicant"
				-v "wpa_supplicant -i ${sta1.tif.name} -c /tmp/wpa_supplicant.cfg -B"
			</ssh>
		</step>

		<step no="5.3">
			<desc>
				station connect ap
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="5.4" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>step5.4_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="5.5">
			<desc>
				open debug to check sta1 dhcp pkts forwarding
			</desc>
			<console target="ap1">
				-v "no _ff id 1"
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirectional"
			</console>
		</step>		
		
		<step no="5.6" delay="10">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name} -r"
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="5.7" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>step5.7_ifconfig.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match> -e "inet addr"</log-match>
		</step>

		<step no="5.8">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step5.7_ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>
		
		<step no="5.9" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step5.9_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth0 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "packet vlan ${tb.vlan2}, interface vlan ${tb.vlan1}" -f ${log.dir}/${log.file}</log-match>
			<no-error-check/>
		</step>
		
		<step no="6.1">
			<desc>6. ap ping sta</desc>
			<log-file>step6.1_ping.log</log-file>
			<console target="ap1">
				-v "no _ff id 1"
				-v "clear log all"
				-v "_ff id 1 dst-ip ${sta1.tif.ip} protocol 1 bidirectional"
				-v ""
				-v ""
				-v "ping ${sta1.tif.ip} count 2"
			</console>
			<log-match>-c -i "from ${sta1.tif.ip}: icmp_seq" -i "ttl="</log-match>
		</step>
		
		<step no="6.2" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step6.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "mgt0 ${ap1.mgt0.ip}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 ${ap1.mgt0.ip}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${tb.vlan2.gw.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
			<no-error-check/>
		</step>		

		<step no="7.1">
			<desc> 
				7.	Modify the eth0 native vlan is  57 and change mgt0 vlan to make sure ap traffic can go to outside
			</desc>
			<log-file>step7.1_mgt0_vlan.log</log-file>
			<console target="ap1">
				-v "interface eth0 native-vlan ${tb.vlan3}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "no interface mgt0 dhcp client"
				-v ""
				-v "interface mgt0 dhcp client"
			</console>
		</step>	
		
		<step no="7.2">
			<desc> 
				check mgt0 vlan and ip address
			</desc>
			<log-file>step7.2_mgt0_vlan.log</log-file>
			<console target="ap1">
				-v "show interface mgt0"
			</console>
			<log-match>-e "VLAN id=${tb.vlan2};\ \ Native vlan id=${tb.vlan1}"</log-match>
		</step>			

		<step no="7.3">
            <desc>get ip address of ap1</desc>
                <setvar name="ap1.mgt0.ip">
                    ${bin.dir}/getbyrexp.py -p "IP addr=([\d.]+)" -f ${log.dir}/step7.2_mgt0_vlan.log -t str
                </setvar>
        </step>			
		
		<step no="8.1">
			<desc>
				8.	Sat connect to the ssid and enable dhcp get ip address
				create config file of wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "echo \"ctrl_interface=/var/run/wpa_supplicant\" > /tmp/wpa_supplicant.cfg"
				-v "ifconfig ${sta1.tif.name} down"
				-v "ifconfig ${sta1.tif.name} up"
			</ssh>
		</step>

		<step no="8.2" delay="5">
			<desc>
				start wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "killall wpa_supplicant"
				-v "wpa_supplicant -i ${sta1.tif.name} -c /tmp/wpa_supplicant.cfg -B"
			</ssh>
		</step>

		<step no="8.3">
			<desc>
				station connect ap
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="8.4" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>step8.4_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="8.5">
			<desc>
				open debug to check sta1 dhcp pkts forwarding
			</desc>
			<console target="ap1">
				-v "no _ff id 1"
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirectional"
			</console>
		</step>		
		
		<step no="8.6" delay="10">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name} -r"
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="8.7" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>step8.7_ifconfig.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match> -e "inet addr"</log-match>
		</step>
		
		<step no="8.8">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step8.7_ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>	
		
		<step no="8.9" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step8.9_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth0 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "packet vlan ${tb.vlan2}, interface vlan ${tb.vlan3}" -f ${log.dir}/${log.file}</log-match>
			<no-error-check/>
		</step>	
		
		<step no="9.1">
			<desc>9. ap ping sta</desc>
			<log-file>step9.1_ping.log</log-file>
			<console target="ap1">
				-v "no _ff id 1"
				-v "clear log all"
				-v "_ff id 1 dst-ip ${sta1.tif.ip} protocol 1 bidirectional"
				-v ""
				-v ""
				-v "ping ${sta1.tif.ip} count 2"
			</console>
			<log-match>-c -i "from ${sta1.tif.ip}: icmp_seq" -i "ttl="</log-match>
		</step>
		
		<step no="9.2" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step9.2_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "mgt0 ${ap1.mgt0.ip}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 ${ap1.mgt0.ip}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) icmp-echo-req" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1: ${ap1.mgt0.mac}->${sta1.tif.mac}, vlan ${tb.vlan2}, interface vlan ${tb.vlan2}, sta vlan ${tb.vlan2}" -f ${log.dir}/${log.file}</log-match>
			<no-error-check/>
		</step>			
		
 
	</stage>
	
</testcase>