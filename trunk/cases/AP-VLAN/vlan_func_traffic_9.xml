<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Broadcast packet forwarded on mesh network when eth0 is up</brief>
	<priority>Middle</priority>
	<automated>yes</automated>
	<description>
		Pre-condition	
			1.	There are the dhcp server on vlan1~10
			2.	the dhcp server interface native vlan is 1 and allow all the vlans
			3.	AP is the default configuration
			4.	Configure a ssid on ap wifi and bind the user-profile and the user-profile vlan id is 2, sta link to the ssid
		Test procedure	
			1.	Config the wifi1 mode backhaul
			2.	Configure eth0 native vlan is  57 ,check the eth0 interface,result 1
			3.	Sta connect to ap ssid and enable dhcp client,sta get ip address from dhcp server
			4.	check the dhcp broadcast packet result 2
		Expect result	
			1.	native vlan is 57
			2.	the dhcp discover and request packet is received on wifi0.1, and  the dhcp discover and request packet is forwarded on eth0 and wifi1.1,don’t flood on the other interface
				the dhcp offer and ack packet is received on eth0, and the  dhcp offer and ack packet is forwarded on wifi1.1 and wifi0.1,don’t flood on the other interface

	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>linux</tbtype>

	<stage>		
		<step no="pre_1">
			<desc>
				config ap1 mgt0 vlan
			</desc>
			<console target="ap1">
				-v "interface eth0 mode backhaul"
				-v "interface mgt0 native-vlan ${tb.vlan2}"
				-v "interface mgt0 vlan ${tb.vlan2}"
				-v "no interface mgt0 dhcp client"
				-v ""
				-v ""
				-v "interface mgt0 dhcp client"
			</console>
		</step>
	
		<step no="pre_2">
			<desc>
				shutdown interface eth1 for AP1 eth1
			</desc>
			<if>"${ap.eth1.existed}" == "true"</if>
			<console target="ap1">
				-v "interface eth1 shutdown"
			</console>
		</step>

		<step no="pre_3">
			<desc>
				config user-profile for ap1 ssid
			</desc>
			<console target="ap1">
				-v "user-profile user attribute 1"
				-v "user-profile user vlan-id ${tb.vlan2}"
			</console>
		</step>
		
		<step no="pre_4">
			<desc>
				config ssid for AP1 wifi0
			</desc>
			<console target="ap1">
				-v "security-object aero"
				-v "security-object aero default-user-profile-attr 1"
				-v "ssid ${ssid.name}"
				-v "ssid ${ssid.name} security-object aero"
				-v "interface wifi0 ssid ${ssid.name}"
			</console>
		</step>		
				
		<step no="1">
			<desc>1. configure wifi1 mode backhaul</desc>
			<log-file>step1_wifi1_mode.log</log-file>
			<console target="ap1">
				-v "interface wifi1 mode backhaul"
				-v "show interface wifi1"
			</console>
			<log-match>-e "Mode=backhaul"</log-match>
		</step>
		
		
		<step no="2.1">
			<desc>2. config eth0 native-vlan ${tb.vlan3}, check the eht0 interface</desc>
			<log-file>step2.1_ap1_eth0.log</log-file>
			<console target="ap1">
				-v "interface eth0 native-vlan ${tb.vlan3}"
				-v "show interface eth0"
			</console>
			<log-match>-e "Native-vlan=${tb.vlan3}"</log-match>
		</step>
		
		<step no="2.2">
			<desc>3. check the wifi1.1 interface</desc>
			<log-file>step2.2_wifi1_vlan.log</log-file>
			<console target="ap1">
				-v "show interface wifi1.1"
			</console>
			<log-match>-e "Native-vlan=${tb.vlan2}"</log-match>
		</step>
		

		<step no="3.1">
			<desc>
				3.	Sta connect to ap ssid and enable dhcp client,sta get ip address from dhcp server
				create config file of wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "echo \"ctrl_interface=/var/run/wpa_supplicant\" > /tmp/wpa_supplicant.cfg"
				-v "ifconfig ${sta1.tif.name} down"
				-v "ifconfig ${sta1.tif.name} up"
			</ssh>
		</step>

		<step no="3.2" delay="5">
			<desc>
				start wpa_supplicant
			</desc>
			<ssh target="sta1">
				-v "killall wpa_supplicant"
				-v "wpa_supplicant -i ${sta1.tif.name} -c /tmp/wpa_supplicant.cfg -B"
			</ssh>
		</step>

		<step no="3.3">
			<desc>
				pc connect ap
			</desc>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "reconfig"
				-v "add_network"
				-v "set_network 0 ssid \"${ssid.name}\""
				-v "set_network 0 key_mgmt NONE"
				-v "enable_network 0"
				-v "quit"
			</ssh>
		</step>

		<step no="3.4" delay="10" type="loop-check" loop-max-times="10" loop-interval="5">
			<desc>check if the client was associated successfully</desc>
			<log-file>step3.4_wpa_stat_tmp_${loop_check.idx}.log</log-file>
			<ssh target="sta1" prompt=">|.*#">
				-v "wpa_cli"
				-v "stat"
				-v "quit"
			</ssh>
			<log-match>-e "wpa_state=COMPLETED"</log-match>
		</step>

		<step no="3.5" delay="10">
			<desc>client gets IP by dhclient</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>

		<step no="3.6" delay="10">
			<desc>ifconfig to show the ip adrr</desc>
			<log-file>step3.6_ifconfig.log</log-file>
			<ssh target="sta1">
				-v "ifconfig ${sta1.tif.name}"
			</ssh>
			<log-match> -e "inet addr"</log-match>
		</step>

		<step no="3.7">
			<desc>Get laptop1's ip</desc>
			<setvar name="sta1.tif.ip">
				perl ${bin.dir}/getrmtip.pl -f ${log.dir}/step3.6_ifconfig.log -i ${sta1.tif.name} -nomask
			</setvar>
		</step>
		
		<step no="3.8">
			<desc>Get laptop1's mac</desc>
			<setvar name="sta1.tif.mac">
				${bin.dir}/getbyrexp.py -p "HWaddr (\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2})" -f ${log.dir}/step3.6_ifconfig.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>
		
		<step no="3.9">
			<desc>Get GW's mac</desc>
			<script>
				echo "aerohive${tb.vlan2.gw.mac}" > ${log.dir}/gw.log
			</script>
		</step>

		<step no="3.10">
			<desc>Get GW's mac</desc>
			<setvar name="tb.vlan2.gw.mac">
				${bin.dir}/getbyrexp.py -p "aerohive(\S{2})(\S{2}):(\S{2})(\S{2}):(\S{2})(\S{2})" -f ${log.dir}/gw.log -t str --script "':'.join(m.groups()).lower()"
			</setvar>
		</step>
		
		<step no="4.1">
			<desc>
				open debug on ap1 to check dhcp broadcast pkts for sta1
			</desc>
			<console target="ap1">
				-v "clear log all"
				-v "_ff id 1 dst-port 67 bidirection"
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_kdebug fe vlan"
				-v "_kdebug wifi-driver wifi0.1 extend vlan"
				-v "_kdebug wifi-driver wifi1.1 extend vlan"
			</console>
		</step>	

		<step no="4.2">
			<desc>renew ip on station</desc>
			<ssh target="sta1">
				-v "dhclient ${sta1.tif.name} -r"
				-v "dhclient ${sta1.tif.name}"
			</ssh>
		</step>
		
		<step no="4.3" delay="10">
			<desc>
				check logging buffered
			</desc>
			<if> "${ap.is_aptbbr}" != "true" &amp;&amp; "${ap.is_br}" != "true" </if>
			<log-file>step4.3_show_logging_buffered.log</log-file>
			<console target="ap1">
				-v "show logging buffered"
			</console>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth0 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Discover" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth0 0.0.0.0->255.255.255.255\(\d+\) ttl\(\d+\) UDP 68->67 DHCP Request" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth0 ${tb.vlan2.gw}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) UDP 67->68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 ${tb.vlan2.gw}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) UDP 67->68 DHCP Offer" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "eth0 ${tb.vlan2.gw}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) UDP 67->68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<log-match bin="${bin.dir}/searchbyrexp.py">-p "wifi0.1 ${tb.vlan2.gw}->${sta1.tif.ip}\(\d+\) ttl\(\d+\) UDP 67->68 DHCP Ack" -f ${log.dir}/${log.file}</log-match>
			<no-error-check/>		
		</step>	
				
	</stage>
</testcase>