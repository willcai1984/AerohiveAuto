<?xml version="1.0" encoding="UTF-8"?>
<testcase>
	<brief>Verify that the log message can be stored to flash - /f/etc/err_messages, when this file exceeds limit and a file "/f/etc/err_messages.0" is used to store the previous error messages. and a new empty file "err_messages" is created.</brief>
	<priority>High</priority>
	<automated>yes</automated>
	<description>
		Pre-Condition:

		Default setting

		Test Procedure:

		1. Let log message writing to the file to max size 64k bytes.
		2. Check whether there is a new file /f/etc/err_messages, and one
		backup file /f/etc/err_messages.0.
		3. Check log message should write to the file f/etc/err_messages
	</description>
	<numofap>1</numofap>
	<numofsta>1</numofsta>
	<tbtype>winlin</tbtype>

	<property name="path_messages" value="/f/etc/" />
	<property name="conn1.ssid" value="${ssid.name}_1" />
	<property name="tftpboot" value="/tftpboot/" />

	<stage>
		<step no="1">
			<desc>show logging to check default setting</desc>
			<log-file>step1_show_logging_to_check_default_setting.log</log-file>
			<telnet target="ap1">
				-v "show logging"
			</telnet>
			<log-match>-c -i "Buffered Level:" -i "debug"</log-match>
			<log-match>-c -i "Flash level:" -i "error"</log-match>
		</step>

		<step no="1.1">
			<desc>logging flash level debug</desc>
			<telnet target="ap1">
				-v "logging flash level debug"
			</telnet>
		</step>

		<step no="1.2">
			<desc>show logging to check logging flash level debug</desc>
			<log-file>step1.2_check_logging_flash_debug.log</log-file>
			<telnet target="ap1">
				-v "show logging"
			</telnet>
			<log-match>-c -i "Flash level:" -i "debug"</log-match>
		</step>

		<step no="2">
			<desc>configure ap1</desc>
			<telnet target="ap1">
				-v "ssid ${conn1.ssid}"
				-v "interface wifi0 ssid ${conn1.ssid}"
			</telnet>
		</step>

		<step no="2.1">
			<desc>open log debug</desc>
			<telnet target="ap1">
				-v "_kdebug fe basic"
				-v "_kdebug fe detail"
				-v "_kdebug auth all"
				-v "_kdebug wifi all"
				-v "_kdebug qos all"
				-v "clear log all"
			</telnet>
		</step>

		<step no="2.2">
			<desc>
				remove err_messages.0
			</desc>
			<console target="ap1" prompt="AH.*#|$" slow="true">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v ""
				-v ""
				-v "rm -f ${path_messages}/err_messages.0"
				-v "exit"
			</console>
		</step>

		<include prefix="2.3" file="subs/sta_wifi_connect_${tb.os}.xml" rargs="conn1, sta1, ap1" />

		<step no="2.4">
			<desc>close log debug</desc>
			<telnet target="ap1">
				-v "no _kdebug fe basic"
				-v "no _kdebug fe detail"
				-v "no _kdebug auth all"
				-v "no _kdebug wifi all"
				-v "no _kdebug qos all"
			</telnet>
		</step>

		<step no="3">
			<desc>
				ls the ${path_messages} and check messages
			</desc>
			<log-file>step3_ls_path_messages.log</log-file>
			<console target="ap1" prompt="AH.*#|$" slow="true">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v ""
				-v ""
				-v "ls ${path_messages}"
				-v "exit"
			</console>
			<log-match>-c -i "err_messages" -i "err_messages.0"</log-match>
		</step>

		<step no="3.1">
			<desc>
				remove the err_messages
			</desc>
			<console target="ap1" prompt="AH.*#|$" slow="true">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v ""
				-v ""
				-v "rm -f ${path_messages}/err_messages"
				-v "exit"
			</console>
		</step>

		<step no="3.2">
			<desc>
				create new messages file
			</desc>
			<console target="ap1" prompt="AH.*#|$" slow="true">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v ""
				-v ""
				-v "touch ${path_messages}/err_messages"
				-v "exit"
			</console>
		</step>

		<step no="4">
			<desc>
				Let the log message run in device
			</desc>
			<telnet target="ap1">
				-v "_test log-case emergency"
				-v "_test log-case alert"
				-v "_test log-case critical"
				-v "_test log-case error"
				-v "_test log-case warning"
				-v "_test log-case notification"
				-v "_test log-case info"
				-v "_test log-case debug"
			</telnet>
		</step>

		<step no="5">
			<desc>
				check log messages in err_messages
			</desc>
			<log-file>step5_show_new_log_messages.log</log-file>
			<console target="ap1" prompt="AH.*#|$" slow="true" timeout="400">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v ""
				-v ""
				-v "cat ${path_messages}/err_messages"
				-v "exit"
			</console>
			<log-match>-i "log case test: emergency"</log-match>
			<log-match>-i "log case test: alert"</log-match>
			<log-match>-i "log case test: critical"</log-match>
			<log-match>-i "log case test: error"</log-match>
			<log-match>-i "log case test: warning"</log-match>
			<log-match>-i "log case test: notification"</log-match>
			<log-match>-i "log case test: info"</log-match>
			<log-match>-i "log case test: debug"</log-match>
		</step>

		<step no="6">
			<desc>
				in mpc file of tftpboot if err_messages.0 exist remove err_messages.0
			</desc>
			<script>
				rm -f ${tftpboot}/err_messages.0
			</script>
		</step>

		<step no="6.1">
			<desc>
				check log messages in err_messages.0
			</desc>
			<console target="ap1" prompt="AH.*#|$" slow="true" timeout="400">
				-b -sp "${ap1.shellpwd}"
				-v "_shell"
				-v ""
				-v ""
				-v "cd ${path_messages}"
				-v "tftp ${mpc.tif.ip} -c put err_messages.0"
				-v "exit"
			</console>
		</step>

		<step no="6.2">
			<desc>
				mv log messages in err_messages.0
			</desc>
			<log-file>step6.2_show_log_err_messages.0.log</log-file>
			<script timeout="600">
				mv -f ${tftpboot}/err_messages.0 ${log.dir}/${log.file}
			</script>
		</step>

		<step no="6.3">
			<desc>
				mv log messages in err_messages.0
			</desc>
			<log-file>step6.2_show_log_err_messages.0.log</log-file>
			<log-match>-n -i "log case test: emergency"</log-match>
			<log-match>-n -i "log case test: alert"</log-match>
			<log-match>-n -i "log case test: critical"</log-match>
			<log-match>-n -i "log case test: error"</log-match>
			<log-match>-n -i "log case test: warning"</log-match>
			<log-match>-n -i "log case test: notification"</log-match>
			<log-match>-n -i "log case test: info"</log-match>
			<log-match>-n -i "log case test: debug"</log-match>
		</step>
	</stage>
</testcase>