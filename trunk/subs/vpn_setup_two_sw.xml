<include obj-arg-names="__CVG1__, __CVG2__, __BR__">
	<step no="CVG1.cvg.tunnel.name.gen">
		<setvar name="__CVG1__.tunnel.name" scope="global">
			echo "${job.sid}-s01"
		</setvar>
	</step>
	<step no="CVG2.cvg.tunnel.name.gen">
		<setvar name="__CVG2__.tunnel.name" scope="global">
			echo "${job.sid}-s02"
		</setvar>
	</step>
	<step no="BR.tunnel.name.gen">
		<setvar name="__BR__.tunnel.name" scope="global">
			echo "${job.sid}-c01"
		</setvar>
	</step>
	<step no="BR.tunnel2.name.gen">
		<setvar name="__BR__.tunnel2.name" scope="global">
			echo "${job.sid}-c02"
		</setvar>
	</step>

	<step no="1.cvg1">
		<desc>config CVG1 ${__CVG1__.cvg.vmname} act as l3 VPN server</desc>
		<telnet target="${__CVG1__.cvg.cons_ip}" port="${__CVG1__.cvg.cons_port}" timeout="20">
			-v "save vpn ee-cert tftp://${pub.tftp1.tip}:certs/cert_vpn/server_cert.pem"
			-v "save vpn private-key tftp://${pub.tftp1.tip}:certs/cert_vpn/server_key.pem"
			-v "vpn xauth-client-list list_01 local"
			-v "vpn xauth-client-list list_01 client-name ${__BR__.br.name} password aerohive"
			-v "vpn server-ipsec-tunnel ${__CVG1__.tunnel.name} vpn-mode layer-3"
			-v "vpn ipsec-tunnel ${__CVG1__.tunnel.name} client-list list_01"
			-v "vpn tunnel-policy vpn_policy_01 server ipsec-tunnel ${__CVG1__.tunnel.name}"
			-v "routing internal-sub-network ${__BR__.br.mgt0.ip}/${br.mgt0.supermask}"
			-v ""
			-v ""
			-v ""
		</telnet>
	</step>

	<step no="1.cvg1.routing">
		<desc>enable ospf on cvg1 eth1 if it has two arms</desc>
		<if>"two" == "${__CVG1__.cvg.arm_type}"</if>
		<telnet target="${__CVG1__.cvg.cons_ip}" port="${__CVG1__.cvg.cons_port}" timeout="5">
			-v "routing protocol ospf advertise eth1"
			-v "routing protocol ospf router-id ${__CVG1__.cvg.lan.ip}"
			-v "routing protocol type ospf"
			-v "routing protocol enable"
		</telnet>
	</step>

	<step no="1.cvg1.routing">
		<desc>enable ospf on cvg1 eth0 if it has one arms</desc>
		<if>"one" == "${__CVG1__.cvg.arm_type}"</if>
		<telnet target="${__CVG1__.cvg.cons_ip}" port="${__CVG1__.cvg.cons_port}" timeout="5">
			-v "routing protocol ospf advertise eth0"
			-v "routing protocol ospf router-id ${__CVG1__.cvg.wan.ip}"
			-v "routing protocol type ospf"
			-v "routing protocol enable"
		</telnet>
	</step>

	<step no="1.cvg2">
		<desc>config CVG2 ${__CVG2__.cvg.vmname} act as l3 VPN server</desc>
		<telnet target="${__CVG2__.cvg.cons_ip}" port="${__CVG2__.cvg.cons_port}" timeout="20">
			-v "save vpn ee-cert tftp://${pub.tftp1.tip}:certs/cert_vpn/server_cert.pem"
			-v "save vpn private-key tftp://${pub.tftp1.tip}:certs/cert_vpn/server_key.pem"
			-v "vpn xauth-client-list list_02 local"
			-v "vpn xauth-client-list list_02 client-name ${__BR__.br.name} password aerohive"
			-v "vpn server-ipsec-tunnel ${__CVG2__.tunnel.name} vpn-mode layer-3"
			-v "vpn ipsec-tunnel ${__CVG2__.tunnel.name} client-list list_02"
			-v "vpn tunnel-policy vpn_policy_02 server ipsec-tunnel ${__CVG2__.tunnel.name}"
			-v "routing internal-sub-network ${__BR__.br.mgt0.ip}/${br.mgt0.supermask}"
			-v ""
			-v ""
		</telnet>
	</step>

	<step no="1.cvg2.routing">
		<desc>enable ospf on cvg2 eth1 if it has two arms</desc>
		<if>"two" == "${__CVG2__.cvg.arm_type}"</if>
		<telnet target="${__CVG2__.cvg.cons_ip}" port="${__CVG2__.cvg.cons_port}" timeout="5">
			-v "routing protocol ospf advertise eth1"
			-v "routing protocol ospf router-id ${__CVG2__.cvg.lan.ip}"
			-v "routing protocol type ospf"
			-v "routing protocol enable"
		</telnet>
	</step>

	<step no="1.cvg2.routing">
		<desc>enable ospf on cvg2 eth0 if it has one arms</desc>
		<if>"one" == "${__CVG2__.cvg.arm_type}"</if>
		<telnet target="${__CVG2__.cvg.cons_ip}" port="${__CVG2__.cvg.cons_port}" timeout="5">
			-v "routing protocol ospf advertise eth0"
			-v "routing protocol ospf router-id ${__CVG2__.cvg.wan.ip}"
			-v "routing protocol type ospf"
			-v "routing protocol enable"
		</telnet>
	</step>

	<step no="1.br">
		<desc>config BR as l3 VPN client connet to cvg1 and cvg2</desc>
		<telnet target="${__BR__.br.wan.ip}">
			-v "save vpn ca-cert tftp://${pub.tftp1.tip}:certs/cert_vpn/cacert.pem"
			-v "vpn client-ipsec-tunnel ${__BR__.tunnel.name} vpn-mode layer-3"
			-v "vpn ipsec-tunnel ${__BR__.tunnel.name} gateway ${__CVG1__.cvg.tunnel.ip} client-name ${__BR__.br.name} password aerohive"
			-v "vpn tunnel-policy vpn_policy_01 client ipsec-tunnel ${__BR__.tunnel.name} primary"
			-v ""
			-v ""
			-v "vpn client-ipsec-tunnel ${__BR__.tunnel2.name} vpn-mode layer-3"
			-v "vpn ipsec-tunnel ${__BR__.tunnel2.name} gateway ${__CVG2__.cvg.tunnel.ip} client-name ${__BR__.br.name} password aerohive"
			-v "vpn tunnel-policy vpn_policy_01 client ipsec-tunnel ${__BR__.tunnel2.name}"
			-v ""
			-v "routing route-request enable"
			-v ""
			-v "routing internal-sub-network ${__BR__.br.mgt0.ip}/${br.lan.netmask}"
			-v ""
			-v ""
			-v ""
		</telnet>
	</step>

	<step no="2.chk_ike_br" delay="10" type="loop-check" loop-max-times="5" loop-interval="12">
		<desc>
			check vpn ike sa on BR side
			destination to CVG public address
		</desc>
		<log-file>chk_ike_sa_br${loop_check.idx}.log</log-file>
		<telnet target="${__BR__.br.wan.ip}">
			-v "show clock"
			-v "show vpn ike sa"
		</telnet>
		<log-match>-p 3 -i "9" -p 4 -i "I" -i "${__CVG1__.cvg.tunnel.ip}\[4500\]"</log-match>
		<log-match>-p 3 -i "9" -p 4 -i "I" -i "${__CVG2__.cvg.tunnel.ip}\[4500\]"</log-match>
	</step>

	<step no="2.chk_ike_cvg1" delay="10" type="loop-check" loop-max-times="5" loop-interval="10">
		<desc>
			check vpn ike sa on CVG1 side
			destionation to BR public address
		</desc>
		<log-file>chk_ike_sa_cvg1.log</log-file>
		<telnet target="${__CVG1__.cvg.cons_ip}" port="${__CVG1__.cvg.cons_port}" timeout="4">
			-v "show clock"
			-v "show vpn ike sa"
		</telnet>
		<log-match>-re -i "${__BR__.br.nat.ip}\[\d+\] *\w+:\w+ *9 *R"</log-match>
	</step>

	<step no="2.chk_ike_cvg2" delay="10" type="loop-check" loop-max-times="5" loop-interval="10">
		<desc>
			check vpn ike sa on CVG2 side
			destionation to BR public address
		</desc>
		<log-file>chk_ike_sa_cvg2.log</log-file>
		<telnet target="${__CVG2__.cvg.cons_ip}" port="${__CVG2__.cvg.cons_port}" timeout="4">
			-v "show clock"
			-v "show vpn ike sa"
		</telnet>
		<log-match>-re -i "${__BR__.br.nat.ip}\[\d+\] *\w+:\w+ *9 *R"</log-match>
	</step>

	<step no="2.chk.l3.br">
		<desc>
			check gre tunnel on br side
			remote to CVG wan address, local mgt0 address ,gateway CVG public address
		</desc>
		<log-file>chk_gre_tunnel_br.log</log-file>
		<telnet target="${__BR__.br.wan.ip}">
			-v "show vpn layer-3-tunnel"
		</telnet>
		<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*${__CVG1__.cvg.wan.ip}[\t ]*${__BR__.br.mgt0.ip}[\t ]*\d+[\t ]*${__CVG1__.cvg.tunnel.ip}" -f ${log.dir}/${log.file}</log-match>
		<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*${__CVG2__.cvg.wan.ip}[\t ]*${__BR__.br.mgt0.ip}[\t ]*\d+[\t ]*${__CVG2__.cvg.tunnel.ip}" -f ${log.dir}/${log.file}</log-match>
	</step>

	<step no="2.get_tunnelid_br_id1">
		<desc>get br primary tunnel id</desc>
		<setvar name="__BR__.tunnel.id">
			${bin.dir}/getbyrexp.py -p "(tunnel\d+)[\t ]*gre/ipsec[\t ]*${__CVG1__.cvg.wan.ip}[\t ]*${__BR__.br.mgt0.ip}[\t ]*\d+[\t ]*${__CVG1__.cvg.tunnel.ip}" -f ${log.dir}/chk_gre_tunnel_br.log -t str
		</setvar>
	</step>
	<step no="2.get_tunnelid_br_id2">
		<desc>get br second tunnel id</desc>
		<setvar name="__BR__.tunnel.id2">
			${bin.dir}/getbyrexp.py -p "(tunnel\d+)[\t ]*gre/ipsec[\t ]*${__CVG2__.cvg.wan.ip}[\t ]*${__BR__.br.mgt0.ip}[\t ]*\d+[\t ]*${__CVG2__.cvg.tunnel.ip}" -f ${log.dir}/chk_gre_tunnel_br.log -t str
		</setvar>
	</step>

	<step no="2.chk.l3_cvg1">
		<desc>
			check gre tunnel on cvg side
			local to CVG wan address
		</desc>
		<log-file>chk_gre_tunnel_cvg1.log</log-file>
		<telnet target="${__CVG1__.cvg.cons_ip}" port="${__CVG1__.cvg.cons_port}" timeout="4">
			-v "show vpn layer-3-tunnel"
		</telnet>
		<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*any[\t ]*${__CVG1__.cvg.wan.ip}[\t ]*\d+[\t ]*anonymous" -f ${log.dir}/${log.file}</log-match>
	</step>

	<step no="2.get_tunnelid_cvg1">
		<desc>get CVG1 tunnel ID</desc>
		<setvar name="__CVG1__.tunnel.id">
			${bin.dir}/getbyrexp.py -p "(tunnel\d+)[\t ]*gre/ipsec[\t ]*any[\t ]*${__CVG1__.cvg.wan.ip}[\t ]*\d+[\t ]*anonymous" -f ${log.dir}/chk_gre_tunnel_cvg1.log -t str
		</setvar>
	</step>

	<step no="2.chk_l3_cvg2">
		<desc>
			check gre tunnel on cvg side
			local to CVG wan address
		</desc>
		<log-file>chk_gre_tunnel_cvg2.log</log-file>
		<telnet target="${__CVG2__.cvg.cons_ip}" port="${__CVG2__.cvg.cons_port}" timeout="4">
			-v "show vpn layer-3-tunnel"
		</telnet>
		<log-match bin="${bin.dir}/searchbyrexp.py">-p "tunnel\d+[\t ]*gre/ipsec[\t ]*any[\t ]*${__CVG2__.cvg.wan.ip}[\t ]*\d+[\t ]*anonymous" -f ${log.dir}/${log.file}</log-match>
	</step>

	<step no="2.get_tunnelid_cvg2">
		<desc>get CVG2 tunnel ID</desc>
		<setvar name="__CVG2__.tunnel.id">
			${bin.dir}/getbyrexp.py -p "(tunnel\d+)[\t ]*gre/ipsec[\t ]*any[\t ]*${__CVG2__.cvg.wan.ip}[\t ]*\d+[\t ]*anonymous" -f ${log.dir}/chk_gre_tunnel_cvg2.log -t str
		</setvar>
	</step>

</include>