<include obj-arg-names="__SW__">
	<!-- __SW__ image upgrade proc -->

	<!-- 1. step 1, get image version -->
	<step no="1.1.1">
		<desc>On MPC,get the version of the image and save to imageversion.txt </desc>
		<log-file>image_ver.txt</log-file>
		<script>
			ident /tftpboot/${img.name} > ${log.dir}/${log.file}
		</script>
	</step>
	<step no="1.1.2">
		<desc>get version of sw</desc>
		<log-file>show_ver_detail___SW__.log</log-file>
		<console target="__SW__" slow="3">
			-v "show version detail"
		</console>
	</step>
	<step no="1.1.3">
		<desc>check version is new</desc>
		<setvar name="__SW__.verIsNew">
			${bin.dir}/aerohive/checkif_apBackupver_isnew.sh -v ${log.dir}/show_ver_detail___SW__.log -i ${log.dir}/image_ver.txt
		</setvar>
	</step>
	<step no="1.1.4">
		<desc>echo __SW__.verIsNew </desc>
		<script>
			echo __SW__.verIsNew="${__SW__.verIsNew}"
		</script>
	</step>


	<!-- do not do upgrade proc when __SW__.verIsNew is yes -->
	<step no="2.1.1">
		<if>"${__SW__.verIsNew}" == "yes"</if>
		<desc>do not do upgrade proc when __SW__.verIsNew is yes,just do reboot backup </desc>
		<script>
			echo "do not do upgrade proc when __SW__.verIsNew on DUT side backup part is yes,just do reboot backup"
		</script>
	</step>
	<step no="2.1.2">
		<if>"${__SW__.verIsNew}" == "yes"</if>
		<console target="__SW__" timeout="180" slow="1">
			-v ""
			-v "reboot backup"
		</console>
		<no-error-check />
	</step>
	<step no="2.1.3" delay="30">
		<if>"${__SW__.verIsNew}" == "yes"</if>
		<desc>Get __SW__ version through console</desc>
		<log-file>__SW___image_version_${__SW__.cons_name}.log</log-file>
		<console target="__SW__" slow="3">
			-v "show version"
			-v "show license"
		</console>
	</step>

	<!-- do upgrade proc when __SW__.verIsNew is no -->
	<step no="3.1.1">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>get dut version if __SW__.verIsNew is no </desc>
		<log-file>show_ver_detail.log</log-file>
		<console target="__SW__" slow="3">
			-v "show version detail"
		</console>
	</step>
	<step no="3.1.2">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>configure mgt0 port on sr2000</desc>
		<console target="__SW__" slow="3">
			-v "vlan ${__SW__.mgt0.vlan}"
			-v "interface ${__SW__.mgt0.port} switchport access vlan ${__SW__.mgt0.vlan}"
			-v "interface mgt0 vlan ${__SW__.mgt0.vlan}"
			-v "interface manage Telnet"
			-v "console timeout 0"
			-v "console page 0"
		</console>
	</step>
	<step no="3.1.3">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>show mgt0 on sr2000</desc>
		<log-file>show_mgt0.log</log-file>
		<console target="__SW__" slow="3">
			-v "show interface mgt0"
		</console>
	</step>
	<!--__SW__ set to ap1 need framework to support __SW__ later 2013/4/19 -->
	<!-- <step no="5.1.4"> <desc>get ip of mgt0 to ap1.mgt0.ip</desc> <setvar name="ap1.mgt0.ip"> ${bin.dir}/getbyrexp.py -p "IP addr=(\d+\.\d+\.\d+\.\d+);" -f ${log.dir}/show_mgt0.log -t str </setvar> </step> -->
	<step no="3.1.4">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>get ip of mgt0 to __SW__.mgt0.ip</desc>
		<setvar name="__SW__.mgt0.ip">
			${bin.dir}/getbyrexp.py -p "IP addr=(\d+\.\d+\.\d+\.\d+);" -f ${log.dir}/show_mgt0.log -t str
		</setvar>
	</step>

	<!--__SW__ set to ap1 need framework to support __SW__ later 2013/4/19 -->
	<!-- <step no="5.1.5" delay="5"> <desc>check ping from mpc to mgt0</desc> <log-file>check_ping_from_mpc_to_mgt0.log</log-file> <script> ping ${ap1.mgt0.ip} -c 4 > ${log.dir}/${log.file} </script> <log-match>-c -i "from ${ap1.mgt0.ip}: " -i "ttl=" -f ${log.dir}/${log.file}</log-match> </step> -->

	<step no="3.1.5" delay="3">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>check ping from mpc to mgt0</desc>
		<log-file>check_ping_from_mpc_to_mgt0.log</log-file>
		<script>
			ping ${__SW__.mgt0.ip} -c 4 > ${log.dir}/${log.file}
		</script>
		<log-match>-c -i "from ${__SW__.mgt0.ip}: " -i "ttl=" -f ${log.dir}/${log.file}</log-match>
	</step>

	<!--__SW__ rsapublickey.pem need shellpwd to do this successfully -->
	<step no="4.1.1.remove_sw_rsakey_show_hw">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<log-file>remove_show_hw.log</log-file>
		<console target="__SW__" slow="3">
			-v "show run"
			-v "show hw"
		</console>
	</step>
	<step no="4.1.2.gen_sw_sn">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>generate __SW__.sn var</desc>
		<multi-setvar>
			echo "__SW__.sn=`cat ${log.dir}/remove_show_hw.log | grep "Serial" |awk '{print $3}'|sed '2,$d'`"
		</multi-setvar>
	</step>
	<step no="4.1.3.gen_sw_shellpwd">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>generate __SW__.shellpwd var</desc>
		<multi-setvar>
			echo "__SW__.shellpwd=`grep -w ${__SW__.sn} ${auto.root.dir}/subs/conf/sw_shell_pw.txt|awk '{print $2}'`"
		</multi-setvar>
	</step>
	<step no="4.1.4.echo_var">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>echo_var</desc>
		<script>
			echo "__SW__.sn is ${__SW__.sn} "
			echo "__SW__.shellpwd is ${__SW__.shellpwd}"
			cat ${auto.root.dir}/subs/conf/sw_shell_pw.txt
		</script>
	</step>
	
	<step no="4.1.5.remove_sw_rsakey">
		<if>"${__SW__.verIsNew}" != "yes" &amp;&amp; "${__SW__.shellpwd}" != ""</if>
		<log-file>remove_rsa_${include.prefix}.log</log-file>
		<console target="__SW__" prompt="AH.*#|$" slow="true">
			-b -sp "${__SW__.shellpwd}"
			-v "_shell"
			-v ""
			-v "rm -f /etc/rsapublickey.pem"
			-v ""
			-v "exit"
		</console>
		<log-match>-i "BusyBox"</log-match>
		<no-error-check />
	</step>
	
	<step no="4.1.6.remove_sw_rsakey">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<log-file>remove_sw_rsakey.log</log-file>
		<console target="__SW__" prompt="AH.*#|password:|$" slow="3">
			-v ""
			-v "show system command \"rm -f /etc/rsapublickey.pem\""
			-v ""
			-v "exit"
		</console>
		<log-match>-n -c -i "Error"</log-match>
		<no-error-check />
	</step>

	<step no="5.1.1">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>Upgrade AP1 with new image through console</desc>
		<log-file>image_${__SW__.cons_name}.log</log-file>
		<console target="__SW__" timeout="480">
			-v "save image tftp://${mpc.tif.ip}:${img.name} now"
		</console>
		<log-match>-n -i "The kernel image currently in flash is the same as the image you are attempting to load"</log-match>
		<log-match>-n -i "The application image currently in flash is the same as the image you are attempting to load"</log-match>
		<!-- <no-error-check /> -->
	</step>
	<step no="5.1.2" delay="140">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>Get AP1 version through console</desc>
		<log-file>image_version_${__SW__.cons_name}.log</log-file>
		<console target="__SW__" slow="3">
			-v "show version"
			-v "show license"
		</console>
	</step>
	<step no="5.1.3">
		<if>"${__SW__.verIsNew}" != "yes"</if>
		<desc>Search for ERROR message on AP1</desc>
		<log-match file="image_${__SW__.cons_name}.log">-n -e "ERROR"</log-match>
	</step>

</include>